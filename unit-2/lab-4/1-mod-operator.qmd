---
title: "Page 1: The `Mod` Operator"
subtitle: "Unit 2, Lab 4, Page 1"
order: 1
---

::: learn
**On this page,** you create a predicate to check
whether one number is divisible by another.
:::

::: forYouToDo
<ol>

<li>

::: {.newProject .inline}
["U2L4-MathLibrary"]{.text}<img src="/img/icons/new-project-called.png" title="Start a New Project called U2L4-MathLibrary" alt="Start a New Project called U2L4-MathLibrary"/>
:::

</li>

<li>

Experiment with the
<img src="/img/blocks/mod.png" title="() mod ()" alt="() mod ()" class="inline"/>
block.

<ol style="list-style-type:lower-roman;">

<li>**Try various inputs**.</li>

<li>**Keep the second number constant**, and try various
inputs for the first number.</li>

<li>**Form a hypothesis.** What do you notice?</li>

</ol>

</li>

</ol>
:::

::: takeNote
The `mod` block **reports the remainder** when
the first input is divided by the second. For example,
<img src="/img/1-introduction/17-mod-5.png" title="(17) mod (5)" alt="(17) mod (5)"/>
reports 2 because when 17 is divided by 5, the remainder is 2. When one
number divides another evenly, the remainder is 0. So for example,
<img src="/img/1-introduction/15-mod-5.png" title="(15) mod (5)" alt="(15) mod (5)"/>
reports 0.
:::

::: examFullWidth
::: pseudop
::: sidenote
Different programming languages have different ways of handling negative
inputs to the mod function. So you won't see any negative numbers used
with mod on the exam.
:::

**The `mod` operator:** The expression
<img src="/img/1-introduction/17-mod-5.png" title="(17) mod (5)" alt="(17) mod (5)" class="inline py-0"/>
would be written as <pre class="inline">17 MOD 5</pre>

on the exam. If you see an expression with variables as input to
`mod`, such as <pre class="inline">a MOD b</pre>, you can assume that <var>a</var> is zero or positive, and <var>b</var>
is strictly positive (because you can't divide by 0).
:::

::: pseudop

On the exam, you may see these four arithmetic operators:

<pre class="inline">+</pre>, <pre class="inline">-</pre>, <pre class="inline">*</pre>, <pre class="inline">/</pre> (plus, minus, times, divide) as well as <pre class="inline">MOD</pre>. 

Arithmetic operators are part of most programming languages. (Most text languages use <pre class="inline">*</pre> rather than <pre class="inline">&times;</pre> for multiplication because <pre class="inline">&times</pre> isn't on most keyboards, and because it looks too much like the letter x.)

:::

::: pseudop
**Order of operations:** In a block language, the nesting
of blocks determines the order of operations. For example, in
<img src="/img/6-computers/3-times(5+4).png" title="3 × (5 + 4)" alt="3 × (5 + 4)" class="inline py-0"/>
you can <em>see</em> that the `+` block is an input to the
`×` block, so the expression means 3×(5+4). Similarly,
<img src="/img/6-computers/(3-times-5)+4.png" title="(3 × 5) + 4" alt="(3 × 5) + 4" class="inline py-0"/>
means (3×5)+4. In Snap<em>!</em>, it's as if there are parentheses
around <em>every</em> operation. But in text languages, you can write

```{=html}
<pre class="inline">3 * 4 + 5</pre>
```
without parentheses, so they need the rules you learn in math class
(multiplication before addition, and so on). The `mod`
operator is like multiplication and division; it happens <em>before</em>
addition and subtraction. So for example,

```{=html}
<pre class="inline">7 + 5 MOD 2 - 6</pre>
```
means

```{=html}
<pre class="inline">7 + 1 - 6</pre>
```
, which is, of course, 2.
:::
:::

::: forYouToDo
<ol start="3">

::: sidenote
In a later lab, you can use your `even?` block to draw a
<a href="/unit-3/lab-1/4-brick-wall.html" title="Brick Wall">brick
wall</a> because the even and odd numbered rows are different. <br />
<img src="/img/abstraction/new-brickwall/wall.png" title="Sample image of brick wall" alt="Sample image of brick wall" class="inline"/>
:::

<li>Use `mod` to build a
<img src="/img/2-complexity/divisible-by.png" title="is () divisible by () ?" alt="is () divisible by () ?" class="py-0"/>
predicate that tests for divisibility.<br />
<img src="/img/2-complexity/15-divisible-by-3-reporting-true.png" title="is (15) divisible by (3) ? reporting true" alt="is (15) divisible by (3) ? reporting true" class="ms-4"/>
<img src="/img/2-complexity/15-divisible-by-6-reporting-false.png" title="is (15) divisible by (6) ? reporting false" alt="is (15) divisible by (6) ? reporting false" class="ms-4"/></li>

<li>Use this `divisible by?` predicate to build a predicate
that tests whether its input is even (divisible by 2).<br />
<img src="/img/2-complexity/even--22-reporting-true.png" title="even? (-22) reporting true" alt="even? (-22) reporting true" class="ms-4"/>
<img src="/img/2-complexity/even-7-reporting-false.png" title="even? (7) reporting false" alt="even? (7) reporting false" class="ms-4"/></li>

<li><img src="/img/icons/save-now.png" title="Save your work" alt="Save your work" class="inline"/></li>

</ol>
:::

::: atworkFullWidth
<img src="/img/atwork/Katherine_Johnson.jpg" title="photo of Katherine Johnson" alt="photo of Katherine Johnson" class="noshadow float-end" height="200px"/>

Katherine Johnson (1918--2020) was an aerospace technologist with a
Ph.D. in mathematics who worked for NASA calculating the motion of
spacecraft. Johnson, originally hired as a human computer, verified the
calculations of digital computers, helped calculate the trajectory of
Apollo 11 (the first time humans walked on the Moon), worked on plans
for a mission to Mars, and encouraged students to pursue careers in
science, technology, engineering, and mathematics.

<a href="https://www.youtube.com/watch?v=nKxgieXQ82w" title="NASA's memorial video: 'Katherine Johnson: An American Hero'" target="_blank">NASA's
memorial video: "Katherine Johnson: An American Hero"</a>
:::

::: examFullWidth
::: ap-standard
AAP-2.H.2
:::

::: sidenote
::: pseudop
The procedures

```{=html}
<pre class="inline">move()</pre>
```
and

```{=html}
<pre class="inline">turn_clockwise()</pre>
```
aren't built in to the AP's language so they are written in lower case
like other programmer-defined procedures.
:::
:::

::: pseudop
The conditional expression <img class="inline" src="/img/2-complexity/if-example-preview-fractal-art.png" alt="if (size > 15) {repeat (4) {move (size) steps, turn clockwise (90) degrees}}" title="if (size > 15) {repeat (4) {move (size) steps, turn clockwise (90) degrees}}"> would be written as

::: pre-container
```{=html}
<pre class="inline">
IF(size &gt; 15)
{
REPEAT 4 TIMES
{
move(size)
turn_clockwise(90)
}
}</pre>
```
:::

or
<img src="/img/2-complexity/if-blocktran.png" title="IF(size &gt; 15)
{
REPEAT 4 TIMES
{
move(size)
turn clockwise(90)
}
}" alt="IF(size &gt; 15)
{
REPEAT 4 TIMES
{
move(size)
turn clockwise(90)
}
}" class="inline"/>
:::

As in Snap<em>!</em>, if the condition
`(size) > 15` is `true`,
the code inside the `if` statement runs; if the condition is
`false`, the code does not run.
:::

::: forYouToDo
<ol start="6">

<!--
<li>
 Question 5
::: {.assessment-data type="multiplechoice" identifier="What's the missing condition for an ODD? predicate?" hasinlinefeedback="true" maxchoices="1" responseidentifier="ri2" shuffle="false"}
::: prompt
::: ap-standard
AAP-2.L.2
:::

Algorithms that look the same may have different results. The following
incomplete code fragment was designed to test if

```{=html}
<pre class="inline">number</pre>
```
is odd:<br />

```{=html}
<pre>IF (MISSING CONDITION)
{
DISPLAY "It is odd."
}</pre>
```
<br /> Which of the following can be used in place of the MISSING
CONDITION?
:::

::: {.choice identifier="c1"}
::: text
```{=html}
<pre class="inline">number MOD 1 = 0</pre>
```

:::

::: feedback
```         
<pre class="inline">MOD</pre> returns the remainder when the first input is divided by the second. Whether a number is odd or even depends on divisibility by 2.
```
:::
:::

::: {.choice identifier="c2"}
::: text
```{=html}
<pre class="inline">number MOD 1 = 1</pre>
```

:::

::: feedback
```         
<pre class="inline">MOD</pre> returns the remainder when the first input is divided by the second. Whether a number is odd or even depends on divisibility by 2.
```
:::
:::

::: {.choice identifier="c3"}
::: text
```{=html}
<pre class="inline">number MOD 2 = 0</pre>
```

:::

::: feedback
```         
<pre class="inline">number MOD 2</pre> returns the remainder when <pre class="inline">number</pre> is divided by 2. If that remainder is zero, is the number odd or even?
```
:::
:::

::: {.choice identifier="c4"}
::: text
```{=html}
<pre class="inline">number MOD 2 = 1</pre>
```

:::

::: feedback
```         
Correct! <pre class="inline">number MOD 2</pre> returns the remainder when <pre class="inline">number</pre> is divided by 2.  If <pre class="inline">number MOD 2</pre> is 1, then the number is odd.
```
:::
:::

::: {.responseDeclaration identifier="ri2"}
::: {.correctResponse identifier="c4"}
:::
:::
:::

</li>

<li>

Question 7

::: {.assessment-data type="multiplechoice" identifier="What's the value of 11 MOD (2 + 3)?" hasinlinefeedback="true" maxchoices="1" responseidentifier="ri3" shuffle="true"}
::: prompt
What's the value of
<img src="/img/2-complexity/11mod2+3.png" title="11 mod (2 + 3)" alt="11 mod (2 + 3)" class="inline"/>?
:::

::: {.choice identifier="c1"}
::: text
1
:::

::: feedback
```         
Correct!
```
:::
:::

::: {.choice identifier="c2"}
::: text
0.2
:::

::: feedback
```         
Remainders are always whole numbers.
```
:::
:::

::: {.choice identifier="c3"}
::: text
2
:::

::: feedback
```         
`Mod` gives you the remainder, not the quotient.
```
:::
:::

::: {.choice identifier="c4"}
::: text
2.2
:::

::: feedback
```         
It's true that division and mod have some similarities, but mod gives you just the remainder.
```
:::
:::

::: {.responseDeclaration identifier="ri3"}
::: {.correctResponse identifier="c1"}
:::
:::
:::

</li>

-->

<li><img src="/img/icons/talk-with-your-partner.png" title="Talk with Your Partner" alt="Talk with Your Partner" class="inline"/>
Is it true that `(12 MOD 2) > (11 MOD 2)`? Explain your reasoning.</li>

</ol>
:::

::: ifTime
<ol start="7">

<li>Build a predicate that tests whether its input is an integer. You
may find
<img src="/img/blocks/round-a-number.png" title="round ()" alt="round ()"/>
useful.<br />
<img src="/img/2-complexity/integer-4(with-result-true).png" title="integer? (4) reporting true" alt="integer? (4) reporting true" class="ms-4"/>
<img src="/img/2-complexity/integer-4-point-1(with-result-false).png" title="integer? (4.1) reporting false" alt="integer? (4.1) reporting false" class="ms-4"/></li>

</ol>
:::

<!--<div class="endnote">You can <a href="/unit-2/lab-1/3-importing-exporting.html">import</a> your `integer?`, `between?`, and `even?` predicates into other projects when you need them.</div>-->

<div class="takeItFurther">



Open your **U2L3-Dots** project, and save it again as
**U2L4-DotsTIF**. Remind yourself about how the pictures
are determined by the Boolean expression used.

<ol type="A">

<li>

Invent Boolean expressions for these pictures:<br />

<ol class="horizontal">

<li><img src="/img/2-complexity/x-div-100-mod-10.png" title=" The stage is almost entirely orange, except for five thin vertical purple stripes evenly spaced." alt=" The stage is almost entirely orange, except for five thin vertical purple stripes evenly spaced."/></li>

<li><img src="/img/2-complexity/div-100-mod-2-x=y.png" title="A checkerboard pattern or purple and orange. Around the x axis are five squares, with purple at the left and right edges and at the center. Around the y axis, there are three full squares and two partial squares at the edges; the partial squares and the center square are purple, and the remaining two squares are orange. The two colors alternate over the entire area like a checkerboard." alt="A checkerboard pattern or purple and orange. Around the x axis are five squares, with purple at the left and right edges and at the center. Around the y axis, there are three full squares and two partial squares at the edges; the partial squares and the center square are purple, and the remaining two squares are orange. The two colors alternate over the entire area like a checkerboard."/></li>

<li><img src="/img/2-complexity/div-100-mod-3-x=y.png" title="A checkerboard like ii, except that in each row the squares alternate two orange, one purple. So the top (partial) row is orange, purple, orange, orange, purple. The second row is purple, orange, orange, purple, orange. The middle row is orange, orange, purple, orange, orange. The fourth row is orange, purple, orange, orange, purple. And the bottom partial row is purple, orange, orange, purple, orange." alt="A checkerboard like ii, except that in each row the squares alternate two orange, one purple. So the top (partial) row is orange, purple, orange, orange, purple. The second row is purple, orange, orange, purple, orange. The middle row is orange, orange, purple, orange, orange. The fourth row is orange, purple, orange, orange, purple. And the bottom partial row is purple, orange, orange, purple, orange."/></li>

<li><img src="/img/2-complexity/dir-div-20-mod-2.png" title="There&apos;s an apple at the center. Radiating out from the center are 18 wedges, alternating orange and purple in color." alt="There&apos;s an apple at the center. Radiating out from the center are 18 wedges, alternating orange and purple in color."/></li>

<li><img src="/img/2-complexity/dist-div-20-mod-2.png" title="There&apos;s an apple at the center. Behind the apple is a small orange circle. Then comes a small purple circular band around the orange circle. Then a small orange circular band, and so on working outward." alt="There&apos;s an apple at the center. Behind the apple is a small orange circle. Then comes a small purple circular band around the orange circle. Then a small orange circular band, and so on working outward."/></li>

<li><img src="/img/icons/tough-stuff-mini.png" title="Tough Stuff" alt="Tough Stuff" class="inline"/><img src="/img/2-complexity/dist-gt-dir.png" title="Imagine a line going straight down from an apple in the center of the stage. Also imagine a spiral that starts at the origin and spirals outward clockwise, through a little bit of the third quadrant, then the second quadrant, and finally hitting the right edge of the stage in the first quadrant. The area above and to the left of the line and spiral is purple; the area below and to the right is orange." alt="Imagine a line going straight down from an apple in the center of the stage. Also imagine a spiral that starts at the origin and spirals outward clockwise, through a little bit of the third quadrant, then the second quadrant, and finally hitting the right edge of the stage in the first quadrant. The area above and to the left of the line and spiral is purple; the area below and to the right is orange."/></li>

</ol>

::: {.endnote style="clear: both;"}
<a href="#hint-tif" data-bs-toggle="collapse" title="Click for a hint.">Click
for a hint.</a>

::: {#hint-tif .collapse}
Some of these include expressions of the form
<img src="/img/2-complexity/hint-script.png" title="((round (() / 20)) mod 2)" alt="((round (() / 20)) mod 2)"/>
with something like
<img src="/img/blocks/x-position.png" title="x position" alt="x position"/>
in the empty input slot, and maybe different numbers in place of 20 and
2.
:::
:::

</li>

</ol>


</div>


{{< checkpoint id='1FAIpQLSfe8-WgqOSanLzb0fa9kTRs5WoLsGHSDFmp_RTi4j2RBf6ZKw' >}}
