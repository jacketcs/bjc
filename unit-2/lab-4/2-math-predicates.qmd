---
title: "Page 2: Making a Mathematical Library"
subtitle: "Unit 2, Lab 4, Page 2"
order: 2
---

::: learn
**In this project**, you will create a <em>library</em> (a
collection) of math tools that builds on the blocks you created in
<a href="/unit-2/lab-3/2-combining-predicates.html" title="Lab 3 Page 2: Combining Predicates">Lab
3 Page 2: Combining Predicates</a>.
:::

::: ap-standard
AAP-2.M.3, AAP-3.D.3
:::

::: vocabBig


A **software library** is a collection of procedures
that can be used in programs.
:::

Using <em>libraries</em> simplifies the development of new programs.
When you use procedures that you already know work correctly, you reduce
the amount of time you need to spend coding, the number of possible bugs
your code can have, and how much of your project you need to test.

::: {#first .forYouToDo}
<ol>

<li>

Export the mathematical blocks from your U2L3-Predicates project.

::: narrower
<h4>**Exporting Blocks**</h4>

<ol type="a">

<li>**Open the Snap<em>!</em> project** from which you want
to export blocks. (In this case, your U2L3-Predicates project.)</li>

<li>**Choose "Export blocks..."** from the Snap<em>!</em>
file menu
(<img src="/img/1-introduction/file_button.png" title="File menu button" alt="File menu button" class="inline"/>).</li>

<li>

**Select only the block(s) you wish to export**. (In this
case, you want
<img src="/img/2-complexity/between.png" title="is () between () and ()?" alt="is () between () and ()?" class="inline py-0"/>,
<img src="/img/blocks/less-than-or-equal.png" title="less than or equal" alt="less than or equal" class="inline py-0"/>,
<img src="/img/blocks/greater-than-or-equal.png" title="greater than or equal" alt="greater than or equal" class="inline py-0"/>,
and
<img src="/img/2-complexity/not-equal.png" title="() not equal ()" alt="() not equal ()" class="inline py-0"/>.)

::: endnote
You can either <em>deselect</em> the blocks you don't need exported, or
you can right-click the background, choose "none," and then select only
the ones you want.
:::

</li>

::: sidenoteBig
Snap<em>!</em> libraries and Snap<em>!</em> projects are both exported
as XML files.
:::

<li>**Click "OK."** An XML file will download.</li>

</ol>
:::

</li>

<li>

Import these blocks into your U2L4-MathLibrary project, test them and
resolve any issues, and save.

::: narrower
<h4>**Importing Blocks**</h4>

<ol type="a">

<li>**Open the Snap<em>!</em> project** into which you want
to import blocks. (In this case, your U2L4-MathLibrary project.)</li>

<li>

**Import the XML file** by dragging the XML file from your
downloads folder into the Snap<em>!</em> window.

::: endnote
You can also import the XML file by choose "Import..." from the
Snap<em>!</em> file menu, locating the XML file on your computer, and
clicking "Open."
:::

</li>

<li>

**Test the blocks** that you imported:

<ol>

<li>**Find the imported block(s)** at the <em>end</em> of
the palettes that contain them.</li>

<li>**Click each imported block to make sure it runs
properly.**</li>

</ol>

</li>

</ol>
:::

</li>

</ol>
:::

::: endnote
You are creating a math library. Snap<em>!</em> has libraries for many
things, such as one for accessing different parts of words and
sentences...<br />
<img src="/img/6-computers/libraries-1.png" title="Snap! File menu opened with cursor over &apos;Libraries&apos;" alt="Snap! File menu opened with cursor over &apos;Libraries&apos;" class="ms-4"/>
<img src="/img/6-computers/libraries-words.png" title="Snap! &apos;Import library&apos; dialog box highlighting &apos;Words, sentences&apos; library" alt="Snap! &apos;Import library&apos; dialog box highlighting &apos;Words, sentences&apos; library" class="ms-4"/>
:::

::: takeNote
<h4>**Debugging Dependencies**</h4>

<img src="/img/2-complexity/even-obsolete.png" title="even? (number#){report(Obsolete!)}" alt="even? (number#){report(Obsolete!)}" class="float-end"/>

You created your `even?` block using another custom block,
`divisible by?`. If you want to use `even?` in
another project one day, you must export <em>both</em> blocks in order
for `even?` to work properly.

If you ever see this red `Obsolete!` block in code you
have imported, it means that a required block was not exported. You'll
have to go back to the original project and export again being sure to
select all of the blocks needed by the blocks you want.
:::

::: forYouToDo
<ol start="3">

<li>

::: ap-standard
AAP-2.M parts a and b, AAP-3.D
:::

Copy and modify the code from your `even?` predicate to
develop an `odd?` predicate for your library.<br />
<img src="/img/2-complexity/odd-6-reporting.png" title="odd? (6) reporting false" alt="odd? (6) reporting false" class="ms-4"/>
<img src="/img/2-complexity/odd--7-reporting.png" title="odd? (-7) reporting true" alt="odd? (-7) reporting true" class="ms-4"/>

</li>

</ol>
:::

::: ap-standard
AAP-2.M.1, AAP-3.D.2
:::

You can create algorithms from scratch or by combining or modifying
existing algorithms. When you are thinking of using existing code, you
can either use your own code or use code from someone else's
library.

::: forYouToDo
<ol start="4">

<li>

::: ap-standard
AAP-2.M parts a and b
:::

Develop a
<img src="/img/2-complexity/number-of-divisors.png" title="number of divisors reporter with numeric input slot" alt="number of divisors reporter with numeric input slot"/>
block (using `keep`), and use it to answer these questions:

<ul style="list-style-type: disc">

<li>**What kinds of numbers have an odd number of
divisors?**</li>

<li>**What kinds of numbers have exactly two
divisors?**</li>

</ul>

<br /> You can do this on your own or follow
<a href="#hint-steps" data-bs-toggle="collapse" title="the steps for building the 'number of divisors' block">these
steps.</a>

::: {#hint-steps .collapse}
<ol type="a">

<li>

Build a `divisors` block using `keep`.<br />
<img src="/img/2-complexity/divisors-9-reporting.png" title="divisors of (9) reporting {1, 3, 9}" alt="divisors of (9) reporting {1, 3, 9}" class="ms-4"/>
<img src="/img/2-complexity/divisors-12-reporting.png" title="divisors of (12) reporting {1, 2, 3, 4, 6, 12}" alt="divisors of (12) reporting {1, 2, 3, 4, 6, 12}" class="ms-4"/>

::: endnote
<a href="#hint-divisors" data-bs-toggle="collapse" title="Hints about building the divisors block">Hints
about building the `divisors` block</a>

::: {#hint-divisors .collapse}
<ul>

<li>You <em>could</em> build this with `for` or `for
each`, but it will require less code to build it with
<img src="/img/blocks/keep.png" title="keep items &apos;predicate input slot&apos; from &apos;list input slot&apos;" alt="keep items &apos;predicate input slot&apos; from &apos;list input slot&apos;" class="py-0"/>.
(You learned about `keep` on
<a href="/unit-2/lab-3/5-keeping-list-items.html" title="Unit 2 Lab 3 Page 5: Keeping Items from a List">Unit
2 Lab 3 Page 5: `Keep`ing Items from a List</a>.)</li>

<li>You <em>could</em> build this with `mod`, but you already
built
<img src="/img/2-complexity/divisible-by.png" title="() divisible by () ?" alt="() divisible by () ?" class="py-0"/>
(using `mod`), so `divisible by?` will be simpler
to use.</li>

<li>The
<img src="/img/blocks/numbers-from-to.png" title="numbers from () to ()" alt="numbers from () to ()" class="inline"/>
block may be helpful.</li>

</ul>
:::
:::

</li>

<li>Build a `number of divisors` block.<br />
<img src="/img/2-complexity/number-of-divisors-9-reporting.png" title="number of divisors (9) reporting 3" alt="number of divisors (9) reporting 3" class="ms-4"/>
<img src="/img/2-complexity/number-of-divisors-12-reporting.png" title="number of divisors (12) reporting 6" alt="number of divisors (12) reporting 6" class="ms-4"/></li>

<li>

Build an expression using `keep` to answer each of these
questions that were introduced above:

<ul style="list-style-type: disc">

<li>**What kinds of numbers have an odd number of
divisors?**</li>

<li>**What kinds of numbers have exactly two
divisors?**</li>

</ul>

</li>

</ol>
:::

</li>

</ol>
:::

<img src="/img/icons/save-now.png" title="Save your work" alt="Save your work" class="inline"/>

::: ifTime
<ol start="5">

<li><img src="/img/icons/talk-with-your-partner.png" title="Talk with Your Partner" alt="Talk with Your Partner" class="inline"/>
For each of the two questions about divisors above, determine:
<em>why</em> do these kinds of numbers have these kinds of
divisors?</li>

</ol>
:::

You've now made a small library, and you might want to write a list
of instructions for how to use the functions in your library (for
example, `divisors of` takes a positive integer as input and
reports a list of numbers). The instructions form an <em>Application
Program Interface</em> for the library.

::: vocabFullWidth
: **APIs**

::: ap-standard
AAP-3.D.4, AAP-3.D.5
:::

An **application program interface (API)** documents
what a programmer needs to know about using a library: it's a
description of each procedure's purpose, inputs, and outputs (but not
its algorithms).

::: endnote
<a href="#hint-webAPI" data-bs-toggle="collapse" title="What is a Web API?">What
is a Web API?</a>

::: {#hint-webAPI .collapse}
A common kind of API is a <em>web API</em> in which the library
exists on someone else's computer. For example, the
<a href="https://developers.google.com/maps/documentation/embed/start" title="Google Maps API" target="_blank">Google
Maps API</a> describes how to embed a Google Map on your own
website.

::: todo
I'm actually inclined to cut all the rest of this yellow box. --MF,
1/15/20
:::



A web API is just a call to a procedure on another machine. For example,
these are three different notations for the same procedure call, which
looks up the number of searches for "BJC" in the US:

<ul>

<li><a href="https://trends.google.com/trends/explore?q=BJC&geo=US" title="https://trends.google.com/trends/explore?q=BJC&amp;geo=US" target="_blank">https://trends.google.com/trends/explore?q=BJC&geo=US</a></li>

<li>

```{=html}
<pre class="inline">EXPLORE (q = BJC, geo = US) </pre>
```
</li>

<li><img src="/img/6-computers/explore-api-example.png" title="explore, query: (BJC) geographical location: (US)" alt="explore, query: (BJC) geographical location: (US)"/></li>

</ul>

The only difference is that the URL shows where on the Internet to find
the procedure.


:::
:::
:::
