---
title: "Page 3: More Mathematical Reporters"
subtitle: "Unit 2, Lab 4, Page 3"
order: 3
---

::: learn
**In this project**, you will create mathematical blocks
that combine several numbers, such as a `sum` block, which
combines two numbers using addition: <br />
<img src="/img/3-lists/sum-from-4-to-6-reporting.png" title="sum from (4) to (6) reporting 15" alt="sum from (4) to (6) reporting 15" class="ms-4"/>
:::

::: {#first .forYouToDo}
<ol>

<li>Open your U2L4-MathLibrary project if it isn't open already.</li>

<li>Build blocks for `maximum` (reporting the larger of two
input numbers) and `minimum` (reporting the smaller of two
input numbers):<br />
<img src="/img/2-complexity/max-of-6-and-4-reporting.png" title="max of (6) and (4) reporting 6" alt="max of (6) and (4) reporting 6" class="ms-4"/>
<img src="/img/2-complexity/min-of-3-and--4-reporting.png" title="max of (3) and (-4) reporting -4" alt="max of (3) and (-4) reporting -4" class="ms-4"/></li>

</ol>
:::

The
<img src="/img/blocks/combine.png" title="combine &apos;list input slot&apos; using &apos;reporter input slot&apos;" alt="combine &apos;list input slot&apos; using &apos;reporter input slot&apos;" class="inline"/>
block takes two inputs: a list and an operation <em>with two
inputs</em>, and it reports the result of combining all the elements in
the input list using the input operation. For example, the expression
below reports: 0 + 1 + 2.<br />
<img src="/img/3-lists/combine-simple-example.png" title="combine (list {0, 1, 2}) with (()+()) reporting 3" alt="combine (list {0, 1, 2}) with (()+()) reporting 3" class="ms-4"/>

::: takeNote
**You choose the operation, and `combine` performs
that operation by <em>combining</em> all the items in the input list and
then reports the result.**

Notice that the function used to <em>combine</em> the list items
always has two blank input slots. The `keep` block only needs
one blank in its input function, but with `combine`, two are
required.
:::

::: endnote
`Combine` is a <em>higher-order function</em>; it is a
function that takes a function as input. You've seen another
higher-order function already: `keep` (in
<a href="/unit-2/lab-3/5-keeping-list-items.html" title="Keeping Items from a List">Unit
2 Lab 3</a>).



Unlike `keep`, the `combine` function is only used
with a few input functions.
<a href="#hint-which-functions" data-bs-toggle="collapse" title="Which functions?">Which
functions?</a>

::: {#hint-which-functions .collapse}
`Combine` is mostly used with <em>only these
functions</em>:<br />
<img src="/img/3-lists/plus.png" title="+" alt="+" class="ms-4"/>
<img src="/img/3-lists/times.png" title="×" alt="×"/><br />
<img src="/img/3-lists/and-block.png" title="and" alt="and" class="ms-4"/>
<img src="/img/3-lists/or-block.png" title="or" alt="or"/><br />
<img src="/img/3-lists/join.png" title="join" alt="join" class="ms-4"/>
<img src="/img/3-lists/join-words.png" title="join words" alt="join words"/><br />
and the
<img src="/img/3-lists/maximum.png" title="maximum of () ()" alt="maximum of () ()" class="inline"/>
and
<img src="/img/3-lists/minimum.png" title="minimum of () ()" alt="minimum of () ()" class="inline"/>
blocks you've just written yourself.



<a data-bs-toggle="collapse" href="#hint-3">Why so few?</a>

::: {#hint-3 .collapse}
The function has to be <em>associative</em>, meaning that it can't
matter what order you group the items in. For example, addition is
associative: (7 + 8) + 1 is the same as 7 + (8 + 1) (work it out
yourself), but subtraction is not: (7 − 8) − 1 is different from
7 − (8 − 1). So expressions like
<img src="/img/3-lists/combine-minus.png" alt="combine with (-) items of (list 7 8 1)"/>
would be ambiguous.
:::


:::


:::

::: forYouToDo
<ol start="3">

<li>Use `combine` to build `maximum of list` and
`minimum of list`.<br />
<img src="/img/3-lists/max-of-list-reporting.png" title="maximum of list {1, 22, 3, -4} reporting 22" alt="maximum of list {1, 22, 3, -4} reporting 22" class="ms-4"/>
<img src="/img/3-lists/min-of-list-reporting.png" title="minimum of list {1, 22, 3, -4} reporting -4" alt="minimum of list {1, 22, 3, -4} reporting -4" class="ms-4"/></li>

<li>Create a `sum of list` block that reports the sum of the
items of a list.<br />
<img src="/img/3-lists/sum-of-list-reporting.png" title="sum of list {1, 2, 3, 10} reporting 16" alt="sum of list {1, 2, 3, 10} reporting 16" class="ms-4"/></li>

<li>

Create an `average of list` block that calculates the average
of the items in a list:<br />
<img src="/img/3-lists/average-of-list-reporting.png" title="average of list {1, 2, 3, 4} reporting 2.5" alt="average of list {1, 2, 3, 4} reporting 2.5" class="ms-4"/>

::: endnote
<a href="#hint-average" data-bs-toggle="collapse" title="Hint about average of list">Hint
about `average of list`</a>

::: {#hint-average .collapse}
First think: how do you calculate an average? Then think: what blocks
could help you do that in Snap<em>!</em>?
:::
:::

</li>

</ol>
:::

::: ap-standard
AAP-2.M.2, AAP-2.O.4
:::

`Average of list` and `sum of list` are
procedures that you'll need repeatedly, so after a while, you just know
how to write them, or you'll put them in a library, and you won't have
to reinvent them each time. Finding the maximum or minimum value in a
list and checking for divisibility are also commonly needed
algorithms.

::: examFullWidth
::: ap-standard
AAP-3.C.2
:::

::: sidenote
You saw the procedure definition for a command in
<a href="/unit-1/lab-3/4-modify-your-pinwheel.html" title="Unit 1 Lab 3 Page 4: Modify Your Pinwheel" target="_blank">Unit
1 Lab 3 Page 4: Modify Your Pinwheel</a>.
:::

::: pseudop
The definition for a reporter looks much like the definition for a
command except that it includes an<pre class="inline">RETURN</pre> (like `report`). For example, this definition

::: sidenote
In many languages (including Snap<em>!</em>) variables must be
<em>declared</em> in some way (in Snap<em>!</em>, you can click the
"Make a variable" button or use the `script variables`
block). But the AP's language doesn't include variable declarations, so
you won't see them on the exam.
:::

<img src="/img/3-lists/square-roots-definition.png" title="square roots of (number) {script variables (positive root), set (positive root) to ((sqrt) of (number))), report (list (positive root) ((-1) × positive root))" alt="square roots of (number) {script variables (positive root), set (positive root) to ((sqrt) of (number))), report (list (positive root) ((-1) × positive root))" class="ms-4"/><br />
would be written as

::: pre-container
<pre class="inline">
PROCEDURE squareRoots(number)
{
positiveRoot &leftarrow; sqrt(number)
RETURN([positiveRoot, -1 * positiveRoot])
}
</pre>
:::

or
<img src="/img/3-lists/square-roots-definition-blocktran.png" title="square roots of (number) {script variables (positive root), set (positive root) to ((sqrt) of (number))), report (list (positive root) (() - positive root))" alt="square roots of (number) {script variables (positive root), set (positive root) to ((sqrt) of (number))), report (list (positive root) (() - positive root))"/>

::: pseudop
As with `report` in Snap<em>!</em>, when a <pre class="inline">RETURN</pre> statement is executed, the flow of control returns to the place in your
code where the procedure was called, and the procedure returns the value of the expression inside the <pre class="inline">RETURN</pre> command or `report` block.
:::

::: endnote
::: pseudop
Also, the procedure <pre class="inline">sqrt</pre> isn't built in to the AP's language so it is written in lower case like
other programmer-defined procedures.
:::
:::
:::
:::

::: examFullWidth
::: ap-standard
AAP-2.H.3
:::

::: pseudop
The conditional expression
<img src="/img/2-complexity/ge-ifelse-no-hat.png" title="if (a &gt; b) {
report true
} else {
report (a = b)
}" alt="if (a &gt; b) {
report true
} else {
report (a = b)
}" class="inline"/> would be written as

::: pre-container
```{=html}
<pre class="inline">IF(a &gt; b)
{
RETURN(true)
}
ELSE
{
RETURN(a = b)
}</pre>
```
:::

or
<img src="/img/2-complexity/if-else-blocktran.png" title="IF(a &gt; b)
{
RETURN(true)
}
ELSE
{
RETURN(a = b)
}" alt="IF(a &gt; b)
{
RETURN(true)
}
ELSE
{
RETURN(a = b)
}" class="inline"/>
:::

::: pseudop
As in Snap<em>!</em>, if the condition <pre class="inline">a &gt; b</pre> is true, the code in first block of statements runs; if it is false, the
code in second block of statements runs.
:::
:::

<!--
::: forYouToDo
<ol start="6">


<li>

Question 5

::: {.assessment-data type="multiplechoice" identifier="What is the value of x?" hasinlinefeedback="true" maxchoices="1" responseidentifier="ri5" shuffle="true"}
::: prompt
When will "Error. Invalid entry." be displayed?

::: {.pre-container .ms-4}
```{=html}
<pre class="inline">PROCEDURE greaterThanOrEqualTo(a, b)
IF(a &gt; b)
{
RETURN(true)
}
ELSE
{
RETURN(a = b)
}
DISPLAY("Error. Invalid entry.")
}
</pre>
```
:::
:::

::: {.choice identifier="c1"}
::: text
When

```{=html}
<pre class="inline">a &gt; b</pre>
```
is true.
:::

::: feedback
Think about what

```{=html}
<pre class="inline">RETURN</pre>
```
does. Like `report` in Snap<em>!</em>,

```{=html}
<pre class="inline">RETURN</pre>
```
ends the procedure. Once it is run, no other code in that procedure is
run, and the flow of control returns to the place where the procedure
was called.
:::
:::

::: {.choice identifier="c2"}
::: text
When

```{=html}
<pre class="inline">a &gt; b</pre>
```
is false.
:::

::: feedback
Think about what

```{=html}
<pre class="inline">RETURN</pre>
```
does. Like `report` in Snap<em>!</em>,

```{=html}
<pre class="inline">RETURN</pre>
```
ends the procedure. Once it is run, no other code in that procedure is
run, and the flow of control returns to the place where the procedure
was called.
:::
:::

::: {.choice identifier="c3"}
::: text
Always
:::

::: feedback
It looks like that because that's the last line of procedure code, but
think about what

```{=html}
<pre class="inline">RETURN</pre>
```
does. Like `report` in Snap<em>!</em>,

```{=html}
<pre class="inline">RETURN</pre>
```
ends the procedure. Once it is run, no other code in that procedure is
run, and the flow of control returns to the place where the procedure
was called.
:::
:::

::: {.choice identifier="c4"}
::: text
Never
:::

::: feedback
Correct!
:::
:::

::: {.responseDeclaration identifier="ri5"}
::: {.correctResponse identifier="c4"}
:::
:::
:::

</li>

</ol>
:::
-->


::: takeItFurther
<ol type="A">

<li>

::: sidenote
The **greatest common divisor** of two integers is the
largest positive integer that is a divisor (a factor) of both integers.
:::

Develop a `greatest common divisor` block. (Use your
<img src="/img/2-complexity/divisors.png" title="divisors of ()" alt="divisors of ()" class="inline"/>
block.)<br />
<img src="/img/3-lists/gcd-20-50-reporting.png" title="greatest common divisor of (20) and (50) reporting 10" alt="greatest common divisor of (20) and (50) reporting 10" class="ms-4"/>
<img src="/img/3-lists/gcd-36-40-reporting.png" title="greatest common divisor of (36) and (40) reporting 4" alt="greatest common divisor of (36) and (40) reporting 4" class="ms-4"/>

::: endnote
<a href="#hint-GCD-hint" data-bs-toggle="collapse" title="Hints about building greatest common divisor">Hint
about building `greatest common divisor`</a>

::: {#hint-GCD-hint .collapse}
You may find it useful to use `maximum of list` as well as
`divisors` and also to build an `intersection`
block that takes two lists as input and reports all of the items that
are on both lists.<br />
<img src="/img/3-lists/intersection-reporting.png" title="intersection of {apples, potatoes, carrots, pears} and {acorns, apples, pears, pine cones} reporting {apples, pears}" alt="intersection of {apples, potatoes, carrots, pears} and {acorns, apples, pears, pine cones} reporting {apples, pears}" class="ms-4"/><br />
<a href="#hint-GCD-hints" data-bs-toggle="collapse" title="More detailed hints about greatest common divisor">More
detailed hints about `greatest common divisor`</a>

::: {#hint-GCD-hints .collapse}
In order to find the greatest common divisor of two numbers you will
need to find:

<ol>

<li>The <em>divisors of each</em> input number</li>

<li>The numbers that are <em>divisors of both</em> input numbers</li>

<li>The <em>greatest</em> number that is a divisor of both input
numbers</li>

</ol>
:::
:::
:::

</li>

</ol>
:::

{{< checkpoint id='1FAIpQLSesvaqIopzLJVsh17q5eFLhWAt3DLEIncQywftiAOdH6gXX3w' >}}