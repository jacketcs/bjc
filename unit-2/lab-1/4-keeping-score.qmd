---
title: "Page 4: Keeping Score with Global Variables"
subtitle: "Unit 2, Lab 1, Page 4"
order: 4
gifffer: true
---

:::::: learn
**On this page,** you will use a <em>global variable</em> to keep score in your Click Alonzo game.
::::::

In your Number Guessing Game, you used <em>script variables</em> to store information (the value of <var>secret number</var>) that was needed by only one script. To keep score in Click Alonzo, more than one script will need access to that information, so you'll use a <em>global variable</em>.

:::::: vocabFullWidth
: **Global Variable**

A **global variable** is a variable that is usable by all scripts in the program.
::::::

::: endnote
### When are global variables needed?

Most of the time, script variables are a better choice because they can't be changed by some other part of the program, and so they reduce the chance of bugs. But **if multiple scripts need access** to a variable or **if the information in that variable needs to be saved** with your project, then use a global variable.
:::

:::::: {#first .forYouToDo}
(@) Open your U1L1-ClickAlonzo project, play the game, and review the code so you remember how it works.

    - If you never completed Click Alonzo or don't find your own version, please use [this version](https://snap.berkeley.edu/snap/snap.html#open:https://bjc.jacketcs.net/prog/2-complexity/U2L1-ClickAlonzo.xml)

(@) <div class="saveAs">
["U2L1-ClickAlonzo"]{.text}<img src="/img/icons/save-this-as.png" title="Save your work as U2L1-ClickAlonzo" alt="Save your work as U2L1-ClickAlonzo"/> </div>Be sure to **rename your project** with "U2" in the filename.

::: takeNote
If you save new work under an old filename, Snap<em>!</em> will overwrite your original project. Use "Save as..." from the Snap<em>!</em> File menu to save with the new name. When you load an older project and are about to make a big change, get in the habit of <em>saving first, with the new name, before you change anything</em>.
:::

(@) Create a global variable named <var>score</var>. Here's how.

::: narrower
### **Making a Global Variable**

<ol type="a">
<li>Click <img src="/img/1-introduction/make-a-variable.png" title="make a variable button" alt="make a variable button" class="inline"/> in the Variables palette. (It's not a block; you can't drag it into the scripting area.)</li>

<li>Type the title for your variable. In this case, it's <var>score</var>.</li>

<li>Click "OK."</li>
</ol>

:::

(@) Use the <var>score</var> variable to keep track of the player's score:

<ol type="a" class="ms-4">

<li>Initialize <var>score</var> to 0 at the beginning of the game.</li>

::: vocabFullWidth
Setting the starting value of a variable is known as **initializing** the variable.
:::

<li>Make the program `change` the score by 1 whenever the sprite is clicked.</li>

:::: examFullWidth
::: pseudop
<img src="/img/2-complexity/change-score-by-1.png" title="change (score) by (1)" alt="change (score) by (1)" class="inline py-0" height="26"/> (which means <img src="/img/2-complexity/set-score-to-score-plus-one.png" title="set(score) to (score+1)" alt="set(score) to (score+1)" height="40"/>) would be written as

<pre class="inline">score &leftarrow; score + 1</pre>

or <img src="/img/2-complexity/score-increment-blocktran.png" title="score ← score + 1" alt="score ← score + 1" class="inline"/>.
:::
::::

</ol>

<img src="/img/icons/pair-programming-swap.png" title="Pair Programming Swap" alt="Pair Programming Swap" class="float-end"/>

(@) **Test and debug.** Play the game enough to make sure that the score variable works. <img src="/img/icons/save-mini.png" title="Save your work" alt="Save your work" class="inline"/>

(@) <img src="/img/icons/talk-with-your-partner-mini.png" title="Talk with Your Partner" alt="Talk with Your Partner" class="inline"/> Right now, the game doesn't have a way to win, but you'll change that. Decide on the score that you will use to test whether the player has won.

(@) Use a conditional to determine when the player reaches that score. When they do:

<ol type="a" class="ms-4">

<li>Make Alonzo stop jumping around.</li>

<li>Make Alonzo appear again. (You'll have to reset the ghost effect.)</li>

<li>Congratulate the player for a few seconds.</li>

<!--<li>If necessary, use another `stop` block to stop the running script.  (Whether you need this will depend on your program structure.)</li>-->

</ol>

(@) **Test and debug.** Take turns playing, and fix any bugs. <img src="/img/icons/save-mini.png" title="Save your work" alt="Save your work" class="inline"/><br />

:::: takeNote
### **Debugging Tip: Display of Variables**
When you are debugging your code, it can help to see the value of a variable at different points in your program. This is done differently for local and global variables:

- Global variables have check-boxes that control the display of the variable <em>watcher</em> on the stage (shown below).<br /> <img src="/img/2-complexity/Debugging/golbal-variables-checked.png" title="Checking the global variables in the palette." alt="Checking the global variables in the palette." class="ms-4" height="300"/><img src="/img/2-complexity/Debugging/global-variables-displayed.png" title="Displaying the global variable on the stage" alt="Displaying the global variable on the stage" class="ms-4" height="300"/>

- If it's a <em>local</em> (script) variable, you can **use the `show variable` block** inside the script to display a watcher on the stage (and use `hide variable` to hide it again).
::::

::::::

:::::: ifTime
(@) If the sprite moves without being clicked, make the score go down by 1.

(@) Game too hard? Increase the score by 2 for a hit. Too big a change? Increase by 3 for a hit, decrease by 2 for a miss. You can make arbitrarily fine adjustments. This process is called <em>playtuning</em> a game.

::::::
