---
title: "Page 2: Planning a Quiz App"
subtitle: "Unit 2, Lab 2, Page 2"
order: 2
gifffer: true
---

::: learn
<p><strong>On this page,</strong> you will begin to develop a quiz app by creating an <em>abstract data type</em> to pair the questions with their answers.</p>
:::

::: {#first .forYouToDo}
<ol>

<li><img src="/img/icons/talk-with-your-partner.png" title="Talk with Your Partner" alt="Talk with Your Partner" class="inline"/>Decide what type of quiz you would like to build, and write three to five questions and their correct answers.</li>

<li><img src="/img/icons/take-turns-speaking-mini.gif" title="Take turns speaking" alt="Take turns speaking" class="inline"/>Read the following section. (Don't build these in Snap<em>!</em>. You'll build your own quiz later on the page.)</li>

</ol>
:::

<p>

::: vocab
: <strong>Sublist</strong>

<p>A <strong>sublist</strong> is a list used as an item of another list.</p>

<p>(The word sublist is also used to refer to some subset of a list.)</p>
:::

You'll use a list to store your quiz items in a global variable and use a <em>sublist</em> for each question/answer pair. Then you can choose just one pair at a time to work with. <img src="/img/2-complexity/quiz-questions-list-of-lists.png" title="set (computer science quiz) to (list (list (What is the computer science term for looping or repetition?) (iteration)) (list (What is the name for the abstraction in a program that can hold a value?) (variable)) (list (What kind of variable is available only in the part of the program where it is defined?) (local variable)))" alt="set (computer science quiz) to (list (list (What is the computer science term for looping or repetition?) (iteration)) (list (What is the name for the abstraction in a program that can hold a value?) (variable)) (list (What kind of variable is available only in the part of the program where it is defined?) (local variable)))" class="ms-4"/> <img src="/img/2-complexity/item-of-item-of-script.png" title="ask (item(1) of (item (3) of (computer science quiz))) and wait
if (item (2) of (item (3) of (computer science quiz)) = answer) {
say (That&apos;s correct!) for (2) secs
}" alt="ask (item(1) of (item (3) of (computer science quiz))) and wait
if (item (2) of (item (3) of (computer science quiz)) = answer) {
say (That&apos;s correct!) for (2) secs
}" class="ms-4"/>

</p>



<p>But code like <img src="/img/2-complexity/item-1-of-item-3-of.png" title="item (1) of (item (3) of (computer science quiz))" alt="item (1) of (item (3) of (computer science quiz))" class="inline"/> is hard to read and understand. A better way is to <em>use abstraction</em> to organize the quiz items. The abstraction just hides the `list` and `item of` blocks, so it isn't complicated to build, but it can make your code much easier to write, read, and debug.<br /> <img src="/img/2-complexity/quiz-questions-list-of-adts.png" title="set (computer science quiz) to (list (question: (What is the computer science term for looping or repetition?) answer: (iteration)) (question: (What is the name for the abstraction in a program that can hold a value?) answer: (variable)) (question: (What kind of variable is available only in the part of the program where it is defined?) answer: (local variable)))" alt="set (computer science quiz) to (list (question: (What is the computer science term for looping or repetition?) answer: (iteration)) (question: (What is the name for the abstraction in a program that can hold a value?) answer: (variable)) (question: (What kind of variable is available only in the part of the program where it is defined?) answer: (local variable)))" class="ms-4"/> <img src="/img/2-complexity/abstracted-quiz-script.png" title="ask (question of quiz item (item (3) of (computer science quiz))) and wait
if (answer = answer from quiz item (item (3) of (computer science quiz))) {
say (That&apos;s correct!) for (2) secs
}" alt="ask (question of quiz item (item (3) of (computer science quiz))) and wait
if (answer = answer from quiz item (item (3) of (computer science quiz))) {
say (That&apos;s correct!) for (2) secs
}" class="ms-4"/></p>

::: vocabFullWidth
<strong>: Data Types</strong>

<ul>

<li>A <strong>data type</strong> is what kind of data something is (number, text string, list, etc.). For example, <em>number</em> is the data type for the first input to <img src="/img/blocks/item.png" title="item (1) of ()" alt="item (1) of ()" height="35"/> and <em>list</em> is the the data type for its second input.</li>



<li>

Each programming language provides some <strong>primitive data types</strong> (data types that are built-in). For example, Snap<em>!</em> provides numbers, text (words and sentences), Booleans (true or false), lists, and some you haven't yet used as data (such as sprites and costumes). <a href="#hint-primitive" data-bs-toggle="collapse" title="This menu shows all of Snap!'s primitive types.">This menu shows all of Snap<em>!</em>'s primitive types.</a>

::: {#hint-primitive .collapse}
<img src="/img/2-complexity/isa-menu.png" title="primitive types: number, text, Boolean, list, sprite, command, reporter, predicate" alt="primitive types: number, text, Boolean, list, sprite, command, reporter, predicate" class="ms-4"/>
:::

</li>

</ul>
:::

::: vocabFullWidth
<strong>: Abstract Data Types</strong>

<ul>



::: sidenoteBig
<p>The word "abstract" is often used casually to mean something <em>harder</em> to understand or more complex, but in computer science, its meaning is almost the opposite. ADTs are things that you, the programmer, create to make your program <em>easier</em> for you and others to read, debug, and improve.</p>
:::

<li>An <strong>abstract data type (ADT)</strong> is a custom data type that's meaningful to your program. It's not built into the language; you develop it as you code. This is an abstraction because it hides the details inside the constructor and selectors so that the programmer who uses a `quiz item` has to think only about questions and answers, not about list indices.</li>

<li>The <img src="/img/2-complexity/quiz-item-constructor.png" title="quiz item, question: () answer: ()" alt="quiz item, question: () answer: ()" class="inline"/> block is the <strong>constructor</strong>; it <em>constructs</em> one example of the data structure. By naming the pieces of the structure, the constructor makes it certain that every time you use it, you build the structure in the right order.<br /> <!--<img class="ms-4" src="/img/2-complexity/quiz-questions-constructor-definition.png" alt="quiz item, question: (question) answer: (answer) {report (list (question) (answer))}" title="quiz item, question: (question) answer: (answer) {report (list (question) (answer))}">--></li>

<li>The <img src="/img/2-complexity/question-selector.png" title="question from quiz item: ()" alt="question from quiz item: ()" class="inline"/> and <img src="/img/2-complexity/answer-selector.png" title="answer from quiz item: ()" alt="answer from quiz item: ()" class="inline"/> blocks are the <strong>selectors</strong>; they each <em>select</em> one piece of the data structure.<br /> <!--<img class="ms-4" src="/img/2-complexity/question-definition.png" alt="question from quiz item: (quiz item) {report (item (1) of (quiz item)}" title="question from quiz item: (quiz item) {report (item (1) of (quiz item)}" />
<img class="ms-4" src="/img/2-complexity/answer-definition.png" alt="answer from quiz item: (quiz item) {report (item (2) of (quiz item)}" title="answer from quiz item: (quiz item) {report (item (2) of (quiz item)}" />--></li>

</ul>

The constructor and selector together implement the `quiz item` <em>abstract data type</em>.

<ul>



<li><strong>Data abstraction</strong> is the creation and use of abstract data types in a program.</li>

</ul>
:::

::: forYouToDo
<ol start="3">

<li>

::: newProject
["U2L2-Quiz"]{.text}<img src="/img/icons/new-project-called.png" title="Start a New Project called U2L2-Quiz" alt="Start a New Project called U2L2-Quiz"/><a  name="input-type">Â </a>
:::

</li>



<li>Build the custom `quiz item` abstract data type (both the constructor and the two selectors).</li>

::: narrower
### <strong>Specifying an Input Type</strong>

<p>Your selectors expect a quiz item, i.e., a list, as input. You can make your blocks <em>show</em> what type of data they expect. It's not necessary in Snap<em>!</em> but, like assigning a color to a block, it can be a helpful reminder of what the block does and what type of input it expects. You've already seen input slots of several shapes, indicating different expected data types.</p>

<p>

In the Block Editor while creating a selector, click on a plus sign to enter an input name. Then...

<ol style="list-style-type:lower-alpha">

<li>Click on the arrow to the right of the input name:<br /> <img src="/img/2-complexity/create-input-name-right_arrow.png" title="create input name right arrow" alt="create input name right arrow" class="ms-4" height="125"/></li>

<li>Choose the data type you want for that input. (For this project, you'll use the "text" and "list" input types.)</li>

<li>Click "OK."</li>

</ol>

</p>
:::

<li>Create a global variable to store your quiz items and initialize it as a list of items, using your constructor where appropriate.</li>

```         
                  <a id="two-views">
```

<a id="two-views"> </a>

::: narrower
Snap<em>!</em> has two different views for lists within lists. You can switch which view you see by right-clicking (or control-clicking) on the <var>quiz</var> watcher (or whatever you called the variable) on the stage.

::: endnote
If you don't see the watcher on the stage, make sure the checkbox beside the <var>quiz</var> variable in the Variables palette is checked. <img src="/img/2-complexity/quiz-watcher.png" title="quiz watcher checked" alt="quiz watcher checked" class="inlinde"/>
:::

<ul style="list-style-type: disc;">

<li>

<strong>Table View</strong> for <var>computer science quiz</var> Watcher (your quiz will be different):<br /> <img src="/img/2-complexity/csquiz-big.png" title="cs quiz watcher with first column expanded" alt="cs quiz watcher with first column expanded" class="ms-4"/>

::: endnote
<a href="#table-hint" data-bs-toggle="collapse" title="">My watcher is too narrow.</a>

::: {#table-hint .collapse}
At first the watcher will look like this:<br /> <img src="/img/2-complexity/csquiz-small.png" title="cs quiz watcher at initial size" alt="cs quiz watcher at initial size" class="ms-4"/><br /> Drag out the resize handle at the lower right to get this:<br /> <img src="/img/2-complexity/csquiz-med.png" title="cs quiz watcher resized" alt="cs quiz watcher resized" class="ms-4"/><br /> Then hover your mouse over the letter A near the top. It will turn into a digit 1. Grab it and drag it to the right:<br /> <img src="/img/2-complexity/csquiz-big.png" title="cs quiz watcher with first column expanded" alt="cs quiz watcher with first column expanded" class="ms-4"/>
:::
:::

</li>

<li><strong>List View</strong> for <var>computer science quiz</var> Watcher:<br /> <img src="/img/2-complexity/csquiz-list.png" title="cs quiz watcher, list view" alt="cs quiz watcher, list view" class="ms-4"/></li>

</ul>
:::

::: vocabFullWidth
: <strong>Table</strong>

<p>A <strong>table</strong> is a two-dimensional data structure with rows and columns. If you've used a <em>spreadsheet</em> program, what it displays is a table.</p>

<p>In Snap<em>!</em>, a table is implemented as a list of lists, in which each sublist is one row of the table.</p>
:::

<img src="/img/icons/save-now.png" title="Save your work" alt="Save your work" class="float-end"/>

<li>Test both the selectors for different items in your list of quiz items, and debug any problems.</li>

<li>

<!-- Question 1-->

::: {.assessment-data type="multiplechoice" identifier="capitals" hasinlinefeedback="true" maxchoices="8" responseidentifier="ri1" shuffle="true"}
::: prompt
<p>Imagine you make a variable <var>capitals</var> and use `set` to give this list of lists a name: <br /> <img src="/img/3-lists/check1capitals.png" title="set (capitals) to {{Augusta, Maine}, {Boise, Idaho}, {Columbia, South Carolina}, {Des Moines, Iowa}}" alt="set (capitals) to {{Augusta, Maine}, {Boise, Idaho}, {Columbia, South Carolina}, {Des Moines, Iowa}}" class="ms-4"/><br /> Which of the following statements are <strong>true</strong>?<br /> <br /> Choose <strong>all</strong> that apply.</p>
:::

::: {.choice identifier="c1"}
::: text
<img src="/img/3-lists/check1capitalsc1.png" title="item (1) of (capitals)" alt="item (1) of (capitals)" border="0"/> reports a <strong>list</strong> with two items: "Augusta" and "Maine".
:::

::: feedback
Correct.
:::
:::

::: {.choice identifier="c2"}
::: text
<img src="/img/3-lists/check1capitalsc2.png" title="item (1) of (item (1) of (capitals))" alt="item (1) of (item (1) of (capitals))" border="0"/> reports the word "Augusta".
:::

::: feedback
Correct.
:::
:::

::: {.choice identifier="c3"}
::: text
<img src="/img/3-lists/check1capitalsc3.png" title="item (last) of (item (2) of (capitals))" alt="item (last) of (item (2) of (capitals))" border="0"/> reports the word "Iowa".
:::

::: feedback
No. What is item 2 of "capitals"?
:::
:::

::: {.choice identifier="c4"}
::: text
<img src="/img/3-lists/check1capitalsc4.png" title="(length) of (capitals)" alt="(length) of (capitals)" border="0"/> reports the number 8.
:::

::: feedback
No. Each of the small lists is a single item in the list "capitals" .
:::
:::

::: {.choice identifier="c5"}
::: text
<img src="/img/3-lists/check1capitalsc5.png" title="all but first of (item (last) of (capitals))" alt="all but first of (item (last) of (capitals))" border="0"/> reports a <strong>list</strong> with one item: "Iowa".
:::

::: feedback
Correct.
:::
:::

::: {.choice identifier="c6"}
::: text
<img src="/img/3-lists/check1capitalsc6.png" title="item (3) of (capitals))" alt="item (3) of (capitals)" border="0"/> reports the string "Boise".
:::

::: feedback
The items of <var>capitals</var> are lists.
:::
:::

::: {.choice identifier="c7"}
::: text
<img src="/img/3-lists/check1capitalsc7.png" title="item (last) of (all but first of (capitals))" alt="item (last) of (all but first of (capitals))" border="0"/> reports the string "Iowa".
:::

::: feedback
The items of `all but first of (capitals)` are lists.
:::
:::

::: {.choice identifier="c8"}
::: text
<img src="/img/3-lists/check1capitalsc8.png" title="(length) of (item (1) of (capitals))" alt="(length) of (item (1) of (capitals))" border="0"/> reports the number 2.
:::

::: feedback
Correct.
:::
:::

::: {.responseDeclaration identifier="ri1"}
::: {.correctResponse identifier="c1"}
:::

::: {.correctResponse identifier="c2"}
:::

::: {.correctResponse identifier="c5"}
:::

::: {.correctResponse identifier="c8"}
:::
:::
:::

</li>

</ol>
:::
