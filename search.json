[
  {
    "objectID": "costume-cheatsheet.html",
    "href": "costume-cheatsheet.html",
    "title": "Snap! Common Fixes for Costumes / Customization",
    "section": "",
    "text": "For all computers, you can first download the image/file that you want to import into Snap! then go into the file system and drag the file into your Snap! window.\n\n\nYou don’t have to download images, you can directly drag in your image from Google into the Snap! window, but if you want transparency, you might have to follow the steps in the transparency section below.\n\n\n\nYou’ll have to download the file to import it into Snap! You can use any website to get the sound file.\nIf you find a sound that you want from YouTube, find a website that does “YouTube to Mp3.” If you do this, be careful of pop-ups that tell you to download an extension or download something else.\n\n\n\nSnap!’s probably being weird. Click out of the “Sounds” or “Costumes” tab in Snap! (so click into the “Scripts” tab) and then click back. It should show up within 30 seconds (just keep clicking in and out if you know you dragged in the file correctly)."
  },
  {
    "objectID": "costume-cheatsheet.html#importing-files",
    "href": "costume-cheatsheet.html#importing-files",
    "title": "Snap! Common Fixes for Costumes / Customization",
    "section": "",
    "text": "For all computers, you can first download the image/file that you want to import into Snap! then go into the file system and drag the file into your Snap! window.\n\n\nYou don’t have to download images, you can directly drag in your image from Google into the Snap! window, but if you want transparency, you might have to follow the steps in the transparency section below.\n\n\n\nYou’ll have to download the file to import it into Snap! You can use any website to get the sound file.\nIf you find a sound that you want from YouTube, find a website that does “YouTube to Mp3.” If you do this, be careful of pop-ups that tell you to download an extension or download something else.\n\n\n\nSnap!’s probably being weird. Click out of the “Sounds” or “Costumes” tab in Snap! (so click into the “Scripts” tab) and then click back. It should show up within 30 seconds (just keep clicking in and out if you know you dragged in the file correctly)."
  },
  {
    "objectID": "costume-cheatsheet.html#costumes",
    "href": "costume-cheatsheet.html#costumes",
    "title": "Snap! Common Fixes for Costumes / Customization",
    "section": "Costumes",
    "text": "Costumes\n\nTransparency\nOn Google, you’ll know if an image has a transparent background if there’s a checkered pattern. But sometimes, you might download the image directly from Google images and find out that Snap is showing the checkered pattern as part of the image. In this case, don’t download it from Google images, instead, follow the link to the image (click the title of the website below the image, or the “Visit” button) and follow the website’s instruction to download the image.\n\nDIY Transparency in Snap!\nIf you have a white background, you can first try this website: remove-white-background.imageonline.co\nOr within Snap!, if you have a white background or other solid colour background in a costume, you can easily make a rough transparent background for the costume.\n\nLoad in the costume and go to the costume that you want transparency for Snap!\nRight click the costume and choose “Edit”\nChoose the bucket (fill) tool\nChoose transparency as the “color” (click on the checkered pattern)\nClick on all the parts in the image that you want transparent\n\n\n\n\nImage File Extensions\n\n.png\n\n.png images can come with transparency, and you can edit the image within Snap!\n\n.svg\n\n.svg images can come with transparency, however, you cannot edit the image within Snap!\n\nOther\n\nOther images such as .jpg, jpeg, etc. do not come with transparency, and you can edit the image within Snap!\n\n\n\n\nFit a image to the entire stage\n“I want a background that covers everything, how do I do that????”\nTwo ways, with the first being better in most cases:\n\nMake the image fit the stage\n\nSelect the stage from the sprites on the bottom right window of Snap!\nBuild the following script from the “Looks” palette. \nMake sure to select the name of the picture that you want to select from the dropdown in the script and to also set how much (percentage-wise) you want to rescale the size of the costume.\n\n\n\nMake the stage fit the image\n\nGo to the Snap! settings by clicking on the gear icon on the top left \nSelect “Stage Size”\nSet the stage size parameters so that the stage fits the image"
  },
  {
    "objectID": "costume-cheatsheet.html#etcetera",
    "href": "costume-cheatsheet.html#etcetera",
    "title": "Snap! Common Fixes for Costumes / Customization",
    "section": "Etcetera",
    "text": "Etcetera\n\nChange which sprite is at the Front/Back\nUse the following block in the “Looks” palette \n\n\nHow to put pen drawings in front of sprites\nYou can’t, but you can work around this by having a dedicated sprite for drawing.\nThere’s specific implications for this and you’ll have to play around to make sure everything works properly.\nWith that dedicated sprite(s), you can draw something with pen, then try the following script to have pen marks work as sprite costumes rather than pen marks: \nPlay around that that and layers (see above) to have your pen drawings in the right order."
  },
  {
    "objectID": "create-task/index.html",
    "href": "create-task/index.html",
    "title": "Create Task",
    "section": "",
    "text": "For this course, you will be working on a project that will be graded both by your teacher and the AP exam scorers.\nThe project is mainly graded based off your understanding of the main ideas of the course (ergo “Computer Science Principles”), through a write-up.\nThe project consists of these main scored components:\n\nWrite-up\nProgram"
  },
  {
    "objectID": "create-task/resources.html",
    "href": "create-task/resources.html",
    "title": "Create Task Resources",
    "section": "",
    "text": "Link to the Collegeboard website about the AP Exam"
  },
  {
    "objectID": "create-task/resources.html#requirements",
    "href": "create-task/resources.html#requirements",
    "title": "Create Task Resources",
    "section": "Requirements",
    "text": "Requirements\n\nCollegeboard Create Task Directions\nOfficial Rubric"
  },
  {
    "objectID": "create-task/resources.html#clarifications",
    "href": "create-task/resources.html#clarifications",
    "title": "Create Task Resources",
    "section": "Clarifications",
    "text": "Clarifications\n\nAny “Chief Reader Report” from past exam administrations\nSlides on the Guidelines Breakdown that we covered in class"
  },
  {
    "objectID": "create-task/submitting.html",
    "href": "create-task/submitting.html",
    "title": "Submitting Your Create Task",
    "section": "",
    "text": "Here are a few things to help you get started on submitting your create task. If you have any problems with these steps, ask your teacher, and we can help you through the entire technical process."
  },
  {
    "objectID": "create-task/submitting.html#record-your-video",
    "href": "create-task/submitting.html#record-your-video",
    "title": "Submitting Your Create Task",
    "section": "Record your Video",
    "text": "Record your Video\n\nFollow these steps based on what you are using to record:\n\nChromebook\nMacOS\nWindows 11\n\nMake sure that you can meet these requirements for the video:\n\nYour video must demonstrate your program running, including:\n\nInput to your program\nAt least one aspect of the functionality of your program\nOutput produced by your program\n\nYour video may NOT contain:\n\nAny distinguishing information about yourself\nVoice narration (though text captions are encouraged)\n\nYour video must be:\n\nEither .mp4, .wmv, .avi, .mov, or .webm format\nNo more than 1 minute in length\nNo more than 30MB in file size"
  },
  {
    "objectID": "create-task/submitting.html#export-your-program-code",
    "href": "create-task/submitting.html#export-your-program-code",
    "title": "Submitting Your Create Task",
    "section": "Export your Program Code",
    "text": "Export your Program Code\n\nOpen your Snap! project\nGo to the file icon and click on export summary\nIt will download a .html file\nOpen it in your browser and print it to .pdf.\n\nMake sure you can see all the code by scaling the contents of the file (More settings &gt; Scale)\n\nSee the attached video on how to do this on Chrome. (Including removing your name)\nIf your name is at the top and/or bottom of the page, just unclick the headers/footer setting (More settings)"
  },
  {
    "objectID": "create-task/submitting.html#submit",
    "href": "create-task/submitting.html#submit",
    "title": "Submitting Your Create Task",
    "section": "Submit",
    "text": "Submit\n\nAP Exam\n\nGo to myap.collegeboard.org\nUnder AP Computer Science Principles, go to the “Digital Portfolio”\nYou can submit all your materials there. Only click on the “submit final” buttons if you are sure that you are done. Any other “submit” buttons are not final submissions\n\nFor the program code, upload the pdf that you made before.\nFor the write up, copy and paste all your responses to the web page\nFor the video, upload the video\n\n\n\n\nGoogle Classroom\nFor everyone in Google Classroom, you need to upload the video to the Google Classroom submission, make sure you submit the right write-up as a Google Doc, and submit the link to your Snap Project."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Welcome to AP Computer Science Principles at Berkeley High School, taught by Ms. O’Keefe and Mr. Chang.\nIn this course, we’ll be studying the big ideas of computing using the Snap! programming language. No matter what career you choose to pursue, an understanding of computer science is becoming increasingly essential in today’s world.\nWe want you to have fun and learn. This course will be run as a “lab centric” class built on project-based learning. You will learn by writing lots of code, not by listening to me talk. There will sometimes be brief lectures near the beginning of class, but mostly your teacher will be helping you and you’ll be helping each other do the work. Working with other people is a key part of your educational experience. You will do most of your work paired with another person for support, and you should expect much of your learning will come from figuring out your mistakes/bugs, both on your own and together with your classmates."
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Home",
    "section": "",
    "text": "Welcome to AP Computer Science Principles at Berkeley High School, taught by Ms. O’Keefe and Mr. Chang.\nIn this course, we’ll be studying the big ideas of computing using the Snap! programming language. No matter what career you choose to pursue, an understanding of computer science is becoming increasingly essential in today’s world.\nWe want you to have fun and learn. This course will be run as a “lab centric” class built on project-based learning. You will learn by writing lots of code, not by listening to me talk. There will sometimes be brief lectures near the beginning of class, but mostly your teacher will be helping you and you’ll be helping each other do the work. Working with other people is a key part of your educational experience. You will do most of your work paired with another person for support, and you should expect much of your learning will come from figuring out your mistakes/bugs, both on your own and together with your classmates."
  },
  {
    "objectID": "index.html#outline-of-course-objectives-and-topics",
    "href": "index.html#outline-of-course-objectives-and-topics",
    "title": "Home",
    "section": "Outline of Course Objectives and Topics",
    "text": "Outline of Course Objectives and Topics\nThe AP Computer Science Principles class is a two-semester course which will prepare you for the AP Computer Science Principles Exam. This is the website that you will be mainly be using for classwork all semester long. We’ll be using a curriculum adapted from the Beauty and Joy of Computing (BJC) which was created from an existing course of the same name at Cal, CS 10.\nUnits 1-5 cover all of the AP CSP curriculum framework. You will be ready for the exam after completing these key units.\nUnits 6-8 focus on the abstraction hierarchy of how computers work as well as recursion, a beautiful and powerful CS idea that goes beyond the AP CSP Framework and exam. These units are perfect to enjoy after the exam.\nHere are some course objectives that we will cover over the first five units:\n\nExperience the beauty and the joy of programming\nUnderstand the nature of programming as problem solving and persevering\nUnderstand the basic principles of programming\nLearn to code fluently in Snap! in a well-structured fashion with effective documentation and code clarity\nImplement algorithms using conditional and iterative control structures as well as recursion\nRead and discuss the Blown to Bits book and current topics in computer science/technology\nPrepare for the AP CSP exam in the Spring (exam optional)"
  },
  {
    "objectID": "index.html#course-resources",
    "href": "index.html#course-resources",
    "title": "Home",
    "section": "Course Resources",
    "text": "Course Resources\nThis website will be the main source of assignments and instructional material. Google Classroom will be used for any other communication, notes, and materials. Students will complete most of their work on a computer in the classroom and submit it electronically via Google Classroom."
  },
  {
    "objectID": "index.html#internet-usage",
    "href": "index.html#internet-usage",
    "title": "Home",
    "section": "Internet Usage",
    "text": "Internet Usage\nThe use of the Internet in class is a PRIVILEGE, this privilege can be revoked or suspended at any time deemed necessary as described in the BUSD Acceptable Use Policy for Electronic Resources & the Internet which all students and parents/guardians have signed. All students have access to the Internet, unless otherwise specified by a parent/guardian. In addition, the Internet is to be used for educational purposes only as described in the policy."
  },
  {
    "objectID": "index.html#computer-lab-expectations",
    "href": "index.html#computer-lab-expectations",
    "title": "Home",
    "section": "Computer Lab Expectations",
    "text": "Computer Lab Expectations\n\nEntering the Lab\n\nStudents may have no food or drink of any kind in the lab during class (including candy and gum, but excluding bottled water). Students working or studying DURING LUNCH may bring their lunch to eat at the tables in the middle.\nBe seated and working when the bell rings.\n\n\n\nWorking in the Lab\n\nThere will be no horseplay or offensive language in the lab.\nIf you and your partner have a question, ask your neighbors. If they don’t know, then put your name on the help doc and continue to try to figure it out while you wait. This class is primarily about problem solving and students are expected to be putting in effort to solve their own problems at all times.\nAll students have a responsibility to help each other\nAll students should treat each other with respect.\nConversations in the lab should be primarily related to the study of computers.\nInstallation and downloading of programs is forbidden without express teacher approval.\nWhen using the Internet, be sure that you are on appropriate sites. See INTERNET USAGE WARNING above.\nCell phones, music players, and video games are never to be used in the computer lab and should be turned off or put away and silenced. If I see your phone, I will take it for the rest of the period. If this happens repeatedly I will turn it into the OCI at the end of the period and you will have to retrieve it from there.\nHandle computer equipment with care.\n\n\n\nExiting the Lab\n\nLeave the room as clean or cleaner than when you entered it.\nSave all work and log off of the computer.\nPush chairs under the tables.\n\nRemember: the use of the computer lab is for educational purposes only. If a student is using the computers during class time for something not related to the assigned work, disciplinary measures will be taken and your parents or guardians will be contacted."
  },
  {
    "objectID": "index.html#grading",
    "href": "index.html#grading",
    "title": "Home",
    "section": "Grading",
    "text": "Grading\nYour grade will be split into:\n\n60% Participation and Habit of Work\n\nThis will be measured by checkpoints/response forms, meeting behavior expectations (staying on task, not causing distractions, keeping phone out of sight), and attendance (see below).\n\n5% Computing in the News\n\nThis will be measured by contribution to the weekly “Computing in The News,” which will require one presentation per semester, and responses to all presentations given by classmates.\n\n25% Projects\n\nThis will be measured by performance on projects. Students are expected to meet specific requirements listed on the project specficifications and associated rubric.\n\n\nIn the second semester, this will also include both the practice Create Task and the actual Create Task, which is required of all students regardless of whether or not they plan to take the AP exam.\n\n10% Assessments\n\nThis will be measured by performance on assessments (which are given mainly at the end of each unit) and other quiz/testing tasks (such as AP test related preparation)\n\n\n\nLetter Grade\n\n90% and above is an A\n80% and above is a B\n70% and above is a C\n60% and above is a D\nunder 60% is an F"
  },
  {
    "objectID": "index.html#attendance",
    "href": "index.html#attendance",
    "title": "Home",
    "section": "Attendance",
    "text": "Attendance\nBeing in class and on-time is essential to learning. Often, important instructions and material will be presented at the start of class and it is 100% the student’s responsibility to be present to receive this information. If absent, it is the student’s responsibility to make up any missed projects or curriculum. Students should check their Google Classroom for assignments each day. Most assignments are project oriented and as such continue across a span of a few to many days. Students are responsible for any assignments missed while absent, unless otherwise agreed upon."
  },
  {
    "objectID": "posts/announcements/230816.html",
    "href": "posts/announcements/230816.html",
    "title": "Week 1 Announcements",
    "section": "",
    "text": "Welcome to the class! To get started, please first fill out the student information form in Google Classroom. We’re just asking you to fill this out so that we know more about you and so that you can know more about us!\nAs for other things to check, please look at at the general expectations on the home page. These will always be there for you to look at and you are expected to follow them. Please also check anything else that is already on Google Classroom."
  },
  {
    "objectID": "posts/announcements/bomb-game.html",
    "href": "posts/announcements/bomb-game.html",
    "title": "Bomb Game Instructions",
    "section": "",
    "text": "You’re alone in a room with a bomb. Your friends, the “Experts”, have the manual needed to defuse it. But there’s a catch: the Experts can’t see the bomb, so everyone will need to talk it out – fast!\nPut your puzzle-solving and communication skills to the test as you and your friends race to defuse bombs quickly before time runs out!\n(Taken from their website)\n\n\n\n\nIn the game, you’ll have a bomb on the “table”, and you have to defuse it with a partner\n\nHere’s the catch: the person who can see the bomb doesn’t have the instructions to defuse it and the person who has the instructions cannot see the bomb\nYour goal is to communicate effectively so that the defuser (driver) knows what to do with the bomb and the manual reader (navigator) knows what instructions to provide to the defuser.\n\n\n\n\n\nAt all the Mac computers, the game will be under the Applications folder (look for the folder with a triangle shape on the bottom right of the desktop menu bar)\nOn the other computer/your phone, have the bomb manual open. LINK TO THE BOMB MANUAL\nPlay the tutorial together so that everyone knows how to work with the bomb.\nAfter the tutorial is done, jump right into the game. At this point, the defuser (person on the game) should not be looking at the manual in any form; likewise the manual reader should not be looking at the game at all. The only way for you to know what’s going on in the other person’s side is to keep talking to each other."
  },
  {
    "objectID": "posts/announcements/bomb-game.html#about-the-game",
    "href": "posts/announcements/bomb-game.html#about-the-game",
    "title": "Bomb Game Instructions",
    "section": "",
    "text": "You’re alone in a room with a bomb. Your friends, the “Experts”, have the manual needed to defuse it. But there’s a catch: the Experts can’t see the bomb, so everyone will need to talk it out – fast!\nPut your puzzle-solving and communication skills to the test as you and your friends race to defuse bombs quickly before time runs out!\n(Taken from their website)\n\n\n\n\nIn the game, you’ll have a bomb on the “table”, and you have to defuse it with a partner\n\nHere’s the catch: the person who can see the bomb doesn’t have the instructions to defuse it and the person who has the instructions cannot see the bomb\nYour goal is to communicate effectively so that the defuser (driver) knows what to do with the bomb and the manual reader (navigator) knows what instructions to provide to the defuser.\n\n\n\n\n\nAt all the Mac computers, the game will be under the Applications folder (look for the folder with a triangle shape on the bottom right of the desktop menu bar)\nOn the other computer/your phone, have the bomb manual open. LINK TO THE BOMB MANUAL\nPlay the tutorial together so that everyone knows how to work with the bomb.\nAfter the tutorial is done, jump right into the game. At this point, the defuser (person on the game) should not be looking at the manual in any form; likewise the manual reader should not be looking at the game at all. The only way for you to know what’s going on in the other person’s side is to keep talking to each other."
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "Posts",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nBomb Game Instructions\n\n\n\n\n\n\n\nAnnouncement\n\n\nBomb Game\n\n\n\n\nThese are the instructions to the bomb game that we’ll be playing today.\n\n\n\n\n\n\nAug 21, 2023\n\n\nMr. Chang\n\n\n\n\n\n\n  \n\n\n\n\nWeek 1 Announcements\n\n\n\n\n\n\n\nAnnouncement\n\n\n\n\nFirst week announcements, checking up on the class and what to expect.\n\n\n\n\n\n\nAug 16, 2023\n\n\nMr. Chang and Ms. O’Keefe\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "snap-cheat-sheet.html",
    "href": "snap-cheat-sheet.html",
    "title": "Snap! Cheat Sheet",
    "section": "",
    "text": "This guide will show you how to match up the procedures in the AP exam language with the blocks in Snap!."
  },
  {
    "objectID": "snap-cheat-sheet.html#assignment-display-and-input",
    "href": "snap-cheat-sheet.html#assignment-display-and-input",
    "title": "Snap! Cheat Sheet",
    "section": "Assignment, Display, and Input",
    "text": "Assignment, Display, and Input\nThere are significant differences between the language used on the AP exam and Snap! in this section.\n\n\n  On the AP Exam\n  In Snap!\n  Notes\n\n  \n    a ← expression\n  \n  \n  \n    \n      In Snap!, you must first create a variable before you use assign it a value. You can use the  button in\n      the Variables palette to create a global variable or  to\n      create a local (script) variable.\n    \n  \n\n  \n    DISPLAY (expression)\n  \n  \n    \n    Variations on say:\n    \n    \n    \n    Another way to display:\n  \n  \n    \n      There are several ways to display data to the user in Snap!. One way is in the form of speech\n      balloons that are \"spoken\" by the sprites on the stage. Here is the behavior that results from running the\n      instruction say (expression):\n      \n    \n    \n      In Snap!, there are also variations on this block such as:\n    \n      say for ( ) secs, which will only display the message for a specified number of seconds, and\n      \n      think ( ) and think ( ) for ( ) secs, which both display the message as a\n        thought balloon rather than as a speech balloon, like this:\n        \n      \n    \n    \n    The write block is very different, but it's still a form of output to the user. It writes the\n      contents of the first input slot on the stage in the font size written in the second input slot.\n  \n\n  \n    INPUT ()\n  \n  \n    \n    \n  \n  \n    In Snap!, user input is always prompted by running an ask command. The user is asked\n      the question typed into the ask input slot, and their response can be accessed by using the\n      answer block, which can be placed in an input slot just like a variable."
  },
  {
    "objectID": "snap-cheat-sheet.html#arithmetic-operators-and-numeric-procedures",
    "href": "snap-cheat-sheet.html#arithmetic-operators-and-numeric-procedures",
    "title": "Snap! Cheat Sheet",
    "section": "Arithmetic Operators and Numeric Procedures",
    "text": "Arithmetic Operators and Numeric Procedures\nThere are no major differences between the language used on the AP exam and Snap! in this section.\n\n\n  On the AP Exam\n  In Snap!\n  Notes\n\n  \n    a + b\n    a – b\n    a * b\n    a / b\n  \n  \n    \n    \n    \n    \n  \n  \n    These blocks are straightforward. You can put any numeric expressions in the input slots, including numbers\n      or variables. For example:  or \n  \n\n  \n    a MOD b\n  \n  \n  \n    Same as above: You can use any numeric expressions as input. For example: \n    \n  \n\n  \n    RANDOM (a, b)\n  \n  \n  \n    Same as above: You can use any numeric expressions as input."
  },
  {
    "objectID": "snap-cheat-sheet.html#relational-and-boolean-operators",
    "href": "snap-cheat-sheet.html#relational-and-boolean-operators",
    "title": "Snap! Cheat Sheet",
    "section": "Relational and Boolean Operators",
    "text": "Relational and Boolean Operators\nThere is one difference between the language used on the AP exam and Snap! in this section: you will need to create some procedures yourself.\n\n\n  On the AP Exam\n  In Snap!\n  Notes\n\n  \n    a = b\n    a ≠ b\n    a &gt; b\n    a &lt; b\n    a ≥ b\n    a ≤ b\n  \n  \n    \n    There is no ≠ block.\n    \n    \n    There is no ≥ block.\n    There is no ≤ block.\n\n  \n  \n    The hexagonal block shape indicates that this is a predicate block; it only reports (returns)\n      true or false.\n    \n      There are no ≠ (not equal), ≥ (greater than or equal), or ≤\n      (less than or equal) blocks built into Snap!, but they are simple to build as needed:\n      ,\n      , and\n      .\n    \n  \n\n  \n    NOT condition\n  \n  \n  \n    Hexagonal input slots indicate that a predicate (true/false) expression (a\n      condition)is expected as input.\n  \n\n  \n    condition1 AND condition2\n  \n  \n  \n    Same as above: Hexagonal input slots require predicate inputs.\n  \n\n  \n    condition1 OR condition2\n  \n  \n  \n    Same as above: Hexagonal input slots require predicate inputs."
  },
  {
    "objectID": "snap-cheat-sheet.html#selection",
    "href": "snap-cheat-sheet.html#selection",
    "title": "Snap! Cheat Sheet",
    "section": "Selection",
    "text": "Selection\nThere are no major differences between the language used on the AP exam and Snap! in this section.\n\n\n  On the AP Exam\n  In Snap!\n  Notes\n\n  \n    \n      IF (condition)\n{\n&lt;block of statements&gt;\n}\n    \n  \n  \n  \n    \n      Here is an example of how the if statement could look in Snap! when it has a condition\n      and a sequence of statements:\n      \n    \n  \n\n  \n    \n      IF (condition)\n{\n&lt;first block of statements&gt;\n} \nELSE \n{\n&lt;second block of statements&gt;\n}\n    \n  \n  \n  \n    \n      Here is an example of how the if else statement could look in Snap! when it has a\n      condition and two sequences of statements:"
  },
  {
    "objectID": "snap-cheat-sheet.html#iteration",
    "href": "snap-cheat-sheet.html#iteration",
    "title": "Snap! Cheat Sheet",
    "section": "Iteration",
    "text": "Iteration\nThere are no major differences between the language used on the AP exam and Snap! in this section.\n\n\n  On the AP Exam\n  In Snap!\n  Notes\n\n  \n    \n      REPEAT n TIMES\n{\n&lt;block of statements&gt;\n}\n    \n  \n  \n  \n    \n      Here is an example of how the repeat statement could look in Snap! when it has an input\n      number and a sequence of statements:\n      \n      \n    \n  \n\n  \n    \n      REPEAT UNTIL (condition)\n{\n&lt;block of statements&gt;\n}\n    \n  \n  \n  \n    \n      Here is an example of how the repeat until statement could look in Snap! when it has an\n      input number and a sequence of statements:"
  },
  {
    "objectID": "snap-cheat-sheet.html#list-operations",
    "href": "snap-cheat-sheet.html#list-operations",
    "title": "Snap! Cheat Sheet",
    "section": "List Operations",
    "text": "List Operations\nThere are only small differences in wording and structure between the language used on the AP exam and Snap! in this section.\n\n\n  On the AP Exam\n  In Snap!\n  Notes\n\n  \n    list[i]\n  \n  \n    \n    For example,\n    \n    \n  \n  \n    \n      You can tell what kind of input is expected in each input slot of a block in Snap! by its shape. For\n      example,  takes a number as its first input (indicated by the round input\n      slot) and a list as its second input (indicated by the small picture of a list): \n      \n      In addition, there is a drop-down menu for the first input slot allowing you to select the first, the last, or\n      a random item from the list instead of typing a number or dragging and dropping a variable in.\n    \n  \n\n  \n    list[i] ← list[j]\n  \n  \n  \n    At first glance, this looks a little different on the exam than in Snap!, but if you read the\n      Snap! out loud, it is clear what it does: It replaces the item at position number i in the\n      list with the item at position number j in the list.\n    \n      Here's an example:\n      \n    \n  \n\n  \n    list ← [value1, value2, value3]\n  \n  \n  \n    In Snap!, it's recommended not to name any variable list because there is a block called\n      list that creates new lists. Here are some examples of better list names (really, anything but\n      \"list\" is fine; that variable name is only shown at left to match the AP Exam reference sheet):\n      \n      \n    \n  \n\n  \n    \n      FOR EACH item IN list\n{\n&lt;block of statements&gt;\n}\n    \n  \n  \n  \n    You can change the name of the first variable by clicking it.\n    \n      Here is an example of how the for each  statement could look in Snap! when it has a real\n      list name and a statement inside:\n      \n    \n  \n\n  \n    INSERT (list, i, value)\n  \n  \n  \n    The insert command in Snap! works the same as the\n      INSERT procedure in the language on the AP exam; only the order of the inputs is\n      different.\n    \n  \n\n  \n    APPEND (list, value)\n  \n  \n  \n    The Snap! add command works like the\n      APPEND procedure; only the order of inputs is different.\n    \n  \n\n  \n    REMOVE (list, i)\n  \n  \n  \n    The Snap! delete command works like the\n      REMOVE procedure; only the order of inputs is different.\n    \n  \n\n  \n    LENGTH (list)\n  \n  \n  \n    \n      Note that Snap! has two length blocks:\n    \n      a \"List\" length block for measuring lists: \n        and\n      an \"Operators\" length block for measuring strings: \n    \n    You can tell them apart by the palette they are in (Variables or Operators), their color, and the shape of their\n    input slot (a tiny picture of a list or a white typing slot for words)."
  },
  {
    "objectID": "snap-cheat-sheet.html#procedures",
    "href": "snap-cheat-sheet.html#procedures",
    "title": "Snap! Cheat Sheet",
    "section": "Procedures",
    "text": "Procedures\n\n\n  On the AP Exam\n  In Snap!\n  Notes\n\n  \n    \n      PROCEDURE name (parameter1, parameter2, ...)\n{\n&lt;instructions&gt;\n}\n    \n  \n  Empty command block definition\n  \n    In Snap!, procedures that do something are called commands. Command blocks have a\n      rectangular, puzzle-piece shape because they are instructions to the computer designed to be snapped together\n      one after another.\n    \n      When you make a block, you choose the name of the block, the input parameters, and the palette it should\n      appear in (the color). Then you design the instructions that will run when the block is clicked. Here is an\n      example of what a real command block definition might look like in Snap!:\n      \n    \n    You can learn more about making block and adding inputs on the Snap! Cheat Sheet.\n  \n\n  \n    \n      PROCEDURE name (parameter1, parameter2, ...)\n{\n&lt;instructions&gt;\nRETURN expression\n}\n    \n  \n  Empty reporter block definition\n  \n    In Snap!, procedures that report (return) a value are called reporters. Reporter\n      blocks have a rounded shape and they can either be clicked to report a value to the programmer or they can be\n      dropped into an empty input slot of another block to be used as input.\n    When you make a reporter block, the block definition automatically includes a report block. The\n      value of the expression in the input slot of this report block is the value that is returned when\n      the reporter is run.\n    \n      Here is an example of what a real reporter block definition might look like in Snap!:"
  },
  {
    "objectID": "snap-cheat-sheet.html#robot",
    "href": "snap-cheat-sheet.html#robot",
    "title": "Snap! Cheat Sheet",
    "section": "Robot",
    "text": "Robot\nThese blocks do not exist in Snap!, but Snap! has something similar: sprite motion. The big difference is that the robot blocks in the AP language work on a grid, so the robot can move only vertically or horizontally. In Snap!, sprites move much more flexibility, but you can use Snap! blocks to simulate robot motion.\n\n\n  On the AP Exam\n  Notes on Recreating in Snap!\n\n  \n    MOVE_FORWARD ()\n  \n  \n    In Snap!, you can use the  block to move the sprite forward any number of steps.\n    On the exam, you can't give\n      MOVE_FORWARD () an input, so if you want to move more than one grid square, you have\n      to call the procedure repeatedly.\n    \n    You can use the move block in Snap! to simulate the AP\n      MOVE_FORWARD () procedure: Just use an input that is exactly the same size as the\n      side length of the squares in your grid.\n    \n  \n\n  \n    ROTATE_LEFT ()\n    ROTATE_RIGHT ()\n  \n  \n    In Snap!, you can use the  and \n      blocks to turn the sprite any number of degrees.\n    On the exam, you can't give\n      ROTATE_LEFT () or\n      ROTATE_RIGHT () an input; these AP procedures always turn exactly 90 degrees since\n      they are used only to move a robot in a grid.\n    \n    You can use the turn ↺ or turn ↻ blocks in Snap! to\n      simulate the AP\n      ROTATE_LEFT () or\n      ROTATE_RIGHT () procedures: Just use 90 degrees as the input.\n    \n  \n\n  \n    CAN_MOVE (direction)\n  \n  \n    In Snap!, there are several ways to detect what is around the sprite, but since\n      there is no robot, there is nothing quite like\n      CAN_MOVE (direction), which returns true or false depending on whether or not the\n      robot can move in that direction without running into a wall or walking off of the maze.\n    \n    \n      In Snap!, you can use these blocks to help your sprites determine how to move:\n      ,\n      , and"
  },
  {
    "objectID": "unit-1/index.html",
    "href": "unit-1/index.html",
    "title": "Unit 1: Introduction to Programming",
    "section": "",
    "text": "Unit 1 is essentially an introduction to the programming that you will be working with throughout the year. In this unit, you’ll learn how to interact with sprites, how to create blocks, and iteration. In addition to these computational ideas, you’ll learn about privacy in the physical and digital realm."
  },
  {
    "objectID": "unit-1/lab-1/1-creating-a-snap-account.html",
    "href": "unit-1/lab-1/1-creating-a-snap-account.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "On this page, you’ll learn how to create your own account and how to log in and out."
  },
  {
    "objectID": "unit-1/lab-1/1-creating-a-snap-account.html#creating-an-account",
    "href": "unit-1/lab-1/1-creating-a-snap-account.html#creating-an-account",
    "title": "Page 1: Getting Started with Snap!",
    "section": "Creating an Account",
    "text": "Creating an Account\n\n\nIf you haven’t already opened Snap!, open it now: http://snap.berkeley.edu/run\n\n\n\nIn the Snap! window, click the Cloud menu (), , select “Signup…”, and follow the instructions.\n\nPlease use your first name somewhere in your username. Do not just use your random non-sensical “handle” that you might use in a game, but rather something that we can easily know who is who based off the username.\n\n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\nYou may change your password at any time using the Cloud menu, ."
  },
  {
    "objectID": "unit-1/lab-1/1-creating-a-snap-account.html#logging-in-to-and-out-of-your-snap-account",
    "href": "unit-1/lab-1/1-creating-a-snap-account.html#logging-in-to-and-out-of-your-snap-account",
    "title": "Page 1: Getting Started with Snap!",
    "section": "Logging In to and Out of Your Snap! Account",
    "text": "Logging In to and Out of Your Snap! Account\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\nIf it says someone else’s user name, then log them out and log in with your own user name.\nOtherwise, choose “Login…” and enter your user name and password.\n\n\nClick to the next page to continue (navigation at the bottom of the page, or the left side bar)\n\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-1/lab-1/2-start-your-first-snap-app.html",
    "href": "unit-1/lab-1/2-start-your-first-snap-app.html",
    "title": "Page 2: Programming a Game",
    "section": "",
    "text": "On this page, you’ll build a simple game in which the player tries to click a character that’s jumping around."
  },
  {
    "objectID": "unit-1/lab-1/2-start-your-first-snap-app.html#making-a-character-move",
    "href": "unit-1/lab-1/2-start-your-first-snap-app.html#making-a-character-move",
    "title": "Page 2: Programming a Game",
    "section": "Making a Character Move",
    "text": "Making a Character Move\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\nSaving a Snap! Project\nChoose “Save” from the Snap! File menu, .\n\n\n\n This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window.\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n \nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n  \nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\nIt’s a good idea to save your project every so often.\n\n\nChoose “Save” from the Snap! File menu, ."
  },
  {
    "objectID": "unit-1/lab-1/2-start-your-first-snap-app.html#making-the-game-challenging",
    "href": "unit-1/lab-1/2-start-your-first-snap-app.html#making-the-game-challenging",
    "title": "Page 2: Programming a Game",
    "section": "Making the Game Challenging",
    "text": "Making the Game Challenging\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\nA bunch of blocks clicked together is called a script.\n\n\nAttach this to the bottom of your Alonzo script: \n\n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?\n\n\n\n Checkpoint: Fill out this Google Form \n      \n        \n          \n              \n                  \n              \n              Loading…\n              \n                  Close"
  },
  {
    "objectID": "unit-1/lab-1/3-loading-mobile-device.html",
    "href": "unit-1/lab-1/3-loading-mobile-device.html",
    "title": "Page 3: Sharing Your Game",
    "section": "",
    "text": "The game isn’t nearly finished, but it’s finished enough. On this page, you will be able to share your project, with your partner, friends, family, and teacher.\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it."
  },
  {
    "objectID": "unit-1/lab-1/4-keeping-score.html",
    "href": "unit-1/lab-1/4-keeping-score.html",
    "title": "Page 4: Giving the Player Feedback",
    "section": "",
    "text": "Now the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing."
  },
  {
    "objectID": "unit-1/lab-1/4-keeping-score.html#confirming-whether-alonzo-was-clicked",
    "href": "unit-1/lab-1/4-keeping-score.html#confirming-whether-alonzo-was-clicked",
    "title": "Page 4: Giving the Player Feedback",
    "section": "Confirming Whether Alonzo Was Clicked",
    "text": "Confirming Whether Alonzo Was Clicked\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n: Sprites and Costumes\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\nThe other two are costumes, picture that can be “worn” by a sprite.\n\n\n\nProgram Alonzo to face the other way when clicked.  \n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked."
  },
  {
    "objectID": "unit-1/lab-1/4-keeping-score.html#keeping-score",
    "href": "unit-1/lab-1/4-keeping-score.html#keeping-score",
    "title": "Page 4: Giving the Player Feedback",
    "section": "Keeping Score",
    "text": "Keeping Score\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game."
  },
  {
    "objectID": "unit-1/lab-1/4-keeping-score.html#making-the-game-more-challenging",
    "href": "unit-1/lab-1/4-keeping-score.html#making-the-game-more-challenging",
    "title": "Page 4: Giving the Player Feedback",
    "section": "Making the Game More Challenging",
    "text": "Making the Game More Challenging\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder."
  },
  {
    "objectID": "unit-1/lab-1/4-keeping-score.html#ending-the-game",
    "href": "unit-1/lab-1/4-keeping-score.html#ending-the-game",
    "title": "Page 4: Giving the Player Feedback",
    "section": "Ending the Game",
    "text": "Ending the Game\n\nWhen Alonzo is completely transparent, the game should stop.\n\nAdd this code to the right place in your script to end the game. \n\n Checkpoint: Fill out this Google Form \n      \n        \n          \n              \n                  \n              \n              Loading…\n              \n                  Close"
  },
  {
    "objectID": "unit-1/lab-1/5-finish-your-first-snap-app.html",
    "href": "unit-1/lab-1/5-finish-your-first-snap-app.html",
    "title": "Page 5: Improving Your Game",
    "section": "",
    "text": "There’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\nMake that message disappear when the player clicks on Alonzo.\n\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\nCheck that your app does everything you want:\n\nWhen the green flag is clicked, Alonzo should welcome the player.\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked.\n\n\n Checkpoint: Fill out this Google Form \n      \n        \n          \n              \n                  \n              \n              Loading…\n              \n                  Close"
  },
  {
    "objectID": "unit-1/lab-1/index.html",
    "href": "unit-1/lab-1/index.html",
    "title": "Lab 1: Click Alonzo Game",
    "section": "",
    "text": "Instructions in these pages are always given very concretely. Please follow the steps closely.\n\n\nIn this lab, you’ll learn the basics of the Snap! programming language by programming an app that you can share with others."
  },
  {
    "objectID": "unit-1/lab-2/1-pair-programming.html",
    "href": "unit-1/lab-2/1-pair-programming.html",
    "title": "Page 1: Pair Programming",
    "section": "",
    "text": "On this page, you will learn about collaborating by using pair programming.\n\nIn the early days of computers, programming was something you did alone. You planned the program in your head, and then you sat down and wrote the code.\nThe programs people write these days are far too complicated for that. Graphical user interfaces, interacting with servers on the Internet, internationalization, security against malware attacks, and many more requirements are part of a serious software development effort, and a program is likely to have hundreds of authors.\nThis means that collaboration skills are as important as coding skills today. Even if you don’t end up working as a programmer, collaboration is part of most jobs.\nWe’ll watch this video in class together, but here it is in case you want to watch it again:\n\nThere are several ways to organize a collaboration. In this course, you’ll use a collaboration technique called pair programming—writing computer programs in teams of two. One partner, the driver, controls the computer. The other, the navigator, helps catch errors and keeps track of how the code being written fits into the overall plan. The navigator is also in charge of reading the lab pages out loud. Aim for equal time in each role, switching about every five minutes.\n\nHow not to do pair programming:\nThe biggest mistake in pair programming is for the navigator to tune out and let the driver do all the work. The navigator has to be paying attention; otherwise you’re just taking turns doing the entire work instead of making use of the benefits of having two people.\n\n\nHow to collaborate in pair programming\n\nKeep talking. The driver should constantly explain the reason for using each block. The navigator should interrupt with questions: What about doing it this other way? How does this program avoid such-and-such bug? Don’t we have to deal with this requirement and that requirement at the same time? We’re pretty much repeating this other piece of code over there; could we hide that code in a block and use the same block in both places? And so on.\nListen. Try to understand each other’s thinking before you disagree.\nWork as a team. If you find yourself being defensive about feedback, remember that nobody’s code is perfect right away. It’s the navigator’s job to find problems in the driver’s code, and when you switch places, the new navigator will repay the favor. You’re a team, not a competition.\nWork toward consensus. Don’t bargain; if you have disagreements about how something should be done, don’t say “well, you can do this your way if I can have this other thing my way.” Both partners should listen to each other’s reasons and work together to find a solution that meets both needs.\nSpeak your mind and work out your differences. That doesn’t mean you should try to disagree, but if you do, you can still be friends. Work out the conflict by listening and understanding each other, rather than by giving in just to end the argument.\nRegardless of experience, take turns. Don’t let the more experienced programmer overwhelm the other partner. Make sure both partners are comfortable contributing, in either role. A group is almost always better at problem-solving than any of the people in the group is alone.\n\nIn the first unit, we’ll use these symbols to remind you to switch roles at specific points in the lab. After this unit, you’re on your own to be sure to switch about every five minutes.  \nIf you are working with a partner, make sure you both have access to the project. It is your responsibility to make sure that you can access the project if your partner is absent the next day.\n\n\nSaving a Copy of a Project\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\nYour teacher will hand out instructions for the Lost on the Moon game."
  },
  {
    "objectID": "unit-1/lab-2/2-gossip.html",
    "href": "unit-1/lab-2/2-gossip.html",
    "title": "Page 2: Making Programs Talk",
    "section": "",
    "text": "On this page, you will experiment with an existing program as an introduction to the project."
  },
  {
    "objectID": "unit-1/lab-2/2-gossip.html#exploring-custom-blocks",
    "href": "unit-1/lab-2/2-gossip.html#exploring-custom-blocks",
    "title": "Page 2: Making Programs Talk",
    "section": "Exploring Custom Blocks",
    "text": "Exploring Custom Blocks\n\n\n\n\n\nYou’ll need to be logged in to save to your account. You know that you’re logged in if you see a filled in cloud at the top right of the Snap! toolbar .\nYou may wish to review how to log in at Unit 1 Lab 1 Page 1: Getting Started with Snap!\n\n\nPerform each experiment (A-D) several times.\n\n\nWhat does each reporter block report?   \nWhat happens when you click this script (labeled D)? \n\n\n\n\n\nThere is nothing exactly like  or  on the AP Exam because they don’t have sprites and speech balloons, but their way of showing this text to the user is\nDISPLAY(gossip())\nif it’s written as text or  if it’s shown as blocks.\n\nYou won’t have to be able to write code in this notation on the AP exam. You just have to be able to read it so you can answer questions about it.\n\n\nWould you like to make the blocks bigger?\n\nIn the Settings menu (), choose “Zoom blocks…”, and adjust the slider.\n\n\n\nAbstraction is the most fundamental idea in computer science, but it’s hard to define until you’ve seen some examples. The most basic kind of abstraction is to give a name to something in a program. For example, here we gave the name who to the idea “pick an item at random from this list of people (or cats).” This is called procedural abstraction because we use a procedure (a block) to name the idea. This makes your code readable. You’ll see other kinds of abstraction later.\n\nIf you find yourself wanting to copy and paste code from one place to another without changing it, then give it a name (open a Block Editor and paste the code there) and call your procedure in both places. If you discover later on that you need to fix a bug in this code, you only have to change it once instead of finding every copy throughout your program."
  },
  {
    "objectID": "unit-1/lab-2/2-gossip.html#exploring-a-second-sprite",
    "href": "unit-1/lab-2/2-gossip.html#exploring-a-second-sprite",
    "title": "Page 2: Making Programs Talk",
    "section": "Exploring a Second Sprite",
    "text": "Exploring a Second Sprite\n\n\n In the sprite corral, click on the green sprite named “Sprite(2)” to control its scripts and costumes. \nPerform each experiment (A-C) several times.\n Write down what broadcast does.\n Discuss how who2 compares to who and how gossip2 compares to gossip.\n Make Sprite(2) tell Sprite to respond. What happens?\n\nThe broadcast block sends a message to all the sprites. To set the message, click the down arrow and select “new…” \nFor more information about the when I receive block, right-click (or control-click on a Mac) the block and select “help…”"
  },
  {
    "objectID": "unit-1/lab-2/3-customizing.html",
    "href": "unit-1/lab-2/3-customizing.html",
    "title": "Page 3: Customizing and Debugging",
    "section": "",
    "text": "On this page, you will edit the word lists used by the sprites and debug any problems.\n\n\n\nOpen your U1L2-Gossip project. Edit these three reporter blocks to change the phrases that the program uses. (See the instructions in the box below.) Be creative and funny but thoughtful.   \n\n\nHow to Edit a Block\n\nFind the block in the scripting area or the colored palettes on the left.\nControl-click (or right-click) on the block and choose “edit…”\nMake changes to the block’s internal code. (Instructions are already inside these blocks.)\nClick OK when you’re satisfied. (Or click “Cancel” if you don’t want to make changes.)\n\n\n\nBrian, you need to redo this video with the plus signs on and with the space before the 2 in who 2 (start from the starter file, please). –MF, 6/15/20\n\nClick for a video of these steps of how to edit a block.\n\n\n\n\n\n\n\n\n\n\n\nWhy do these blocks use ? Why not just use ?\n\nThe report and say blocks mean very different things. Report tells something to the computer, and that value can be used as input to another block, such as the join block inside gossip. Say just shows a value to the user in a speech bubble.\n\n\n\n: Lists, Strings, and Concatenation\n\nWhat does “ordered” mean?\n\nIt doesn’t mean that the items have to appear in alphabetical or numeric order. It just means that  is a different list from .\n\n\n\nA list is an ordered sequence of items. You’ve seen this example: \nThe items of this list are strings. A string is a sequence of characters (letters, digits, punctuation, etc.). A substring is just a piece of some existing string. For example, “Hanna,” “anna”, and “nnah” are each substrings of the string “Hannah.” (The empty string as well as the original string are both also substrings.)\nTo concatenate strings means to make a bigger string by connecting two or more smaller strings. In Snap!, the  block lets you concatenate strings.\n\n\n\n\nThe process of testing, finding problems, and fixing them is called debugging.\n\n\nMake sure your program works. Test each block as well as the program as a whole. If something doesn’t work, don’t go on without fixing it.\n\n\n\n\n\n\nWhich two of the following sentences could be reported by gossip? \n\nFor reference:  \n\n\n\n\nSeñora and Ms. C helped.\n\n\nIt’s true that there are two people (two “who”s) and one action (one “does what”), but they aren’t in the right order. Also, the word “and” isn’t anywhere in the program.\n\n\n\n\nSeñora ran away from my cat.\n\n\nCorrect! This follows the pattern: “who,” “does what,” “who.”\n\n\n\n\nHannah listened to Hannah.\n\n\nCorrect! This follows the pattern: “who,” “does what,” “who.”\n\n\n\n\nJake helped.\n\n\nThis sentence is missing the second “who.”\n\n\n\n\n\n\n\n\n\n\n\nChange the costumes to anything you like.\n\n\nAdding a Costume\n\n\nIn the sprite corral, select the sprite you want to give costumes to.\n\n\nChoose “Costumes…” from the File () menu.\n\n\nChoose a costume.\n\n\nClick “Import.”\n\n\nClick “Cancel” to close the dialog box.\n\n\n\n\nYou can use a photograph or picture from the Internet by dragging the image onto the Snap! window.\n\n\nFix any issues with your costumes.\n\n\nAdjusting a Costume\n\nYou can change the size of your sprite using .\nYou can change the position of your sprite using .\nYou can change the direction your sprite is facing: \n\n\n\n Checkpoint: Fill out this Google Form \n      \n        \n          \n              \n                  \n              \n              Loading…\n              \n                  Close\n              \n          \n        \n      \n\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nChange the background on the Stage.\n\nAdding a Stage Background\n\nChanging a stage background is almost like changing a costume.\n\n\n\nIn the sprite corral, select the stage.\n\n\nChoose “Backgrounds…” from the File () menu.\n\n\nChoose a background.\n\n\nClick “Import.”\n\n\nClick “Cancel” to close the dialog box."
  },
  {
    "objectID": "unit-1/lab-2/4-making-a-new-block.html",
    "href": "unit-1/lab-2/4-making-a-new-block.html",
    "title": "Page 4: Making Your Own Block",
    "section": "",
    "text": "On this page, you will create a new block to make the program feel more like a conversation."
  },
  {
    "objectID": "unit-1/lab-2/4-making-a-new-block.html#debugging",
    "href": "unit-1/lab-2/4-making-a-new-block.html#debugging",
    "title": "Page 4: Making Your Own Block",
    "section": "Debugging",
    "text": "Debugging\n\n\n\nTest your custom gossip response block by clicking it several times. It should behave like the who, does what, and who 2 blocks. Debug any problems before moving on.\n\n\nReview how to edit a block in Unit 1 Lab 2 Page 2: Customizing and Debugging, if needed.\n\n\nUse your new block: Edit gossip 2, and insert gossip response in place of the text “Oh, but….” \n\n\nWhy do I see plus signs around gossip 2 in Snap! but they’re not in this picture?\n\nNormally, when you are using the Block Editor, you see plus signs because you have to click on them to add inputs to your blocks. But to show you the finished code here, it looks cleaner without the plus signs.\n\n\n\nTest and debug gossip 2 also.\nThen test the whole program by clicking script D several times, and fix any bugs."
  },
  {
    "objectID": "unit-1/lab-2/5-if-else.html",
    "href": "unit-1/lab-2/5-if-else.html",
    "title": "Page 5: Adding Variety to Gossip",
    "section": "",
    "text": "On this page,  you will improve your program so that sometimes the sentences are a bit longer and more complex.\nThe block  has been built for you (look through the blocks to find it) (hint: what colour is this block? where are all blocks of that colour contained?). It randomly chooses 1, 2, 3, or 4, and if that number is 3, then it reports something more complicated than who. Otherwise, it reports who, just as before."
  },
  {
    "objectID": "unit-1/lab-2/5-if-else.html#making-a-block-call-itself",
    "href": "unit-1/lab-2/5-if-else.html#making-a-block-call-itself",
    "title": "Page 5: Adding Variety to Gossip",
    "section": "Making a Block Call Itself",
    "text": "Making a Block Call Itself\n\n\nEdit more complicated who. Replace one of the who blocks with a fresh copy of more complicated who that you drag in from the palette. Click more complicated who enough times to see how it has changed.\nDiscuss the the change in behavior with your partner, and explain what you think is causing it.\n Checkpoint: Fill out this Google Form \n      \n        \n          \n              \n                  \n              \n              Loading…\n              \n                  Close\n              \n          \n        \n      \n\n\n\n\nMake Sprite(2) occasionally give a more complicated reply.\n\n\n\nPurple “Take It Further” boxes have more challenging activities that are not required. If you finish everything else on the page early, try these instead of jumping ahead to the next page.\n\n\n\n\nMake more complicated who give the more complicated response three out of four times instead of one out of four times.\n\n\nWhat happens when you try it out? Was it what you expected? Explain why it happened."
  },
  {
    "objectID": "unit-1/lab-2/index.html",
    "href": "unit-1/lab-2/index.html",
    "title": "Lab 2: Gossip",
    "section": "",
    "text": "In this lab, you will program two sprites to gossip."
  },
  {
    "objectID": "unit-1/lab-3.5/index.html",
    "href": "unit-1/lab-3.5/index.html",
    "title": "Lab 3.5: Row of Houses",
    "section": "",
    "text": "In this project, you’ll use abstractions inside of abstractions to build a row of houses. \n\nWhen you finish, make sure to  Turn in your Project \n      \n        \n          \n              \n                  \n              \n              Loading…\n              \n                  Close\n              \n          \n        \n      \n\n\n\n“U1L35-Row-of-Houses”\n\nCreate a draw square block that takes a size as input. Be sure to test it with different inputs.\n\nYou learned how to create a block with an input on Lab 3 Page 3: Blocks with Inputs.\n\n \n\nClick to see one way to build draw square without an input.\n\n\n\n\nUsing draw square as an example of where to start, create and test a draw triangle block that takes a size as input and draws an equilateral triangle.\n\nYou learned about turning angles on Unit 1, Lab 3, Page 2, Angles and Turning.\n\n \nNow, use draw square and draw triangle together to create a draw house blocks that takes a size as input and draws a house shape: a square with a triangular shaped roof sitting on top.\n\nYou might have to do some debugging to get the two shapes to connect properly.\n\n \n\n\n\nUsing a block inside another block is a form of abstraction.\n\n\n\nUse your draw house block together with repeat to create a draw row of houses block that draws a row of number attached houses (each of the same size) with each new one to the right of the previous.  \nUse your draw row of houses block together with repeat to create a draw group of houses block that draws a rows by cols amount of houses (each of the same size) in one place with each row below the previous row.  \n\n\nWe learned about the pick random block on Unit 1, Lab 2, Page 5: Adding Variety to Gossip.\nIt is a reporter block that reports a random number within the range of numbers that you specify.\n\n\nUse your draw group of houses block together with repeat and pick random to create a draw town of houses block that draws a groups number of groups of houses all of a random amount of houses (each of the same size) in random places (try to make sure they don’t overlap!) \n\n\n\n\n\nHouses aren’t really stuck next to each other like in the examples that we gave! Edit the draw row of houses and draw group of houses block so that there are gaps between the houses.\nCustomize the look of your houses by editing the code of your draw house block. Things that you can add to the houses include:\n\nWindows, doors, garages, greenery, etc.\nConsider breaking it down first. e.g., create a block draw window that only draws a window then add the block into the draw house block.\n\nCreate a better way of generating groups of houses. Edit draw group of houses so that it uses pick random to create a group of houses that can have houses missing (i.e. make it look more “natural”) \n\n\n\n\n\nUse your draw square block to create a draw flower with square petals block that will draw a flower with square petals with any specified number of petals of the specified size.\n \n\n\nAfter you’ve worked on this for a bit, take a moment to look at what others have done. If you see something you like, think how you could use that idea in your program.\n\n\nNow, draw a field of flowers and give each flower a different size, number of petals, and position.\n\nYou will need to use .\n\n\n\n\n\nMake sure to turn in your project!  Turn in your Project \n      \n        \n          \n              \n                  \n              \n              Loading…\n              \n                  Close"
  },
  {
    "objectID": "unit-1/lab-3/1-exploring-motion.html",
    "href": "unit-1/lab-3/1-exploring-motion.html",
    "title": "Page 1: Exploring Motion",
    "section": "",
    "text": "On this page, you will explore the basics of drawing a shape in Snap! by using the repeat block to loop through the same code multiple times.\n\n\n: Algorithm and Pseudocode\nAn algorithm is a sequence of steps that are usually performed by a computer. The algorithm doesn’t have to be written in any particular programming language or even in a programming language at all; you can write your algorithm in English or any other human language. Some people call an algorithm written in human language pseudocode. Once you know the steps that the computer will take, you can code your algorithm in the programming language of your choice.\n\nWhat’s the purpose of “pseudocode”? Why write an algorithm vaguely in English when you could write it precisely in Snap!? If you were programming in a punctuation-heavy language, designing your program in pseudocode would help you focus on the important ideas instead of on details like quotation marks and semicolons. But pseudocode isn’t as necessary with a language like Snap!, and pseudocode can make it easy for you to fall into wishful thinking about what the computer is capable of (such as writing “Pick tomorrow’s winning lottery numbers” or “Here’s the melody; write the harmony”).\n\n\n\n\n  Describe what this algorithm will make the sprite do: \n\nLog in to Snap! and build that script to test your hypothesis.\n\nClick it, and watch what the sprite does.\nClick , and then click your script to run it again.\n\n\n\nYou can click pen down (or any block) in the palette on the left or in the scripting area to run it. If you click a block inside a script, the whole script runs.\n\n\n Analyze why that script does what it does.\nCompare your work with another pair. If your script behaves differently from theirs, check both.\n\n\nUsing Visible Stepping\nSnap! has a tool called Visible Stepping that allows you to control how quickly Snap! steps through the blocks of your code.\n\nClick the Visible Stepping button (), and adjust the slider to control the stepping speed. When you run your code, the sprite will slowly execute each step of the code and highlight it in cyan.\n\n\nClick for a video of adjusting the Visible Stepping slider.\n\n\n\n\n\nYou can slow the stepping to do only one step at a time and wait until you tell Snap! to go on to the next one. Move the slider all the way to the left, and then you can press the Run/Pause button () to see what happens at each step of your code.\n\n\nClick for a video of single-stepping through code.\n\n\n\n\nVisible stepping can be useful as you read someone else’s code because you can watch it at human speed instead of computer speed. It’s also useful in debugging (fixing problems with) your own code when it’s doing something wrong.\n\n\nExperiment:\n\n\n\nYou can put your sprite back in the center of the screen with  and you can reset the direction it’s pointing with .\n\n\nChange 100 to 50 in the move block of your script by clicking on the 100 and typing 50. Then click the script again to run it with the new input value.\n\n\nClick the  block in the green Pen palette.\n\n\nChange the number in the turn block and run the script again… and again… and again.\n\n\nClear the stage again, and change the number in the  block.\n\n\nExperiment with the input numbers in the turn and repeat blocks. Try to draw a triangle with equal sides.\n\n\nUse  to set the pen size to something like 4 or 10 or 50. Then click your repeat, move, turn script again.\n\n\nTo change the pen size you must click the set pen size block to run it after you’ve entered the number you want.\n\n\nUse  to experiment with the pen color.\n\n\n\n\n\n\n\nExperiment: What leaves a trace?\n\nMove the sprite by dragging it to a new location. Does it leave a trace as you move it?\nMove the sprite by clicking on . Does it leave a trace as it moves?\nDoes clicking  leave a trace?\n\n\n\n\nMake sure your other work has been saved, then  Experiment with the scripts and look inside them to figure out how they work. Could you change the sizes or colors to make it more interesting?\n\n\n\n\n   \n\n\n\n\nSolid rectangles. Make and run this script:  The light blue set block is in the Sensing palette, where it looks like . Just click once in the hexagonal slot to get True (the green check box). If you’re not sure what difference the “flat line ends” makes, try clicking the hexagonal slot again to run the script with that option False. And of course you can change all the numbers, or have your program pick random numbers.\n\n\nColor families. Click the file menu icon and select “Libraries…” Then, find the “Colors and Crayons” library and click “Import.”   In the Pen menu you’ll find the set pen to crayon block. Computers can display billions of colors, but unless you have to match the paint on your wall very precisely, finding your way through all those colors may be more trouble than it’s worth. The crayon library, just like a box of crayons, gives you a small set of vibrant colors, arranged in families. So if you want a lot of browns in your picture, you could pick a random number between 30 and 39. \n\n\n\nAt the right is a painting by Kazimir Malevich. Its elements are rectangles, either horizontal or at a 45-degree angle, plus or minus a few degrees. You can position rectangles randomly. Your picture doesn’t have to look like his—you’re the artist!\n\n\nAlphie: If we just put rectangles in randomly, the tiny square dots will often be covered by larger ones. Maybe we should do big ones first and smaller ones later.\n\n\nGamal: I know ours don’t have to look like the original, but I really like that huge black horizontal rectangle. It gives the painting a structure, with a top part and a bottom part, even though it doesn’t go all the way across. I want to make sure to have one like that.\n\n\nBetsy: I bet we can use the idea of drawing really thick lines without using flat line ends and get interesting results:\n\n\n\n\n\n\nAt the right is a painting by Theo van Doesburg. It has some things in common with the Malevich picture, mainly the use of rectangles as the design elements. But there are no 45-degree rectangles; instead, the constraint is that rectangles may not overlap, so if you want to place a random rectangle in the picture, each end may have to be shortened to avoid collisions. You can use  to find out if the point behind the sprite’s rotation center is black."
  },
  {
    "objectID": "unit-1/lab-3/2-exploring-snap-drawing-motion.html",
    "href": "unit-1/lab-3/2-exploring-snap-drawing-motion.html",
    "title": "Page 2: Angles and Turning",
    "section": "",
    "text": "On this page, you will learn about sprite turning angles, which are needed for drawing polygons. For starters, you’ll draw various asterisks, like these:    \n\nWhen you were trying to draw an equilateral triangle on the previous page, you might have tried code like this:  and seen a result like this:  It’s common to try this if you’ve learned that the angles in an equilateral triangle are all 60 degrees. However, the angle that the sprite needs to turn to make a triangle is actually 120 degrees, and it’s important to understand why that is and how to find the correct angle for other polygons (five-sided, eleven-sided, etc.).\n\n\n\nPerform the four experiments (A-D), and read the comments attached to each one. As you do, talk with your partner about what you see and why it happens.\nThen, experiment with the last script (shown right): \n\nExperiment with a quarter turn (turn 90 degrees instead of 180). Adjust the number of repetitions (the number you give to repeat) until you get the sprite to finish facing the same way it started. \nExperiment with a tenth of a turn (turn 36 degrees). What input must you give to repeat to get the sprite to finish facing the same way it started?\nWithout trying it on the computer, figure out what turning angle to use for a five-spoke asterisk. Make sure your partner agrees.\nThen, try the experiment.\n\n Describe what you’ve learned about turning angles.\nAt the top of the page you were thinking about triangles. As a step in that direction, make a three-spoke asterisk.\n\n\nClick for a hint.\n\n\n\n\n\n\n\n\nA 360° turn is a full turn. Half of that (180°) is a half turn. A fourth of 360°  is a quarter turn. You don’t have to do the division yourself. Snap! can compute it for you. You can use  or  to get a seventh of a turn or a third of a turn.\n\n\nAt the beginning of this page, you knew that to make a triangle you need 120° turns, but maybe you weren’t sure why. Now you know why a three-spoke asterisk takes 120° turns, but what does that have to do with triangles?\n\n\nTry different negative input values for the move -100 steps block (first -90, then -50, then -10), and do some of the turning experiments (above) with each value. Does this change the values needed for the repeat or turn blocks? These pictures are called “pinwheels.”\nNow, run script (A) in the file and experiment:\n\n\n\nChange the inputs in script A to draw an asterisk with:\n\n\n5 branches\n\n\n8 branches\n\n\n3 branches\n\n\n\n\nMake a copy of the three-branch script you built (right-click or control-click the script, and choose “duplicate”).\n\n\nIn the copy, remove the move -100 steps block.\n\n\nWhat does this new script do?\n\n\n\n\nMake another copy of the three-branch script you built, and then:\n\n\nChange it to a four-branch script.\n\n\nRemove the move -100 steps block again.\n\n\nWhat does this new script do?\n\n\n\n\n\n\n\n Checkpoint: Fill out this Google Form \n      \n        \n          \n              \n                  \n              \n              Loading…\n              \n                  Close\n              \n          \n        \n      \n\n\n\nDebugging with say for\nYou can use  to get information about the state of your program while it’s running.\nThis animation shows how to use say for to determine the bug in code that is supposed to draw a rectangle. Notice how say for makes the program pause and gives you information to help you identify the source of error.\n\n\n\n\n\n\n\n\nScript B in the same file shows how you can make a 60-branch script behave like the second hand of a clock. Try it out.\n\n\n\nBe sure you are able to explain how this script does what it does.\n\n\nWhy is the change in pen color and size useful here? \n\n\n\n\n\n\n                     \n\n\n\n\n\nAt the right is a painting by Alma Thomas. See what it inspires you to do. It’s your art. Take liberties.\n\n\nGamal: It looks like a map. Houses on the left, the town center on the right, with City Hall and the fire station and the mall.\n\n\nBetsy: Maybe. To me the part on the left looks a little like a fingerprint, and the part on the right is clearly a person facing right, with her nose up against the right edge, halfway down.\n\n\nAlphie: Never mind what it looks like. How are we going to make something that looks like it?\n\n\nBetsy: Parts of it look like curved, thick dotted lines. We could do something like this:        But I’m not sure how to get a bunch of those to fit together.\n\n\nAlphie: Randomness is your friend. Let’s make a bunch of your lines, all different, and just point them in different directions.       \n\n\nBetsy: Wow! That’s very cool.\n\n\nAlphie: Nothing like what it’s supposed to look like, though.\n\n\nBetsy: What do you mean, “supposed”? Go read the boldface line up above this blue box again.\n\n\nAlphie: Yeah, I know, but “take liberties” doesn’t mean “take whatever happens on your first try.” I have another idea. We’ve been thinking of Thomas’s picture as brown boxes on a white background, but it’s actually more brown than white. What if we start with a brown background and draw white lines on it?\n\n\nGamal: What about that town center on the right?\n\n\nBetsy: It’s not a map. But to make you happy, when drawing white lines over toward the right, we can make them thicker, so the right part will have more white space than the left part.\n\n\nAlphie: Uh oh… If you look carefully at the original picture, the brown boxes aren’t all the same shade of brown.\n\n\nBetsy: Alphie, you worry too much. But to make you happy, once we have the space divided into brown regions, we can  some of them in different colors.\n\n\nGamal: Hey! Gang! Remember we imported that crayon library? Guess what! There’s a “World Map” library, too! And it makes “watercolor” maps like this:  And then I went over every dot on the stage using  and  to decide whether to make each dot white or brown: \n\n\n\n\nWhat did Alma Thomas intend by her painting: a map, a fingerprint, or something else? Do some research."
  },
  {
    "objectID": "unit-1/lab-3/3-blocks-with-inputs.html",
    "href": "unit-1/lab-3/3-blocks-with-inputs.html",
    "title": "Page 3: Blocks with Inputs",
    "section": "",
    "text": "On this page, you will use inputs to allow one block to do many things.\nOn the previous page you used blocks asterisk and pinwheel that we wrote for you, each with an input for the number of spokes. Now you’re going to learn how to create your own blocks with inputs.\nThe scripts are essentially all the same; only some of the input values change. Instead of having many separate scripts, you can make one general block  that will draw all such designs. The block has to work for a variety of inputs.\nOriginally, you made five copies of the pinwheel script to create five slightly different pinwheels. Now, you’ve made a single procedure that includes the shared features of these five scripts and uses a parameter to handle the differences."
  },
  {
    "objectID": "unit-1/lab-3/3-blocks-with-inputs.html#more-about-program-documentation",
    "href": "unit-1/lab-3/3-blocks-with-inputs.html#more-about-program-documentation",
    "title": "Page 3: Blocks with Inputs",
    "section": "More About Program Documentation",
    "text": "More About Program Documentation\nCommenting is only one form of documentation. It’s not the best form, because attaching a comment to a particular place in the program documents only that one procedure or code segment, and doesn’t explain how different sections of the program interact. But commenting is an easy way to document small details.\nDocumentation can be external (written for users of the program) or internal (written for yourself or other developers of the program). Both kinds are important, if it’s a program people other than the author are going to use. Usually they should be separate documents—another reason why comments aren’t the best form of documentation.\nIf you’re writing a program by yourself, internal documentation may seem silly. “I know how my own program works.” But if the program will still be in use a year later, it will probably need maintenance, and you may well have forgotten the details of its implementation. In a programming class like this one, most of the programs you write are very small, and you can understand them at a glance. But real programs are generally much bigger than lab exercises designed to take less than an hour of work.\nIt’s best if the first attempt at documentation is made even before starting to code. The documentation will specify the desired program behavior (external) and the intended program structure (internal). These documents can be used in testing the code to ensure that it behaves as planned.\n\n\nCreate a script that draws two pinwheels on the stage, with different numbers of spokes.\n\n\nWhen you embed a command procedure (such as pinwheel) within a script, the procedure is completed before continuing the script that called it.\n\n\n\nThese images were created with the pinwheel block and set pen color. Create your own art.   \n\n\nMake an animation."
  },
  {
    "objectID": "unit-1/lab-3/4-modify-your-pinwheel.html",
    "href": "unit-1/lab-3/4-modify-your-pinwheel.html",
    "title": "Page 4: Modify Your Pinwheel",
    "section": "",
    "text": "On this page, you will modify your existing pinwheel block so that you can use it to draw a variety of shapes."
  },
  {
    "objectID": "unit-1/lab-3/4-modify-your-pinwheel.html#adding-multiple-inputs",
    "href": "unit-1/lab-3/4-modify-your-pinwheel.html#adding-multiple-inputs",
    "title": "Page 4: Modify Your Pinwheel",
    "section": "Adding Multiple Inputs",
    "text": "Adding Multiple Inputs\nRecall how you first generalized your original pinwheel script: you added an input called number of branches that controlled the turning angle of the sprite. By adding more inputs, you can generalize other aspects of your program.\n\n\nIf it isn’t already open, open your U1L3-Pinwheel project.\nExperiment with the input for the second move block inside your pinwheel block as shown below.\n\n\n\n First predict. What do you think will happen?\n\n\n\nThen try several inputs between -100 and 0.\n\n\n What happened? How does it compare to what you predicted? How does this input value impact the sprite’s behavior? How does it impact the resulting image on the stage? What number input number gives an asterisk? What input number gives a polygon? \n\n\n\n\nReview how to add an input at Unit 1 Lab 3 Page 3: Blocks with Input, if needed.\n\n\nAdd a second input to control the amount of “backing up” that the sprite does before each turn through the full 360°.\n\n\n\nEdit your pinwheel block, then click the “+” sign at the end to add an input label (choose “Title text”). Type backup: as shown below, and click “OK”.\n\n\nWatch a video of steps a and b.\n\n\n\n\n\nThen click the “+” sign at the end again to add an input (choose “Input name”), and call it backup.\n\n\nDrag off the new backup input, place it where it belongs in the pinwheel code, and press “OK” or “Apply.”\n\n\nCheck that changing the backup input value when running the pinwheel block gives the correct result. Debug any problems.\n\n\n\nUse an Operator block.\n\n\nChange the pinwheel script so that it will accept a positive value (between 0 and 100) for backup, and test it with a variety of inputs.\n\n\nClick for example inputs to test.\n\n     \n\n\n\n\n\nThe procedure definition for the custom pinwheel command  would be written as\n\nPROCEDURE pinwheel(numberOfBranches)\n{\nREPEAT numberOfBranches TIMES\n{\nmove(100)\nmove(-37)\nturn_clockwise(360 / numberOfBranches)\n}\n}\n\nor \n\n\n\nThe procedures\nmove()\nand\nturn_clockwise()\naren’t built in to the AP’s language so they are written in lower case like other programmer-defined procedures.\n\n\nNotice that the hat block, , would be written as\nPROCEDURE pinwheel(numberOfBranches)\n. The word\nPROCEDURE\ntells you that that line of the code is like a hat block; the variable name in the parentheses on that line is the input that the procedure takes.\n\n\n\n\n\n\nAdd another input called size to control the input to the first move block. \nTry out a variety of inputs to your pinwheel program.\n\n\nClick for example inputs to test.\n\n     \n\n\n\n Discuss what input values will give you a polygon or an asterisk.   \n\n\n\nDebugging Tip: Organizing Your Code\nOne way to avoid having bugs in your program in the first place is to keep your code organized by deleting any unused scripts. You can use the clean up option by right-clicking (or control-clicking on a Mac) in the scripting area to organize your blocks. You can remove a block or script either by dragging it out of the scripting area and back to the palettes on the left or by choosing the “delete” option from the drop-down menu. Click here for a video. (Note that this is different from the “delete block definition” option which will permanently delete a custom block and all its instances from your entire project.)\n\n\n\n\n\n\nTidy up the code in your project, if necessary.\n Checkpoint: Fill out this Google Form \n      \n        \n          \n              \n                  \n              \n              Loading…\n              \n                  Close\n              \n          \n        \n      \n\n\n\n\nThis instruction  would be written as\nPinwheel(6, 80, 20)\nor .\n\nYou may hear people use the term “pseudocode” to refer to this pseudo-language used on the AP CS Principles exam, but it’s not pseudocode. Pseudocode isn’t a programming language at all, it’s the use of normal human language to describe an algorithm.\n\n\n\nFind inputs to pinwheel that make the result look like a circle.\n\n\n\n                     \n\n\n\n\n\nOn the right is a painting by Vassily Kandinsky. The four pictures above were inspired by it, but the sizes and placement of the circles in the original were carefully chosen, whereas the ones above are random. Also, Kandinsky’s solid circles aren’t quite uniform in color. For example, the green circle near the top right of the picture has a light green outer border, a somewhat darker green inside, a blue-green inner border, and black inside that.\n\nWhen two solid circles overlap, you can see both colors, or rather, a color in between the two. To achieve that effect in Snap!, before drawing the second circle, use the  block. A transparency of 0 means you see only the new color; a transparency of 100 means you see only the old color. In-between values determine which color is stronger in the overlapping area.\n\nMost of Kandinsky’s circles are solid, but a few aren’t. most notably the large white “halo” near the middle of the painting. His hollow circles don’t have a constant width; if you want yours to look like his, change the pen size a little as you’re drawing. But of course you don’t have to make your art look exactly like his, nor exactly like the examples above. Use them for inspiration, but you’re the artist.\n\n\nMake a picture that looks more like a real pinwheel:\n Copyright 2010 Victoria Hudgins. Used by permission.\n(Save your project first; you’ll need the pinwheel block you already have later.)\nIt doesn’t have to look exactly like the photo. But each arm of a pinwheel is essentially two triangles. You may find the  block helpful."
  },
  {
    "objectID": "unit-1/lab-3/5-remix-your-pinwheel.html",
    "href": "unit-1/lab-3/5-remix-your-pinwheel.html",
    "title": "Page 5: Using Pinwheel to Make Polygon",
    "section": "",
    "text": "On this page, you will use your existing pinwheel block to make asterisk and polygon blocks. \n\nYou can use your general-purpose pinwheel procedure to create other, simpler special-purpose procedures that each do a particular job.\n\n\n\nIf it isn’t open already, open your U1L3-Pinwheel project from the previous page.\nUse your pinwheel block to create a more specialized asterisk block.\n\n\n\nFirst, make a new block called asterisk with two inputs: one for the number of branches and one for the length of each branch. You may wish to review how to make a new block at Unit 1 Lab 2 Page 4: Making Your Own Block.\n\n\n\nNow fill in the three inputs to pinwheel so that it correctly draws an asterisk.\n\n\n\n\nSimilarly, write a polygon block that uses pinwheel with appropriate inputs to draw a polygon with a given number of sides and side length.\n\n\n\nDebugging with \nYou can use pause all to place breaks in your code so you can see what’s happening along the way. When you run code with pause all in it, you can click the yellow Run/Pause button next to the Green Flag (/) to move through the code up until a pause all block is reached again. The pause all block will pause every script that is running until the yellow Run/Pause button is clicked.\n\n\n\n\nOn page Unit 1 Lab 2 Page 2: Making Programs Talk, you learned about procedural abstraction: giving a code segment a name (making it a block). That way you can call it more than once instead of copying and pasting.\n\nHere is another kind of abstraction: noticing that asterisk and polygon are both kinds of pinwheels, and writing one, more general, pinwheel block that uses an input so that the block can be used to make asterisks, polygons, or other interesting designs.\nThis is an example of abstraction by generalization: looking at chunks of code that are almost the same and writing a single block by using an input to distinguish among the different cases.\n\n\n\nIf you look inside of pinwheel and see how you’re using it in polygon, you’ll see that there are steps that you don’t really need for the case of a polygon. Write another version of polygon built directly out of primitive blocks (move, turn and so on). How simple can you make it?\n\nAfter you’ve completed this second version of the polygon block, comment your code so that we know which polygon block is which.\n\n\n\nAs long as your polygon block draws the right picture, it doesn’t matter to the rest of the project what’s inside it.\n\n\n\n Checkpoint: Fill out this Google Form \n      \n        \n          \n              \n                  \n              \n              Loading…\n              \n                  Close\n              \n          \n        \n      \n\n\n\n\nUse your pinwheel block code one last time to create a circle block that accepts one input for the size.\n\nUse the random block together with set pen color and set pen size to draw a variety of shapes. \n\n\n\n\n\nChallenge: Create a script that draws a blue square of size 100 and then draws a red circle that fits perfectly inside it."
  },
  {
    "objectID": "unit-1/lab-3/6-the-for-block.html",
    "href": "unit-1/lab-3/6-the-for-block.html",
    "title": "Page 6: Looping with a Counter",
    "section": "",
    "text": "On this page, you will use for loops not only to repeat, but also to count the repetitions and then use that counter to draw shapes with repeated patterns:  \n\nYou’ve seen these ways to repeat a set of commands:\n\nThe forever block generates an infinite loop that goes on forever. An infinite loop can sometimes be the result of a bug, but in some interactive programs, you want the program to keep running until stopped by the user.\n\n\n repeats the same commands forever. (You used it to make Alonzo keep moving in Unit 1 Lab 1 Page 2: Programming a Game.)\n repeats them a specific number of times. (You used it to draw shapes in Unit 1 Lab 3 Page 1: Exploring Motion.)\n\n\n: Iteration\nComputer scientists describe a repeating program structure as looping, repetition, or iteration.\nThe code can be repeated forever, a specific number of times (such as when using repeat), or until something specific happens (such as when using repeat until as you’ll see in Lab 5).   \n\nSometimes the script inside a loop needs to know which time through the loop it’s in (first, second, etc.). You can use  to keep track, and you can use its counter (the default name is ) in the repeated script. For example, the for block lets you simplify long scripts like: \n\n\n\n\n\nto\n\n\n\n\n\nEach time the for block runs the script inside, it changes the value of the counter by 1, beginning with the first input number and ending after the second.\n\nThe for block’s default counter name,  stands for “index.” You can change this name by clicking it. To use the counter, drag it into the script.\n\n\n\nBuild this script that makes the sprite say the numbers 1 through 10.  \n\nThen modify it so that the sprite says 0, 2, 4, 6, 8, … up through 30.\nDiscuss your solutions with another pair.\n\nExperiment with spirals.\n\n\n\nBuild this script and try it out:\n\nThis design got the nickname “squiral” because it’s a square spiral.\n\n\n\n\n Make sure you can explain why the squiral spirals outward.\n\n\nTry switching the order of the 100 and the 1 in the for block in the squiral script. What is the result?\n\n\nTry changing the turning angle in the squiral script to other numbers such as 92, 126, etc.\n\n\nChange the inputs to turn and move to get as close as you can get to a smooth spiral: \n\n\n\n\n\n“U1L3-Squiral”\n\nOpen your U1L3-Pinwheel project, and build a nest squares block that uses for and your polygon block to draw nested squares. Give it an input so that it will draw whatever number of squares you specify, with each square larger than the previous:  \n Checkpoint: Fill out this Google Form \n      \n        \n          \n              \n                  \n              \n              Loading…\n              \n                  Close\n              \n          \n        \n      \n\n\n\n\nBuild nest polygons that accepts the number of polygons and the number of sides for the polygons.\nBuild a script that draws 12 regular polygons, each with one more side than the previous one, as shown below. \nPredict what this script will do before you try it:\nBuild a script that counts down by 10 from 100 to 0 (that is, 100, 90, 80, etc.).\n\n\n\n\nBelow are two animations that use the pinwheel code with inputs. Find out how to create your own artistic animations.  \n\nThe following code may give you ideas about how to create animations. The warp block allows the drawing of the pinwheel all at once.\n\n\n\n\n\nMake sure your other work has been saved, then Experiment with the script. Could you change the sizes or colors to make it more interesting?\n\n\n\n                     \n\n\n\n\nFind a way to use for to nest squares this way. Build your block with two inputs that let you specify how many squares the design will contain and how much bigger each square will be than the previous one.  \n\n\n\nOn the right is a painting by Josef Albers. He was interested in experimenting with variations of color within a “family” of similar colors. Snap! will let you make similar experiments.\n\n\nWhat is the favorite color of the author of this activity?\n\n\nIf you didn’t do the Take It Further activity based on this Kazimir Malevich picture  then read it now to learn about Snap! features for solid rectangles and color families.\n\n\nIf you haven’t already, do If There Is Time #10, which shows a simple version of this project idea.\n\n\nOkay, now dig in.\n\nRandomness: The four examples above are different from the actual Albers picture in that they include occasional colors that aren’t from the same family. This can make the pictures more interesting to someone who doesn’t share Albers’s interest in subtle differences in color. (Albers himself, in fact, had more color variation in other pictures of this type.) Too much randomness, though, can make the picture less interesting. Compare the last two examples above; the left one of those two is clearly based on the orange family, with rainbow-neighbors red and yellow, but the right one has violets, greens, oranges, a yellow—too much chaos, maybe. Look back at the Gossip project if you don’t remember how to choose something special once out of six times, or once out of 14 times. Other random choices you can make are the number of squares, how much to shrink the size from one square to the next, and how much to move the corner of the next square horizontally and vertically (the picture is more interesting if those two numbers are different, so the smallest square isn’t exactly in the center).\n\n\n\n   This block is like the squiral, but instead of changing the input to move, it changes the input to turn: \n\n\nTry sketching what it will draw with an angle of 2.\n\n\nThen build it, and try each of these tests:\n\nYou can stop each test with the stop button  when you’re sure nothing new will happen, but don’t decide that too quickly!\n\n\n\n\n\nWhat’s going on? Can you work out a theory to predict anything about the shape it draws for a particular angle input? (Don’t click unless you need a big hint.)\n\nHint: Think about divisibility."
  },
  {
    "objectID": "unit-1/lab-3/index.html",
    "href": "unit-1/lab-3/index.html",
    "title": "Lab 3: Modern Art with Polygons",
    "section": "",
    "text": "These are works by artists Josef Albers, Maya Hayuk, Vassily Kandinsky, Atta Kwami, Kazimir Malevich, Alma Thomas, and Theo van Doesburg. The styles are different, but all of them are based on polygons or circles.\n      \nClick for art credits.\n\n\nJosef Albers, “Homage to the Square,” 1965. More: Albers Foundation, smarthistory.org\nMaya Hayuk, “Chemtrails Miami,” 2013. More: mayahayuk.com, Wikipedia\nVassily Kandinsky, “Several Circles,” 1926. More: wassilykandinsky.net\nAtta Kwami, “Bobbo,” 2012. More: attakwami.com\nKazimir Malevich, “Suprematist Composition,” 1915. More: kazimir-malevich.org, Wikipedia\nAlma Thomas, “Untitled (Music Series),” 1978. Copyright Smithsonian American Art Museum. More: wikiart.org, Wikipedia\nTheo van Doesburg, “Composition VII (the three graces),” 1917. More: wikiart.org, Wikipedia\n\n\nIn this lab, you’ll draw polygons so you can create your own art:"
  },
  {
    "objectID": "unit-1/lab-4/1-your-image-in-the-cloud.html",
    "href": "unit-1/lab-4/1-your-image-in-the-cloud.html",
    "title": "Page 1: Your Image in the Cloud",
    "section": "",
    "text": "On this page, you will consider what information is available online about you and reflect on your online data sharing habits.\n\n\nPersonally identifiable information (PII) is information that can let others figure out who you are and possibly get more information like your Social Security number, age, race, phone number(s), medical information, financial information, or biometric data (such as your thumbprint or face scan).\n\nPersonally identifiable information about you can easily get to people you don’t want to have it. Posting a picture of you and your friends to a website reveals information about where you were and what you were doing. This may violate both your own privacy and that of your friends. If your phone is lost or stolen, someone else might get access to pictures or messages you thought were private. That’s why data on cell phones is normally encrypted so it can’t be recovered without your password. Having to type your password is a trade-off between convenience and security. But some recent research has shown that cell phone apps are often written to collect information about you and your contacts and location without your knowledge, mostly to sell targeted advertising.\nHaving PII shared online can have benefits. For example, it can be used to show you personalized movie recommendations or simplify online purchasing by suggesting things you are likely to buy based on previous purchases. Shared PII also has risks: It can be used for identity theft, harassment, kidnapping, fraud, etc.\n\nDon’t be too afraid of the criminal possibilities. Sharing information online is like crossing the street: Don’t be afraid to do it, but do it carefully.\n\n\n\n Discuss: What kind of digital information is out there about you?\n\nWith a partner, list the kinds of information someone might be able to find out about you by searching on the Internet.\nWhich of these things are information that you voluntarily put online?\nWhich of these things would you prefer to keep private?\n\n\n\nOne reason you are asked to choose a username when you get a Snap! account is to give you the freedom to express political or personal issues without tying those conversations to your actual identity.\n\n What laws exist to protect PII?\n\nUnited States law says that websites must have a privacy policy that spells out what the site will do with the information you give them. This is a pretty weak protection; the privacy policies are typically really long, and written in ways that make it hard to find out what information is collected and what is done with it. In Europe, there is now a General Data Protection Regulation (GDPR) that defines what counts as PII, and limits what websites can do without your affirmative permission—a definite “yes” from you, not just not saying “no”—regardless of what they put in their privacy policies. These regulations also state that the website cannot deny you otherwise free services because you refused to permit the use they want you to agree to.\nThe GDPR is new enough that its implications are still being worked out. For example, to get a Snap! account, you must provide an email address, your own or your parent’s depending on your age. That’s the only thing Snap! knows about you: not your name, not your home address, just your email address. Is that PII? Some lawyers think it is. Other lawyers think that your email alone isn’t PII, but it is when combined with certain other information. If it’s PII, then Snap! must ask if you’re in Europe; if so, must collect more information, such as your name, age, and address, to satisfy some GDPR requirements. Your age matters because the rules are different for children and adults. (In Europe, the cutoff age is 16; in the US, we must ask for your parent’s email if you’re below 13.) We need that other PII because if you ask to have your account deleted, we must do so at once, so we have to be able to make sure that it’s really you, or your parent, asking, not somebody wanting to delete your account as a prank.\n\n\n\n\nThink of some website on which you have an account. It can be one of the huge ones, such as Google, Facebook, or Amazon, or it can be a site associated with a store, a TV show, or a game.\n\nHow do you connect to that site when you’re using a computer?\nHow do you connect to the site using your cell phone?\n\nCompare your answers with other students.\n\n\nFrom a privacy point of view, using a browser is much better. If you’re like most people, when you are on a computer you use a web browser (such as Chrome, Safari, Edge) to connect to all websites you visit. But on your phone, you may have a separate app installed for some sites (such as Instagram or Facebook).\n\n Why does it matter how you connect?\n\n\nIn a browser, you can install privacy extensions (such as AdBlockPlus, Ghostery, or NoScript) that restrict the ability of websites to gather your information. Site-specific apps do not let you limit what they collect.\nWhen you exit from a computer’s browser, it stops running. (This doesn’t have to be true, but when a browser company tries to get around that rule, someone catches them and people stop using that browser for a while.) But almost all phone apps keep running even when you’re not using them, and many are constantly accessing your contacts, messages, and other data and sending that information over the Internet to the company that made the app. That company may even be in a country with very weak privacy protection.\nOn a computer, your information is generally stored on the computer’s own hard drive. Phones generally store your information in “the cloud,” i.e., on computers belonging to your cell phone carrier (Verizon, ATT, etc.) or the phone manufacturer (Apple, Samsung, Google, etc.).\n\n\n\n\n\n\n Discuss these questions, and write down answers with as much detail as possible.\n\nWhat does Google know about you?\nWhat does your cell phone carrier know about you?\nWhat does Facebook know about you?\nWhat does the US government know about you?\n\n\n\n“What does organization X know about you?” is kind of a trick question because many these companies and institutions share the information they collect about you. This kind of data sharing is important—and problematic—because different kinds of information, while possibly unimportant by themselves, can become a serious privacy problem when combined. For example, your cell phone carrier knows every place you go and Google knows what people or businesses live at every address; in combination, these two kinds of information can reveal whether you’ve visiting a divorce lawyer, an AIDS doctor, or other possibilities that could be embarrassing (or worse) if revealed.\n\nThere are even companies whose sole business is to collect information about you from other companies, large or small, that you use online. (One of the authors looked himself up at Acxiom, one of those companies, and  here’s what he found. The information circled in red is incorrect.) But the biggest data gatherers are Google, cell phone carriers, Facebook, and governments, such as the US government or the Chinese government."
  },
  {
    "objectID": "unit-1/lab-4/2-examining-privacy.html",
    "href": "unit-1/lab-4/2-examining-privacy.html",
    "title": "Page 2: Examining Privacy",
    "section": "",
    "text": "On this page, you will discuss why privacy is good to protect, identify threats to your privacy, and consider reasons you might choose to give up privacy.\n\nThe search engine you use (probably Google, but there are others) obviously knows what questions you ask it. Less obviously, it also knows which links you click on. Even less obviously than that, it knows which links you hover your mouse over, and for how long. And it remembers!\n\nWhat other kinds of information does Google collect?\n\nHave you ever had to click inside a circle “to prove you’re a human being”? The way it works is by recording how you move the mouse around the page, not just as you’re reaching for that circle to click, but the entire time you’re visiting the page. Each person has a different habitual mouse style. Google, which owns the company that offers the search-service to websites, keeps records for each person about how they move the mouse, as a sort of digital-era fingerprint. If you have a Gmail account, then Google reads your email, too. (They are quick to point out that no people at Google read your mail; just computer programs. Still, that information is part of your digital information, so Google knows whom you love, and what you say to each other.) If you use an Android phone, Google also provides cloud storage of your contacts and calendar. (If you use an iPhone, then it’s Apple that collects your contacts and calendar).\n\n\nWhat does Google do with the information it collects about you? One thing is to choose ads that they think you’ll click on. Less obvious, and worse, it decides which search results to show you.\n\nThey do this mainly so you’ll see how easy it is to get results you want. For example, if you always order books from Amazon, but your friend always orders from Barnes & Noble, then when you search for the same book, you’ll get Amazon as the first link and your friend will get Barnes & Noble. That may not be a problem, but this is: If I get news from the liberal New York Times, and you read the conservative Fox News, then, over time, I’ll see only ideas I already agree with, and you’ll see only the ones you already agree with, very different from mine. This situation is called a search bubble. We’re stuck in two different bubbles. That’s not because Google wants to prevent us seeing each other’s ideas, but because the same algorithms that give each of us our favorite bookstore also gives each of us our favorite news source.\n\n\n\n\nAs a class, choose a politically controversial topic. Then, not in class but on the computer you usually use outside of school (so that your Google dossier is connected with that computer), do a search for that topic. Save the results you get, and at next class meeting see if everyone got the same results.\n\n\n\nBoth targeted advertising and search bubbles can be viewed as in your interest. If you must see advertising, isn’t it better to see advertising that’s likely to feel relevant? If Google knows where you are right now, it can suggest nearby restaurants you like, or ones similar to ones you like (and that pay Google for promoting them). The same reasoning applies to other big tech companies. Don’t you want Netflix to recommend things you might like to watch?\nPeople may really like targeting, up to a point, but not beyond. For example, some are happy with “Hey, it’s lunch time and you’re near Café Gratitude, where you’ve eaten before. Should I call them and order your usual?” but find “… and your friend Paul is there right now” creepy.\n\n\n\n Discuss: Have you ever had that “creepy” feeling about something your phone knew about you?\n\n\n\nMany people find it convenient that sites that sell things, such as Amazon, remember your credit card number so you don’t have to type it in every time. Similarly, most people are happy for their browser to remember their password for each website. But credit card numbers and passwords are among the PII that you most want to keep protected against thieves. You’re relying on the seller or the company that makes your browser not to have any security bugs, and you’re also relying on them not to misuse your PII themselves.\nYour cell phone carrier is the biggest threat to your online privacy because it sees everything you do on your phone. You can choose the search engine you use, but you have few choices of cell phone carrier; it’s probably ATT, Verizon, Sprint, or T-Mobile. A particularly important kind of information that your phone knows is your physical location. You can turn off sharing your location with other companies, but you can’t block your carrier from knowing your location; it needs to know which cell tower you’re using and where that tower is. The information it has isn’t just your location right now, but everywhere you’ve been since you got that phone.\nYou may think if you don’t have a Facebook account, Facebook knows nothing about you, but Facebook keeps dossiers even on non-users. It finds out about you because a friend who is on Facebook has you as a contact in their phone, or because your friend posted a photo that includes you, perhaps from an email you intended for that person alone. (Facebook doesn’t even need your name with the photo, because it has a massive database of photographed faces and names.) And once the information is on the net, many people may keep or redistribute copies (e.g., “retweeting”), so it becomes impossible to delete all the copies of the information from the Internet. Of course, every website records who visited it, but if the site has a “Like” button, Facebook also knows who visited it—even if they don’t click the button. And the special danger of social media sites like Facebook is that anyone can read the information shown, not just the big tech companies.\n\n\n\nDiscuss:\n\n\nWhat are some reasons for giving up privacy in certain areas? Identify one area in your life in which you purposely give up privacy.\n\n\nNeed some examples?\n\nHere are a few reasons people give up privacy:\n\n\nSome website you want to visit requires you to sign up, and sends you an email to verify that it’s really you.\n\n\nYou gain convenience from tailored ads and location services.\n\n\nPeople today care more about online friendships.\n\n\nGovernments need to protect us against bad guys.\n\n\nBusinesses must verify eligibility (e.g., credit scores).\n\n\n“If I’m doing nothing wrong, I have nothing to hide.”\n\n\n\n\n\nWhat are the risks? Why have you decided that the benefits outweigh the risks?\n\n\n\n\n\nIn the early days of the Internet, the hackers who designed it didn’t trust the government, so they tried to make sure that the police couldn’t get your browsing history without a warrant signed by a judge. That all changed on 9/11/2001, when the World Trade Center was destroyed by hijacked airplanes crashing into its towers. Congress quickly passed the “Patriot Act,” a huge collection of permissions for police and other government agencies to collect data about you. These days, many experts believe that the Patriot Act went too far in weakening privacy, but it’s very hard to change it because politicians are afraid that if they vote to remove some of the privacy holes in the law, their opponents will say they’re weak on terrorism.\nAnother big change in our understanding of the government’s interest in the Internet came in 2013, when Edward Snowden, working for a contractor with the National Security Agency (NSA), leaked a large collection of NSA internal documents showing how the NSA and other agencies “listen in” on your digital conversations and actions, often illegally even under the loose Patriot Act rules. This led to widespread disapproval of the U.S. government spying on Americans (instead of spying on other countries, which is their job) and also raised concerns in other countries. This is economically important because people outside the U.S. don’t want to do business with companies that store data in the U.S.\n\n\n\n Discuss: What are some reasons for protecting your privacy? Why is privacy a good thing?\n\nNeed some examples?\n\nHere are a few of many reasons for protecting privacy:\n\n\nAvoid discrimination (e.g., based on HIV status)\n\n\nAllow anonymous political speech\n\n\nProtect personal security (e.g., against stalkers)\n\n\nRestrain exercise of state power (e.g., require warrants)\n\n\nPrevent spread of incorrect information\n\n\nPart of human dignity\n\n\n\n\n\n\nDiscuss: Who is threatening your privacy?\nDescribe how each of the following threatens privacy:\n\n\nGovernments\n\n\nCorporations\n\n\nPeople with cellphone cameras"
  },
  {
    "objectID": "unit-1/lab-4/3-tanya-rider.html",
    "href": "unit-1/lab-4/3-tanya-rider.html",
    "title": "Page 3: Tanya Rider’s Story",
    "section": "",
    "text": "On this page, you will read a story that shows how complex privacy issues can be and learn about the massive expansion of digital information.\n\n\n\n\nRead Blown to Bits pages 1-4. As you read, be prepared to discuss the following:\n\n\nAccording to the authors, what are some things that have changed as a result of computers?\n\n\nWhat do the authors mean by “explosion of bits”?\n\n\n\n\n\n\nAnother news story about Tanya Rider: Experience: I was trapped in a ravine for eight days (The Guardian)\n\n\n\n\nPolice couldn’t access Tanya Rider’s records because of her right to privacy. Is there a way to make a policy that preserves one’s right to privacy and also makes sure a person like Tanya Rider gets rescued? Write down three arguments for each of the following positions.\n\n\nPosition A: The right to privacy isn’t just an abstract principle. Sometimes for example, people disappear to hide from people who might hurt them. When a person is reported missing, the police can’t assume that’s the whole story; they have to follow the rules even if that delays some rescues. Also, maybe that person is trying to avoid the police!\n\n\nPosition B: The police should be able to check the location of a phone right away to search for a missing person, perhaps with a rule that they can’t use the information for any other purpose, or disclose it to anyone, without permission from a court.\n\n\nIs there a third policy that protects everyone’s needs?"
  },
  {
    "objectID": "unit-1/lab-4/4-privacy-affected.html",
    "href": "unit-1/lab-4/4-privacy-affected.html",
    "title": "Page 4: Innovations and Privacy",
    "section": "",
    "text": "On this page, you will discuss how computers impact privacy and read and teach each other about data-collection technologies.\n\n\n\n\n\n Discuss: What are different ways our privacy is affected by computers?\n\n\n\nEach pick two sections to read:\n\n\nSmile While We Snap!\n\n\nKnowing Where You Are\n\n\nKnowing Even Where Your Shoes Are\n\n\nBlack Boxes Are Not Just for Airplanes Anymore\n\n\nTracing Paper\n\n\nThe Parking Garage Knows More Than You Think\n\n\nAll in Your Pocket\n\n\nConnecting the Dots\n\n\n\nIn groups of four, split up the reading in Blown to Bits pages 22-35. Each person should pick two sections to read from the list at right. (Make sure someone reads each section).\nAs you read, use these guiding questions:\n\n\nWhat are the innovations described in each section?\n\n\nIOC-1.A.4\n\n\nHow are these innovations beneficial?\n\n\nHow do they threaten privacy?\n\n\n\n\nTeach the other members of your group what you learned in the sections you read.\n\n\nRead the box How Sites Know Who You Are (Blown to Bits page 40).\n\n\nBesides privacy, what other legal or ethical issues are related to computing? Brainstorm a list, then pick one to research and write a page about.\n\n\n Pick a computing innovation (a website, a payment method like Paypal, an online indirect login manager like “log in via Google,” etc.) and explain privacy concerns that it raises.\n\n\n\n\n\nRead the section “Little Brother is Watching” from Blown to Bits pages 42-48 for examples of ways people can find out very personal information using online resources.\n\n\nWhat rules should we have about online information? Read the section called Fair Information Practice Principles (Blown to Bits page 64-68) to learn about efforts to enact privacy laws and standards. Consider: What laws should we have about privacy? What are some challenges to getting these laws?"
  },
  {
    "objectID": "unit-1/lab-4/index.html",
    "href": "unit-1/lab-4/index.html",
    "title": "Lab 4: Protecting Your Privacy",
    "section": "",
    "text": "In this lab, you will learn about your digital privacy."
  },
  {
    "objectID": "unit-1/lab-5/1-following-sprites.html",
    "href": "unit-1/lab-5/1-following-sprites.html",
    "title": "Page 1: Sprite Following the Mouse",
    "section": "",
    "text": "On this page, you will program the first sprite to follow your mouse and program the second sprite to point in the direction of the first sprite in preparation for following it."
  },
  {
    "objectID": "unit-1/lab-5/1-following-sprites.html#following-the-mouse",
    "href": "unit-1/lab-5/1-following-sprites.html#following-the-mouse",
    "title": "Page 1: Sprite Following the Mouse",
    "section": "Following the Mouse",
    "text": "Following the Mouse\n\n\n\n“U1L5-SpriteChase”\n\n\nCreating a New Snap! Project\n\n\nOpen Snap!.\n\nIf you already have Snap! open and there is a project open, follow these steps first:\n\n\nIf necessary, save your open work in Snap!.\n\n\nChoose “New” from the Snap! File menu, .\n\n\nClick “Yes” to open a new project (and close the open one).\n\n\n\n\n\nChoose “Save As…” from the Snap! File menu, .\n\n\nType the project name.\n\n\nClick the “Save” button.\n\n\n\n Read and think about this script before you build it. What do you expect it to do? \nNow build the script and run it. Move your mouse around the stage while the program is running. What does the forever block do?\n\nTo stop your script, click the red stop sign: \n\nDoes the program work the way you expected?"
  },
  {
    "objectID": "unit-1/lab-5/1-following-sprites.html#programming-a-second-sprite",
    "href": "unit-1/lab-5/1-following-sprites.html#programming-a-second-sprite",
    "title": "Page 1: Sprite Following the Mouse",
    "section": "Programming a Second Sprite",
    "text": "Programming a Second Sprite\n\n\nCreate a second sprite by clicking on the  button just below the stage.\n\nThe new sprite, automatically named Sprite(2), appears on the stage. It’s brand new, so it has no scripts. The pictures of the sprites beneath the stage let you select the sprite you want to program.\n\nTo make your sprite names meaningful, change the name of Sprite to Leader, and change Sprite(2) to Follower.\n\n\nChanging the Name of a Sprite\nLook for the name in a gray box above the scripting area. Click inside the name and you’ll be able to edit it. \n\n\nWhile a script is running, its border lights up. If the running time is short, you may not notice the brief flash.\n\n\nMake sure you have the Follower sprite selected. Write a script for Follower so that once the green flag is clicked, it will point toward Leader forever. \n\n\nBoth sprites have scripts that use , so both of those scripts run when  is clicked.\n\n\nClick  and check that your scripts do what you intended:\n\nLeader always follows your mouse when you move your mouse around.\nFollower stays in one place, but always points toward Leader."
  },
  {
    "objectID": "unit-1/lab-5/2-sprite-interaction.html",
    "href": "unit-1/lab-5/2-sprite-interaction.html",
    "title": "Page 2: Sprite Following a Sprite",
    "section": "",
    "text": "On this page, you will change the script so that the sprites don’t move forever, but only until they touch.\n\n\n\nChange Follower’s code to point towards Leader only until it is touching Leader. (The following instructions show how.)\n\n\n\nSelect Follower by clicking its button below the stage.\n\n\nReplace the forever block with a repeat until block.\n\n\nDrag  into the hexagonal space in the repeat until block. Set it to repeat until it is touching Leader.\n\nClick for a video of this code being built.\n\n ```\n\n\n\n\n\nDo the same for Leader. Change its code to follow your mouse only until it is touching Follower.\nTest your program to see if it does what you want:\n\nWhen you click , Leader (the gray one) should follow your mouse and Follower should keep turning to face Leader.\nIf you bring Leader close enough to touch Follower, both sprites should stop moving.\n\nSo far, Follower points toward Leader, but doesn’t move toward it.\n\n\n\n\nAdd a line of code to Follower’s script so that it chases Leader. Here’s the idea:\n\nFill the input slot in the move block with a small number so Follower doesn’t catch Leader too quickly.\n\n\n\n\nWhat happens if the sprites are already touching? That is, what happens if you drag one sprite on top of the other and then click the green flag? Why?\n\n\nExperiment. What happens if the input to move is 0?\n\n\n\nWhen a program keeps running forever, that’s called an infinite loop.\n\n\n\n\n\n\nThe language used on the AP Exam doesn’t allow spaces in names of inputs (such as number of fish) or in programmer-defined procedures (such as mouse y, which isn’t built into their language). So this example translates them to numFish and MouseY(). The reason for the () or box after MouseY is that MouseY() is a procedure call even though it doesn’t take any inputs.\n\nThe script  would be written as\n\nREPEAT UNTIL(mouseY() &lt; 0)\n{\nDISPLAY(numFish)\n}\n\nor \nRemember, you don’t need to learn to write the made-up language used on the AP exam. You just have to be able to read and answer questions about it.\n\n\n\nTest your program a few times. \nRight now, when the sprites meet, they just stop. Make them have a conversation when they stop. You can do that by adding code like this to Leader’s script. Make up your own conversation. You can use any language you can type. Here’s an example using several languages.\n\nLeader does things itself. It also tells Follower what to do and when to do it. This code puts Leader in charge of Follower.\n\n\nA code segment is a sequence of connected instructions that carry out a purposeful action, such as the one pictured on the left, which animates a conversation. The instructions in the code segment are carried out in order, from top to bottom.\n\n\n\n\nTo prevent the two sprites from being stuck to each other unable to move, the sprites will need some space between them and some time apart before the chase starts. Blocks such as these may help. \n\n\n\n Checkpoint: Fill out this Google Form \n      \n        \n          \n              \n                  \n              \n              Loading…\n              \n                  Close\n              \n          \n        \n      \n\n\n\n\nGive the sprites costumes.\n\nYou can use a picture from the Internet by dragging the picture into the Snap! window.\n\nChange the background on the stage.\n\nThere are instructions in the If There Is Time section on Unit 1 Lab 2 Page 3: Customizing and Debugging."
  },
  {
    "objectID": "unit-1/lab-5/index.html",
    "href": "unit-1/lab-5/index.html",
    "title": "Lab 5: Follow the Leader",
    "section": "",
    "text": "In many programs, the visual elements on the screen need to interact—follow each other, avoid each other, react a certain way when they meet each other, etc.\nIn this lab, you will program two sprites. One sprite will follow your mouse. The other sprite will chase the first. When they meet, they will have a short conversation."
  },
  {
    "objectID": "unit-1/optional-projects/1-sprite-line-art.html",
    "href": "unit-1/optional-projects/1-sprite-line-art.html",
    "title": "Line Art Toy",
    "section": "",
    "text": "In this project, you are going to simulate the famous children’s toy Etch A Sketch®.\n\n\n\n\n\nHere are some things to do at the start of your program when green flag clicked:\n\n\nClear any previous drawings\n\n\nPlace the drawing sprite at the center of the screen\n\n\nPoint it in the up direction\n\n\nSet the drawing pen to a color and size of your choice\n\n\nPut pen down to get ready for drawing\n\n\n\n\nWrite code that will clear the drawings when space key pressed by the user.\n\n\nThe user will use the arrow keys to draw. You’ll need a script for each key, starting with a when key pressed block:  For each of the four arrow keys, make the sprite point in the direction of the arrow and then move forward 10 steps.\n\n\n\n\nHere is how Snap! assigns angles for directions: \n\n\n0° is up\n\n\n90° is right\n\n\n180° is down\n\n\n-90° (or also 270°) is left\n\n\n\n\n\n\nChange your code to draw only if the sprite is within the screen dimensions: -240 to 240 in the x direction (horizontal) and -180 to 180 in the y direction (vertical).\n\n\nGive your user some coloring options. For example, when the “1” key is pressed, the pen color is reset to black; when the “2” key is pressed, the pen color is set to red; etc. (Suggestion: Load the crayon library) Also consider using some keys to put the pen up or pen down.\n\n\nGive your user the option to draw diagonal lines. For example, write code to move the sprite at 45°, 135°, 225°, 315°, using the “w,” “s,” “a,” and “q” keys."
  },
  {
    "objectID": "unit-1/optional-projects/3-pong.html",
    "href": "unit-1/optional-projects/3-pong.html",
    "title": "The Game of Pong",
    "section": "",
    "text": "In this project, you are going to model a computer game called Pong, first developed by Atari in 1972. You will write the code for the paddle which will allow it to move up and down based on user keyboard input and also write the code for the ball which will allow it to bounce every time it hits a wall or the paddle. \n\n\n\n\n Discuss with your partner the mathematics behind the ball bouncing off the paddle. How does the initial direction of the ball as it hits the paddle relate to the final direction of the ball as it bounces off the paddle? The following diagram may help.  \n\n\nCreate the paddle and the ball sprites and give them their costumes (filled rectangle and circle).\n\n\nWrite the code to have the paddle move up and down when the user presses the up arrow and down arrow keys. Don’t let the paddle move beyond the edges of the stage.\n\n\nWrite the code to start the ball moving when green flag is clicked and to bounce off the stage edges and the paddle. Note that there is a built in block to bounce off the edges.\n\n\n\n\nStuck? Click here to look at some hints on how to proceed with the rest of this.\n\n\n\n\n Examine the starter file where a rectangular paddle sprite and a circular ball sprite have been created for you.\n\n\nWrite the code for the paddle first. The paddle should be allowed to move only up and down near the right edge of the screen. When the user presses the up/down arrow keys on the keyboard, the paddle should move up or down a certain amount but it should never wander off the edges of the screen. You may find the following blocks useful. \n\n\nThe code for the ball is a bit trickier due to the paddle bounce. Initialize the ball to appear in the middle of the screen and give it a random direction. Then check if the ball is at the edge of the screen or is touching the paddle. In each case the ball needs to bounce. Snap! already provides you with a block for bouncing off the edges of the screen.  You can write the code for the ball bouncing off the paddle by realizing that the ball bounces from the paddle with the negative of the direction at which it hits the paddle. Remember that in Snap! positive angles are measured clockwise from the 0°, up direction, and negative angles are measured counterclockwise from the 0°, up direction.   Now write the code for the ball. You may find the following blocks useful. \n\n\n\n\n\n\n\n\nAdd scoring to your game. Every time the paddles bounces off the ball, the player should earn a point and every time the ball hits the right wall, the player should lose a point. You can create a variable to keep track of the score. \n\n\nCreate a second paddle to allow the game to become multiplayer game. Adjust your code to accommodate keyboard input from two users. \n\n\nCreate a second paddle (or use the one from part B if you did that) and let this paddle be driven automatically by the computer for a “human versus computer” version of the game. Hint: You can automate the second paddle by using the following block from the Sensing menu:"
  },
  {
    "objectID": "unit-1/optional-projects/4-daisy.html",
    "href": "unit-1/optional-projects/4-daisy.html",
    "title": "Daisy Design",
    "section": "",
    "text": "In this project, you are going to write code to draw the geometric design shown below, explore its variations and use it draw more complex designs. \n\n\n\n\nDiscuss how this design was created. What are the fundamental building blocks? How are these arranged?\n\n\nYou can watch this animation to get some ideas.\n\n\n\n\n\nThe entire design is made up of circles. So the first thing to do is to write code that will create a circle. To do this, create a custom block Draw Circle via the “Variables” menu “Make a block” option. Hint: A regular polygon with 30 or more sides is a good approximation for a circle.\n\n\nNow that you can draw a circle, you can generate the Daisy Design by rotating your sprite a bit at the end of each circle drawn. In the design above there are 24 circles. How much must the sprite turn each time a circle is drawn in order to make a full cycle of 360° when all the circles are drawn? Create a custom block Draw Daisy to do this.\n\n\n\n\n\n\n\nExtend your code so that you can create the following patterns.    \n\n\nConsider the following variations on the pen color and thickness for the Daisy Design. Note that in the first design, color changes within each circle, while in the second design, pen thickness changes within each circle. Study the code and explore your own such variations.    \n\n\nCreate your own variations of the Daisy Design and share with your classmates."
  },
  {
    "objectID": "unit-1/optional-projects/5-sentence-builder.html",
    "href": "unit-1/optional-projects/5-sentence-builder.html",
    "title": "Modeling Language",
    "section": "",
    "text": "In this project, you will create a program capable of creating more complicated language than the Gossip project.\n\n\n\n\n\n\nnouns (things)\n\n\nverbs (actions)\n\n\nadjectives (thing describers)\n\n\nadverbs (action describers)\n\n\ndeterminers (identifiers—tells you which thing)\n\n\nprepositions (relationship indicators)\n\n\n\n\n\nIt contains six reporters that each report a random word from a list of words in that category.\n\n\nTry out each block to see what it does. Then change these lists however you like to include your own nouns, verbs, etc.\n\n\nCreate a reporter called simple sentence that reports a simple sentence using the random determiner, random noun, and random verb blocks. \n\n\nMore complicated sentences can be built up from multiple phrases. Create these phrase reporters:\n\n\n should join words from two categories to make phrases like “the sandwich” or “a giraffe,” or from three categories to create phrases like “the little boy,” “a green giraffe,” or “our old sandwich.”\n\n\n should combine a preposition with a noun phrase to create phrases like “near the little boy” or “over a wise pizza.”\n\n\nUsing noun phrase to define prepositional phrase is a good example of abstraction. If you later change noun phrase to include people’s names, prepositional phrase will still work.\n\n\n should report either just a verb like “jumps” or join a verb and an adverb to create combinations like “jumps sadly,” “naps quickly,” or “thinks sleepily.”\n\n\n\n\nThese phrases will be grammatically correct, but they won’t necessarily make sense. For example, noun phrase might generate “a tired pizza.”\n\n\nThen, make a reporter complicated sentence that combines a noun phrase, a verb phrase, and a prepositional phrase. \n\n\n\n\n\n\n\nOccasionally, include people’s names instead of a noun phrase. So, instead of something like “my silly elephant,” the program could sometimes use “Jamie” or other names.\n\n\nNoun phrases don’t always have to have one adjective. They can have none, or two, or more. Add some variety."
  },
  {
    "objectID": "unit-1/project/index.html",
    "href": "unit-1/project/index.html",
    "title": "Project: eCard",
    "section": "",
    "text": "This is an individual project. This means that all of your work must be your own, indisputable work. If you need help on something, you may ask other people for help, however, the scripts that you create must be your own work. If there’s any convincing evidence that the work that you submit is not your own, you will recieve an automatic 0 on this project and any participation grade related to working on the project."
  },
  {
    "objectID": "unit-1/project/index.html#ecard-specifications",
    "href": "unit-1/project/index.html#ecard-specifications",
    "title": "Project: eCard",
    "section": "eCard Specifications",
    "text": "eCard Specifications\n\nCreate an eCard (see what an eCard is) that meets all of the following specifications:\n\nHas a message for the viewer (such as “Happy New Year,” “Happy Birthday,” “Get Well Soon,” etc.)\nHas a theme (such as holiday, sports, TV show, a photo, original art, etc.)\nHas stage and sprite costumes\nWorks properly (is not buggy)\nIncludes a custom block. This can be either:\n\nA start over block that resets the eCard to the beginning (resets pen, stage, and sprites) OR\nAnother custom block containing at least 3 blocks (this could move a sprite, change the background, etc.)\n\nUses repeat until or for\nLets the user interact (e.g., by clicking a sprite, pressing a key, or moving the mouse)\nIncludes one additional feature. You can choose either:\n\nIncludes sounds or music (using the play block and/or the “Sounds” tab) OR\nUses the random block"
  },
  {
    "objectID": "unit-1/project/index.html#google-form-specifications",
    "href": "unit-1/project/index.html#google-form-specifications",
    "title": "Project: eCard",
    "section": "Google Form Specifications",
    "text": "Google Form Specifications\n\nWhen you have finished your app, fill in the given Google Form on Google Classroom.\n\n\nThe Google Form has the following questions for you to answer:\n\n\nDescribe your program. In other words, summarize what your program will do to someone who does not know how to code in Snap! (nothing technical required, like a storyboard of your program and instruction to use your program).\nWhat message does your e-card contain?\nWhat is your e-card’s theme?\nDescribe how your e-card uses stage and sprite costumes\nDoes your e-card work perfectly? If it has any bugs, describe them below. It is supposed to work well but if there’s something minor going on, write it up here and I promise I won’t take points off :)\nWhat is the name of the custom block you made for your e card and how is it used? Please include a screenshot of the inside of the block (to take a screenshot, hold down command control shift 4 and select the portion of the screen you want to select. Then paste directly into this document)\nHow did you use a repeat or for loop in your code?\nExplain how the user interacts with your e-card.\nDid you use a random block or sounds? Whichever one you used, please explain below how you used it in your project.\nIs there anything else you’d like to include, explain or ask? Put it here."
  },
  {
    "objectID": "unit-1/project/index.html#rubric",
    "href": "unit-1/project/index.html#rubric",
    "title": "Project: eCard",
    "section": "Rubric",
    "text": "Rubric\nThe rubric for this project is included in the Google Classroom assignment."
  },
  {
    "objectID": "unit-1/project/index.html#examples",
    "href": "unit-1/project/index.html#examples",
    "title": "Project: eCard",
    "section": "Examples",
    "text": "Examples"
  },
  {
    "objectID": "unit-2/index.html",
    "href": "unit-2/index.html",
    "title": "Unit 2: Abstraction",
    "section": "",
    "text": "Unit 2 … you learn about abstraction"
  },
  {
    "objectID": "unit-2/lab-1/1-number-guessing-game.html",
    "href": "unit-2/lab-1/1-number-guessing-game.html",
    "title": "Page 1: Starting a Number Guessing Game",
    "section": "",
    "text": "On this page, you will begin to develop a number guessing game that uses a local variable to keep track of a secret number.\n\n\n\n\n“U2L1-NumberGuessing”\n\nStart building a new command block called number guessing game that will contain the code for the game. Leave the Block Editor open.\n\n\n\nIn a number-guessing game, the player tries to guess the computer’s secret number. The computer needs a way to store the secret number in a variable so that it can compare it to the player’s guesses. \n\n: Variable\nA variable is like a labeled box that can hold one value at a time, such as one word, one costume, or one list (which can contain many things). You can look at what’s inside as many times as you want.\n\nOn Unit 1 Lab 2 Page 2: Making Programs Talk, you learned about procedural abstraction: giving scripts names by putting them in new blocks. Here, we are starting to look at data abstraction, giving names to numbers, text, lists, etc. When you give something a name, you can refer to it without knowing exactly what the value is.\n\n\n\n\nCreate a script variable called secret number to store the number that the player will try to guess (instructions below).\n\nMaking a Script Variable\n\n\nMove a script variables block into the Scripting Area. You can find it in the Variables palette. \n\n\nName the variable by clicking on the orange a at the end and typing the name you want. Here, it should be called secret number.\n\n\nLater, you will use the script variable by dragging it out of the script variables block (the way you drag an input) and placing it where you need it in your code.\n\nUse  to set the initial value of secret number to a random number from 1 to 10. The set menu lets you select which variable to set.\n\nThe variable secret number is available in the set block only when you snap it somewhere after the script variables block.\n\n\n\n\n\n would be written as\nsecretNumber ← 7\nor .\n\nScript variables are a kind of local variable; they work only within the script where they’re created. If you drag one into a different script, it won’t work. You’ve seen two kinds of local variables before: inputs to blocks and for counters.\n\nExamples you’ve seen before.\n\nYou have created variables as inputs to blocks that you made: \nYou have used the counter variable that the for block gave you: \n\n\n\n: Local Variable\nA local variable can be set or used only in the environment in which it is defined. This term includes inputs to procedures and variables created by the for or script variables block.\n\n\nIn algebra, a variable is sometimes used for something whose value you don’t know yet, and the goal is to find out its value. In programming you decide the values of variables.\n\n\nYou learned about input variables on Unit 1 Lab 3 Page 3: Blocks with Inputs.\n\nWhen you assign a value to a variable, the variable holds that value, not where it came from. For example, if apples = 2 and you , then bananas will hold the value 2 and have no memory of it having come from apples. This is why\na ← a * 2\nmeans something. (Suppose a = 8. First compute the value of\na * 2\n, namely 16, and then replace the old value of a with 16). Up to now, the only variables you’ve used are input variables, and you never assign a value to an input because the value is given by the code that calls it. But a script variable won’t have a value until you give it one with set.\n\n\n\n\n\n\nExamples like this one are useful to test your understanding of assignment to variables, but you wouldn’t use a sequence of assignments like this in an actual program.\n\nWhat value will this code display?\na ← 3\nb ← a\na ← 4\nDISPLAY(b)\n\n\n\n3\n\n\nCorrect! The variable b is assigned the value of the variable a (which is 3 when\nb ← a\nis done).\n\n\n\n\n4\n\n\nThe variable b is given the value of the variable a (which is 3 when\nb ← a\nis done); b doesn’t remember that the 3 came from a so it doesn’t change when a is changed.\n\n\n\n\na\n\n\nThe variable b has been set to the value of the variable a, not the letter “a” itself.\n\n\n\n\nb\n\n\nThe script will display the value of the variable b, not the letter “b” itself.\n\n\n\n\n\n\n\n\n\n\n\nWhat value will this script report? \n\n\n\n-5\n\n\nCorrect!\n\n\n\n\n3\n\n\nThe value of the variable m is always greater than the value of the variable k in this script, so subtracting m from k will give a negative number.\n\n\n\n\n-4\n\n\nThe value of the variable m is 9 at the beginning, but it has been changed by the time it is subtracted from k.\n\n\n\n\n5\n\n\nThe last set command sets the value of the variable k to the value k – m, not m – k."
  },
  {
    "objectID": "unit-2/lab-1/2-checking-player-guess.html",
    "href": "unit-2/lab-1/2-checking-player-guess.html",
    "title": "Page 2: Checking the Player’s Guess",
    "section": "",
    "text": "On this page, you’ll continue to develop your number guessing game to accept player guesses until the player guesses correctly.\n\nYou’ll want the computer to ask players to guess again and again until they guess correctly. To do that, you will use the  block. Repeat until is a loop (just like repeat, forever, and for) but also a conditional (like if and if else). It repeats until a certain condition is met. For this program, the code should repeat until the player’s answer equals the secret number.\n\nYou learned about loops on Unit 1 Lab 3 Page 6: Looping with a Counter.\nYou’ve seen conditionals on Unit 1 Lab 2 Page 5: Adding Variety to Gossip and Unit 1 Lab 5 Page 2: Sprite Following a Sprite.\n\n\n\n\nUse repeat until to ask the player () to guess the secret number until their  equals the secret number.\n\n\n\nDrag the secret number variable out of the script variables block to use it.\nThe ask and answer blocks go together. If you use ask to ask a question, the user’s answer will be reported by answer.\n\n\n\n\nThe code  would be written as\nDISPLAY(\"Why did the chicken cross the road?\")\nuserResponse ← INPUT()\n\nor .\nNotice that the procedure INPUT() accepts the value from the user and returns that input value, which is then assigned to the variable userResponse with the &leftarrow; syntax. In Snap!, this is just like how answer accepts a value from the user and reports it, and that report is what the computer sets the variable user response to.\n\n\n\nAfter the player guesses the secret number, make the computer congratulate the player.\nTest and debug. Take turns playing the game, and fix any problems with the code before moving on.\n\n\nRepeat until makes its decision based on the output of a hexagonal predicate block.\n\n: Predicate and Boolean value\n\n  Why is Boolean capitalized? \n\nThe word Boolean is capitalized because it’s named after a person, George Boole, who invented the branch of mathematics dealing with Boolean operations (such as and, or, and not).\n\n\nA predicate is a hexagon-shaped reporter that asks a true/false question such as these examples:\n \nPredicates report a Boolean value (either  or ).\n\nPredicates fit into a hexagonal input slots of conditionals, such as in  and . Predicates help conditionals decide when to do something.\n\nThe if and if-else blocks are called conditionals because they control the code based on a true-or-false condition.\n\nClick for examples of predicates being used inside conditionals.\n\n \n\n\n\n\n\nWhen the computer congratulates the player for guessing correctly, have the computer say the number. For example, it might say, “You guessed it! My secret number was 7.”\n\n\nUse join to merge the text “You guessed it! My secret number was” with the value of the secret number variable.\n\n\n Checkpoint: Fill out this Google Form \n      \n        \n          \n              \n                  \n              \n              Loading…\n              \n                  Close"
  },
  {
    "objectID": "unit-2/lab-1/3-debugging-extending.html",
    "href": "unit-2/lab-1/3-debugging-extending.html",
    "title": "Page 3: Debugging and Extending Your Number Guessing Game",
    "section": "",
    "text": "On this page, you will practice debugging, and you will make the computer give players hints."
  },
  {
    "objectID": "unit-2/lab-1/3-debugging-extending.html#extending-the-program-with-more-specific-responses",
    "href": "unit-2/lab-1/3-debugging-extending.html#extending-the-program-with-more-specific-responses",
    "title": "Page 3: Debugging and Extending Your Number Guessing Game",
    "section": "Extending the Program with More Specific Responses",
    "text": "Extending the Program with More Specific Responses\n\n\nUse more conditional blocks and predicates to make the computer tell the player whether a guess is too big or too small: “That’s too big. Try again.”  Where in the code should these conditionals go?\nTest and debug. Play your game enough to see if it works the way you want. It should:\n\nask the player to guess its secret number;\nsay whether a wrong guess is too big or too small, and then ask again;\ncongratulate the player for a correct answer.\n\n Checkpoint: Fill out this Google Form \n      \n        \n          \n              \n                  \n              \n              Loading…\n              \n                  Close\n              \n          \n        \n      \n\n\nThe script variable secret number exists only until the script finishes running. When the game is played again, the program will create a new secret number variable and give it a new random number.\n\nIn a later unit, you will teach the computer how to guess a secret number that you have chosen.\n\n\nRight now, the script always picks a number between 1 and 10. At the start of the game, ask the player what the maximum number should be, and make your program choose a number between 1 and maximum.\nUse another script variable to keep track of how many guesses the player makes before getting the right number. When the player guesses the secret number, say how many guesses it took.\n\n\n\n\n\nFind a way to vary the language a bit so that your program does not always repeat exactly the same words in the same situation. For example, if a player guesses too high twice in a row, the program could say “That’s still too big. Try another number.”"
  },
  {
    "objectID": "unit-2/lab-1/4-keeping-score.html",
    "href": "unit-2/lab-1/4-keeping-score.html",
    "title": "Page 4: Keeping Score with Global Variables",
    "section": "",
    "text": "On this page, you will use a global variable to keep score in your Click Alonzo game.\n\nIn your Number Guessing Game, you used script variables to store information (the value of secret number) that was needed by only one script. To keep score in Click Alonzo, more than one script will need access to that information, so you’ll use a global variable.\n\n: Global Variable\nA global variable is a variable that is usable by all scripts in the program.\n\n\nWhen are global variables needed?\nMost of the time, script variables are a better choice because they can’t be changed by some other part of the program, and so they reduce the chance of bugs. But if multiple scripts need access to a variable or if the information in that variable needs to be saved with your project, then use a global variable.\n\n\n\nOpen your U1L1-ClickAlonzo project, play the game, and review the code so you remember how it works.\n\nIf you never completed Click Alonzo or don’t find your own version, please use this version\n\n\n“U2L1-ClickAlonzo”\n\nBe sure to rename your project with “U2” in the filename.\n\n\nIf you save new work under an old filename, Snap! will overwrite your original project. Use “Save as…” from the Snap! File menu to save with the new name. When you load an older project and are about to make a big change, get in the habit of saving first, with the new name, before you change anything.\n\n\nCreate a global variable named score. Here’s how.\n\n\nMaking a Global Variable\n\n\nClick  in the Variables palette. (It’s not a block; you can’t drag it into the scripting area.)\n\n\nType the title for your variable. In this case, it’s score.\n\n\nClick “OK.”\n\n\n\n\nUse the score variable to keep track of the player’s score:\n\n\n\nInitialize score to 0 at the beginning of the game.\n\n\nSetting the starting value of a variable is known as initializing the variable.\n\n\nMake the program change the score by 1 whenever the sprite is clicked.\n\n\n\n (which means ) would be written as\nscore ← score + 1\nor .\n\n\n\n\n\nTest and debug. Play the game enough to make sure that the score variable works. \n Right now, the game doesn’t have a way to win, but you’ll change that. Decide on the score that you will use to test whether the player has won.\nUse a conditional to determine when the player reaches that score. When they do:\n\n\n\nMake Alonzo stop jumping around.\n\n\nMake Alonzo appear again. (You’ll have to reset the ghost effect.)\n\n\nCongratulate the player for a few seconds.\n\n\n\n\nTest and debug. Take turns playing, and fix any bugs. \n\n\nDebugging Tip: Display of Variables\nWhen you are debugging your code, it can help to see the value of a variable at different points in your program. This is done differently for local and global variables:\n\nGlobal variables have check-boxes that control the display of the variable watcher on the stage (shown below). \nIf it’s a local (script) variable, you can use the show variable block inside the script to display a watcher on the stage (and use hide variable to hide it again).\n\n\n\n\n\nIf the sprite moves without being clicked, make the score go down by 1.\nGame too hard? Increase the score by 2 for a hit. Too big a change? Increase by 3 for a hit, decrease by 2 for a miss. You can make arbitrarily fine adjustments. This process is called playtuning a game."
  },
  {
    "objectID": "unit-2/lab-1/5-choosing-avatar.html",
    "href": "unit-2/lab-1/5-choosing-avatar.html",
    "title": "Page 5: Choosing a Costume",
    "section": "",
    "text": "In Click Alonzo, the game switched back and forth between two different versions of the Alonzo costume in order to tell the player whether they successfully clicked Alonzo. On this page, you will allow the user of your Click Alonzo program to choose the sprite’s costume.\n\n\n\nYou learned how to add costumes on Unit 1 Lab 2 Page 3: Customizing and Debugging.\n\n\nIf it isn’t open already, open your U2L1-ClickAlonzo project.\nSet up what you need for this new version:\n\nAdd several costumes.\nDelete the backwards-Alonzo costume.\nRemove the code in the program that changes the costume when you click the sprite.\n\nExperiment with the  block using different inputs to switch the sprite’s costume manually a few times.\n\n\n\nIf you’re playing your game and you want to change the costume, you can just choose the costume you want by name, in the switch to costume block’s pulldown menu. But imagine you’re giving this game to a non-programmer friend to play. You want to program the selection of a new costume inside the game, so your friend doesn’t have to know anything about blocks.\n\nWhen you used item of before (for example, inside who and does what) , you were accessing items of the list randomly. But you can also select a specific item by specifying its position.\n\n: Index\nThe position number is called the index of the item in the list.   In this list, 1 is the index of the item “apple,” 2 is the index of the item “cantaloupe,” and so on.\nIn Snap! and on the AP exam, the index is always a whole number (1, 2, 3, 4, etc.). It is an error to use an index less than 1 or greater than the length of the list.\n\nLists can contain anything: letters or words, costumes, other lists, or even blocks. You can use my to report a list of the costumes for your sprite.\n\nThe my block looks like  until you select “costumes” from its drop-down menu.\n\n\nAnd you can use item of together with my to select a costume in a specific position in the list.\n\nSome blocks (such as item of) have input slots that expect a list. You can tell because the input slot looks kind of like a list:  \n\n\n\nPractice using the index of the costumes in your list to switch the sprite’s costume a few times.\n\nYou can drag blocks into the input slot of switch to costume even though it’s a drop-down menu.  \n\n\n\nYou used ask and answer on Unit 2 Lab 1 Page 2: Checking the Player’s Guess.\n\n\nModify your code so the player can select the sprite costume:\n\nUse a costumes script variable to store the list of sprite costumes.\nUse  to show the contents of that variable.&lt;\nAsk the player “Which costume number do you want?”\nChange to the costume with the index number in the player’s answer.\nHide the costume list.\n\n\nAfter completing this step, your program should do behave exactly like this:\n\n\n\n\nThe list expression  would be written as\ncostumes[2]\nor . All three versions of this code would report/return the penguin costume (if only the AP language had costumes as a data type): \n\n\n\n\n Without using Snap!, predict what each of the following expressions will report:\n\n\n\n\n\n\nExperiment in Snap! to verify your predictions.\n Checkpoint: Fill out this Google Form \n      \n        \n          \n              \n                  \n              \n              Loading…\n              \n                  Close\n              \n          \n        \n      \n\n\n\n\n\nThe expression  would be written as\nLENGTH(wordsList)\nor ."
  },
  {
    "objectID": "unit-2/lab-1/index.html",
    "href": "unit-2/lab-1/index.html",
    "title": "Lab 1: Games",
    "section": "",
    "text": "In this lab, you will use local and global variables to store information.\nTo learn how to do this, you will create a number guessing game where the user’s goal is to guess a number randomly generated by the computer.\nYou will also extend your Click Alonzo work from Unit 1, Lab 1 to use variable to store the score."
  },
  {
    "objectID": "unit-2/lab-2.5/index.html",
    "href": "unit-2/lab-2.5/index.html",
    "title": "Lab 2.5: Flashcards",
    "section": "",
    "text": "In this assignment, you’ll be making a program that will help you study for other classes (or this class!). You’ll create a set of flashcards, and then write a program that will show you the vocabulary word, the definition, and an example or its use in a sentence. \n\n\n\n\nIn the starter code, you can see that the three buttons as shown in the screenshot are included, plus two more blocks that are in sprite “Sprite”:\n\nwrite with returns, which will write given text within a horizontal space given by the second parameter. It will do this as best it can while keeping words together. It will not draw the rectangle around the text as seen above.\nGet Info from Web, which you won’t use until your program is working well. This block will allow you to extend your program to download its flashcards directly from a google sheets document that you create. We will go over how to do this in class when the time is right.\n\nWatch this demo on how your flashcards should function.\n\n Your first step will be to plan out your code.\n\nHow will you create an ADT that can represent a single flashcard?\nHow many fields will it need?\nWhat blocks will you make in order to implement the ADT?\n\nCreate your ADT for your flashcards.\nUsing your ADT, create a list of flashcard objects to hold the information of all the cards. You only need to create a few flashcards to test your program. It will be easy to add more once your program is working the way you like.\nShould your flashcards list be a local or global variable? Why?\n\n\n\n\nSet your program to run in different modes. For example, give it a setting where you can see the definition and you try to guess the word, etc.\nAdd a “done” field to your ADT and a button that allows you to mark a card as done once you are confident you’ve learned the definition. The next time through the stack, this card would not be displayed.\nSimilar to above, but instead of marking it done, you can mark it right or wrong. The program could then display you a list of words you got right and/or a list of words you got wrong. It could also give you a score at the end."
  },
  {
    "objectID": "unit-2/lab-2/1-shopping-list-app.html",
    "href": "unit-2/lab-2/1-shopping-list-app.html",
    "title": "Page 1: Shopping List App",
    "section": "",
    "text": "On this page, you will create a shopping list app.\nMany computer applications—contact lists, playlists, calendars, reminders—involve manipulating lists of information using tools that search, sort, or change the items on the list. You’ve worked with lists before as you customized the gossip project."
  },
  {
    "objectID": "unit-2/lab-2/1-shopping-list-app.html#adding-items-to-a-list",
    "href": "unit-2/lab-2/1-shopping-list-app.html#adding-items-to-a-list",
    "title": "Page 1: Shopping List App",
    "section": "Adding Items to a List",
    "text": "Adding Items to a List\n\nAn element is another name for an item in a list. (If the same value is in the list twice, that counts as two different elements.) Each element has a unique index (position) in the list.\n\nYou can use the  or  block to add elements to a list.\n\n\nInsert puts the new item before the place you specify.\n\n\nAdd puts the item after the last existing item.\n\n\nAssigning a list to a variable lets you use one name to represent all the elements of a list as a unit.\n\n\n would be written as\nINSERT(shoppingList, 2, \"tomatoes\")\nor .\n\n\n would be written as\nAPPEND(shoppingList, \"tomatoes\")\nor .\n\n\n\n\n\nYou’ve seen the ask and answer blocks on Unit 2 Lab 1 Page 2: Checking the Player’s Guess.\nYou’ve worked with multiple sprites on Unit 1 Lab 2 Page 2: Making Programs Talk.\n\n\nWrite a script for the “Add Item” button sprite so that when that sprite is clicked, it will ask the user for a new item, and then put the user’s answer in the grocery list.\n\n\nTest your “Add Item” button several times and fix any problems."
  },
  {
    "objectID": "unit-2/lab-2/1-shopping-list-app.html#removing-items-from-a-list",
    "href": "unit-2/lab-2/1-shopping-list-app.html#removing-items-from-a-list",
    "title": "Page 1: Shopping List App",
    "section": "Removing Items from a List",
    "text": "Removing Items from a List\n\n\n\nWrite a script for the “Clear List” button sprite that asks the user if they’re sure and then sets shopping list back to an empty list.\n\n\nTest your “Clear List” button and fix it if needed.\n\n\n\nYou can also remove items from a list using . The delete block takes an item number and a list as input and it removes the item at that position from the list.\n\n\n would be written as\nREMOVE(shoppingList, 2)\nor .\n\n\n\n\n\nWrite a script for the “Delete Item” button sprite so that when that sprite is clicked, it will ask the user to “Enter the number of the grocery item you wish to delete,” and then remove the item with that number from the grocery list.\n\n\nTest your “Delete Item” button.\n\n\n\n\n\nThe items in a list are values, so you can use item of anywhere you can use any other expression. For example:\n\n\nYou can assign a list item to a variable. On the exam…\n\n\n\n would be written as\nmyFavoriteFood ← shoppingList[3]\nor \n\n\n\n\n\nYou can assign any value to a list item (a number, a string, a sprite, a costume, a script, another list, etc.). On the exam…\n\n\n\n would be written as\nshoppingList[2] ← yourFavoriteFood\nor .\n\n\n would be written as\nshoppingList[1] ← shoppingList[3]\nor .\n\n\n\n\n\n\n\n\nWhen you run this script in Snap!, the second line of code assigns to shopping list 2 the value of shopping list (that is, the same list, not a copy). So, the third line of code modifies both variables:   \n\nHowever on the exam, the statement\nshoppingList2 ← shoppingList\nmakes a copy of the list. So modifying one of them does not modify the other.\n\nThe rules for how to use lists and how they behave differ depending on the programming language you are using.\n\n\nThis shopping list app can be extended in many ways. Try to add the following features, and more if you think of them!\n\n\nTo the “add item’ button, make it so that it checks to see if the item is already present on the list before adding it. You might find the  block to be useful here.\nFigure out what it does (hint: you can right click the block and click “help” to see examples), and then use it in your code.\n\n\nTo the “clear list” button, have it ask the user if they are sure they want to clear the list before proceeding.\nFor this one, see what happens if you put a list in the text field of the ask block. It’s very useful! Like this: \n\n\nTo the “delete item” button, have it give the user the option of deleting the item using the number or the name. Then write code to have it handle either choice.\n\n\nTo the “delete item” button, have it check to see if multiple list items contain requested item as a substring, display all matches and ask user to choose (can also choose none). To work with searching for substrings, try importing the “Strings, Multi-line input” library and using  \n\n\nTo see how to import libraries, click here\n\n\nClick on the file icon on the top left .\nClick on “Libraries…”\nChoose the library that you want to load in.\n\n\n\n\nAdd a new sprite that will use  to write the list to the screen instead of using the native list display.\n\n\nSee the following video to see an example of each of these extensions\n\n\n Checkpoint: Fill out this Google Form \n      \n        \n          \n              \n                  \n              \n              Loading…\n              \n                  Close"
  },
  {
    "objectID": "unit-2/lab-2/2-quizzes.html",
    "href": "unit-2/lab-2/2-quizzes.html",
    "title": "Page 2: Planning a Quiz App",
    "section": "",
    "text": "On this page, you will begin to develop a quiz app by creating an abstract data type to pair the questions with their answers.\n\n\n\n\nDecide what type of quiz you would like to build, and write three to five questions and their correct answers.\n\n\nRead the following section. (Don’t build these in Snap!. You’ll build your own quiz later on the page.)\n\n\n\n\n: Sublist\nA sublist is a list used as an item of another list.\n(The word sublist is also used to refer to some subset of a list.)\n\nYou’ll use a list to store your quiz items in a global variable and use a sublist for each question/answer pair. Then you can choose just one pair at a time to work with.  \nBut code like  is hard to read and understand. A better way is to use abstraction to organize the quiz items. The abstraction just hides the list and item of blocks, so it isn’t complicated to build, but it can make your code much easier to write, read, and debug.  \n\n: Data Types\n\n\nA data type is what kind of data something is (number, text string, list, etc.). For example, number is the data type for the first input to  and list is the the data type for its second input.\n\n\nEach programming language provides some primitive data types (data types that are built-in). For example, Snap! provides numbers, text (words and sentences), Booleans (true or false), lists, and some you haven’t yet used as data (such as sprites and costumes). This menu shows all of Snap!’s primitive types.\n\n\n\n\n\n\n\n: Abstract Data Types\n\n\nThe word “abstract” is often used casually to mean something harder to understand or more complex, but in computer science, its meaning is almost the opposite. ADTs are things that you, the programmer, create to make your program easier for you and others to read, debug, and improve.\n\n\nAn abstract data type (ADT) is a custom data type that’s meaningful to your program. It’s not built into the language; you develop it as you code. This is an abstraction because it hides the details inside the constructor and selectors so that the programmer who uses a quiz item has to think only about questions and answers, not about list indices.\n\n\nThe  block is the constructor; it constructs one example of the data structure. By naming the pieces of the structure, the constructor makes it certain that every time you use it, you build the structure in the right order. \n\n\nThe  and  blocks are the selectors; they each select one piece of the data structure. \n\n\nThe constructor and selector together implement the quiz item abstract data type.\n\n\nData abstraction is the creation and use of abstract data types in a program.\n\n\n\n\n\n\n\n“U2L2-Quiz” \n\n\n\nBuild the custom quiz item abstract data type (both the constructor and the two selectors).\n\n\nSpecifying an Input Type\nYour selectors expect a quiz item, i.e., a list, as input. You can make your blocks show what type of data they expect. It’s not necessary in Snap! but, like assigning a color to a block, it can be a helpful reminder of what the block does and what type of input it expects. You’ve already seen input slots of several shapes, indicating different expected data types.\nIn the Block Editor while creating a selector, click on a plus sign to enter an input name. Then…\n\n\nClick on the arrow to the right of the input name: \n\n\nChoose the data type you want for that input. (For this project, you’ll use the “text” and “list” input types.)\n\n\nClick “OK.”\n\n\n\n\nCreate a global variable to store your quiz items and initialize it as a list of items, using your constructor where appropriate.\n\n\nSnap! has two different views for lists within lists. You can switch which view you see by right-clicking (or control-clicking) on the quiz watcher (or whatever you called the variable) on the stage.\n\nIf you don’t see the watcher on the stage, make sure the checkbox beside the quiz variable in the Variables palette is checked. \n\n\n\nTable View for computer science quiz Watcher (your quiz will be different): \n\nMy watcher is too narrow.\n\nAt first the watcher will look like this:  Drag out the resize handle at the lower right to get this:  Then hover your mouse over the letter A near the top. It will turn into a digit 1. Grab it and drag it to the right: \n\n\n\n\nList View for computer science quiz Watcher: \n\n\n\n\n: Table\nA table is a two-dimensional data structure with rows and columns. If you’ve used a spreadsheet program, what it displays is a table.\nIn Snap!, a table is implemented as a list of lists, in which each sublist is one row of the table.\n\n\n\nTest both the selectors for different items in your list of quiz items, and debug any problems."
  },
  {
    "objectID": "unit-2/lab-2/3-traversing-list.html",
    "href": "unit-2/lab-2/3-traversing-list.html",
    "title": "Page 3: Checking Each Quiz Answer",
    "section": "",
    "text": "On this page, you will complete your quiz app by using a new block that loops through a list: \n\n\nThis should be an FYTD. Is is everywhere else. –MF, 5/30/20\n\nIf it’s not already open, open your project U2L2-Quiz.\n\n\nThe students are considering how to use their abstract data type as they develop the code for their project.\n\n\nAlphie: We can use our  and  selectors to get the question and answer for quiz item in our list. But how do we get the quiz item out of the list in the first place?\n\n\nGamal: Maybe we can use item of inside a for loop and use the index from the for loop as the first input to item of, like this: \n\n\nUsing the result from item as the input to address from contact is called composition of functions.\n\n\nBetsy: Yeah, we could, but that’s a little hard to read with that index variable, i, to keep track of. And if we add more questions, we’ll have to update that number 4 that tells us when to end the loop. I bet we can use for each to traverse the list.\n\n\nBetsy drags for each into the scripting area. \n\n\nGamal: We could even rename item something logical like quiz item. Then the code inside will run once for each quiz item in our list.\n\n\n\n: Traversing a List\nTraversing a list means looking at each item of the list. For each is iterative. That is, it’s repetitive, like for, which can also traverse a list. But unlike for, for each traverses the list without using index numbers.\n\n\n\n\nUse for each to traverse your list, asking each quiz question, checking each answer, and letting the user know if they are right or wrong on each item.  Do not copy the code that Gamal did above\n\n\nTake your quiz a few times as a user would, and work out any problems with the code. Then, give your quiz to a friend.\n\n\n\n\n\n\nIf the user is wrong, don’t just let them know, but tell them the right answer too.\n\n\nUse a script variable to keep track of the player’s score and report it at the end of the quiz.\n\n\n\n\n\n\n\nThe procedure\ngoto()\nisn’t built in to the AP’s language so it is written in lower case like other programmer-defined procedures.\n\nThe script  would be written as\n\nFOR EACH point IN myDrawing\n{\ngoto(point)\n}\n\nor .\n\n\n\n\n\n\nBefore telling the user the right answer, give them three tries to get it right.\n\n\nUsers might give answers that are close enough but not exactly the answer you expected. For example, someone might answer “What kind of variable is available only in the part of the program where it is defined?” with “a local variable,” “local variable,” or just “local,” or the same possibilities for “script variable.” So your question answer ADT could take a list of keywords in the second slot and accept any answer that includes any of the keywords (so in this case, the list would be {local, script} and would accept “a local one”). Use  to adapt your code.\n\n\n\n Checkpoint: Fill out this Google Form \n      \n        \n          \n              \n                  \n              \n              Loading…\n              \n                  Close"
  },
  {
    "objectID": "unit-2/lab-2/index.html",
    "href": "unit-2/lab-2/index.html",
    "title": "Lab 2: Making Lists",
    "section": "",
    "text": "In this lab, you will create tools for storing and accessing data by creating an app that manages a shopping list and a quiz program."
  },
  {
    "objectID": "unit-2/lab-3/1-what-is-predicate.html",
    "href": "unit-2/lab-3/1-what-is-predicate.html",
    "title": "Page 1: What’s a Predicate?",
    "section": "",
    "text": "On this page, you will review predicates and build a few that you can use in other projects.\n\nAs you know, predicates are reporter blocks (functions) that always report a Boolean value (they report only the values  or ). In Snap!, predicates are represented by hexagonal blocks. They compute the condition used by conditionals (such as if, if else, or repeat until) to decide when to do something.\n\nSo, the input type of a conditional is Booleans, and the output type of a predicate is also Booleans.\n\n: Domain and Range\n\n\nThe input type (often called domain by programmers) of a function is the type of data that it accepts as input.\n\n\nThe output type (often called range) of a function is the type of data that it reports as output.\n\n\n\nAlong with “abstraction,” these two ideas are among the most important in computer science. If you get in the habit of using them in your thinking, you’ll have many fewer bugs in your programs, because you’ll automatically double-check that the output type of a reporter matches the input type of the block in which you’re trying to use it.\n\nPredicates ask a true/false question such as “Is the random number 3?” or “Is this sprite touching the sprite called ‘Leader’?”\nEvery if else block has two scripts inside of it, exactly one of which will be run depending on the value that the predicate reports. Then the computer continues with whatever comes after the if else block.  \n\n\n\n\n“U2L3-Predicates”\n\n\n\nIn Unit 1 Lab 5, you made a script to get the sprite to follow the mouse.  \nNow use one or more of the following relational operators to create a script that lets you use your mouse to write on the stage in two colors depending on the mouse’s position on the stage. \n\nClick for an example of writing on the stage in two colors.\n\n\n\n\n\n\n\n\n\nYou may see these five relational operators:\n=, &gt;, &lt;, ≥, ≤\nas well as a sixth:\n≠\n, which means “not-equal” and reports false if the two inputs are equal and otherwise reports true (if they are not equal). When you write the  block, it will work like this:  \n\nThese six relational operators all report a Boolean value (true or false).\n\n\n\n\n Make the sprite draw only if the mouse button is down, so that you can draw disconnected shapes. You’ll need to uncheck the “draggable” box above the scripting area (shown right) before you try this (so that Snap! doesn’t think you are trying to drag the sprite when you click).\n\nYou’ll probably want to use the  block, which you can find in the Sensing palette.\n\n\n\n\n\n\n: Sequencing, Selection, Iteration\nSelection means deciding (selecting) which part of an algorithm to run based on whether a condition is true or false.\nEvery algorithm can be constructed using sequencing (following steps in order), selection (deciding), and iteration (repeating)."
  },
  {
    "objectID": "unit-2/lab-3/2-combining-predicates.html",
    "href": "unit-2/lab-3/2-combining-predicates.html",
    "title": "Page 2: Combining Predicates",
    "section": "",
    "text": "On this page, you will combine predicates using Boolean functions to write on the stage in three colors."
  },
  {
    "objectID": "unit-2/lab-3/2-combining-predicates.html#boolean-functions",
    "href": "unit-2/lab-3/2-combining-predicates.html#boolean-functions",
    "title": "Page 2: Combining Predicates",
    "section": "Boolean Functions",
    "text": "Boolean Functions\nAt the very lowest level, computer circuitry is made of wires, and each wire is either on or off. So the only operations that can be performed at that lowest level are those that operate on single-bit values (just ones and zeros, that is, just ons and offs). These are called logical (or Boolean) functions. (They’re predicates, because their range is Booleans, but these are special in that their domain is also Booleans.) There are three Boolean functions in the Operators palette: \nNotice that both the blocks themselves and the input slots in the blocks are hexagonal. Boolean functions take Boolean values (True or False) as inputs and report a new Boolean value as output. When you use Boolean functions in a program, though, the inputs will usually be expressions such as .\n\n\nExperiment with different input values in all three blocks, and take notes about the results you get.\n\nInstead of dragging a true or false block into the input slot of an and, or, or not block, you can click the empty input slot to control a true/false toggle: \n\n\n\nThe and and not blocks work exactly the way you’d expect from the meanings of those words in English:\n\n\n reports true, and any other combination of inputs reports false.\n\n\n reports the opposite of whichever input value you use.\n\n\nBut or is a little different in computer science. In English, the word “or” has two different meanings:\n\n\nEither but not both: such as “Let’s check whether it will be rainy or sunny tomorrow.” In computer science, this is called exclusive or because one option excludes the other.\n\n\nEither or both: such as “Ask your teacher if you have any questions or if you need help.” This is called inclusive or because it’s possible for both options to be included.\n\n\n\n\nExperiment. Does the  block implement exclusive or inclusive or?\n\n\n\n\nThe , , and  blocks will appear as\nAND\n,\nOR\n, and\nNOT\nand will work exactly the same way as they do in Snap!.\n\n\n\n\nMake the blocks  (which reports true if the first number is less than or equal to the second number, and false otherwise),  (which reports true if the first number is greater than or equal to the second number, and false otherwise), and . (You can copy the characters ≤, ≥, and ≠ from this page and paste them into the Snap! Make-a-block window.)\nSo these\nBuild a predicate that tells whether an input is between two other inputs, and test it with several different cases.\n\nYou can decide whether between? will include the two boundary inputs or not.\n\n \n\n\nMaking a Predicate \n\n\nChoose the hexagonal predicate shape.\n\n\n\nYou must use the  block to report the result of reporters (including predicates).\n\n\n:\n\n\n\nUse between? to create a script that lets you write on the stage in three colors (depending on the height on the stage), using your mouse.\n\n\nClick for an example of writing on the stage in three colors.\n\n\n\n\n\n\n\n\n\n\n\n\nBecause there are only two Boolean values (true and false), there are only four combinations of inputs for a two-input Boolean operator. Here are the four combinations shown with the or operator:    \n\n\nWith or, the four combinations report true, true, true, and false in that order. (Check for yourself that this is true.) So, you can represent the or function as TTTF (using T and F as abbreviations for true and false). What are the four letters for the and function? (Assume the same ordering of the inputs: TT, TF, FT, and FF as shown above with or.)\n\n\nMake up another set of four letters (such as TFTF), and build a predicate function with that behavior. Describe how the function behaves.\n\nClick to see an example showing and describing the behavior of TFTF.\n\n    The TFTF function reports true whenever the second input is true no matter what the first input is. It’s not a useful function because you could just use the second input as the predicate instead of building this predicate function.\n\n\n\n\nDo the same thing with another set of four letters.\n\n\nHow many possible two-input Boolean operators are there?\n\n\nObviously, TTTF (the or function) is useful, but TTTT is not useful (why not?). Which of the possible two-input Boolean operators do you think would be useful? Discuss why.\n\n\nHow many three-input Boolean operators are there?"
  },
  {
    "objectID": "unit-2/lab-3/3-combining-conditionals.html",
    "href": "unit-2/lab-3/3-combining-conditionals.html",
    "title": "Page 3: Combining Conditionals",
    "section": "",
    "text": "On this page, you will learn about nested conditional statements.\n\n\n\n\n Here are four possible ways to define ≥. Discuss what advantages each style has: \n\n\nDo they all work correctly?\n\n\nWhich seem elegant because they are short?\n\n\nWhich seem elegant because they are clear?\n\n\nWhich seem elegant because the steps are simple?\n\n\nWhich is closest to how you think about ≥ in math class?\n\n\nWhich seems clearest to you?\n\n\n   \n\n\n\n\nA nested conditional statement is an if or if else statement inside another if else statement.\n\nLook back at the first two examples in the previous problem. Since the predicate expression a = b will report true when they are equal and false otherwise, it’s unnecessary to use the nested conditional statement in the first example, and the second example using the predicate inside the else part is sufficient. Sometimes, however (especially when you aren’t building a predicate), it can be helpful to use nested conditional statements.\n\n\n\n Describe what this code segment will do. \n\n\nLook back at your code for writing on the stage in three colors. If it doesn’t already use a nested conditional statement, copy the code, and create a new version that does.\n\n\n Checkpoint: Fill out this Google Form \n      \n        \n          \n              \n                  \n              \n              Loading…\n              \n                  Close"
  },
  {
    "objectID": "unit-2/lab-3/4-boolean-experiments.html",
    "href": "unit-2/lab-3/4-boolean-experiments.html",
    "title": "Page 4: Boolean Expression Experiments",
    "section": "",
    "text": "On this page, you will match Boolean expressions with the pictures they help create.\n\n\n\n Read this script carefully, discuss it with your partner, and make sure you understand why it produces this picture on the stage:  \n\nChanging the Boolean expression in the if block changes the picture. Discuss why the expression  generates this picture:\n\n\nMatch the Boolean expressions with the pictures. There are more expressions than pictures.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCompare answers with another pair and resolve any disagreements.\nOn paper, sketch the pictures for the expressions you didn’t match with pictures in the previous problem (without using Snap!).\n\nInvent Boolean expressions you can plug into the dot-picture script to generate these pictures:\n\n\n\n\n\n\n\n\n\n\n\n Checkpoint: Fill out this Google Form \n      \n        \n          \n              \n                  \n              \n              Loading…\n              \n                  Close"
  },
  {
    "objectID": "unit-2/lab-3/5-keeping-list-items.html",
    "href": "unit-2/lab-3/5-keeping-list-items.html",
    "title": "Page 5: Keeping Items from a List",
    "section": "",
    "text": "On this page, you will use predicates with the keep block to keep items in a list that have specific characteristics.\n\nAs you know, predicates can be used with conditionals to decide when to do something; they can also be used with keep to decide which things to keep. The  block takes a list and a predicate as input, and it reports a new list keeping only the items from the input list that make the condition described by the predicate true.\nFor example, the following expression will find words from the words list whose first letter is v. The blank input slot is where each item of the list goes to decide if it will be kept. \n\n: String and Index\n\n\nA string is an ordered sequence of characters.\n\n\nYou’ve already learned the word index for the position of an element in a list. The same word is used for the position of a character in a string (for example, a letter in a word). So the first input to letter is the index.\n\n\n\n\nYou write the predicate that does the checking, and keep applies the predicate to each item in the input list and then reports the list of items that make your predicate true.\nNote that the blank input slot in the predicate is required; this is where each item from the list goes as it is checked by the predicate.\n\nThe letter block in the palette looks like . You have to delete the “world” so that there is a blank slot where you need it to be.\n\n\n\n\n\n\n\nThis project contains two example keep expressions and an initialize list procedure (you can look inside it to see what it does).\n\n\n\n Experiment with these examples of keep. Discuss and then explain in writing what these expressions are doing.  \n\n\n\nThe first example keeps inputs of a certain length; every word in the list is asked whether its length is 5, and only those with five letters are reported. The second example keeps inputs that are not numbers; every item in this list is asked “Is this item not a number?” and only the elements that are not numbers are reported.\nThere are two length blocks in Snap!. One () is designed for strings, and the other () is designed for lists.\n\n\n\nIf you don’t see a list of words on the stage, run initialize list. Then use keep to answer these questions:\n\n\nHow many 12-letter words are in words list?\n\n\nHow many 15-letter words are in words list?\n\n\nHow many 17-letter words are in words list?\n\n\n\n\n Checkpoint: Fill out this Google Form \n      \n        \n          \n              \n                  \n              \n              Loading…\n              \n                  Close"
  },
  {
    "objectID": "unit-2/lab-3/6-solving-word-puzzle.html",
    "href": "unit-2/lab-3/6-solving-word-puzzle.html",
    "title": "Page 6: Solving a Word Puzzle",
    "section": "",
    "text": "Nobody would have to ask a computer “Does spaghetti have 5 letters?” The block should be retitled WORD ( ) HAS ( ) LETTERS so that it looks more sensible. –bh\nThen chase the change forward into 5.1 starting on page 2, editing started files, solutions, and TG in both units as needed. –MF, 7/14/20\n\n\nOn this page, you will solve a crossword puzzle by combining predicates using the and block. You will then use the resulting predicates with keep to find words with specific characteristics.\n\n\n\n\n\n\n\n\nYou have used the  block in the Operators palette together with = and keep to find words of a certain length in the words list.\n\n\nReassemble that script so that you can find all the words that have 8 letters.\n\n\nFind all the words that have 11 letters.\n\n\nYou now have an expression that you can edit to test any word for any number of letters. This is a useful tool to have. Create and test a predicate block that takes a word and number as input and works like this:  \n\n\n\n\nBuild an expression using the  block with = and keep to find words that have certain letters in certain places.\n\n\nUse it to find all the words that begin with the letter i.\n\n\nFind all the words whose fourth letter is r.\n\n\nYour block’s title can be different from the one shown here as long as it does the same job.\n\n\nIf you have not yet turned your expression into a predicate block, do that now. Your block should work like this:   \n\n\n\n\nUse your predicates, along with and and keep, to solve this Unit 2 Lab 3 Word Puzzle.\nTo show your work, please make individual scripts for each word that you find. Place your scripts from top to bottom in the order that you found the words in. So, you are going to have multiple copies of similar scripts and change up what you are doing each time.\n\nFor example, this expression searches for 6 letter words that start with r and have d as the third letter: \n\n\n\nAll the words in the puzzle are related to the AP CS Principles course.\n\n\n\n\n\n\n Checkpoint: Fill out this Google Form \n      \n        \n          \n              \n                  \n              \n              Loading…\n              \n                  Close\n              \n          \n        \n      \n\n\n\n\n\n\nCreate and test a predicate block that checks whether a certain letter is in a word. Examples below. Your block should:\n\n\nAccept two inputs: a letter to check for and a word, and\n\n\nReport whether or not the input word has the input letter.\n\n\n \n\n\n Create this block:  The first input is a pattern, which is a word in which some of the letters have been replaced by hyphens (minus signs)."
  },
  {
    "objectID": "unit-2/lab-3/index.html",
    "href": "unit-2/lab-3/index.html",
    "title": "Lab 3: Making Decisions",
    "section": "",
    "text": "In this lab, you will develop tools to help solve word puzzles by searching for words that match specific characteristics.\nYou will learn about predicate blocks and how to use predicate blocks with a higher order function, namely the keep block."
  },
  {
    "objectID": "unit-2/lab-4/1-mod-operator.html",
    "href": "unit-2/lab-4/1-mod-operator.html",
    "title": "Page 1: The Mod Operator",
    "section": "",
    "text": "On this page, you create a predicate to check whether one number is divisible by another.\n\n\n\n\n\n“U2L4-MathLibrary”\n\n\n\nExperiment with the  block.\n\n\nTry various inputs.\n\n\nKeep the second number constant, and try various inputs for the first number.\n\n\nForm a hypothesis. What do you notice?\n\n\n\n\n\n\nThe mod block reports the remainder when the first input is divided by the second. For example,  reports 2 because when 17 is divided by 5, the remainder is 2. When one number divides another evenly, the remainder is 0. So for example,  reports 0.\n\n\n\n\nDifferent programming languages have different ways of handling negative inputs to the mod function. So you won’t see any negative numbers used with mod on the exam.\n\nThe mod operator: The expression  would be written as\n17 MOD 5\non the exam. If you see an expression with variables as input to mod, such as\na MOD b\n, you can assume that a is zero or positive, and b is strictly positive (because you can’t divide by 0).\n\n\nOn the exam, you may see these four arithmetic operators:\n+\n,\n-\n,\n*\n,\n/\n(plus, minus, times, divide) as well as\nMOD\n.\nArithmetic operators are part of most programming languages. (Most text languages use\n*\nrather than\n×\nfor multiplication because\n×\nisn’t on most keyboards, and because it looks too much like the letter x.)\n\n\nOrder of operations: In a block language, the nesting of blocks determines the order of operations. For example, in  you can see that the + block is an input to the × block, so the expression means 3×(5+4). Similarly,  means (3×5)+4. In Snap!, it’s as if there are parentheses around every operation. But in text languages, you can write\n3 * 4 + 5\nwithout parentheses, so they need the rules you learn in math class (multiplication before addition, and so on). The mod operator is like multiplication and division; it happens before addition and subtraction. So for example,\n7 + 5 MOD 2 - 6\nmeans\n7 + 1 - 6\n, which is, of course, 2.\n\n\n\n\n\nIn a later lab, you can use your even? block to draw a brick wall because the even and odd numbered rows are different.  \n\n\nUse mod to build a  predicate that tests for divisibility.  \n\n\nUse this divisible by? predicate to build a predicate that tests whether its input is even (divisible by 2).  \n\n\n\n\n\n\n\n\nKatherine Johnson (1918–2020) was an aerospace technologist with a Ph.D. in mathematics who worked for NASA calculating the motion of spacecraft. Johnson, originally hired as a human computer, verified the calculations of digital computers, helped calculate the trajectory of Apollo 11 (the first time humans walked on the Moon), worked on plans for a mission to Mars, and encouraged students to pursue careers in science, technology, engineering, and mathematics.\nNASA’s memorial video: “Katherine Johnson: An American Hero”\n\n\n\nAAP-2.H.2\n\n\n\nThe procedures\nmove()\nand\nturn_clockwise()\naren’t built in to the AP’s language so they are written in lower case like other programmer-defined procedures.\n\n\n\nThe conditional expression  would be written as\n\nIF(size &gt; 15)\n{\nREPEAT 4 TIMES\n{\nmove(size)\nturn_clockwise(90)\n}\n}\n\nor \n\nAs in Snap!, if the condition (size) &gt; 15 is true, the code inside the if statement runs; if the condition is false, the code does not run.\n\n\n\n\n\n Is it true that (12 MOD 2) &gt; (11 MOD 2)? Explain your reasoning.\n\n\n\n\n\n\nBuild a predicate that tests whether its input is an integer. You may find  useful.  \n\n\n\n\n\nOpen your U2L3-Dots project, and save it again as U2L4-DotsTIF. Remind yourself about how the pictures are determined by the Boolean expression used.\n\n\nInvent Boolean expressions for these pictures:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick for a hint.\n\nSome of these include expressions of the form  with something like  in the empty input slot, and maybe different numbers in place of 20 and 2.\n\n\n\n\n\n Checkpoint: Fill out this Google Form \n      \n        \n          \n              \n                  \n              \n              Loading…\n              \n                  Close"
  },
  {
    "objectID": "unit-2/lab-4/2-math-predicates.html",
    "href": "unit-2/lab-4/2-math-predicates.html",
    "title": "Page 2: Making a Mathematical Library",
    "section": "",
    "text": "In this project, you will create a library (a collection) of math tools that builds on the blocks you created in Lab 3 Page 2: Combining Predicates.\n\n\nAAP-2.M.3, AAP-3.D.3\n\n\nA software library is a collection of procedures that can be used in programs.\n\nUsing libraries simplifies the development of new programs. When you use procedures that you already know work correctly, you reduce the amount of time you need to spend coding, the number of possible bugs your code can have, and how much of your project you need to test.\n\n\n\nExport the mathematical blocks from your U2L3-Predicates project.\n\n\nExporting Blocks\n\n\n\nOpen the Snap! project from which you want to export blocks. (In this case, your U2L3-Predicates project.)\n\n\nChoose “Export blocks…” from the Snap! file menu ().\n\n\nSelect only the block(s) you wish to export. (In this case, you want , , , and .)\n\nYou can either deselect the blocks you don’t need exported, or you can right-click the background, choose “none,” and then select only the ones you want.\n\n\n\nSnap! libraries and Snap! projects are both exported as XML files.\n\n\nClick “OK.” An XML file will download.\n\n\n\n\n\nImport these blocks into your U2L4-MathLibrary project, test them and resolve any issues, and save.\n\n\nImporting Blocks\n\n\n\nOpen the Snap! project into which you want to import blocks. (In this case, your U2L4-MathLibrary project.)\n\n\nImport the XML file by dragging the XML file from your downloads folder into the Snap! window.\n\nYou can also import the XML file by choose “Import…” from the Snap! file menu, locating the XML file on your computer, and clicking “Open.”\n\n\n\nTest the blocks that you imported:\n\n\nFind the imported block(s) at the end of the palettes that contain them.\n\n\nClick each imported block to make sure it runs properly.\n\n\n\n\n\n\n\n\n\nYou are creating a math library. Snap! has libraries for many things, such as one for accessing different parts of words and sentences…  \n\n\n\nDebugging Dependencies\n\n\nYou created your even? block using another custom block, divisible by?. If you want to use even? in another project one day, you must export both blocks in order for even? to work properly.\nIf you ever see this red Obsolete! block in code you have imported, it means that a required block was not exported. You’ll have to go back to the original project and export again being sure to select all of the blocks needed by the blocks you want.\n\n\n\n\n\nAAP-2.M parts a and b, AAP-3.D\n\nCopy and modify the code from your even? predicate to develop an odd? predicate for your library.  \n\n\n\n\nAAP-2.M.1, AAP-3.D.2\n\nYou can create algorithms from scratch or by combining or modifying existing algorithms. When you are thinking of using existing code, you can either use your own code or use code from someone else’s library.\n\n\n\n\nAAP-2.M parts a and b\n\nDevelop a  block (using keep), and use it to answer these questions:\n\n\nWhat kinds of numbers have an odd number of divisors?\n\n\nWhat kinds of numbers have exactly two divisors?\n\n\n You can do this on your own or follow these steps.\n\n\n\nBuild a divisors block using keep.  \n\nHints about building the divisors block\n\n\n\nYou could build this with for or for each, but it will require less code to build it with . (You learned about keep on Unit 2 Lab 3 Page 5: Keeping Items from a List.)\n\n\nYou could build this with mod, but you already built  (using mod), so divisible by? will be simpler to use.\n\n\nThe  block may be helpful.\n\n\n\n\n\n\nBuild a number of divisors block.  \n\n\nBuild an expression using keep to answer each of these questions that were introduced above:\n\n\nWhat kinds of numbers have an odd number of divisors?\n\n\nWhat kinds of numbers have exactly two divisors?\n\n\n\n\n\n\n\n\n\n\n\n\n For each of the two questions about divisors above, determine: why do these kinds of numbers have these kinds of divisors?\n\n\n\nYou’ve now made a small library, and you might want to write a list of instructions for how to use the functions in your library (for example, divisors of takes a positive integer as input and reports a list of numbers). The instructions form an Application Program Interface for the library.\n\n: APIs\n\nAAP-3.D.4, AAP-3.D.5\n\nAn application program interface (API) documents what a programmer needs to know about using a library: it’s a description of each procedure’s purpose, inputs, and outputs (but not its algorithms).\n\nWhat is a Web API?\n\nA common kind of API is a web API in which the library exists on someone else’s computer. For example, the Google Maps API describes how to embed a Google Map on your own website.\n\nI’m actually inclined to cut all the rest of this yellow box. –MF, 1/15/20\n\nA web API is just a call to a procedure on another machine. For example, these are three different notations for the same procedure call, which looks up the number of searches for “BJC” in the US:\n\n\nhttps://trends.google.com/trends/explore?q=BJC&geo=US\n\n\nEXPLORE (q = BJC, geo = US) \n\n\n\n\n\nThe only difference is that the URL shows where on the Internet to find the procedure.\n\n\n\n Checkpoint: Fill out this Google Form \n      \n        \n          \n              \n                  \n              \n              Loading…\n              \n                  Close"
  },
  {
    "objectID": "unit-2/lab-4/3-other-math-reporters.html",
    "href": "unit-2/lab-4/3-other-math-reporters.html",
    "title": "Page 3: More Mathematical Reporters",
    "section": "",
    "text": "In this project, you will create mathematical blocks that combine several numbers, such as a sum block, which combines two numbers using addition:  \n\n\n\n\nOpen your U2L4-MathLibrary project if it isn’t open already.\n\n\nBuild blocks for maximum (reporting the larger of two input numbers) and minimum (reporting the smaller of two input numbers):  \n\n\n\nThe  block takes two inputs: a list and an operation with two inputs, and it reports the result of combining all the elements in the input list using the input operation. For example, the expression below reports: 0 + 1 + 2. \n\nYou choose the operation, and combine performs that operation by combining all the items in the input list and then reports the result.\nNotice that the function used to combine the list items always has two blank input slots. The keep block only needs one blank in its input function, but with combine, two are required.\n\n\nCombine is a higher-order function; it is a function that takes a function as input. You’ve seen another higher-order function already: keep (in Unit 2 Lab 3).\nUnlike keep, the combine function is only used with a few input functions. Which functions?\n\nCombine is mostly used with only these functions:       and the  and  blocks you’ve just written yourself.\nWhy so few?\n\nThe function has to be associative, meaning that it can’t matter what order you group the items in. For example, addition is associative: (7 + 8) + 1 is the same as 7 + (8 + 1) (work it out yourself), but subtraction is not: (7 − 8) − 1 is different from 7 − (8 − 1). So expressions like  would be ambiguous.\n\n\n\n\n\n\nUse combine to build maximum of list and minimum of list.  \n\n\nCreate a sum of list block that reports the sum of the items of a list. \n\n\nCreate an average of list block that calculates the average of the items in a list: \n\nHint about average of list\n\nFirst think: how do you calculate an average? Then think: what blocks could help you do that in Snap!?\n\n\n\n\n\n\nAAP-2.M.2, AAP-2.O.4\n\nAverage of list and sum of list are procedures that you’ll need repeatedly, so after a while, you just know how to write them, or you’ll put them in a library, and you won’t have to reinvent them each time. Finding the maximum or minimum value in a list and checking for divisibility are also commonly needed algorithms.\n\n\nAAP-3.C.2\n\n\nYou saw the procedure definition for a command in Unit 1 Lab 3 Page 4: Modify Your Pinwheel.\n\n\nThe definition for a reporter looks much like the definition for a command except that it includes an\nRETURN\n(like report). For example, this definition\n\nIn many languages (including Snap!) variables must be declared in some way (in Snap!, you can click the “Make a variable” button or use the script variables block). But the AP’s language doesn’t include variable declarations, so you won’t see them on the exam.\n\n would be written as\n\nPROCEDURE squareRoots(number)\n{\npositiveRoot ← sqrt(number)\nRETURN([positiveRoot, -1 * positiveRoot])\n}\n\n\nor \n\nAs with report in Snap!, when a\nRETURN\nstatement is executed, the flow of control returns to the place in your code where the procedure was called, and the procedure returns the value of the expression inside the\nRETURN\ncommand or report block.\n\n\n\nAlso, the procedure\nsqrt\nisn’t built in to the AP’s language so it is written in lower case like other programmer-defined procedures.\n\n\n\n\n\n\nAAP-2.H.3\n\n\nThe conditional expression  would be written as\n\nIF(a &gt; b)\n{\nRETURN(true)\n}\nELSE\n{\nRETURN(a = b)\n}\n\nor \n\n\nAs in Snap!, if the condition\na &gt; b\nis true, the code in first block of statements runs; if it is false, the code in second block of statements runs.\n\n\n\n\n\n\n\nThe greatest common divisor of two integers is the largest positive integer that is a divisor (a factor) of both integers.\n\nDevelop a greatest common divisor block. (Use your  block.)  \n\nHint about building greatest common divisor\n\nYou may find it useful to use maximum of list as well as divisors and also to build an intersection block that takes two lists as input and reports all of the items that are on both lists.  More detailed hints about greatest common divisor\n\nIn order to find the greatest common divisor of two numbers you will need to find:\n\n\nThe divisors of each input number\n\n\nThe numbers that are divisors of both input numbers\n\n\nThe greatest number that is a divisor of both input numbers\n\n\n\n\n\n\n\n\n Checkpoint: Fill out this Google Form \n      \n        \n          \n              \n                  \n              \n              Loading…\n              \n                  Close"
  },
  {
    "objectID": "unit-2/lab-4/index.html",
    "href": "unit-2/lab-4/index.html",
    "title": "Lab 4: Making Computers Do Math",
    "section": "",
    "text": "In this lab, you will program procedures to carry out mathematical tasks. And by the end of it, you will have your own personal library of mathematical operators made from primitive blocks"
  },
  {
    "objectID": "unit-2/lab-5/1-copyright.html",
    "href": "unit-2/lab-5/1-copyright.html",
    "title": "Page 1: Copyright",
    "section": "",
    "text": "On this page, you will discuss and reflect on your own opinions about copying other people’s creative work.\n\n\n\n\nDo a show-of-hands survey of the class:\n\n\nWho has music on their phone or computer that they didn’t pay for (or download from a legitimate free distributor)?\n\n\nWho has movies on their phone or computer that they didn’t get legally?\n\n\nWho has games on their phone or computer that they didn’t get legally?\n\n\n\n\nNow a different kind of question:\n\n\nWho thinks it’s okay to steal music?\n\n\nWho thinks it’s okay to steal movies?\n\n\nWho thinks it’s okay to steal games?\n\n\n\n\n\nIf your class is like most classes, the first set of questions got very different responses from the second set. Discuss in small groups: Is it “stealing” to download artistic works without permission? Why or why not?\n\n\nDiscuss in small groups: Suppose anyone were allowed to download any music, movies, etc., they want. How could the artists (musicians, writers, producers, actors, and so on) support themselves?\n\n\n\nIOC-1.F.1\n\nThe copyright law makes it illegal for anyone to make copies of someone else’s work (a book, a painting, a song, etc.) without the permission of the author. There are exceptions, as you’ll learn later in this lab.\n\n\nWrite out your opinion on some of these copyright issues. How well does your own behavior match what you think society should do?\n\n\n\n\nIOC-1.F.4, IOC-1.F.6\n\nCopyright violation is very different from plagiarism, which means pretending that you wrote someone else’s work. You can illegally copy someone’s work but say it’s theirs (copyright violation), or you can copy something that isn’t protected by copyright because it was written a long time ago, and pretend it’s yours (plagiarism). They’re both illegal. Copyright is complicated, but it’s easy to avoid plagiarism: Just give credit to whoever wrote the stuff you want to copy."
  },
  {
    "objectID": "unit-2/lab-5/2-fairuse.html",
    "href": "unit-2/lab-5/2-fairuse.html",
    "title": "Page 2: Fair Use",
    "section": "",
    "text": "MF: Can we do something to make this not just reading?\n\n\nOn this page, you will learn about times when it is ok to copy part of someone else’s work.\n\nCopyright protection is not absolute. Various kinds of “fair use” are allowed by US and some other countries’ copyright laws. Here are some examples of fair use:\n\n\nYou can quote a short excerpt from someone else’s work for purposes of reviewing the original.\n\nWhat counts as “short”?\n\nThe definition of “short” is complicated and is different for different works. You might be able to use an entire page of a long novel, but in the picture books written for very young children, a page would be a significant fraction of the entire work, and would not be allowed. It took several lawsuits to settle whether the hip-hop technique of sampling older music was legal. (The answer: generally not, unless permission is given by both the recording artists and the song writers.)\n\n\n\n\nYou can copy newspaper articles for use in teaching a class if the event reported in the article was not anticipated when you planned your class and you don’t keep using the same article year after year. (This is why BJC’s “Computing in the News” is legal, even if your teacher passes out copies of actual news articles.)\n\n\nYou can produce a parody of a copyrighted work.\n\nThe most famous case of this kind is the 2001 novel The Wind Done Gone, by Alice Randall. It retells the story of Margaret Mitchell’s 1936 novel Gone with the Wind, which concerns a wealthy slave owner from the pre-Civil-War South named Scarlett O’Hara. The Randall novel tells the story from the point of view of one of Scarlett’s slaves, Cynara. Mitchell’s estate sued Randall and her publisher for copyright violation, but Randall claimed fair use under the parody rule. After an appeals court overturned a ruling against Randall, the case was eventually settled after the publisher, Houghton Mifflin, donated part of the profits to the historically-Black Morehouse College.\n\n Copyright 2016 by Ruben Bolling. Used by permission.\n\n\nThere are other ways you can use someone else’s words that aren’t technically “fair use” but are legal:\n\n\nTitles are not copyrightable at all. You can write a song and call it “She Loves You,” as long as the song itself is different from the Beatles’ version.\n\n\nYou can, of course, copy anything if you get permission from the copyright holder.\n\n\nAuthors who want their works to be generally available and to be usable in ways they may not have thought of themselves, such as the authors of this curriculum, will often include with their works a general license allowing anyone to use them, such as a Creative Commons license.\n\n\nIOC-1.F.5\n\n\n\nCreative Commons is a specific family of copyright licenses that allow others to use, share, maybe sell, and maybe revise your work.\n\n\n\n\nLook at the very bottom of this page. This curriculum is under a CC-BY-NC-SA license, which is a Creative Commons (CC) license meaning that anyone can use and publish the curriculum or a modification of it, provided that they credit the authors (BY The University of California, Berkeley, and Education Development Center, Inc.), they use it not for profit (NC, non-commercially), and they license any modified version under the same terms (SA, share-alike). Because of the NC part, this is not technically a “free license,” which would allow use for any purpose (including for profit). People argue over whether it’s ethically necessary to allow that much freedom of use.\n\n\n\nIOC-1.F.5\n\nIdeas similar to Creative Commons are used for particular kinds of material:\n\n\nFree software means software that anyone can copy, use, modify, and redistribute, including commercially, provided that any modifications must be under the same license.\n\n\n Doesn’t the “provided that” make it unfree?\n\nThe reason for that restriction is to prevent other people from turning a modified version of the software into non-free software with restrictive licensing. That’s the only thing you’re not allowed to do: make it unfree.\n\n\n\nOpen source software is a more general term that means that you make the program’s source (human-readable) code available to anyone. You may still restrict how people can use the program.\n\n\n What’s the point of making it available if people aren’t allowed to use it?\n\nOne reason is for security software, so that people can check that the software isn’t leaking your password or other data, and will therefore trust you. (One reason many people don’t trust computerized voting machines is that their manufacturers keep their code secret.) Another reason for open source is that you’re hoping other people will contribute improvements to your proprietary software.\n\n\n\nOpen access scholarly research reports are available for free download, rather than requiring the permission of a journal publisher.\n\n\n\n\nIOC-1.F.7\n\nWhy would an author give away the right to make copies of a work? Generally it’s because the author wants to contribute to the community, doesn’t want to be greedy, and hopes that the work will be widely used and enjoyed. Open licensing has enabled broad access to digital information."
  },
  {
    "objectID": "unit-2/lab-5/3-bargain.html",
    "href": "unit-2/lab-5/3-bargain.html",
    "title": "Page 3: The Social Bargain",
    "section": "",
    "text": "On this page, you will consider some of the legal history of copyrights.\n\nHere’s the US Constitution (Article 1, Section 8) on copyrights and patents:\n\nThe Congress shall have Power […] To promote the Progress of Science and useful Arts, by securing for limited Times to Authors and Inventors the exclusive Right to their respective Writings and Discoveries; […]\n\nPay special attention to the part about “for limited Times.” Despite the “right” in the name “copyright,” copyrights aren’t rights the way freedom of speech, or even owning a house and the land underneath it, are rights. In the case of homes, an owner can pass the right of ownership on to her children, grandchildren, and so on forever. But copyrights and patents are in force only for a limited time.\nOver the past 50 years or so, Congress has repeatedly extended the duration of copyrights. Critics note that each of these extensions has come just as the first Mickey Mouse cartoon was about to pass out of copyright. Although all concerned say this is a coincidence, the Disney company has become a sort of poster child for abuse of copyrights. Ironically, many of the Disney cartoons (Snow White, Cinderella, etc.) are based on stories that are in the public domain (okay for anyone to use), but would still be under copyright if today’s copyright law had been in effect when earlier versions were written.\nWhy did the writers of the Constitution include provisions for copyrights (and patents)? What they had in mind was not an absolute property right, but rather a bargain in which society lets authors and inventors make a lot of money from their ideas, but in return those ideas must eventually belong to the entire society, free for anyone to use.\n\n\nWhen someone has a birthday party at a restaurant, it’s very common that when they bring out the birthday cake, all the waiters gather around the table and sing “Happy Birthday.” But until quite recently, they did so illegally; there is a copyright currently owned by Warner/Chappell Music, based on the original authorship of a song with the same melody but different lyrics by sisters Patty and Mildred Hill in 1893 (more than a century ago). A 2015 court decision has invalidated the copyright, but it may be appealed by Warner, which had been collecting about $2 million per year in fees charged for permission to use the song, especially in films."
  },
  {
    "objectID": "unit-2/lab-5/4-digital.html",
    "href": "unit-2/lab-5/4-digital.html",
    "title": "Page 4: Copyrights and Computers",
    "section": "",
    "text": "On this page, you learn about how technology allows for perfect copies at no cost and why that matters.\n\n\nEasy Copies, Easy Distribution\n\n\nIOC-1.F.2\n\nIn the past, making a copy of something required a physical medium: paper, cassette tape, CD, videotape, DVD, etc. So in the old days, copyright holders didn’t have to worry about individuals copying something for their friends. The cost limited the number of copies anyone would make. And before computers, copies were never perfect. So copyright holders ignored individual copying and focused on people with bulk copying facilities who sold large numbers of copies illegally.\n\nIOC-1.F.11 bullet 1\n\nBut now anyone can post a copy of something online at zero cost, and anyone else can download or stream the content directly from the Internet. So today the big threat to copyright holders is individuals, especially when the individual posts the illegal copy on the web for many people rather than just emailing it to a few people they know personally. Therefore, without copyright, the official publisher would be competing with people who can give away copies for free.\n\n“Information Wants to Be Free”\n\n\nIOC-1.F.11 text before bullets\n\nThat’s a slogan that arose in the early days of the Internet, to argue against copyright. Since everyone can copy everything so easily, according to this argument, the idea of artificially restricting such copying is doomed to failure; copyright is obsolete. But technology makes copying digital media essentially free, so copyright is also more important than ever! In the old days, copying was limited by the physical cost. Now there’s nothing but copyright allowing artists to support themselves, which is a legal and ethical issue.\n\n\n\nDo a web search for “Information wants to be free” and find arguments for and against that view."
  },
  {
    "objectID": "unit-2/lab-5/5-drm.html",
    "href": "unit-2/lab-5/5-drm.html",
    "title": "Page 5: Software as Copyright Enforcement",
    "section": "",
    "text": "On this page, you will learn how encryption is used for copyright enforcement.\n\n\nDigital Rights Management (DRM)\n\n\nIOC-1.F.3\n\nComputers and the Internet support the free exchange of media, but they can also be used to prevent it. Many digital media are distributed in encrypted form. Buyers can’t play the media without the software that decrypts them, and the software will only do so if certain conditions designed by the publisher are met. Maybe a file can only be played on a particular computer. Maybe there can’t be two copies with the same serial number. Maybe the file times out on a particular date and can never be used again.\nDigital Rights Management (DRM) software is a big change in the social contract. The whole idea of copyright is that eventually it expires and the work is in the public domain, freely copyable by anyone. But DRM allows publishers to have it both ways: they get copyright protection during the time when a work is most popular, and DRM gives them control over the content forever.\n\nThe Digital Millennium Copyright Act\n\nThe Digital Millennium Copyright Act (DMCA) is a US law that went into effect in 1998. It makes it a crime to figure out how to defeat DRM systems, whether or not a copyright is actually violated. It protects Internet service providers and website operators from third-party copyright violation penalties (for example, if you post a copyrighted video on YouTube, YouTube is not liable) provided that the operator (YouTube) removes the infringing material as soon as it is notified of the violation. If the original poster thinks the material does not violate a copyright, the burden is on them to prove it.\n\nAre there any exemptions?\n\nTemporary exemptions to the anti-circumvention part of the DMCA can be made by the Librarian of Congress for a three-year period (a surprising choice, since the Library of Congress previously wasn’t involved in judging copyright issues), but any such exemption must be renewed by the Librarian every three years. Most such exemptions are made for technical reasons (e.g., to allow one piece of equipment to work with another piece of equipment from a different manufacturer), but there was great excitement in 2010 when the Librarian of Congress allowed people to jailbreak their cell phones.\n\n\nHere two examples of manufacturers using the DMCA in creative ways, possibly not for purposes envisioned in the original copyright provisions.\n\n\nPrinter Ink Cartridges: Printer manufacturers don’t make much money when you buy a printer; competition drives prices down. Instead, they make profits when you buy replacement ink cartridges because you have to buy ones that fit the printer. Lexmark, a printer manufacturer, developed a technology by which printers would not use cartridges unless they provided a Lexmark digital signature. Another company reverse-engineered the cartridge and created their own cartridges that would work with Lexmark’s printers. Lexmark sued under the DMCA, claiming a copyright violation because the other company copied the tiny program that provided the signature. Ultimately Lexmark lost; what they did was determined not to be a legitimate use of the DMCA.\n\n\nDVD Region Codes: The fine print on the back of a DVD case often says something like “this DVD is licensed for sale in North America.” This restriction is enforced by DRM. Your DVD player knows what region of the world it’s in. The purpose of this system is to allow film companies to sell DVDs cheaply in poor countries but charge more in rich countries. (Without region coding, people would import DVDs from the poor countries and resell them here. Region coding can also be used to allow different versions of a film to account for different censorship rules.) This system is protected by the DMCA.\n\n\nDoesn’t this violate free-trade?\n\nArguments have been made that region coding violates free-trade treaties that forbid most restrictions on exporting goods from one country to another. It would definitely be a treaty violation if the US government had invented region coding, but since it’s a creation of private companies, the question has not been settled. But the DMCA law can be seen as though the government is enforcing the region coding, so some people argue that it is a treaty violation.\n\n\n\n\n\n\nPeople in poor countries have more limited access to technology than people in rich countries. Look up the “Digital Divide” to find out about this problem. Do you think DVD (and Blu-Ray, by the way) region coding contributes to the digital divide?"
  },
  {
    "objectID": "unit-2/lab-5/index.html",
    "href": "unit-2/lab-5/index.html",
    "title": "Lab 5: Copyrights",
    "section": "",
    "text": "In this lab, you will learn about copyright: its history, what kinds of copying are legal or illegal, how technology has changed copyright issues, and how copyright is enforced with software."
  },
  {
    "objectID": "unit-2/optional-projects/1-magic8ball.html",
    "href": "unit-2/optional-projects/1-magic8ball.html",
    "title": "Automated Fortune Teller",
    "section": "",
    "text": "PG: It’s optional, but still feels like “why am I doing it?” “why is it being suggested?” No obvious learning goal, even as an optional project. But, fine, whatever, it’s optional. PLEASE don’t “trick your friends to think…actually knows…truth.” That is (to me) so offensive, not to mention so unrealistic. And “have fun but please be nice” is even more offensive. The first says the kid should not be trustworthy, and the second says we don’t trust the kid. Wow!\nBH: Hints page.\nMF: I made edits on 9/26/18 that need review; have they learned about sound blocks (I don’t think so)\n\n\nIn this project, you will build an automated fortune telling program inspired by the Magic 8 Ball® that randomly offers answers to YES/NO questions. Click the video below to watch the app in action.\n\n\n\n\n\nCreate your own fortune-telling app. You can personalize it as you like. For example, you might create your own messages.\n\n\nYou may wish to look at the Wikipedia entry for Magic 8 Ball® for some possible responses that the app could give to a yes/no question. Notice that of the twenty possible answers listed, ten are affirmative (green), five are non-committal (yellow), and five are negative (red).\n\n\n\n\n\n\nPersonalize your project; use other images for the costumes, and maybe even add sounds.\n\nYou can import images and sound files from your desktop into your project by dragging and dropping them into the Snap! window. \n\n\n\nTrick your friends into thinking that your automated fortune teller actually knows things and tells the truth. Create a version of your model that allows you to select among a certain type of choices when a particular key is secretly pressed. For example, maybe when the key “1” is pressed only affirmative answers are chosen, when the key “2” is pressed only non-committal answers are chosen, when the key “3” is pressed only negative answers are chosen."
  },
  {
    "objectID": "unit-2/optional-projects/2-egyptian-motif.html",
    "href": "unit-2/optional-projects/2-egyptian-motif.html",
    "title": "Egyptian Motif",
    "section": "",
    "text": "Need to rebuild images with plain prototype labels. –MF, 9/26/18\n\n\nPG: Islamic art is a great candidate for computer drawing, and the samples in TiF B seem like good ones. I’d prefer to have some good /real/ illustrations. I don’t see how the top stuff (everything before TiF B) is Egyptian. Feels like another bow to “some culture” without being genuine. But the project is pretty, so can we give it a learning purpose?\nBH: The obvious way to draw the picture in the pink box is as a decorated hexagon.\nMF: I want to revise this page. Some suggestions added to the page.\n\n\n \nMuch Islamic art applies principles of geometry and repeats simple patterns to form complex forms. For example, the Egyptian Motif above has six overlapping rectangles.\nIn this project, you will learn how to extend your pinwheel code from Unit 1 to create such intricate patterns.\n\n\n\n\nWhy are we giving them the code for these blocks instead of asking that they build and/or import them? I suggest cutting #1 and #2 and merging the first part of #3 into the pink box (I like the #3 images better than those in the pink box anyway). The work starts halfway through problem #3. I want to revise this page, but for now I just moved #10 from a solo FYTD into the ITIT box. –MF, 9/26/18\n\n\nIn this project, you will repeatedly use rectangles, so first recall how to create a rectangle block.  \n\nNote the use of pen down and pen up blocks inside the rectangle definition. We don’t normally do this but here this is done to simplify the more complex code coming ahead. This will ensure that once a rectangle is drawn, the pen is up and you don’t need to worry about unintended scribbles as your drawing sprite continues moving to execute the rest of the code.\n\n\n\nAlso recall the pinwheel code you have written in Unit 1. \n\n\nIn this project, you will replace the pinwheel branches with rectangles as shown below. Note use of color is optional and is used here for clarity.    Now create a pinwheel with rectangles block. It will have two more inputs width and length for the width and length of the rectangles.  Its code will be identical to the pinwheel code except that it has the rectangle block inserted in between the two move blocks that created the pinwheel branches.  \n\n\nNow, use the “Variables” menu to make variables that will allow you to vary all aspects of the designs you create and do not forget to initialize these variables right after the when green flag clicked block \n\n\nYou can turn these variables to alterable sliders by right-clicking on the variable icon that is shown on stage and choosing the “slider” option. And then you can set the minimum and maximum values of a slider as shown.  The following should be reasonable values for the minimum and maximum of each variable:\n\nYou can change these minimum and maximum values as you generate and explore new designs.\n\n\n\n\n\n\n\n\n\nVariable\nMinimum\nMaximum\n\n\n\n\nnumber of branches\n3\n36\n\n\nsize\n0\n100\n\n\nbackup\n0\n100\n\n\nwidth\n0\n150\n\n\nlength\n0\n150\n\n\n\n\n\nClick on the animation below to see an example of how you can use the slider functionality in Snap! to generate and explore a vast number of variations of your designs.  \n\n\nYour code needs to make sure that the computer is always on the watch in case any of the variables are changed by the user via the sliders. You can do so with a forever block. \n\nThe warp block makes sure that the pinwheel with rectangles is drawn all at once rather than step by step.\n\n\n\nOnce the code is written check to make sure everything works as intended. You may need to position your drawing spite appropriately to make best use of the stage you have. Now move each of your sliders to generate and explore a vast variety of designs inspired by Islamic art.\n\n\nUse these buttons to maximize your stage to give enough room for your sliders. \n\n\n\n\n\n\nAdd color to your rectangles by inserting  into the start of the warp block in the forever loop and inserting into the pinwheel with rectangles code.\n\n\nTake screenshots of your creations and share with the class. Put them on a class web page if you have one. Below are some examples of the types of variations you can generate.\n\nYou may want to  the drawing Sprite (Arrow) before taking the screenshots of your designs.\n\n  \n\n\n\n\n\n\nRepeat all the steps of this project but, instead of using rectangles, use other polygons.  \n\n\nRead more about Islamic art and find other patterns that would lend themselves to explorations by programming."
  },
  {
    "objectID": "unit-2/optional-projects/4-plurals1.html",
    "href": "unit-2/optional-projects/4-plurals1.html",
    "title": "Modeling Language: Plurals, Part 1",
    "section": "",
    "text": "PG: This /has/ a learning purpose. It’s lost in “optional.” The learning purpose is couched in machine generation of language, but the content/programming goals are also practice of old, learning new, and foreshadowing. The important “new” is the essential element of problem decomposition and abstraction: this problem is too difficult /without/ decomposing it, but perfectly tractable /with/ decomposition. And then, perfectly extensible to Spanish or…\nBrian and Mary are considering possibly one day making these two pages into a non optional lab before or after Lab 4. –MF, 1/2/21\n\n\nSiri and other robots are programmed to generate language. Siri speaks; some robots write. You have developed a program, gossip, that writes. In this project, you will extend the computer’s abilities with language by developing a reporter block, plural, that takes a noun as input and correctly spells and outputs the plural     Spelling a plural can seem almost automatic for a person, but it is not simple: a computer needs an algorithm to do that task.\n\n\n\nThis project uses blocks already loaded for you from Snap!’s “Words, sentences” library. You can load a library from the Snap! File menu  under “Libraries…”.\n\n\n\nTo do this project, you will need to use the new blocks , and . You will also need  and , which you used in Unit 1 Lab 2, Gossip and Greet.  Try all its expressions (the nine one-line scripts) and experiment with their inputs until you are sure you understand what they do. For each expression, say what that script does in general not just what it does with this particular input. (Example:  reports “y”, but you want to say what last letter of will report if, say, “2017” is its input.)\n\n\nYou won’t need  for the project, but you might find it interesting to try it not only with “when,” as an input but with “where,” “what,” “wherefore.” Linguists use evidence like this to understand the history of a language.\n\n\nChoose the reporter button when you make plural. \n\n\nHere’s one way to start building the plural block. Build this much and test it out on at least “day” and “boss” and “medicine,” to make sure it works correctly for those. If it does not, edit and fix it.  \n\n\nDebugging:  Try to find words for which this version of plural does not work correctly. List the words you find. Organize that list, sorting the words into categories according to their last letter. For example, it will get wrong some words that end with the letter “h”. Try to find many words it gets wrong.\n\n\nSave your list.\n\n\nCreate a Snap! list like this  containing all of your test words (successful or otherwise).\n\n\n\n“U2-Plural” Save your file. You will need this list.\n\n\n\n\n\nYour plural block should now work correctly for “day” and “boss” and “moth,” but it probably doesn’t yet work correctly for the word “box”:  Edit your plural block to make it work for words that end with “x”. Test it to make sure it does work properly. \n\n\n\nYou can do the same for conjugating verbs in Spanish or some other language you choose. See the Take It Further section at the bottom.\nThe next two steps are worth learning—very useful for testing plural and in more advanced work later on—but not essential for building plural.\n\n\n\nUse map to test all the words on your list. Leave the slot in plural empty, as you see here. The map block inserts each element of the list into that slot and reports a list of the results.  For now, don’t worry about the words it still gets wrong, as long as it works for “day,” “boss,” “moth,” and “box.”\n\n\nIn your map script, replace plural with. Try it. Now explain what the map block does, in general.\n\n\nExperiment with  and  to see what they do. Again, leave the slot in last letter of empty, as you see here. That is the placeholder for keep to test each word the list. Explain what the keep block does.\n\n\n\n\n\n\nIf you know another language, build a block that takes a pronoun and verb as input and outputs the correct form of that verb. For example:"
  },
  {
    "objectID": "unit-2/optional-projects/5-plurals2.html",
    "href": "unit-2/optional-projects/5-plurals2.html",
    "title": "Modeling Language: Plurals, Part 2",
    "section": "",
    "text": "Need to redo KEEP images. –MF, 6/27/20\n\n\n\n\nREVISION NOTE: Students EXTEND their list of nouns as needed. At each testing stage, have them map their “specialist block” or their plural block over the entire list and note which words are and aren’t correctly pluralized.\n\n\nRebuild the images without white backgrounds. –MF\n\n\n\nYou can improve plural to work correctly with more words. If the project is not already open, please reload it. (The suggested file name was U2-Plural.)\n\n\n\nAbstraction:  Make a  block that “specializes” on just one category, words that end with the letter “h”.\n\n\nStart with a list of the words you want it to work for.\n\n\nThis specialist block should work correctly for words that fit its specialty  , . It can be completely wrong about words that don’t fit its specialty  because the plural block should never give words to plural-h unless those words end with “h”.\n\n\nTest  with a variety of words to make sure it works the way you want. Then use map to test it on the entire list you made earlier.\n\nClick for a hint about creating a test list of words that begin with “h”.\n\nBecause you know what  does, you can use its output as input to a test of plural or plural-h: \n\n\n\n\n\n\nAbstraction: Language often has special cases. In English, the plurals of some nouns add “s”; some add “es”; nouns like “calf” and “fly” become “calves” and “flies”, changing their final letters before adding “es”. And more. For a programming task this complex, it’s (generally) best to break it into parts, handle each part separately with its own procedure (its own block), and then have the “top-level” block—in this case, plural, itself—use those specialists. That is, instead of coding every little detail directly in plural, it is cleaner and clearer to make plural look something like this. \nShowing the structure of the method—just the overall strategy—in the “top-level” block and leaving the details to separate blocks is one part of an important computer science idea called abstraction. Abstraction keeps your code clear, readable, and more easily debugged. It will also help your code be more flexible.\n\n\nWhen you trust your new specialist block, edit plural to use the specialist. Test (you can use map) to make sure plural still works for all the words it used to work for, as well as the new ones.\n\n\nCreate plural-y to handle words like  and \n\n\nRemember, any specialist can make mistakes if it’s asked to do a job that isn’t its specialty. For example:  Make sure plural gives plural-y only words it knows how to handle correctly.\n\n\n\n\n\n\nI’m not thrilled with the way this pushes a particular implementation for a reason that’s hidden until they get there, and doesn’t make sense on its own. bh\nAny better now? BTW, I moved what was TIF A up into an endnote in 1. –MF, 1/11/21\n\n\nI cleaned this up a bit and added a “tough stuff” icon on part B. I think part B is very hard. More could be done to make it clearer, but I don’t have the time for that now. One concern that this we should address now is not using “…” where what we need is jaggies. Can you please replace those two images with the complete images, and I’ll jaggy them?   \nAlso, can you make sure that the TG and the solutions match this version after you review it? Thanks! –MF, 1/11/21\n\n\n\nExtend plural to correctly handle a input word that has a space at the end.\n\nRight now, if plural is given a word with a space at the end, it leaves that space in the plural:  Figure out how to handle this special case and edit plural so that the result is  You already have a block that specializes in making plurals of words that don’t have a space at the end. Use it.\n\nSurprise! Once plural works for a single space at the end of a word, try giving it . That works too! But why?\n\n\n Does your plurals block still feel cluttered, even though the details about how to handle each possible last letter are abstracted into specialist blocks? One way to improve on this situation is to use another kind of abstraction called data-directed programming.\n\n\nStart by making a list of key-value pairs, with last letters as the keys and specialist procedures as the values: \n\nTo make the second item of each small list, find the block you want, put it in the second input to list, then right-click on the block and choose “ringify.” As the “x” example shows, it doesn’t have to be a block named plural-something. It just has to have an empty input slot where you want the word to go.\n\n\n\nThen in your plural procedure, you can replace most of the if blocks with \n\n\nWe haven’t taught FIND FIRST yet. So I looked at 3.3.3 where we first use it, and we don’t teach it there either. :/ We actually teach it in 5.3.4. So I dragged some of that content back into U3 and also here. –MF, 1/11/21\n\nFind first is a higher-order function works similarly to keep, but it reports only the first item that’s found. It is equivalent to item (1) of (keep).\nThe call block in the palette doesn’t include the “with inputs” in the picture; when you click on its right arrowhead, those words will appear along with an input slot. The call block’s first input slot is the empty gray ring, which means that call wants a block in that input slot. When you drag item 2 of pair into that slot, the ring remains around it. That’s usually what we want when using call, but not this time. Right-click on the item of block and choose “unringify” from the menu.\n\nYou can experiment with call to see what else you can do with it. What happens if you don’t unringify the item block? What happens if you leave out the “with inputs” and the second input?\n\n\n\n\nThere’s no reason the keys have to be single letters. Modify the code in plural so that it tests all trailing substrings of the word against the specialist list. That is, if the word is “ditch,” you’d look in the specialist list for “ditch,” then for “itch,” then “tch,” “ch,” and finally, if nothing else is found, “h.” You’d put  in the list, and then words ending “ch” would have “es” added. This mechanism is very general; it works even for special cases such as  (You’ll have to define the word function that just reports its input; it’s needed because you can’t type letters directly into a ring.) Now you have a really uncluttered plural block. And it’ll even work for a language other than English, if you make a different specialist list.\n\n\nIf you modify the trailing-substring test so that instead of giving up if it can’t find the last letter of the word as a key, it goes one step further and looks for an empty key in the specialist list, and you add  to the list, then you can be sure that every possible word will match that, if nothing else, so you don’t need the if any more. Your plural block can now be just one-line: report (call (item 2 of (longest trailing substring ....\n\n\nFor an extra challenge, modify your trailing-substring test so that a plus sign in the key matches any vowel (it will serve as a wild-card character), so you can do this:"
  },
  {
    "objectID": "unit-2/optional-projects/6-kaleidoscope.html",
    "href": "unit-2/optional-projects/6-kaleidoscope.html",
    "title": "Making a Kaleidoscope",
    "section": "",
    "text": "In this project, you will build an app that lets you draw like a kaleidoscope. \n\nOne sprite is following the mouse. Three other sprites are reflecting the movement of that sprite in slightly different ways.\n\n\n\n\n“U2-Kaleidoscope”\n\n\n\n First, create and test code to make the first sprite follow the mouse and draw a line tracing its path.\n\n\nUse an event to trigger the kaleidoscope behavior so that users don’t have to open each sprite and click each script to start the drawing.\n\n\nMake the sprite draw only when the mouse is down (You’ll need to uncheck the “draggable” box so Snap! doesn’t think you are trying to drag the sprite when you click.)\n\n\n\nNeed a reminder?\n\nYou learned how to make the sprite follow the mouse in Unit 1 Lab 5 Page 1: Sprite Following the Mouse. You learned how to detect an event on Unit 1 Lab 1 Page 2: Programming a Game. And you learned how draw only when the mouse is down by using if else with mouse down? in Unit 2 Lab 3 Page 1: What’s a Predicate?.\n\n\n\n\nCreate a second sprite that mirrors the movement of the first one.\n\nOne way to create the second sprite is to duplicate the first one and modify it. Right-click the sprite-button in the sprite corral (in the lower right of the Snap! window), and select “duplicate” from the context menu that appears. The new sprite will have the same scripts as the original, which is why duplication is easier than creating new sprites from scratch.\nNeed a hint about making the second sprite mirror the first one?\n\nYou’ll want the second sprite either to go to the same x-position and the inverse y-position or to go to the inverse x-position and the same y-position.\nNeed another hint?\n\nUse  inside .\n\n\n\n\n\nTest your code and debug any problems.\n\nYou may wish to use an event (such a pressing the “c” key) to tell the program to clear the stage and stop all scripts. This will make testing and debugging easier.\n\n\n\nCreate two more sprites that mirror the two you have.\n\nIf your second sprite mirrored the first horizontally, then the third and fourth sprites should mirror those vertically, and vice versa.\n\n\n\n\n\n\n\nExperiment with some of the following ideas, or make up your own changes to the kaleidoscope.\n\n\nChange the pens:\n\n\nYou learned about set pen color and set pen size on Unit 1 Lab 3 Page 1: Exploring Motion.\n\n\nAdd some colors.\n\n\nAdjust the pen sizes.\n\n\n\n\nCreate more sprites:\n\n\nAdd new sprites that use mouse x as the y input and mouse y as the x input.\n\n\nAdd new sprites that are shifted some distance away from another sprite.\n\n\n\n\nCreate variations of your own."
  },
  {
    "objectID": "unit-2/project/index.html",
    "href": "unit-2/project/index.html",
    "title": "Project: Survey",
    "section": "",
    "text": "This is an individual project. This means that all of your work must be your own, indisputable work. If you need help on something, you may ask other people for help, however, the scripts that you create must be your own work. If there’s any convincing evidence that the work that you submit is not your own, you will recieve an automatic 0 on this project and any participation grade related to working on the project."
  },
  {
    "objectID": "unit-2/project/index.html#survey-requirements",
    "href": "unit-2/project/index.html#survey-requirements",
    "title": "Project: Survey",
    "section": "Survey requirements:",
    "text": "Survey requirements:\n\nPlan out your survey by following these requirements that your survey must have:\n\nAsk the user for their name, grade, and at least one other question.\n\nThe other question(s) must only be multiple choice or ask for a numerical answer. Please ask only school-appropriate questions.\n\n\nOne aspect of your survey will be to analyze the data that you collect from them.\n\nCome up with three simple questions that you want to answer using the data that you collect\nFor example: If you asked “How many books have you read so far this month?” you could analyze the data to answer the following research questions:\n\nWhat is the average number of books people have read so far this month?\nWhat is the maximum number of books people have read so far this month?\nHow many people have read at least two books this month?\n\nCome up with two more complex questions that you want to answer using the data that you collect.\nFollowing up from the previous examples, you could analyze the data to answer research questions similar to:\n\nHow does the average number of books people have read so far this month differ between grades?\nHow does the number of people who have read at least two books this month differ between grades?\n\nSo instead of investigating just one thing among everyone, your two questions are expected to touch on how something differs between different types of people."
  },
  {
    "objectID": "unit-2/project/index.html#program-specifications",
    "href": "unit-2/project/index.html#program-specifications",
    "title": "Project: Survey",
    "section": "Program Specifications:",
    "text": "Program Specifications:\n\nCreate a Snap! program that can act as a survey that meets all of the following specifications:\n\n\nImplements a “survey response” Abstract Data Type with a constructor and all relevant selectors.\nFor example:  \nImplements a data collection feature on “Answer Survey” sprite.\n\nWhen the sprite is clicked, it collects data from the user by asking the user questions and gathering their responses using the ask and answer blocks.\nFor example: \nStores the collected data in a list that is stored as the variable survey responses using your ADT that you created above.\n\nImplement the block  that puts at least ten example responses into the list.\nImplements a data analysis feature on the “Analyze Survey” sprite.\n\nWhen the sprite is clicked, it allows the user to choose from one of the five research questions that you planned out prior to the program.\nThe code must process the data to answer your five research questions by using the two higher order functions that you learned from this unit (some questions may only need one of them or both).\n\n\n\n\nWhen using , you must have at least one instance where you use a self-developed predicate block for the condition in the keep.\nFor example, you could make a predicate block like  and use it in your keep\n\nMust use the  block in your code.\n\nAll of the code is provided for you and works properly.\nYou cannot edit the script in the block at all.\nWe promise you will find a use for the block in your project.\n\nYou cannot change the scripts in the “Answer” and “Analyze” sprites at all!\n\nYou can make insignificant changes, such as changing where the sprites are or changing the costumes."
  },
  {
    "objectID": "unit-2/project/index.html#google-form-specifications",
    "href": "unit-2/project/index.html#google-form-specifications",
    "title": "Project: Survey",
    "section": "Google Form Specifications",
    "text": "Google Form Specifications\n\nWhen you have finished your project, fill in the given Google Form on Google Classroom.\n\n\nThe Google Form has the following questions for you to answer:\n\nNot finalized yet."
  },
  {
    "objectID": "unit-3/index.html",
    "href": "unit-3/index.html",
    "title": "Unit 3: Data Structures",
    "section": "",
    "text": "In Unit 3, we learn about creating data structures in Snap, or practices for creating well structured code in Snap.\nWe’ll learn about algorithms, debugging tips, how to make readable code among the various things that you do, and the state of AI and computers."
  },
  {
    "objectID": "unit-3/lab-1/1-robot-in-a-maze.html",
    "href": "unit-3/lab-1/1-robot-in-a-maze.html",
    "title": "Page 1: Robot in a Maze",
    "section": "",
    "text": "In this project, you will create algorithms to escape from a maze.\n\nImagine you’re a robot trapped in a maze. You don’t have a bird’s-eye view so you can see all the possibilities (shown below left). Instead, you’re inside it, and the walls are taller than you are (shown below right).\n\nImages by Scratch user Legolover8888 and Wikimedia user Oxyman\n\n \n\n\n\nCome up with an algorithm to escape from any maze. Write it down on paper.\n\n\nAAP-2.A, AAP-2.G, AAP-2.J\n\n\nLooking at your algorithm, find examples of:\n\n\nsequence (several steps done one after another)\n\n\nselection (a place where the algorithm does one of two things depending on some condition)\n\n\nrepetition (the algorithm does the same thing over and over)\n\n\n\n\nWithout using Snap!, consider: Does your algorithm work on the maze in the first picture on this page? Start at the orange circle, facing north (in the direction of the arrow). Your goal is to reach the red X.\n\n\nIf your algorithm didn’t work, debug it.\n\n\n\n\nAAP-2.M.2 bullet 4\n\nOne well-known maze algorithm is called “Follow the left wall.” The idea is to keep your left hand touching a wall. If suddenly your left hand isn’t touching a wall, there’s a corridor to the left, and in order to keep your hand on the left wall, you turn left and go down the corridor. If instead you bump into a wall in front of you, then in order to keep your hand on the left wall you’ll have to turn right. (Draw a sketch if that doesn’t make sense to you.) For many mazes, this simple algorithm will eventually get you to the exit.\n\n\n\nDoes the left wall algorithm work for the maze in the first picture? If not, can you debug it?\n\n\n\n\nThere are problems about a robot in a grid with special procedures that don’t exist in Snap!:\n\n\nThe\nMOVE_FORWARD ()\nmoves the sprite forward one grid square. (You need to call it repeatedly to move more than one grid square.)\n\n\nThe\nROTATE_LEFT ()\nor\nROTATE_RIGHT ()\nblocks always turn exactly 90 degrees. (They are used only to move a robot in a grid.)\n\n\nThe\nCAN_MOVE (direction)\nblock returns true or false depending on whether or not the robot can move in the input direction without running into a wall or walking off of the maze.\n\n\nYou can read more about these AP language procedures on the Snap! Cheat Sheet in the Robot section at the bottom.\n\n\n\n\nImagine a robot (the sprite) is sitting in the middle of a 5×5 grid facing upwards. On a paper copy of this grid, shade all the squares that the robot can’t possibly get to, when the given code is executed.  \n\n\n\n\n\n\nSee if you can invent a maze for which the left wall algorithm doesn’t work."
  },
  {
    "objectID": "unit-3/lab-1/2-fractal-art.html",
    "href": "unit-3/lab-1/2-fractal-art.html",
    "title": "Page 2: Fractal Art",
    "section": "",
    "text": "In this project, you will nest repeat blocks inside repeat blocks to generate complex pictures.  \n\n\n\n\n\n“U3L1-FractalArt”\n\n\n\nBuild a script that draws a red triangle, duplicate it twice, modify one copy to draw a blue triangle half the size of the red, and modify the other copy to draw a green one half the size of the blue.\n\n\nTo duplicate a script, right-click (or control-click) on the first block of the script (in this case, the repeat block) and choose “duplicate”.\n\n\nThen change the inputs.\n\n\n\nClick for a video.\n\n\n\n\n\n\nTry each script by itself to be certain what it does. Then clear the stage.\n\n\n Predict what will happen when you insert the entire script for the blue triangle between the move and turn blocks of the code for the red triangle:  \n\n\n\nThen build it to see what it does.\n\n\nHow many times does the move 50 steps instruction run and why?\n\n\nUsing the scripts you have, find a way to make this picture. Use Visible Stepping to help you work out any bugs. \n\n\nClick for a reminder video about Visible Stepping.\n\n\n\n\n\n\n\n\n\n\nIf you like, embed one more triangle, half the size of the last one, in the same way.\n\n\nExamine this code without running it: \n\n\nPredict how many blue shapes it will draw.\n\n\nTry to sketch what it will produce.\n\n\nIf one more copy of the basic script were embedded inside the blue, how many copies of that shape would be drawn?"
  },
  {
    "objectID": "unit-3/lab-1/3-fractal-art-recursive.html",
    "href": "unit-3/lab-1/3-fractal-art-recursive.html",
    "title": "Page 3: Using Abstraction to Nest Triangles",
    "section": "",
    "text": "On this page, you will use abstraction to nest your triangle script inside itself as you learn about recursion.\n\nDoes all that copying and pasting of triangle scripts feel awkward to you? You know a better way: abstraction. In Unit 1, you used a pinwheel block to implement the similar programs asterisk and polygon rather than copying the code. Here, you can use a block to manage the abstraction too. But in this case, we want the similar code (a smaller triangle) nested inside, so we will actually use the same block inside itself, a process called recursion.\n\n\n\nIf it isn’t open already, open your U3L1-FractalArt project.\n\n\nCreate ablock called nested triangle that takes one input, size, and, for now, only draws one triangle, but only if size &gt; 9. (Leave out the code about changing colors.) \n\nShouldn’t it be blue?\n\nWhen you’re building a new block, you can use any color you want. This block is purple so that it will stand out when you use it in a script later.\n\nClick for hints about building a nested triangle block.\n\n\n\nUse your first triangle script from the previous page as a model. But add one condition: draw the triangle only if it’s big enough: \n\n\nClick the “Apply” button in the Block Editor so that the block appears in the palette on the left.\n\n\n\n\n\n\nTry out your block giving at least the inputs 9, 18, 20 and 100 to make sure it works as you expect.\n\n\n\nSo far, this is just a triangle procedure, but next you’ll make it recursive.\n\nCalling a procedure from inside itself is called recursion.\n\nOn the previous page, you dragged a copy of the triangle script in between the move and turn blocks. You can do a similar thing with your nested triangle block.\n\n\n\nFrom the palette, drag nested triangle into the definition of nested triangle between the move and turn blocks. Make its size input half the current value of size. \n\n\nAgain try out your block with at least the inputs 9, 18, 20 and 100 to make sure it works as you expect.\n\n\nYou are using nested triangle in its own definition; this makes it a recursive procedure. Recursion is one of the most powerful techniques in computer science and you will learn more about it in later projects.\n\n\n\n\n\n\n\n\nUse nested triangle as a model to define a recursive nested square block.\n\n\nIn order to draw the parent triangle, the sprite must turn 120° between sides. For the fractal you just created, that turning happens after drawing the child, but you could turn before the recursive call, or split the turn, with part before and part after the recursive call. Try some modifications like these:   \n\n\n\n\n\n\nExperiment with the scale factor for the size of the recursive calls. A couple of interesting values are \\(\\frac{1}{3}\\) and \\(\\frac{1}{\\sqrt{3}}\\).\n\n\nUse for to make an animation that cycles through different turning angle arrangements (that is, 0° and 120°, then 1° and 119°, then 2° and 118°, etc.)."
  },
  {
    "objectID": "unit-3/lab-1/4-brick-wall.html",
    "href": "unit-3/lab-1/4-brick-wall.html",
    "title": "Page 4: Brick Wall",
    "section": "",
    "text": "In this project, you will use abstraction to draw a brick wall.\n\n\n\nDrawing One Brick\n\nA picture of a brick is just a rectangle with a brick red color. However, there’s no draw rectangle block in Snap!. One way to draw one is by thinking of a rectangle as a very thick line. Here’s the idea:\n\nAny good programming language might have many tools for drawing and moving, but it wouldn’t make sense to have special tools for drawing bricks because most programs don’t involve bricks. That’s the sort of tool you make yourself when you need it.\n\n\n\n\n\n The code below has more details than the picture above. Review it, and determine what it will do.   Run the code. Does it do what you expected?\n\n\nOrdinarily, Snap! draws rounded ends on thick lines: . That’s often the best choice, and you can see why below. But for bricks, we want flat line ends: , and so we’ll use  to turn on flat line ends.\n\n\nflat vs. rounded line ends\n\n\n\n\n\n\n\n\n\n: Abstraction\n\nAAP-3.B.1, AAP-3.B.5\n\nAs you learned in Unit 1 Lab 2 Page 2: Making Programs Talk, procedural abstraction is the process of developing a program by breaking up a large problem into smaller sub-problems.\nCreating a draw brick block lets you think in terms of a procedure with a name related to the problem you are solving. This makes your code easier to read, and once you’ve coded and debugged the block, you don’t need to think about how it works each time you use it. That’s the beauty of procedural abstraction.\n\n\nUsing Modularity\n\nYou’d like the “top level” block to be something like this:  Getting there involves modularity.\n\n\nAAP-3.B.2, AAP-3.B.3\n\nModularity is the process of breaking a problem into smaller pieces. Modularity is a form of procedural abstraction.\n\nThere are two kinds of rows, so you’ll make blocks that specialize in each:\n\n\nRow A: \n\n\nRow B: \n\n\n\n\n\nAAP-3.C\n\n\nUse draw brick to make blocks  and .\n\n\n Too much abstraction?\n\nIt’s possible to go overboard on abstraction and build so many blocks that your program is just as cluttered as it would be without the custom blocks. But it can be useful to make a custom block even when its definition is just one built-in block. For example, to draw the mortar between blocks (the white gaps), you can just use move (4) steps, but it might make sense to define a draw mortar block that uses move inside it.\nWhy? You might later decide that four steps is the wrong thickness for mortar and you’d rather have five. Or you might want the mortar to be mortar-colored, slightly gray. With many move (4) steps instructions scattered through your program, you would have to find and change each one. To make matters worse, your complete project might have move blocks that aren’t about mortar. But with a draw mortar block, you can change just its definition, and all the mortar in your picture will be changed.\n\n\n\nThe two kinds of rows should be exactly the same length. Your first try at drawing Row B is probably a little too long. If so, debug it.\n\nDebug by thinking about what you are trying to accomplish, not about your code. For example…\n\n\n\nShould Row B have different-size bricks, different-size gaps, or just different-size bricks on the end?\n\n\nIf you’re not sure, try all the possibilities and see which looks right in the finished wall.\n\n\nOr think “What would make the most sense in a real brick wall?”\n\n\n\n\n\n\nWrite and test the  block.\n\nYou might want to use the odd? predicate from your U2L4-MathLibrary. You learned about exporting and importing blocks on Unit 2 Lab 3 Page 1: What’s a Predicate?\n\n\n\n\nAAP-3.B\n\n\n How do you think procedural abstraction manages the complexity of a program?\n\n\n\n\n\n\nAdd more inputs to draw brick wall (and as needed to draw row A and draw row B) for:\n\n\nNumber of bricks per row\n\n\nlength and width of a brick\n\n\nGap thickness\n\n\n\n\nAdd these extra inputs one at a time, not all at once! When you modify the length of a brick, that should also change the length of an end brick for row B. When you modify the gap thickness, that should also change the distance between the rows."
  },
  {
    "objectID": "unit-3/lab-1/5-building-tic-tac-toe.html",
    "href": "unit-3/lab-1/5-building-tic-tac-toe.html",
    "title": "Page 5: Building a Tic-Tac-Toe Board",
    "section": "",
    "text": "In this project, you will develop a program that plays Tic-Tac-Toe as well as you do.\nOn this first page, you use clones to display a Tic-Tac-Toe board and let two human players enter moves.\n\n\nThe project is spread out over different units because there’s a lot to do, and because some steps require techniques you haven’t learned yet. On this page, you’ll learn about cloning a sprite (like copying it, only better). In the future, you’ll extend the project to detect wins and ties and, ultimately, to let the computer be one of the players.\nOne approach to building this game is to use multiple sprites; each square of the board is a separate sprite. Each sprite knows where it is on the board, and, once positioned, the sprites never move. The player clicks one of the nine squares, and that sprite changes its costume to display the move.\n\n\n\n\n\n\nThe first sprite has already been set up for you. It has three costumes: Empty, X, and O. Click  a few times to see all of them. \n\n\n\nYou will use clones to create the 3×3 Tic-Tac-Toe board.\n\nA clone is a copy of a sprite that shares information with its parent sprite (the original sprite). For example, clones have copies of any scripts from the parent, and if the parent’s script is changed, then the clones’ scripts change too. However, changes you make to a clone are not shared with the parent, so you can do things like move each clone to a different position.\n\nClones start with the same position, costumes, and scripts of their parent. But clones made by a program…\n\n\nDon’t appear in the sprite corral.\n\n\nAre temporary. Clicking the stop button or green flag will delete all temporary clones in the project.\n\n\n(There can also be permanent clones, which are created differently, but they’re not used in this project.)\n\nIn this project, you’ll need nine clones, one for each square of the Tic-Tac-Toe board. So, you’d need something like:  The actual code you write will be slightly more than this, but this is the central idea. You’ll need nine clones, and you will hide the parent. This will allow you to control the squares of the grid with blocks like: \n\n\n\n\nBefore clicking anything else, read this demonstration script with your partner. Discuss what will happen when you click the sprite. \n\nThis script will help you learn about clones, but it won’t be part of your finished project.\n\n\n\n\nThen click the sprite on the stage, and compare what happens with what you expected.\n\n\n\nNotice that the parent sprite (not the clone) moves to the new random position after cloning itself. Look back at the code; why does this make sense?\n\n\nNote that both the clones and the parent are sprites. Both are clickable (try it) and draggable (try that too). This is different from the effect of the stamp Pen block, which just leaves a picture of the sprite on the stage.\n\n\nThe create a clone block takes an input because it can copy any sprite. In this project, there’s only one sprite at the beginning, so your choices are either myself or Square (the sprite’s name), which in this case, means the same thing.\n\n\n\n\n\nPrepare to create your project:\n\n\nDelete the when I am clicked demonstration script from exercise 3.\n\n\nConnect the when ⚑ clicked block toward the bottom of the scripting area to the script just below it. \n\n\nRead that script and notice…\n\n\n\nThe makeBoard block is empty. You’ll write it in the next problem.\n\n\nThe variable X’s turn? will be true when it’s X’s turn to play or false when it’s O’s turn.\n\nWhen alternating between two values, it’s convenient to use Booleans because you can use not to switch between them and you can use if to test the variable. (Recall that if requires a true/false input.)  \n\n\n\n\n\n\n\n\nEdit the block makeBoard to set up nine clones in three rows of three.   \n\nTips:\n\n\nThe costumes are all 50 steps tall and 50 steps wide.\n\n\nMake sure the clones start out with the empty square costume.\n\n\nBe sure to show the original sprite before cloning it, so that the clones will be visible. After cloning nine times to create the board, hide the original sprite so it does not interfere with the game as a tenth square.\n\n\nClick if you need an additional hint about makeBoard.\n\n\n\n\n\n\n\n\nNow finish up:\n\n\nWrite a when I am clicked script that will make each clone wear the proper costume when clicked: X or O depending on whose turn it is.\n\n\nDecide how a square should behave when it is clicked while already wearing an X or O costume.\n\n\nMake the parent sprite not-draggable so that the clone squares aren’t accidentally moved around when the player clicks. \n\n\n\n\nPlay one or two games of Tic-Tac-Toe with your partner, and fix any bugs. Then, discuss what else you might want to add to the project.\n\n\nYou can leave comments in the project file to remind yourself of things you might want to do later."
  },
  {
    "objectID": "unit-3/lab-1/6-debugging-recap.html",
    "href": "unit-3/lab-1/6-debugging-recap.html",
    "title": "Page 6: Debugging Recap",
    "section": "",
    "text": "On this page, you will review what you’ve learned about debugging in Snap!.\n\n\nDebugging is the art of identifying errors in computer programs and fixing them.\n\n\nTips\n\n\n\nGrace Hopper (1906-1992) was an United States Navy rear admiral and pioneer of computer programming. She is best known for her trailblazing contributions to computer programming, software development, and the design and implementation of programming languages.\n60 Minutes: Grace Hopper\nOne early case of “debugging” was when an actual moth got stuck inside a computer Grace Hopper was working with in 1947. Here is a page from her notebook with the moth pasted in.\n\n\n\n\nTry to write elegant code. If you’re writing a state capitals quiz, then you’ll need to store every state and capital in your program, but if you’re writing a multiplication quiz you can have the computer calculate the answers. Take advantage of the natural structure of the problem you are solving.\n\n\n\nAAP-2.B.7\n\nUse abstraction to hide complexity. Isolate some details into a custom block, and get that working right. Then use that abstraction just as if it were built into Snap!. Abstraction allows you to build and test pieces of your code one at a time; it makes your code more readable. If you can’t see an entire script on your screen at once, it’s time to stop and organize your code.\n\n\nDon’t delete your project and start over. This sounds obvious when you see it written down, but programming students sometimes get angry at their bugs. Remember that if you have a program with 20 blocks in it, and one of the 20 has an error, then your program is 95% correct.\n\n\nHow to find a bug:\n\n\nReproduce the problem so you are sure you know how to recreate it. This will help you know when you’ve fixed it.\n\n\nIsolate the piece of code producing the error. Test pieces of your code separately so you know what’s working and what isn’t.\n\n\nIdentify the specific cause of the error within that code. Why is that code doing the wrong thing?\n\n\nAlways test your code with different inputs. Look for extreme cases: What if the input is really big, zero, negative, or a decimal? What if the user types something you aren’t expecting? What if the user clicks somewhere else?\n\n\n\n\nDon’t add code to work around a bug. In fact, don’t edit buggy code at all (except to add temporary debugging code) until you understand the problem; then remove the error. Think: “Debug by subtraction, not by addition.”\n\n\nDon’t be hard on yourself. Everyone gets bugs in their programs; it’s part of programming.\n\n\nIf it works, it’s correct. You don’t need to ask your teacher “Is this right?” The computer will tell you whether your solution is correct, and more than one solution may work.\n\n\nBe open to new ideas. Especially if you learned to program before this course, a few of the ideas in this course might seem strange to you, such as the use of higher-order functions instead of looping. One of the goals of BJC is to introduce you to different ways of organizing a program that make the code shorter and don’t have as many openings for bugs to creep in.\n\n\nLove your bugs! They pose an interesting puzzle. Sometimes their incorrect behavior suggests another project: \n\n\n\n\n\n\nWhich of these tips would have helped you debug one of your projects? Pick one and discuss your experience with your partner.\n\n\nChoose one of these tips that doesn’t make sense to you, and try to figure out why we included it.\n\n\n\n\nSnap! Debugging and Organizing Tools\n\n\n\n\nYou learned about\n\n\nPause all in Unit 1 Lab 3 Page 5: Using Pinwheel to Make Polygon\n\n\nSay in Unit 1 Lab 3 Page 2: Angles and Turning\n\n\nVisible stepping in Unit 1 Lab 3 Page 1: Exploring Motion\n\n\nDisplaying variables in Unit 2 Lab 1 Page 3: Debugging and Extending Your Number Guessing Game\n\n\nSnap! comments in Unit 1 Lab 3 Page 3: Blocks with Inputs\n\n\nCode organization in Unit 1 Lab 3 Page 4: Modify Your Pinwheel\n\n\n\n\n places breaks in your code so you can step through the code at your own pace. \n\n\n can give you information about the state of your program while it’s running. \n\n\nVisible Stepping () lets you control how quickly Snap! steps through the blocks of your code. \n\n\nWays to show the values of variables and sprite attributes:\n\n\nClicking a reporter will show the value of a variable or sprite attribute.\n\n\nChecking the box next to a variable in the palette () will also show the value of that variable or sprite attribute.\n\n\n lets you do the equivalent of checking the box for script variables, which aren’t in the palette. \n\n\n\n\nComments let you document your program.\n\n\nThe “Unused blocks…” option in the Snap! File menu will eliminate blocks you no longer need. This is often useful when you’ve loaded a library but you only need one or two blocks from the library.\n\n\nThe “clean up” option in the right-click (or control-click on a Mac) menu of the scripting area background will reposition scripts on the page so they don’t overlap.\n\n\n\nAAP-1.A.2\n\nSnap! lets you use more than one word in the name of a block or variable. Some programmers try to save time by naming all their variables x, but if they forget and call a second variable x, this can lead to bugs. To make your programs easier to understand and debug, you can use meaningful names, such as horizontal position, instead."
  },
  {
    "objectID": "unit-3/lab-2/1-build-the-list.html",
    "href": "unit-3/lab-2/1-build-the-list.html",
    "title": "Page 1: Creating the Contact ADT",
    "section": "",
    "text": "In this lab, you will develop a Contact List database application like the one on your phone.\nOn this page, you will develop an Abstract Data Type to store and access contact data (name, address, phone number, etc.).\n\n\n\nPreserve Privacy\n\nSnap! projects are not secure. Do not use your or your classmates’ personal information.\n\n\nSetting Up the Contact List\n\n\n\n\n\n\n\nCreate a global contact list variable.\n\n\nInitialize contact list as an empty list.\n\n\n\n\n\nWhy global?\n\nMultiple scripts across the project will use this variable, so it shouldn’t be attached to just one script like a local, script variable.\n\n\nCreating the ADT\n\n\n\nBetsy and Gamal are planning to build a Contact List in Snap!.\n\n\nBetsy: We need a way to add a contact to our contact list.\n\n\nGamal: Each contact will be a list that with the a person’s name, phone number, address, email, or whatever we write.\n\n\nBetsy: In Unit 2, we created a quiz item abstract data type to store the questions and answers in a list of quiz items. Here, we can make a contact abstract data type to store the data for each contact in our list of contacts.\n\n\nGamal: Yeah. In this project, we’ll need a contact constructor and then selectors to access the name, address, and phone number for any given contact.\n\n\n::: forYouToDo\n\n\n::: sidenoteBig Shortcut: You could paste the following text into the “Make a block” window to build the block more quickly.\n\ncontact with name: %name address: %address phone: %phone\nThe percent (%) signs make those words become input variables. :::\nCreate a contact constructor that accepts three pieces of data as input: the contact’s name, phone number, and address.   It should report one whole contact (a list of the three items): \n\n\nWrite the selector blocks to retrieve the name from contact, address from contact, or phone from contact.   \n\n\nYou learned about input types and output types (domain and range) on Unit 2 Lab 3 Page 1: What’s a Predicate?.\n\nIt’s important to make sure that your inputs to a function match the expected input type. For example, the input type of address from contact matches the output type of contact; they are both of type “contact.”\nIf you call address from contact with an input that doesn’t match, such as a list of contacts (for example, the contact list variable or the result of running keep and having a subset of that list), it’s not going to work. That may sound obvious, but in fact, beginning programmers make mistakes like that all the time; you have to teach yourself to think about the input and output types of your functions every time you write or use one.\nThat’s also true about the inputs to the contact constructor; you can’t put something that isn’t a name in the name input for contact.\n\n\nIt’s somewhat artificial to use the constructor as the input to a selector; these images are just examples to show what the selectors should be able to do when given a contact as input. In your program, the selectors will take an item from the contact list as input and output the correct piece of that contact, like this: \n\n\n\nDeclare input types for each selector to make it obvious that they expect a list (one whole contact) as input.   \n\nYou learned about Specifying an Input Type on Unit 2 Lab 2 Page 2: Planning a Quiz App.\n\n\n\nTest your blocks together, and debug any problems.\n\n\nFirst, put the constructor (with input values) inside each selector (as shown above) to test that they each report the correct piece of data.\n\n\nThen, use the contact constructor to add a few contacts to your contact list.\n\nYou can use these examples or make up your own: 31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATgB3AEEANABBAEQASQBBAE8AQQBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEcASQBBAGIAdwBCAHkAQQBHAFEAQQBaAFEAQgB5AEEARwBVAEEAWgBBAEEAaQBBAEMAQQBBAGMAdwBCADEAQQBHADAAQQBiAFEAQgBoAEEASABJAEEAZQBRAEEAOQBBAEMASQBBAGQAQQBCAG8AQQBIAEkAQQBaAFEAQgBsAEEAQwBBAEEAWgBRAEIANABBAEcARQBBAGIAUQBCAHcAQQBHAHcAQQBaAFEAQQBnAEEARwBNAEEAYgB3AEIAdQBBAEgAUQBBAFkAUQBCAGoAQQBIAFEAQQBjAHcAQQBpAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBnAEEASQBBAEIAegBBAEcATQBBAGIAdwBCAHcAQQBHAFUAQQBQAFEAQQBpAEEARwBNAEEAYgB3AEIAcwBBAEMASQBBAFAAZwBCAHUAQQBHAEUAQQBiAFEAQgBsAEEARAB3AEEATAB3AEIAMABBAEcAZwBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBvAEEAQwBBAEEAYwB3AEIAagBBAEcAOABBAGMAQQBCAGwAQQBEADAAQQBJAGcAQgBqAEEARwA4AEEAYgBBAEEAaQBBAEQANABBAFkAUQBCAGsAQQBHAFEAQQBjAGcAQgBsAEEASABNAEEAYwB3AEEAOABBAEMAOABBAGQAQQBCAG8AQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYQBBAEEAZwBBAEgATQBBAFkAdwBCAHYAQQBIAEEAQQBaAFEAQQA5AEEAQwBJAEEAWQB3AEIAdgBBAEcAdwBBAEkAZwBBACsAQQBIAEEAQQBhAEEAQgB2AEEARwA0AEEAWgBRAEEAOABBAEMAOABBAGQAQQBCAG8AQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAEkAQQBCAHoAQQBIAFEAQQBlAFEAQgBzAEEARwBVAEEAUABRAEEAaQBBAEgAYwBBAGEAQQBCAHAAQQBIAFEAQQBaAFEAQQB0AEEASABNAEEAYwBBAEIAaABBAEcATQBBAFoAUQBBADYAQQBDAEEAQQBiAGcAQgB2AEEASABjAEEAYwBnAEIAaABBAEgAQQBBAE8AdwBBAGkAQQBEADQAQQBRAGcAQgBsAEEASABRAEEAYwB3AEIANQBBAEMAQQBBAFEAUQBCAHUAQQBHAFEAQQBaAFEAQgB5AEEASABNAEEAYgB3AEIAdQBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEMAQQBBAGMAdwBCADAAQQBIAGsAQQBiAEEAQgBsAEEARAAwAEEASQBnAEIAMwBBAEcAZwBBAGEAUQBCADAAQQBHAFUAQQBMAFEAQgB6AEEASABBAEEAWQBRAEIAagBBAEcAVQBBAE8AZwBBAGcAQQBHADQAQQBiAHcAQgAzAEEASABJAEEAWQBRAEIAdwBBAEQAcwBBAEkAZwBBACsAQQBEAEUAQQBNAGcAQQB6AEEAQwBBAEEAVABRAEIAaABBAEcAawBBAGIAZwBBAGcAQQBGAE0AQQBkAEEAQQB1AEEAQwBBAEEASQB3AEEAMABBAEMAdwBBAEkAQQBCAE8AQQBHAFUAQQBkAHcAQQBnAEEARgBrAEEAYgB3AEIAeQBBAEcAcwBBAEwAQQBBAGcAQQBFADQAQQBXAFEAQQBnAEEARABFAEEATQBBAEEAdwBBAEQAQQBBAE0AUQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBAGcAQQBIAE0AQQBkAEEAQgA1AEEARwB3AEEAWgBRAEEAOQBBAEMASQBBAGQAdwBCAG8AQQBHAGsAQQBkAEEAQgBsAEEAQwAwAEEAYwB3AEIAdwBBAEcARQBBAFkAdwBCAGwAQQBEAG8AQQBJAEEAQgB1AEEARwA4AEEAZAB3AEIAeQBBAEcARQBBAGMAQQBBADcAQQBDAEkAQQBQAGcAQQB5AEEARABFAEEATQBnAEEAdABBAEQAVQBBAE4AUQBBADEAQQBDADAAQQBNAFEAQQB5AEEARABNAEEATgBBAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAEkAQQBCAHoAQQBIAFEAQQBlAFEAQgBzAEEARwBVAEEAUABRAEEAaQBBAEgAYwBBAGEAQQBCAHAAQQBIAFEAQQBaAFEAQQB0AEEASABNAEEAYwBBAEIAaABBAEcATQBBAFoAUQBBADYAQQBDAEEAQQBiAGcAQgB2AEEASABjAEEAYwBnAEIAaABBAEgAQQBBAE8AdwBBAGkAQQBEADQAQQBRAFEAQgBzAEEASABBAEEAYQBBAEIAcABBAEcAVQBBAEkAQQBCAFEAQQBIAEkAQQBaAFEAQgB6AEEASABRAEEAYgB3AEIAdQBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEMAQQBBAGMAdwBCADAAQQBIAGsAQQBiAEEAQgBsAEEARAAwAEEASQBnAEIAMwBBAEcAZwBBAGEAUQBCADAAQQBHAFUAQQBMAFEAQgB6AEEASABBAEEAWQBRAEIAagBBAEcAVQBBAE8AZwBBAGcAQQBHADQAQQBiAHcAQgAzAEEASABJAEEAWQBRAEIAdwBBAEQAcwBBAEkAZwBBACsAQQBEAEUAQQBOAEEAQQA1AEEAQwBBAEEAUgBRAEEAdQBBAEMAQQBBAE0AUQBBADIAQQBIAFEAQQBhAEEAQQBnAEEARQBFAEEAZABnAEIAbABBAEMANABBAEwAQQBBAGcAQQBGAE0AQQBkAFEAQgB1AEEARwA0AEEAZQBRAEIAMgBBAEcARQBBAGIAQQBCAGwAQQBDAHcAQQBJAEEAQgBEAEEARQBFAEEASQBBAEEANQBBAEQAUQBBAE0AQQBBADQAQQBEAGsAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBJAEEAQgB6AEEASABRAEEAZQBRAEIAcwBBAEcAVQBBAFAAUQBBAGkAQQBIAGMAQQBhAEEAQgBwAEEASABRAEEAWgBRAEEAdABBAEgATQBBAGMAQQBCAGgAQQBHAE0AQQBaAFEAQQA2AEEAQwBBAEEAYgBnAEIAdgBBAEgAYwBBAGMAZwBCAGgAQQBIAEEAQQBPAHcAQQBpAEEARAA0AEEATgBBAEEAdwBBAEQAZwBBAEwAUQBBADEAQQBEAFUAQQBOAFEAQQB0AEEARABZAEEATgB3AEEANABBAEQAawBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBDAEEAQQBjAHcAQgAwAEEASABrAEEAYgBBAEIAbABBAEQAMABBAEkAZwBCADMAQQBHAGcAQQBhAFEAQgAwAEEARwBVAEEATABRAEIAegBBAEgAQQBBAFkAUQBCAGoAQQBHAFUAQQBPAGcAQQBnAEEARwA0AEEAYgB3AEIAMwBBAEgASQBBAFkAUQBCAHcAQQBEAHMAQQBJAGcAQQArAEEARQBjAEEAWQBRAEIAdABBAEcARQBBAGIAQQBBAGcAQQBFAEUAQQBZAGcAQgBrAEEARwBVAEEAYgBBAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAZwBBAEgATQBBAGQAQQBCADUAQQBHAHcAQQBaAFEAQQA5AEEAQwBJAEEAZAB3AEIAbwBBAEcAawBBAGQAQQBCAGwAQQBDADAAQQBjAHcAQgB3AEEARwBFAEEAWQB3AEIAbABBAEQAbwBBAEkAQQBCAHUAQQBHADgAQQBkAHcAQgB5AEEARwBFAEEAYwBBAEEANwBBAEMASQBBAFAAZwBBAHoAQQBEAFkAQQBPAFEAQQBnAEEARQBNAEEAWgBRAEIAdQBBAEgAUQBBAFoAUQBCAHkAQQBDAEEAQQBVAHcAQgAwAEEAQwA0AEEATABBAEEAZwBBAEUASQBBAGIAdwBCAHoAQQBIAFEAQQBiAHcAQgB1AEEAQwB3AEEASQBBAEIATgBBAEUARQBBAEkAQQBBAHcAQQBEAEkAQQBNAFEAQQB6AEEARABBAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEASQBBAEIAegBBAEgAUQBBAGUAUQBCAHMAQQBHAFUAQQBQAFEAQQBpAEEASABjAEEAYQBBAEIAcABBAEgAUQBBAFoAUQBBAHQAQQBIAE0AQQBjAEEAQgBoAEEARwBNAEEAWgBRAEEANgBBAEMAQQBBAGIAZwBCAHYAQQBIAGMAQQBjAGcAQgBoAEEASABBAEEATwB3AEEAaQBBAEQANABBAE4AZwBBAHgAQQBEAGMAQQBMAFEAQQAxAEEARABVAEEATgBRAEEAdABBAEQARQBBAE0AQQBBADUAQQBEAGcAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAFkAUQBCAGkAQQBHAHcAQQBaAFEAQQArAEEAQQA9AD0ACgBzAHUAZgBmAGkAeAA6AA==:31b8e172-b470-440e-83d8-e6b185028602\n\n\n\nNotice how your contacts appear in the list.\n\n\nIf you don’t remember about table view and list view, revisit page 2.2.2.\n\n\nTry selecting the name, address, or phone from a contact in your list \n\n\n\nDebug any problems.\n\n\n\n\nAAP-1.D part b\n\n\n Write down how the use of an abstract data type helps manage complexity in your program.\n\n\n:::"
  },
  {
    "objectID": "unit-3/lab-2/2-adding-contact.html",
    "href": "unit-3/lab-2/2-adding-contact.html",
    "title": "Page 2: Adding Contact Data",
    "section": "",
    "text": "On this page, you will develop code for “Add Contact” and “Clear List” buttons in your contact list program. \n\n\n\n\nIf it isn’t open already, open your U3L2-ContactList project.\n\n\nDevelop the “Add Contact” button for the user.\n\n\nCRD-2.C\n\n\nLooking at the previous page, write down the questions your program is going to ask the user. The answers to these questions will be the program input.\n\n\n: Input and Output\n\nCRD-2.C.1, CRD-2.C.4, CRD-2.C.6, CRD-2.D.1, CRD-2.D.2\n\nWe use “input” loosely to mean the empty boxes in a block that get filled with values. But input also means information entered into a program by the user, as in the ask and wait block. Program input can also come from data tables, sounds, pictures, video, or other programs.\nSimilarly, program output means any data sent from your program to the user or to any device. Typically, the output depends on the input.\n\n\nMake the script ask the user for contact data and then add that data to the contact list using the contact constructor.\n\n\n\nCollecting Data from the User\n\nYou’ll want to ask the user for each piece of data (contact name, address, and phone number) separately.\n\n\nYou could use several ask and answer blocks together with script variables to request and then store each piece of user input until you are ready to report them all together using contact. \n\n\nAnother way that makes for cleaner code is to use abstraction: create helper blocks (such as  and ) that each ask the user for one piece of data and report their answer to the contact constructor.  Each of these helper blocks will ask the user a specific question (like, “What is the contact’s address?”) and then report the user’s answer.\n\n\n\nYou could first build a more general  helper block (yet another abstraction) to use in the other helper blocks instead of rewriting the ask and answer script every time. \n\n\n\n\nTest and debug. Add a few made-up people to your contact list. Make sure everything works.\n\n\n\n\nYou can use these examples or make up your own: 31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATgBBAEEAeABBAEQARQBBAE8AQQBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEcASQBBAGIAdwBCAHkAQQBHAFEAQQBaAFEAQgB5AEEARwBVAEEAWgBBAEEAaQBBAEMAQQBBAGMAdwBCADEAQQBHADAAQQBiAFEAQgBoAEEASABJAEEAZQBRAEEAOQBBAEMASQBBAGQAQQBCAG8AQQBIAEkAQQBaAFEAQgBsAEEAQwBBAEEAWgBRAEIANABBAEcARQBBAGIAUQBCAHcAQQBHAHcAQQBaAFEAQQBnAEEARwBNAEEAYgB3AEIAdQBBAEgAUQBBAFkAUQBCAGoAQQBIAFEAQQBjAHcAQQBpAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBnAEEASQBBAEIAegBBAEcATQBBAGIAdwBCAHcAQQBHAFUAQQBQAFEAQQBpAEEARwBNAEEAYgB3AEIAcwBBAEMASQBBAFAAZwBCAHUAQQBHAEUAQQBiAFEAQgBsAEEARAB3AEEATAB3AEIAMABBAEcAZwBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBvAEEAQwBBAEEAYwB3AEIAagBBAEcAOABBAGMAQQBCAGwAQQBEADAAQQBJAGcAQgBqAEEARwA4AEEAYgBBAEEAaQBBAEQANABBAFkAUQBCAGsAQQBHAFEAQQBjAGcAQgBsAEEASABNAEEAYwB3AEEAOABBAEMAOABBAGQAQQBCAG8AQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYQBBAEEAZwBBAEgATQBBAFkAdwBCAHYAQQBIAEEAQQBaAFEAQQA5AEEAQwBJAEEAWQB3AEIAdgBBAEcAdwBBAEkAZwBBACsAQQBIAEEAQQBhAEEAQgB2AEEARwA0AEEAWgBRAEEAOABBAEMAOABBAGQAQQBCAG8AQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAEkAQQBCAHoAQQBIAFEAQQBlAFEAQgBzAEEARwBVAEEAUABRAEEAaQBBAEgAYwBBAGEAQQBCAHAAQQBIAFEAQQBaAFEAQQB0AEEASABNAEEAYwBBAEIAaABBAEcATQBBAFoAUQBBADYAQQBDAEEAQQBiAGcAQgB2AEEASABjAEEAYwBnAEIAaABBAEgAQQBBAE8AdwBBAGkAQQBEADQAQQBRAGcAQgBsAEEASABRAEEAYwB3AEIANQBBAEMAQQBBAFEAUQBCAHUAQQBHAFEAQQBaAFEAQgB5AEEASABNAEEAYgB3AEIAdQBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEMAQQBBAGMAdwBCADAAQQBIAGsAQQBiAEEAQgBsAEEARAAwAEEASQBnAEIAMwBBAEcAZwBBAGEAUQBCADAAQQBHAFUAQQBMAFEAQgB6AEEASABBAEEAWQBRAEIAagBBAEcAVQBBAE8AZwBBAGcAQQBHADQAQQBiAHcAQgAzAEEASABJAEEAWQBRAEIAdwBBAEQAcwBBAEkAZwBBACsAQQBEAEUAQQBNAGcAQQB6AEEAQwBBAEEAVABRAEIAaABBAEcAawBBAGIAZwBBAGcAQQBGAE0AQQBkAEEAQQB1AEEAQwBBAEEASQB3AEEAMABBAEMAdwBBAEkAQQBCAE8AQQBHAFUAQQBkAHcAQQBnAEEARgBrAEEAYgB3AEIAeQBBAEcAcwBBAEwAQQBBAGcAQQBFADQAQQBXAFEAQQBnAEEARABFAEEATQBBAEEAdwBBAEQAQQBBAE0AUQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBAGcAQQBIAE0AQQBkAEEAQgA1AEEARwB3AEEAWgBRAEEAOQBBAEMASQBBAGQAdwBCAG8AQQBHAGsAQQBkAEEAQgBsAEEAQwAwAEEAYwB3AEIAdwBBAEcARQBBAFkAdwBCAGwAQQBEAG8AQQBJAEEAQgB1AEEARwA4AEEAZAB3AEIAeQBBAEcARQBBAGMAQQBBADcAQQBDAEkAQQBQAGcAQQB5AEEARABFAEEATQBnAEEAdABBAEQAVQBBAE4AUQBBADEAQQBDADAAQQBNAFEAQQB5AEEARABNAEEATgBBAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAEkAQQBCAHoAQQBIAFEAQQBlAFEAQgBzAEEARwBVAEEAUABRAEEAaQBBAEgAYwBBAGEAQQBCAHAAQQBIAFEAQQBaAFEAQQB0AEEASABNAEEAYwBBAEIAaABBAEcATQBBAFoAUQBBADYAQQBDAEEAQQBiAGcAQgB2AEEASABjAEEAYwBnAEIAaABBAEgAQQBBAE8AdwBBAGkAQQBEADQAQQBRAFEAQgBzAEEASABBAEEAYQBBAEIAcABBAEcAVQBBAEkAQQBCAFEAQQBIAEkAQQBaAFEAQgB6AEEASABRAEEAYgB3AEIAdQBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEMAQQBBAGMAdwBCADAAQQBIAGsAQQBiAEEAQgBsAEEARAAwAEEASQBnAEIAMwBBAEcAZwBBAGEAUQBCADAAQQBHAFUAQQBMAFEAQgB6AEEASABBAEEAWQBRAEIAagBBAEcAVQBBAE8AZwBBAGcAQQBHADQAQQBiAHcAQgAzAEEASABJAEEAWQBRAEIAdwBBAEQAcwBBAEkAZwBBACsAQQBEAEUAQQBOAEEAQQA1AEEAQwBBAEEAUgBRAEEAdQBBAEMAQQBBAE0AUQBBADIAQQBIAFEAQQBhAEEAQQBnAEEARQBFAEEAZABnAEIAbABBAEMANABBAEwAQQBBAGcAQQBGAE0AQQBkAFEAQgB1AEEARwA0AEEAZQBRAEIAMgBBAEcARQBBAGIAQQBCAGwAQQBDAHcAQQBJAEEAQgBEAEEARQBFAEEASQBBAEEANQBBAEQAUQBBAE0AQQBBADQAQQBEAGsAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBJAEEAQgB6AEEASABRAEEAZQBRAEIAcwBBAEcAVQBBAFAAUQBBAGkAQQBIAGMAQQBhAEEAQgBwAEEASABRAEEAWgBRAEEAdABBAEgATQBBAGMAQQBCAGgAQQBHAE0AQQBaAFEAQQA2AEEAQwBBAEEAYgBnAEIAdgBBAEgAYwBBAGMAZwBCAGgAQQBIAEEAQQBPAHcAQQBpAEEARAA0AEEATgBBAEEAdwBBAEQAZwBBAEwAUQBBADEAQQBEAFUAQQBOAFEAQQB0AEEARABZAEEATgB3AEEANABBAEQAawBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBDAEEAQQBjAHcAQgAwAEEASABrAEEAYgBBAEIAbABBAEQAMABBAEkAZwBCADMAQQBHAGcAQQBhAFEAQgAwAEEARwBVAEEATABRAEIAegBBAEgAQQBBAFkAUQBCAGoAQQBHAFUAQQBPAGcAQQBnAEEARwA0AEEAYgB3AEIAMwBBAEgASQBBAFkAUQBCAHcAQQBEAHMAQQBJAGcAQQArAEEARQBjAEEAWQBRAEIAdABBAEcARQBBAGIAQQBBAGcAQQBFAEUAQQBZAGcAQgBrAEEARwBVAEEAYgBBAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAZwBBAEgATQBBAGQAQQBCADUAQQBHAHcAQQBaAFEAQQA5AEEAQwBJAEEAZAB3AEIAbwBBAEcAawBBAGQAQQBCAGwAQQBDADAAQQBjAHcAQgB3AEEARwBFAEEAWQB3AEIAbABBAEQAbwBBAEkAQQBCAHUAQQBHADgAQQBkAHcAQgB5AEEARwBFAEEAYwBBAEEANwBBAEMASQBBAFAAZwBBAHoAQQBEAFkAQQBPAFEAQQBnAEEARQBNAEEAWgBRAEIAdQBBAEgAUQBBAFoAUQBCAHkAQQBDAEEAQQBVAHcAQgAwAEEAQwA0AEEATABBAEEAZwBBAEUASQBBAGIAdwBCAHoAQQBIAFEAQQBiAHcAQgB1AEEAQwB3AEEASQBBAEIATgBBAEUARQBBAEkAQQBBAHcAQQBEAEkAQQBNAFEAQQB6AEEARABBAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEASQBBAEIAegBBAEgAUQBBAGUAUQBCAHMAQQBHAFUAQQBQAFEAQQBpAEEASABjAEEAYQBBAEIAcABBAEgAUQBBAFoAUQBBAHQAQQBIAE0AQQBjAEEAQgBoAEEARwBNAEEAWgBRAEEANgBBAEMAQQBBAGIAZwBCAHYAQQBIAGMAQQBjAGcAQgBoAEEASABBAEEATwB3AEEAaQBBAEQANABBAE4AZwBBAHgAQQBEAGMAQQBMAFEAQQAxAEEARABVAEEATgBRAEEAdABBAEQARQBBAE0AQQBBADUAQQBEAGcAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAFkAUQBCAGkAQQBHAHcAQQBaAFEAQQArAEEAQQA9AD0ACgBzAHUAZgBmAGkAeAA6AA==:31b8e172-b470-440e-83d8-e6b185028602\n\n\nDevelop a “Clear List” button that resets the contact list to an empty list, which is essential while programming whenever you change the structure of the ADT.\n\n\nMake the script ask the user for confirmation (so the user won’t accidentally delete their list).\n\nFor example, clicking, “Clear List” might ask the user, “Enter c to clear the list, or enter anything else to cancel.”\n\n\n\nDebug. Make sure this feature behaves as expected for either user choice.\n\n\n\n\n\n\n\nMost of the programs you’ve written have one script that’s in charge, using loop blocks to keep running either forever or just for a long time. This project is different: Nothing happens until you click a button (recall from Unit 1 that this is called an event), which starts a script that just runs briefly, to do whatever action the button requires. This kind of program structure is called event-driven programming.\n\n\n\n\nThe sprites’ questions might be covered up by the contact list watcher on the stage. Use hide variable and show variable to hide the contact list watcher until the end of each sprite’s script.\n\n\n\n\nIn this activity, you’re going to refine the handling of people’s names. When you look up a particular person, you want to see their name as you’ve been seeing it on this page, first name first: “Alphie Preston.” But suppose you want to sort your contacts. Typically that’s done by last name, so the list would look something like\n\n\nAbdel, Gamal\n\n\nAnderson, Betsy\n\n\nPreston, Alphie\n\n\nSo you need to be able to show a name first name first for ordinary display, but last name first for sorting.\nBefore you begin, save your project again, under the name U3L2-TIF. This will keep your work on these problems separate from the regular problems.\n\n\nThe first step is to create an abstract data type for names. You’ll need a constructor that takes first name and last name as inputs, and reports a list of them to represent the name part of a contact.\n\n\nReading a name: The next step is to modify the program you wrote above so that it asks separately for the first name and the last name, constructs a name (that is, a list) using the constructor you just wrote, and uses that list as the name input to the contact with name block. This is an abstract data type (name) inside another abstract data type (contact).\n\n\nWriting a name: Your name from contact block will now report a list, as it should. But some other parts of the program, such as the part that displays a contact to the user, want to display the name as a text string: “Betsy Anderson.” The part that sorts the contact list also wants a string: “Anderson, Betsy.” Write two blocks  and  that join the two parts of the name with a space and/or a comma as needed.\n\n\n\nThis three-step process (create an ADT, use it to read values of that type, use it to write values of that type) is very common in programming. You’ll follow the same three steps again in the Take It Further on page 4.\n\nSave your work. On page 4 you’re going to find a contact by letting the user enter any part of the name, and display the entire contact. Use the name abstraction you’ve just created when you do that."
  },
  {
    "objectID": "unit-3/lab-2/3-modifying-adt.html",
    "href": "unit-3/lab-2/3-modifying-adt.html",
    "title": "Page 3: Adding Birthdays",
    "section": "",
    "text": "Purpose (do/learn; why this/here): Extend the ADT by adding a date ADT, adapting the contact ADT to accept it, and adding more helper blocks.\nCan we cut all the commented out text on this page? –MF, 7/22/19\nMARY: change the DATE ADT to use the correct ADT format. –MF, 5/23/20\nBRIAN: as a low priority (that is, after ALL the solutions for all units and all optional projects are done), you want to add a “parse a date” TIF. –MF, 5/23/20\n\n\nOn this page, you will develop an abstract data type (ADT) to store and access dates, and you will adapt your contact ADT to use it to store each contact’s birthday. \n\n\nAs we add more complexity to contacts—birthday, work address, and so on—the location of each data point (such as the phone number) inside a contact might change. This is where an abstract data type helps. If you were to move the phone number as you refine your contact ADT, you could fix every single block that uses the phone number, or if you have an ADT, you could just fix the one selector that chooses the phone number from the list. With that one change, all the other blocks using that selector will get the data they need automatically.\n\n\nAAP-1.D.5\n\nNotice that name, address, and text are strings, but birthdate is a list. You can combine elements of different types in a list.\n\n\n\nCreate an ADT to manage three data points for each date: month, day, and year.\n\n\nCreate a date constructor that accepts this data as input and then reports a date as a list of three items.  \n\n\nWrite three selector blocks to retrieve the specific data (month, day, or year) from the inputted date.    \n\n\nDebug any problems with the constructor or selectors.\n\n\n\n\nIntegrate your date ADT into the contact ADT.\n\n\nEdit the contact constructor block definition to accept a birthdate as a list by using the date constructor.  \n\n\nCreate a birthdate from contact selector to retrieve the contact birthdate from the inputted contact. \n\n\nAdapt your “Add Contact” button to input this new type of contact into your list.\n\n\nAdding Contacts with Birthdays\n\nYou could use several ask and answer blocks together with script variables.\nAnother way is to use abstraction and create another helper,  that reports a list of the user’s answers to these prompts:\n\n\nWhat is the contact’s birth month?\n\n\nWhat is the contact’s birth day?\n\n\nWhat is the contact’s birth year?\n\n\n\n\n\n\n\n\n\nDebug. Clear your contact list, and add a new few contacts with birthdays. Fix any problems."
  },
  {
    "objectID": "unit-3/lab-2/4-looking-up-data.html",
    "href": "unit-3/lab-2/4-looking-up-data.html",
    "title": "Page 4: Selecting Specific Data",
    "section": "",
    "text": "Purpose (do/learn; why this/here): Create a “Find Contact” button that uses a find contacts block to select items from the contact list based on the contact’s name. Students get practice with list processing, navigating abstract data types, and using the higher-order function, keep.\n\n\nBH: Ditto. (I still want given and family names! We can make it doable.)\n\n\nMary and Brian agreed to do this as a TIF. BH will write it onto this page in a TIF, and Mary will review/edit. –MF, 4/9/19\n\n\n\n\nOn this page, you will develop code for a “Find Contact” button to locate contacts in the list. \n\n\nYou learned about keep in Unit 2.\n\n\nDAT-2.D.3\n\nAs you add more contacts to your list, it will become less and less realistic to find the one you want by reading through the whole list. So building a search feature will become essential for finding the desired information efficiently. Lists, adding and removing items from lists, and searching lists are common features in many programs.\n\n\n\n\nFarida Bedwei (born in 1979) is a software engineer and the co-founder/Chief Technology Officer of Logiciel, a financial technology company based in Ghana. Due to difficulties in muscle control as a result of cerebral palsy, she began using a typewriter as an alternative to writing at an early age. Badwei attributes her future interest in computers to this early reliance on technology. In addition to being named as one of the most successful women in finance technology in Africa, Bedwei is a powerful advocate and role model for girls in STEM and for people with disabilities.\nArticle: The inspirational tech guru who’s owning cerebral palsy like a boss\n\n\nBH and Mary want to use this again and mention tables and include images of both in snap and discuss how to change back and forth between the two views. –MF, 4/9/19\nEach new contact is a list (item 1 is a name and item 2 should be a phone number), so the list of contacts is a list of lists.\n\n\n\n\nIf it isn’t open already, open your U3L2-ContactList project.\n\n\nWrite a  block that takes a text string as input and reports either a list of the contacts whose name includes that string or an empty list if no such name is in contact list.\n\nUse these blocks:\n\n\n, which reports true if the first string (for example, a contact’s name in the list) contains the second string (for example, a name or part of a name)\n\n\n, which reports only the items that make the function true\n\n\n, which returns true if the list is empty and false otherwise\n\n\nSelector \n\n\n\n\n\nDevelop a “Find Contact” button.\n\n\nMake the script ask the user whose contact to search for and have the sprite say each of the matching contacts.\n\n\nIf the contact is not in the list, make the sprite say “not found.”\n\n\n\n\nDebug. Make sure everything works the way you want it to before going on.\n\n\nCRD-2.D\n\n\n\nWhat is the output of this program?\n\n\n\n\n\nAAP-3.B.2, AAP-3.B.3\n\nModularity is the process of breaking a programming project up into separate sub-problems. For example on page 2 of this lab, you built code to add a contact to your app, and on this page, you built code to find contacts.\n\n\n\n\nDevelop a “Delete Contact” button.\n\n\nMove the “Delete Contact” button onto the stage.\n\n\nMake the script ask the user to “Enter the name of the contact(s) you wish to delete.”\n\n\nThen, use your find contacts block to find all the matching contacts.\n\n\nGive the user the list of matching contacts and ask them for confirmation to delete (so the user won’t accidentally delete their contact).\n\n\nIf the user confirms that they want to delete these contacts, replace the contact list with a list of all contacts whose name does not match the input name.\n\n\n\n\nModify your “Delete Contact” script so that it lets the user choose which contact they want to delete when find reports more than one.\n\n\nWrite a helper block delete contact that takes a contact as input and removes that contact from contact list.\n\n\nModify “Delete Contact” so that, if more than one contact matches the user’s name input, it displays a list of the matching names and asks the user to select one by number. (The item numbers are automatically displayed in the name list, so you don’t have to worry about that part.) Give the user a way to cancel the request instead of choosing a name.\n\n\nIf exactly one contact matches, instead of displaying the one-item list of names, just ask the user to confirm or cancel deleting it. (Optional.)\n\n\n\n\n\n\nThis set of exercises requires that you’ve already done the Take It Further exercises on page 2. Open your project U3L2-TIF.\n\n\nWrite a predicate function that takes two contacts as inputs. It should return True if the first contact belongs before the second one in a sorted contact list. That is, you’ll have to extract the names (in sorted form) from the two contacts, and then use \\&lt; to compare them. Respect the data abstractions.\n\n\nMake a block to sort the contact list. To do the actual sorting, you can load the “List utilities” library. It has a block . Use the contact list as the first input. The second input should be the predicate function you just wrote. (Leave its two input slots empty.) The sort block will report a new, sorted contact list.\n\n\nTest what you’ve done so far.\n\n\n We’ve been sloppy so far in talking about name formats. Most people in the United States say their given name (the one their parents chose for them) first, and their family name last. But in China, for example, the family name comes first. So “Sun Yat-sen” is a member of the Sun family.\n\n\nHow should the name “Sun Yat-sen” be displayed to the user?\n\n\nHow should “Sun Yat-sen” look in order to sort contacts by family name?\n\n\nWhat about someone with a middle name, such as Martin Luther King? Is the middle name a family name or a given name?\n\n\n\n\n Here’s the tricky part: To make this all work correctly, a name (as defined by the name ADT) has to know whether it’s a given-first name such as Betsy Anderson or a family-first name such as Sun Yat-Sen. Redefine your Name ADT to make it a list of three items. The first will be either the text ‘given-first’ or ‘family-first’. This first item is called a type tag. The second item will be the given name (or names), and the third will be the family name (or names).\n\nYou’ve been using type tags all along without knowing it. Many programming languages, including Snap!, attach type tags to every value, saying “I am a list” or “I am a number” and so on. The user (i.e., you) doesn’t see the type tags, unless you provide a bad input to a primitive block, and you see a message like “Expecting list but getting text.”\n\n\n\n Reading a name: Find where you ask the user for first and last name, and change the code to ask for given name(s) and family name. Also ask which comes first. You might want to have two name constructors,  and .\n\n\nWriting a name: Modify your  and  so that they check the type tag of the name (the first item) when necessary. Be careful about when to add a comma.\n\n\n Make sure your find contacts block and your sorting of the contact list still work with a contact list containing both kinds of names."
  },
  {
    "objectID": "unit-3/lab-2/5-mapping-over-list.html",
    "href": "unit-3/lab-2/5-mapping-over-list.html",
    "title": "Page 5: Transforming Every List Item",
    "section": "",
    "text": "On this page, you will use the map block to create an initials from name block and then use map together with initials from name to find the initials of all of your contacts.\n\n\n\nAlphie, Betsy, and Gamal are building an initials from name block that accepts one contact as input and reports that person’s initials. \n\n\nBetsy: I used the  block to break up the contact’s full name into a list of their names, and then I joined the first letter of each name: \n\n\nWhat’s the difference between splitting by spaces and splitting by words?\n\nTry it! (Each brown dot represents a space.)  \nIn one case, split is focusing on the exact characters in the string. In the other case, it’s giving you what you really want: the words in the contact’s name. At a low level of abstraction, text is made of characters and you look through each of the characters. But at a higher level of abstraction (such as when you are reading), text is made up of words. Snap! lets you think at this higher level of abstraction.\n\n\n\nAlphie: But what about someone who goes by three names like Martin Luther King? It would just report “ML” for him.\n\n\nGamal: Oh, that’s because the block only takes the first letter of items 1 and 2. We have to add in letter (1) of (item (3) of (list of names)).\n\n\nBetsy: But what if someone has more names than that? In my aunt’s family they each have five or six names…\n\n\nGamal: Well, then we need to take letter (1) of each item in the list of names. That sounds as if what we need is a higher-order function. Higher-order functions are good at doing things with individual items in a list.\n\n\nA higher-order function is a function that takes a function as input (or reports a function as output).\n\n\n\n\n\nBuild and experiment with these examples of the map function.   \n\n\n Discuss and then explain in writing what these expressions are doing.\n\n\n\nThe  block takes two inputs: a function (a reporter with a blank input slot) and a list, and it reports a new list in which each item is the result of calling the function with an item from the original list as input. For example:  \n\nYou choose the function that describes the result for one input item, and map applies that function to each item in the input list and then reports the list of result values. If your function has item 1 of or item 2 of in it, you’re probably trying to do map’s part of the job. \nMap is a higher-order function just like keep and combine. The function mapped over the list always has a blank input slot. This is where the list item goes each time the function is performed.\n\nThis picture shows how the three higher-order functions could be used:  See the higher-order function expressions with these (imaginary) shape procedures.\n\n  \n\nHere is a quick review of the higher-order functions map, keep, combine.\n\n\n\nMap performs a function on every item of a list and reports the list of changed items. \n\n\nKeep uses a predicate function (a true/false question) to check every item in a list and reports the items that make the predicate true. (You learned about keep on Unit 2 Lab 3 Page 5: Keeping Items from a List.) \n\n\nCombine uses a combining function (a function with two inputs) to report the results of combining all the items in a list using that function. (You learned about combine on Unit 2 Lab 4 Page 3: More Mathematical Reporters.) \n\n\n\n\n\n\n\n\nIf it isn’t open already, open your U3L2-ContactList project.\n\n\nUse map and combine together to build an initials from name reporter that takes a name as input and reports that person’s initials.  \n\n\nTest and debug your initials from name block.\n\n\nCreate an expression to report a list of the initials of all your contacts.\n\nNeed a hint?\n\nFirst, create an expression to report a list of the names of all your contacts.  → \n\n\n → \n\n\n\n\n\nWhich of the following statements are true about this list? \n\n\n\n reports the list {r, 5, b, i, 3, k, 2, 3, t, 6}.\n\n\nCorrect.\n\n\n\n\n reports the list {rabbit}.\n\n\nThe blank space in item of expects a list as its input, but map puts a single item from words and numbers into that slot.\n\n\n\n\nBoth of the above.\n\n\nThe input list (words and numbers) contains text strings (not lists) so the blank space in the input function should expect a text string (not a list).\n\n\n\n\nNone of the above.\n\n\nMap performs the input function over each item in the input list.\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhich of the following statements are true about this list?  Choose all that apply.\n\nWhy not use an ADT?\n\nThe list inside a list shown above makes it clearest to you now as you answer this self-check item what the structure is, but you’re right, in an actual program it would be better to use an abstract data type: \n\n\n\n\n\n reports the list {Augusta, Boise, Columbia, Des Moines}.\n\n\nCorrect.\n\n\n\n\n reports the list {Augusta, Maine}.\n\n\nNo. Map performs the input function on each item of the list—not on the whole list. The expression item (1) of (capitals) (without using map at all) would report the list {Augusta, Maine}.\n\n\n\n\n reports the list {A, B, C, D}.\n\n\nNo. You can find the first letter of a word, but not the first letter of a list. The expression map (letter (1) of (item (1) of ( ))) over (capitals) would report the list {A, B, C, D}.\n\n\n\n\n reports the list {Maine, Idaho, South Carolina, Iowa}.\n\n\nNo. This is a tricky one. What gets reported is actually a list of one-item lists: {{Maine}, {Idaho}, {South Carolina}, {Iowa}}. You might want to try it in Snap!. The expression map (item (2) of ()) over (capitals) would report the list {Maine, Idaho, South Carolina, Iowa}.\n\n\n\n\n reports the list {{Boise, Idaho}, {Columbia, South Carolina}, {Des Moines, Iowa}}.\n\n\nNo. Map performs the input function on each item of the list—not on the whole list. The expression all but first of (capitals) (without using map at all) would report the list of lists {{Boise, Idaho}, {Columbia, South Carolina}, {Des Moines, Iowa}}.\n\n\n\n\n\n\n\n\n\n\nRead the two scripts below; they do the same thing.  Give two reasons why the use of abstraction in the second example is preferred.  \n\n\n\nThis new multiple-choice quizlet misbehaves if you only select some of the correct responses. Need to fix. –MF, 1/13/21\n\n\n\nConsider this list of squares:   Which of the following expressions will report a list? Choose all that apply.\n\n\n\n\n\n\nCorrect.\n\n\n\n\n\n\n\nCorrect.\n\n\n\n\n\n\n\nNo, + reports a number, so in this case combine will report a number.\n\n\n\n\n\n\n\nCorrect.\n\n\n\n\n\n\n\nNo. join(1,4) will report 14.\n\n\n\n\n\n\n\nCorrect.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick the picture to load this database project:\n\nData from Structure and Interpretation of Computer Programs by Abelson and Sussman. Creative Commons licensed.\n\n This is the list of employees of a small company. Each of the smaller lists contains a person’s name, job title, and yearly salary.\n“This company spends more money on the big bosses than on the people who do the work,” says Alyssa one day. Is she right? Write an expression to compute the total salaries of everyone paid less than $100,000 per year. Then find the total for everyone paid more than $100,000 per year.\n\n\nBen suggests that the results will be more convincing in the form of a list containing that total and all the names of the people in that category (paid less than $100,000, for example). So, if there are five people in that category, your list will have six items: first the total of the salaries, and then the names of the people. Try this both for less than $100,000 and for more than $100,000.\n\n\nFind the average salary of people paid less than $100,000 per year."
  },
  {
    "objectID": "unit-3/lab-2/assessment-data3.html",
    "href": "unit-3/lab-2/assessment-data3.html",
    "title": "Lab 2 Practice Questions",
    "section": "",
    "text": "3.2.5\n\nWhich of the following statements are true about this list?\n\n\n\n\n reports the list {r, 5, b, i, 3, k, 2, 3, t, 6}.\n\n\nCorrect.\n\n\n\n\n reports the list {rabbit}.\n\n\nThe blank space in item of expects a list as its input, but map puts a single item from words and numbers into that slot.\n\n\n\n\nBoth of the above.\n\n\nThe input list (words and numbers) contains text strings (not lists) so the blank space in the input function should expect a text string (not a list).\n\n\n\n\nNone of the above.\n\n\nMap performs the input function over each item in the input list.\n\n\n\n\n\n\n\n\n\n3.2.5\n\nWhich of the following statements are true about this list?\n\nChoose all that apply.\n\nWhy not use an ADT?\n\nThe list inside a list shown above makes it clearest to you now as you answer this self-check item what the structure is, but you’re right, in an actual program it would be better to use an abstract data type:\n\n\n\n\n\n\n reports the list {Augusta, Boise, Columbia, Des Moines}.\n\n\nCorrect.\n\n\n\n\n reports the list {Augusta, Maine}.\n\n\nNo. Map performs the input function on each item of the list—not on the whole list. The expression item (1) of (capitals) (without using map at all) would report the list {Augusta, Maine}.\n\n\n\n\n reports the list {A, B, C, D}.\n\n\nNo. You can find the first letter of a word, but not the first letter of a list. The expression map (letter (1) of (item (1) of ( ))) over (capitals) would report the list {A, B, C, D}.\n\n\n\n\n reports the list {Maine, Idaho, South Carolina, Iowa}.\n\n\nNo. This is a tricky one. What gets reported is actually a list of one-item lists: {{Maine}, {Idaho}, {South Carolina}, {Iowa}}. You might want to try it in Snap!. The expression map (item (2) of ()) over (capitals) would report the list {Maine, Idaho, South Carolina, Iowa}.\n\n\n\n\n reports the list {{Boise, Idaho}, {Columbia, South Carolina}, {Des Moines, Iowa}}.\n\n\nNo. Map performs the input function on each item of the list—not on the whole list. The expression all but first of (capitals) (without using map at all) would report the list of lists {{Boise, Idaho}, {Columbia, South Carolina}, {Des Moines, Iowa}}.\n\n\n\n\n\n\n\n\n\n3.2.5\n\nConsider this list of squares: \n\nWhich of the following expressions will report a list?\nChoose all that apply.\n\n\n\n\n\n\nCorrect.\n\n\n\n\n\n\n\nCorrect.\n\n\n\n\n\n\n\nNo, + reports a number, so in this case combine will report a number.\n\n\n\n\n\n\n\nCorrect.\n\n\n\n\n\n\n\nNo. join(1,4) will report 14.\n\n\n\n\n\n\n\nCorrect.\n\n\n\n\n\n\n\n\n\nLab 2: Contact List\n\n\n3.2.5\n\nWhich of the following statements are true about this list?\n\n\n\n\n reports the list {r, 5, b, i, 3, k, 2, 3, t, 6}.\n\n\nCorrect.\n\n\n\n\n reports the list {rabbit}.\n\n\nThe blank space in item of expects a list as its input, but map puts a single item from words and numbers into that slot.\n\n\n\n\nBoth of the above.\n\n\nThe input list (words and numbers) contains text strings (not lists) so the blank space in the input function should expect a text string (not a list).\n\n\n\n\nNone of the above.\n\n\nMap performs the input function over each item in the input list.\n\n\n\n\n\n\n\n\n\n3.2.5\n\nWhich of the following statements are true about this list?\n\nChoose all that apply.\n\nWhy not use an ADT?\n\nThe list inside a list shown above makes it clearest to you now as you answer this self-check item what the structure is, but you’re right, in an actual program it would be better to use an abstract data type:\n\n\n\n\n\n\n reports the list {Augusta, Boise, Columbia, Des Moines}.\n\n\nCorrect.\n\n\n\n\n reports the list {Augusta, Maine}.\n\n\nNo. Map performs the input function on each item of the list—not on the whole list. The expression item (1) of (capitals) (without using map at all) would report the list {Augusta, Maine}.\n\n\n\n\n reports the list {A, B, C, D}.\n\n\nNo. You can find the first letter of a word, but not the first letter of a list. The expression map (letter (1) of (item (1) of ( ))) over (capitals) would report the list {A, B, C, D}.\n\n\n\n\n reports the list {Maine, Idaho, South Carolina, Iowa}.\n\n\nNo. This is a tricky one. What gets reported is actually a list of one-item lists: {{Maine}, {Idaho}, {South Carolina}, {Iowa}}. You might want to try it in Snap!. The expression map (item (2) of ()) over (capitals) would report the list {Maine, Idaho, South Carolina, Iowa}.\n\n\n\n\n reports the list {{Boise, Idaho}, {Columbia, South Carolina}, {Des Moines, Iowa}}.\n\n\nNo. Map performs the input function on each item of the list—not on the whole list. The expression all but first of (capitals) (without using map at all) would report the list of lists {{Boise, Idaho}, {Columbia, South Carolina}, {Des Moines, Iowa}}.\n\n\n\n\n\n\n\n\n\n3.2.5\n\nConsider this list of squares: \n\nWhich of the following expressions will report a list?\nChoose all that apply.\n\n\n\n\n\n\nCorrect.\n\n\n\n\n\n\n\nCorrect.\n\n\n\n\n\n\n\nNo, + reports a number, so in this case combine will report a number.\n\n\n\n\n\n\n\nCorrect.\n\n\n\n\n\n\n\nNo. join(1,4) will report 14.\n\n\n\n\n\n\n\nCorrect.\n\n\n\n\n\n\n\n\n\nLab 2: Contact List\n\n\n3.2.5\n\nWhich of the following statements are true about this list?\n\n\n\n\n reports the list {r, 5, b, i, 3, k, 2, 3, t, 6}.\n\n\nCorrect.\n\n\n\n\n reports the list {rabbit}.\n\n\nThe blank space in item of expects a list as its input, but map puts a single item from words and numbers into that slot.\n\n\n\n\nBoth of the above.\n\n\nThe input list (words and numbers) contains text strings (not lists) so the blank space in the input function should expect a text string (not a list).\n\n\n\n\nNone of the above.\n\n\nMap performs the input function over each item in the input list.\n\n\n\n\n\n\n\n\n\n3.2.5\n\nWhich of the following statements are true about this list?\n\nChoose all that apply.\n\nWhy not use an ADT?\n\nThe list inside a list shown above makes it clearest to you now as you answer this self-check item what the structure is, but you’re right, in an actual program it would be better to use an abstract data type:\n\n\n\n\n\n\n reports the list {Augusta, Boise, Columbia, Des Moines}.\n\n\nCorrect.\n\n\n\n\n reports the list {Augusta, Maine}.\n\n\nNo. Map performs the input function on each item of the list—not on the whole list. The expression item (1) of (capitals) (without using map at all) would report the list {Augusta, Maine}.\n\n\n\n\n reports the list {A, B, C, D}.\n\n\nNo. You can find the first letter of a word, but not the first letter of a list. The expression map (letter (1) of (item (1) of ( ))) over (capitals) would report the list {A, B, C, D}.\n\n\n\n\n reports the list {Maine, Idaho, South Carolina, Iowa}.\n\n\nNo. This is a tricky one. What gets reported is actually a list of one-item lists: {{Maine}, {Idaho}, {South Carolina}, {Iowa}}. You might want to try it in Snap!. The expression map (item (2) of ()) over (capitals) would report the list {Maine, Idaho, South Carolina, Iowa}.\n\n\n\n\n reports the list {{Boise, Idaho}, {Columbia, South Carolina}, {Des Moines, Iowa}}.\n\n\nNo. Map performs the input function on each item of the list—not on the whole list. The expression all but first of (capitals) (without using map at all) would report the list of lists {{Boise, Idaho}, {Columbia, South Carolina}, {Des Moines, Iowa}}.\n\n\n\n\n\n\n\n\n\n3.2.5\n\nConsider this list of squares: \n\nWhich of the following expressions will report a list?\nChoose all that apply.\n\n\n\n\n\n\nCorrect.\n\n\n\n\n\n\n\nCorrect.\n\n\n\n\n\n\n\nNo, + reports a number, so in this case combine will report a number.\n\n\n\n\n\n\n\nCorrect.\n\n\n\n\n\n\n\nNo. join(1,4) will report 14.\n\n\n\n\n\n\n\nCorrect."
  },
  {
    "objectID": "unit-3/lab-3/1-find-ties.html",
    "href": "unit-3/lab-3/1-find-ties.html",
    "title": "Page 1: Remembering the Moves and Possible Wins",
    "section": "",
    "text": "In this lab, you will continue your Tic-Tac-Toe project to make the program analyze the game board to detect wins and ties.\nOn this page, you’ll prepare by allowing the program to record the moves that are made, and teach it the winning groups of three squares.\n\nWhen you first wrote Tic Tac Toe, it was easy to detect illegal moves (moving to a square that’s already wearing an X or O costume) because each sprite could test for that without knowing about the rest of the game board. But to detect wins and ties, the program needs a way to test the state of the whole game board, not just one individual piece. So, you’ll use a global variable, , to keep track of whether the square in each position is empty or filled with an X or an O.\n\nYou learned about global variables on Unit 2 Lab 1 Page 4: Keeping Score with Global Variables.\n\n\n\n\n\nOpen your U3L1-TicTacToe project, and save it as U3L3-TicTacToe so you’ll still have your old version when you edit the new one.\n\n\nMake a global variable called board that, at the beginning of the game, contains a list with the numbers from 1 to 9.\n\n\n\nEach sprite needs to know its own position on the board so that you can use the item of block to replace that position with an X or an O. So, you’ll create a sprite variable, , and each clone will have its own version of this variable.\n\n: Sprite Variable\nA sprite variable is like a global variable in that it doesn’t belong to a particular script, but it does belong to a particular sprite.\n\n\n\n\n\nYou learned about initializing variables on Unit 2 Lab 1 Page 1: Developing a Number Guessing Game with Script Variables.\n\nCreate a sprite variable position number.\n\nYou make a sprite variable similarly to how you make global variables:\n\n\nClick  in the Variables palette.\n\n\nThen, as you are typing the variable’s name, select “for this sprite only” to make it a sprite variable.\n\n\n\n\n\n\nAs you create the clones, set each one’s position number to the appropriate value (1-9).\n\nClick for a hint on setting the position number.\n\nIn the loop that makes the clones, increase the parent sprite’s variable by one for each new clone so that each clone will have a unique value.\n\n\n\nMake sure that the parent’s position number doesn’t end up being a number 1-9 so that it doesn’t conflict with a clone.\n\n\n\nWhen a square is clicked, replace that square’s entry in the board list with X or O as appropriate.\n\n\nWatch the values stored in the board variable as you play a game of Tic Tac Toe. Make sure that it updates as you expect it to, and fix any bugs.\n\n\n\n\nStoring All the Ways to Win\n\nTo program a way to detect a win, you need to determine what counts as a win. You’ll store each possible winning triple as a list of three position numbers (a triple). For example, this winning triple could be represented as  because the win is in the 3rd, 5th, and 7th positions: \n\n\n\n\n\n\nHow many winning triples are possible?\n\n\nWrite down each of the possible winning triples.\n\n\n\n\n\nYou could check for each possible win separately: \nBut that’s way too much code, especially because you’ll have to do something very similar again, later on, when the computer actually plays against you. Instead, you’ll create a list to store all of the possible winning triples so you can check it against the current state of the game stored by board.\n\n\n\n\nCreate a reporter that outputs a list of all possible winning triples. It will look something like this:"
  },
  {
    "objectID": "unit-3/lab-3/2-checking-for-a-win.html",
    "href": "unit-3/lab-3/2-checking-for-a-win.html",
    "title": "Page 2: Detecting A Win",
    "section": "",
    "text": "I made some edits to include the word “possible” more. I’m not sure I didn’t make it more confusing. Need to look again another day. –MF, 6/13/18\nI need to review the rest of this lab. Looks different than before. –MF, 5/31/20\nPG: I haven’t thought deeply (haven’t even read carefully!) but would want to check carefully to make sure this is /developmentally/ helpful. Maybe it already is.\n\n\nOn this page, you’ll program your Tic-Tac-Toe project first to report the contents of one specific set of three squares that would make a win (such as the top row), and then to use that to find the contents of all possible winning triples. You’ll use that information to find out if one of the players has won the game.\n\n\nChecking One Way to Win\n\nWe need a way to find out if a possible winning triple has actually happened. We can use map to check each position in one triple to see if either player has won with that triple.\n\nYou learned about map in Unit 3 Lab 2 Page 5: Transforming Every List Item.\nMap applies the function in the gray ring to each item in the input list, and it reports a list of all the results. \nRecall that the blank input slot in the function inside the gray ring is where one list item goes every time the function is performed.\n\n\n\n\nClick  to start a new game. Play one game, deliberately letting x win.\n\n\nThen build this expression, and see what it reports: \n\nHow does map work here?\n\nThis map expression works the same way as the join example above, but people sometimes find it a little more complex to think about, because it’s natural to expect , but that’s not what the expression says. Instead, it maps over a constant list, not a variable. As before, map inserts each list item into the blank space in the function inside the gray ring, and it reports a list of the results.\nBut here, the function in the gray ring is item ( ) of (board), so map checks items 1, 2, and 3 of the board list, and it reports a list of what is in those three positions (each of which is X, O, or a number if the square is empty).\nIf you can’t see what’s inside the board variable, be sure its box is checked in the Variables palette and expand its watcher to see its list items as in the picture below.  \n\n\n\n\n What does the result of that expression tell you about the state of the game?\n\n\nIf {1, 2, 3} isn’t the triple in which x won the game, replace the list in the map expression with the winning triple, and click the expression again.\n\n\nUse this idea to make a  block that takes one possible winning triple (a triple like ) as input and reports a list of what is in those three positions (X, O, or a number). Then use it to write an expression in the scripting area whose value will be True if X won the game in the triple , or False otherwise.\n\nYou learned how to specify the list input type () on Unit 2 Lab 2 Page 2: Planning a Quiz App.\n\n\n\n Play another game where player O wins, and test your status of triple block with the winning triple. Fix any bugs.\n\n\n\n\nChecking All the Ways to Win\n\nNow you’re going to use status of triple systematically to check all the triples.\nFor example, Player O has won the game below, and the status of all winning triples block finds the status of each possible triple. The computer can use this block to check for a winning triple that has either all X or all O.  \n\nThe order of your triples and/or the numbering of the positions in your project might be different. This is OK as long as your project works.\n\n\n\n\nUse map together with some of the other blocks you have made to build the status of all winning triples block. It should report the status of all of the possible winning triples as a list of lists, as shown above.\n\n\nClick for a hint on how to use map.\n\nWhen you use map think:\n\n\nWhat is the function you are performing? That goes in the gray ring.\n\n\nWhat data are you performing that function on? That is the list you are mapping over.\n\n\nHere, you want to know the status of each possible winning triple.\n\n\n\nClick for a hint on building won?.\n\nPut it in words: What is it that you want to check?\nAre there any blocks that might be helpful for that?\nClick for another hint.\n\n\n\n\n\n\nNow make a block  that takes the letter X or O as input, and reports true if and only if that player has won the game.\n\n\n\nModify your program so that when a player wins the game, the program notifies the players.\n\n\nPlay the game a few times to check that it’s working, and fix any bugs. Be sure to let each player win at least once."
  },
  {
    "objectID": "unit-3/lab-3/3-checking-for-ties.html",
    "href": "unit-3/lab-3/3-checking-for-ties.html",
    "title": "Page 3: Checking for Ties",
    "section": "",
    "text": "On this page, you’ll check for a tie game, that is, whether there are no more empty squares but neither player has won.\n\n\n\n\nDevelop a way to determine if the game has tied, and if so, make the program notify the players.\n\nSnap! has a higher-order function  that works similarly to keep, but it reports only the first item that’s found, so it can be faster. Find first is equivalent to item (1) of (keep).\nFind first is a higher-order function like keep, map, and combine because it takes a function (a predicate) as input.\nClick for a hint about using find first to check for ties.\n\n\n\n\n\n\nPlay a couple of games to test the tie-checking feature, and fix any bugs.\n\n\nYou can work on this project more in Unit 5 Lab 6: Tic-Tac-Toe with a Computer Player.\n\n\nWhy does the order of the tests (for wins vs. for ties) matter? \n\n\n\n\n\n\n\n\n\nThere are many small improvements you could make. For one thing, when a player wins, you might want to prevent any further moves. What else might you want to change or improve?\n\n\n\n\n\n\n\nYour program can be smarter about detecting ties. If there is only one empty square on the board, and filling that square with the player whose turn is next wouldn’t cause a win, then the game is already tied. The challenge here is that you’ll have to test for a win on a board that isn’t the current board.\n\n\nInstead of just having the sprite say something like “X wins,” it would be more satisfying to the players if you draw a thick line through the three squares that generate a win. This is a little tricky because by the time you know there’s a win, you no longer know which triple triggered it. Make sure your code stays readable to another programmer."
  },
  {
    "objectID": "unit-3/lab-4/1-what-is-ai.html",
    "href": "unit-3/lab-4/1-what-is-ai.html",
    "title": "Page 1: What is AI?",
    "section": "",
    "text": "BH to review Ken Kahn’s work for TIF a. –MF, 10/16/18\n\n\nIn this lab, you will learn about advances in artificial intelligence and the ethics of artificial intelligence and robotics technology.\nOn this page, you will do online research on image recognition.\n\n\nArtificial intelligence (AI) is a field of computer science loosely defined as “trying to get computers to think.”\n\nThis definition has led to a lot of arguments about whether a computer can ever really think, so John McCarthy, one of the founders of AI, defined AI as “getting computers to do things that, when done by human beings, are said to involve intelligence.” This definition allows AI researchers to do their work instead of spending time arguing about what “thinking” means.\nInterestingly, tasksthat human beings generally consider to be hard to do (like playing chess) have turned out to be easier for computers than tasks people think of as being so easy that we do them “without thinking,” like walking. Another example is seeing, that is, recognizing images, which is a big field of research in AI.\n\n\n\nDo your own research to learn more about getting computers to see.\n\nHere are some suggested links, but AI is a fast-moving field of research, so you can probably find more current resources than these suggestions.\n\n\nVideo: How we’re teaching computers to understand pictures (TED talk)\n\n\nApp Spots Objects for the Visually Impaired (MIT Technology Review)\n\n\nMachine Vision Algorithm Learns to Recognize Hidden Facial Expressions (MIT Technology Review)\n\n\nHow Facebook is teaching computers to see (Fortune)\n\n\nFooling the Machine: The Byzantine Science of Deceiving Artificial Intelligence (Popular Science)\n\n\n\n\n\nDiscuss some of the social implications of teaching computers to understand images. For example, some articles above include positive implications such as helping people with visual disabilities by providing AI-generated descriptions of images. Others warn of potentially negative consequences of image recognition.\n\n\nList three possible good consequences of computer face recognition.\n\n\nList three possible bad consequences of computer face recognition.\n\n\nBrainstorm suggestions for ways to encourage the good consequences while discouraging the bad ones.\n\n\n\n\n\n\n\n\nIn your research, you probably came across terms like machine learning or neural networks or deep learning. Research these ways of thinking about artificial intelligence by searching for articles and videos like these:\n\n\nVideo: Machine Learning & Deep Neural Networks Explained (YouTube)\n\n\nWhat is Deep Learning and How Is It Useful? (Forbes)\n\n\n\n\nThe history of artificial intelligence goes back further than you might realize. The ideas of robots and artificial intelligence existed before the 1950s, but the field become more established in the 1950s and 1960s. Research some early contributions to AI to see both how far we’ve come and also how some early challenges still exist today.\n\n\nTimeline of Computer History\n\n\nArticle with videos: A brief history of artificial intelligence"
  },
  {
    "objectID": "unit-3/lab-4/2-robots-and-humans.html",
    "href": "unit-3/lab-4/2-robots-and-humans.html",
    "title": "Page 2: Robots and Humans",
    "section": "",
    "text": "On this page, you will research and discuss interactions between robots and humans.\n\n\n\n\nDo one or more of these activities and share your findings:\n\n\nResearch different ways that robots are modeled after animals (especially non-human ones) and what the robots are used for. Discuss your own innovative ideas for designs or uses for robotic animals.\n\nClick here for some examples. You can probably find more current resources.\n\n\n\nRobots Blur the Lines between Biology and Engineering (AAAS)\n\n\n\nTiny Little Multi-Modal Picobug Walks, Flies, Grabs Stuff (IEEE Spectrum)\n\n\nCockroach-like robots may be the future of disaster help (CBS)\n\n\nThese undercover robot animals are helping in the hunt for poachers (Washington Post)\n\n\n\n\n\n\nMany robots are being developed to be used to respond to disasters, such as to search for and rescue people or to clean up radioactive sites. Research recent developments and continuing challenges in this area of robotics.\n\nClick here for some examples. You can probably find more current resources.\n\n\n\nRobots, drones and heart-detectors: How disaster technology is saving lives (CNN)\n\n\nThese Robots That Swim, Fly and Crawl Come to the Rescue after Disasters (Observer) and associated video These robots come to the rescue after a disaster (TED)\n\n\nNavy calls on researchers to create firefighting humanoid robot (ComputerWorld)\n\n\n\n\n\n\nRobots have also changed the field of medicine. Research some of these innovations and consider how the technology is changing lives.\n\nClick here for some examples. You can probably find more current resources.\n\n\n\nA robot will likely assist in your future surgery (ComputerWorld)\n\n\n\nThis Robot Makes Doctor Visits Less Terrifying for Kids (IEEE Spectrum)\n\n\n\n\n\n\nThe use of industrial robots has eliminated some jobs for people, especially in car factories. Research recent developments about automation.\n\n\n\n\n\n\n\n\nMarina Bers is known for her work on computational thinking, technology, and tools for children to learn computer programming. After receiving her undergraduate degree from Buenos Aires University in Argentina, she went on to earn a PhD from the MIT Media Laboratory in 2001, was a professor at Tufts University for 21 years and joined Boston College in 2022.  Dr. Bers co-developed ScratchJr, an app which teaches programming to children as young as age 5. Dr. Bers is also a co-founder of KinderLab Robotics, where she developed KIBO, a robot that young children can program with wooden blocks. Check out ScratchJr and Kobo.\n\nImage provided for publication with permission from Marina Bers"
  },
  {
    "objectID": "unit-3/lab-4/3-implications.html",
    "href": "unit-3/lab-4/3-implications.html",
    "title": "Page 3: Implications of AI",
    "section": "",
    "text": "On this page, you will consider some of the ethical issues of robots and AI.\n\n\n\n\nHumanoid Robots: What are the social implications of building robots that look and act like humans?\n\nThe “uncanny valley” is a term that describes the eerie feeling when we realize that something we thought was human is not actually human.\n\n\nThe Uncanny Valley (IEEE Spectrum)\n\n\nStudy: Nobody Wants Social Robots that Look Like Humans because They Threaten Our Identity (IEEE Spectrum)\n\n\n\n\n\nEthics and AI: Should there be limits to the development of AI? How can we be developing AI responsibly? Below are three possible questions in this area. They’re not all equally good questions; start by asking, for each of them, whether there might be a more productive question to pose about the issue. (So, what’s the best question to ask about the ethics of self-driving cars? About AI and jobs? About AI and laws?)\n\n\n\nWhat about a self-driving car that has to make a choice between the life of its passenger and the life of a pedestrian? How does that choice get made?\n\n\nThere’s also the issue of who gets the benefits of AI. The people whose jobs are being replaced by robots are disproportionately lower-income. How can we make sure that everyone benefits from developments in AI?\n\n\nWhat laws apply to AI? What happens when a robot commits a crime? Who gets punished?\n\n\nSome relevant articles:\n\n\n\n\nThe Military Wants to Teach Robots Right from Wrong\n\n\n\nResponsible robots, AI, and the future of humanity\n\n\nA Rising Call for Responsible Artificial Intelligence\n\n\nArtificial Intelligence, Legal Responsibility And Civil Rights\n\n\nRobotics: Ethics of artificial intelligence\n\n\n\n\n\n\n\n\nBias and AI is a new problem. Please consider carefully during review. –MF, 6/14/17\n\n\nIOC-1.B.1 bullet 3, IOC-1.D, IOC-1.D.1, IOC-1.D.2, IOC-1.D.3, IOC-1.F.11 bullet 2\n\nBias and AI: Machine learning algorithms have enabled innovation in medicine, business, and science. However, because they use existing data to develop “understanding” of the world, they are influenced by existing biases in the data, and their results have been used to discriminate against groups of individuals. Research this issue and discuss how AI researchers might overcome this problem.\n\n\n\nCan Computer Programs Be Racist And Sexist?\n\n\nArtificial intelligence and racism\n\n\nAI programs exhibit racial and gender biases, research reveals\n\n\nFacial-Recognition Software Might Have a Racial Bias Problem\n\n\n\n\n\n\nIOC-1.A\n\nThroughout this course you have seen that technology has both benefits and risks. Imagine yourself working in the field of AI or robotics. What are you interested in working on? What are the benefits? How will you minimize the risks?\n\n\n\nPodcast: The world desperately needs AI strategists. Here’s how to become one.\n\n\nGuide to working in AI policy and strategy"
  },
  {
    "objectID": "unit-3/lab-4/4-breakthroughs-possibilities.html",
    "href": "unit-3/lab-4/4-breakthroughs-possibilities.html",
    "title": "Page 4: Recent Breakthroughs",
    "section": "",
    "text": "On this page, you will do some deeper research on AI.\n\n\nMF: I question if this needs a whole page of its own. Maybe it’s fine.\n\n\n\n\nArtificial Intelligence is a very active field with many interesting developments announced daily. Choose a topic you’re interested in (like medicine, finance, politics, education, communication, law, gaming, astronomy, psychology, transportation, literature, international policy, etc.) and find 2-3 recent news articles that relate to developments in AI in that field. Be prepared to share what you find with the class.\n\n\nIn addition to reporting new developments, mention challenges for AI that still remain.\n\n\n\n\nTry to find stories about current developments and that focus on AI more generally—not just robots."
  },
  {
    "objectID": "unit-3/lab-5/1-past-and-future.html",
    "href": "unit-3/lab-5/1-past-and-future.html",
    "title": "Page 1: Past and Future",
    "section": "",
    "text": "pink box new. maybe discuss other todo also? –MF, 12/21/17 “Impact” is a noun. –bh\nMF: could use review/light revision; tough to have 2.17 SI labs back to back\n\n\nJK: I don’t have a place for this note from Brian: I’d like to say something, if we can make it understandable, about the way non-physical products (software, movies, etc.) distort the market for physical stuff (especially housing). People get rich on ideas, but you can’t eat ideas, and the supply of real stuff isn’t infinitely expandable, so in effect real stuff becomes more expensive for people not in the virtual-stuff business.\n\n\nIn this lab, you will consider the implications of computing to the workplace.\nOn this page, you will discuss how technology has changed jobs and how it may affect what jobs are available in the future.\n\n\n\n\n\nIOC-1.A.2\n\nWith a partner, brainstorm about the following, and then share your ideas with the class.\n\n\nName some jobs that exist now, but didn’t exist 25 years ago.\n\n\nName some jobs that existed 25 years ago that no longer exist today (or at least mostly don’t exist today).\n\n\nName some jobs that don’t exist today that you think might exist in 25 years.\n\n\nWhat jobs (if any) do you think computers will never be able to do?\n\n\nWhat jobs (if any) do you think computers should never be allowed to do?\n\n\n\n\n\n\n\n\n\nImage from Miss Ross, Inc.\n\n\nAngelica Ross (born 1980) is an American actress, businesswoman, and transgender rights advocate. After a turbulent youth, Angelica taught herself computer programming and graphic design and worked in web management. In 2014 she launched TransTech Social Enterprises, a nonprofit that helps people lift themselves out of poverty through technical training and digital work creating a social impact and bringing economic empowerment to marginalized trans and gender non conforming communities and members.\nAbout Trans Tech Social Enterprises\n\nUntil recently, many economists argued that jobs lost through automation would be replaced by new jobs controlling the machinery. Recent research has established that the number of new technology-control jobs is too small to make up for the jobs replaced by the technology. There are new jobs available, but they’re not as good as the old ones; they are some or all of part-time, low-pay, short-term, or without benefits such as health insurance."
  },
  {
    "objectID": "unit-3/lab-5/2-working-conditions.html",
    "href": "unit-3/lab-5/2-working-conditions.html",
    "title": "Page 2: Working Conditions",
    "section": "",
    "text": "pink box new. –MF, 12/21/17\nMF: could use review/light revision; tough to have 2.17 SI labs back to back\n\n\nOn this page, you will consider two ways that technology is changing the employment experience.\n\nComputers can affect the style of work, even if they don’t take your job away.\n\n\n\nHere are some findings from a 2007 Electronic Monitoring and Surveillance Survey.\n\n\nHere are some ways employers use technology to monitor their employees. What are some pros and cons of these policies?\n\n\nBlock access to certain websites, like social media (like Facebook or Twitter), game sites, or other sites they deem inappropriate or offensive.\n\n\nMonitor email use of employees, including reading email messages.\n\n\nUse video surveillance to prevent theft.\n\n\n\n\nOn-demand businesses existed before the Internet, but technology has helped grow an ‘’on-demand economy.’’ Many on-demand companies do not have regular employees, but hire independent contractors. This gives workers great flexibility about when they work, but costs them benefits like sick pay, health insurance, collective bargaining, job stability, or unemployment insurance if they are fired.\n\n\nResearch the on-demand economy. Here are some resources to get you started.\n\n\n\nA longer article, but with lots of information: The ‘On-Demand Economy’ Is Reshaping Companies And Careers (businessinsider.com)\n\n\nEven More Labor Complaints Filed against On-Demand Companies (wired.com)\n\n\nAn example of how, even though drivers aren’t employees, Uber monitors them like employees: Uber Using Phone Data to Track How Fast Drivers are Going (wired.com)\n\n\n\n\nBelow are four statements. Discuss and decide whether you agree or disagree.\n\n\nOn-demand workers know what they’re signing up for, so they shouldn’t be suing these companies for not getting benefits.\n\n\nIn general, you get better work out of people if they are dedicated and loyal to your company. Might it matter if a driver drives for both Uber and Lyft?\n\n\nThe on-demand economy just helps the rich get richer and the poor get poorer.\n\n\nIt is hard for a traditional company with employees to compete with the on-demand model.\n\n\n\n\nThink of an idea for an on-demand company you might launch."
  },
  {
    "objectID": "unit-3/lab-5/3-working-remotely.html",
    "href": "unit-3/lab-5/3-working-remotely.html",
    "title": "Page 3: Working Remotely",
    "section": "",
    "text": "MF: could use review/light revision; tough to have 2.17 SI labs back to back\n\n\nOn this page, you will consider the ways that technology enables long-distance working relationships.\n\n\n\n\nThis study found that productivity increased for call-center workers working from home over a period of nine months.\n\n\nWorking remotely and telecommuting usually mean working from home instead of coming to an office. Not all employers let their employees telecommute. As an employer:\n\n\nWhat reasons would you give for not wanting your employees to telecommute?\n\n\nWhat benefits might you see for allowing employees to telecommute?\n\n\n\n\nThere are other ways that technology enables workers to work from afar. Choose one or more of these topics to research and discuss.\n\n\nTechnology can help doctors treat patients remotely. This can be especially useful for clinics in rural areas, or for helping more people access doctors who specialize in the areas they need. Other developments in technology are helping doctors monitor vital signs or perform surgery using robots. Search for articles about telemedicine to learn about its benefits and potential downsides.\n\n\nFarming can’t be done remotely. So how is technology affecting agriculture? One way is by giving farmers power through real-time information, such as market prices for food and animals, so that they are aware of fair prices. It can also help farmers find customers for their products. Read about new initiatives and their challenges in countries all over the world. For example: Top 10 mobile agricultural applications (IT News Africa).\n\n\nOutsourcing is paying other companies to perform tasks or provide services at a lower price than it costs to hire employees to do them. Companies often outsource certain tasks to other companies that may (sometimes) be in other countries where people are paid less. Technology has made outsourcing easier. But technology companies often outsource things like janitorial services, in part so they can say things like “All our employees have excellent health benefits.” (… But the janitors aren’t employees, so they don’t count.)\n\nHow can it cost less to pay another company to pay a janitor for you, so you are paying both the janitor and the boss of the janitorial company, than to pay the janitor directly? The answer is that the janitorial company pays very low wages. Often they hire undocumented workers, who can’t complain to authorities without risking deportation. This is another reason the technology companies like to outsource low-paying jobs: It’s illegal to hire undocumented workers, but if you pay a janitorial company instead, you’re not hiring workers directly and it’s not your obligation to check on their eligibility for employment.\n\nSometimes individuals, not just companies, outsource parts of their lives. Search for articles to read about personal outsourcing companies and people who use them. For example: Average Joes, Janes Outsourcing Tasks (CBS News). You can also learn about Amazon’s Mechanical Turk, a forum that pays humans to do tasks that computers cannot do. They call them ‘’Human Intelligence Tasks’’ (HITs); people who perform these tasks successfully are generally paid very low amounts."
  },
  {
    "objectID": "unit-3/optional-projects/1-astrid.html",
    "href": "unit-3/optional-projects/1-astrid.html",
    "title": "Curve Stitching",
    "section": "",
    "text": "PG: I’m glad this now has references to the extensions (and is no longer called Astrid). I like the idea of turtlifying it, though only the hint directs students away from a turtle solution. Using the method of locating the points by algorithm, storing them, then using that list of coordinates will be simpler than pure turtle, possibly even for the cardioid and other such envelopes inside a circle). I’d be inclined to have it start with just the animated image, and another one, a bit slower, animating the cardioid development in a circle (one end moves a step at a time, the other end two steps for cardioid), letting kids figure out what generating rule is involved. It’s just personal taste, but I find “With your partner discuss” to be such a lame schoolish Micky Mouse instruction—no real setting tells us to discuss with our partner. And what business, in an optional project do we have saying “develop an algorithm and then use abstraction”? What sense does it make for us to say how to do what students don’t have to do at all? With the slowly developing image (the current animation is just fine) students should have enough information to invent, if they like.\nBH: See the red boxes.\nMF: Needs rewrites\n\n\nWhy do this? To give the students a chance to apply their skills of developing algorithms and using abstractions in the context of a visual arts project. To motivate students with interest in arts and to give them an opportunity to synthesize their artistic skills with their knowledge of algorithms and coding. Why here? At this point in the curriculum the students know enough to be able to complete a computational visual art project with minimal hand-holding.\n\n\nIn this project, you will create a mathematical art design and explore its variations. (Click the picture to see an animation.) \n\nThis design uses straight lines to make shapes that look curved and is sometimes sewn with thread or drawn on paper. Here are some examples of and variations on this design made with string, computers, pencils on paper, and even pencils glued together:\n\n\nMaking Patterns: Pushing the Envelope\n\n\nCreate Parabolic Curves Using Straight Lines\n\n\n\n\n\n\nWith your partner discuss how to make this design. Develop an algorithm that will generate the first quadrant of the design and then use abstraction to extend the design to the other quadrants.\n\n\nWrite a Snap! program to generate the design.\n\nMary and Brian want to rewrite this page so that it’s not using fixed coordinates but is “turtly.” –MF, 9/7/18\n\n\nClick for a hint about setting up the design.\n\nBelow is a partial table of coordinates for the first quadrant of the design, showing which points on the y-axis are joined to which points on the x-axis. \n31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATgBBAEEAeABBAEQAawBBAE8AQQBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEcASQBBAGIAdwBCAHkAQQBHAFEAQQBaAFEAQgB5AEEARwBVAEEAWgBBAEEAaQBBAEMAQQBBAGMAdwBCADAAQQBIAGsAQQBiAEEAQgBsAEEARAAwAEEASQBnAEIAdABBAEcARQBBAGMAZwBCAG4AQQBHAGsAQQBiAGcAQQB0AEEARwB3AEEAWgBRAEIAbQBBAEgAUQBBAE8AZwBBAGcAQQBEAEUAQQBNAEEAQQBsAEEARABzAEEASQBnAEEAZwBBAEgATQBBAGQAUQBCAHQAQQBHADAAQQBZAFEAQgB5AEEASABrAEEAUABRAEEAaQBBAEgATQBBAGQAUQBCAG4AQQBHAGMAQQBaAFEAQgB6AEEASABRAEEAWgBRAEIAawBBAEMAQQBBAGMAQQBCAHYAQQBHAGsAQQBiAGcAQgAwAEEASABNAEEASQBBAEIAbQBBAEcAOABBAGMAZwBBAGcAQQBHAFEAQQBaAFEAQgB6AEEARwBrAEEAWgB3AEIAdQBBAEMASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGEAQQBBAGcAQQBIAE0AQQBZAHcAQgB2AEEASABBAEEAWgBRAEEAOQBBAEMASQBBAFkAdwBCAHYAQQBHAHcAQQBJAGcAQQBnAEEASABNAEEAZABBAEIANQBBAEcAdwBBAFoAUQBBADkAQQBDAEkAQQBkAHcAQgBvAEEARwBrAEEAZABBAEIAbABBAEMAMABBAGMAdwBCAHcAQQBHAEUAQQBZAHcAQgBsAEEARABvAEEASQBBAEIAdQBBAEcAOABBAGQAdwBCAHkAQQBHAEUAQQBjAEEAQQA3AEEAQwBJAEEAUABnAEIARwBBAEgASQBBAGIAdwBCAHQAQQBDAEEAQQBLAEEAQgA1AEEAQwAwAEEAWQBRAEIANABBAEcAawBBAGMAdwBBAHAAQQBEAHcAQQBMAHcAQgAwAEEARwBnAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAG8AQQBDAEEAQQBjAHcAQgBqAEEARwA4AEEAYwBBAEIAbABBAEQAMABBAEkAZwBCAGoAQQBHADgAQQBiAEEAQQBpAEEAQwBBAEEAYwB3AEIAMABBAEgAawBBAGIAQQBCAGwAQQBEADAAQQBJAGcAQgAzAEEARwBnAEEAYQBRAEIAMABBAEcAVQBBAEwAUQBCAHoAQQBIAEEAQQBZAFEAQgBqAEEARwBVAEEATwBnAEEAZwBBAEcANABBAGIAdwBCADMAQQBIAEkAQQBZAFEAQgB3AEEARABzAEEASQBnAEEAKwBBAEYAUQBBAGIAdwBBAGcAQQBDAGcAQQBlAEEAQQB0AEEARwBFAEEAZQBBAEIAcABBAEgATQBBAEsAUQBBADgAQQBDADgAQQBkAEEAQgBvAEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQBvAEEARABBAEEATABBAEEAZwBBAEQARQBBAE4AUQBBAHcAQQBDAGsAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQBvAEEARABBAEEATABBAEEAZwBBAEQAQQBBAEsAUQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQBvAEEARABBAEEATABBAEEAZwBBAEQARQBBAE4AQQBBAHcAQQBDAGsAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQBvAEEARABFAEEATQBBAEEAcwBBAEMAQQBBAE0AQQBBAHAAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEAQwBnAEEATQBBAEEAcwBBAEMAQQBBAE0AUQBBAHoAQQBEAEEAQQBLAFEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEAQwBnAEEATQBnAEEAdwBBAEMAdwBBAEkAQQBBAHcAQQBDAGsAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEATABnAEEAdQBBAEMANABBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBAHUAQQBDADQAQQBMAGcAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAbwBBAEQAQQBBAEwAQQBBAGcAQQBEAEkAQQBNAEEAQQBwAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEASwBBAEEAeABBAEQATQBBAE0AQQBBAHMAQQBDAEEAQQBNAEEAQQBwAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEMAZwBBAE0AQQBBAHMAQQBDAEEAQQBNAFEAQQB3AEEAQwBrAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAbwBBAEQARQBBAE4AQQBBAHcAQQBDAHcAQQBJAEEAQQB3AEEAQwBrAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAEsAQQBBAHcAQQBDAHcAQQBJAEEAQQB3AEEAQwBrAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAbwBBAEQARQBBAE4AUQBBAHcAQQBDAHcAQQBJAEEAQQB3AEEAQwBrAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBZAFEAQgBpAEEARwB3AEEAWgBRAEEAKwBBAEEAPQA9AAoAcwB1AGYAZgBpAHgAOgA=:31b8e172-b470-440e-83d8-e6b185028602\nClick for a suggestion about how to start in Snap!\n\nThere are many possible approaches to this problem. One approach could use the for block: \n\n\n\n\n\n\n\n\n\nUsing the same principles, create a surrounding frame for your design. \n\nBoth the original curve and the frame are made of four quarter-pictures.\n\n\n\n\n\n\n\nAdd another copy of the design slanted at 45° as shown below. \n\nWant a mathematical hint?\n\nYou could use the Pythagorean Theorem:  \n\n\n\n\nHere are some more variations that employ color and more complex geometric arrangements. Create these and your own variations in Snap!.   \n\n\nUse what you know about creating animations in Snap! to produce an animation based on this design. To allow for dynamic movements such as rotations, you will need to devise a completely different way of creating your design than using fixed coordinates.\n\n\nWant to see an example?\n\nThis animation explores the artistic concept of “negative space” by using a grid of rotating copies of the design. How would you revise your program to generate animations like this?"
  },
  {
    "objectID": "unit-3/optional-projects/2-animation-studio.html",
    "href": "unit-3/optional-projects/2-animation-studio.html",
    "title": "Animation Studio",
    "section": "",
    "text": "PG: Page has been rearranged without being rewritten. “Watch the following video” comes after the video. In general, “the following” or “below” should be scrapped as pointlessly heavy writing wherever it appears in the curriculum. There is rarely any ambiguity about where to look (e.g., here, there is only one video to watch).\nBH: The TIFs aren’t TIFfy.\n\n\nIn this project, you will create a studio for designing and animating a character.  \n\nIn this project:\n\n\nThe user will use the click-and-drag of the mouse to draw a character.\n\n\nThe mouse locations (x and y) visited during the drawing will be stored in a list.\n\n\nThe user will move the character drawn using the up, down, right, left arrow keys.\n\n\n\n\n\nDiscuss with your partner how would you design such a project. Be sure to explore what data needs to be tracked and how lists can be employed to keep track of this data.\n\n\nTips to guide your thinking:\n\n\nHow can you store the x and y positions of the mouse as the drawing is created?\n\n\nWhy is remembering the order of these locations important?\n\n\nUse the arrow keys to move the entire picture.\n\n\nHow should the location information stored in the lists be updated to accomplish these movements?\n\n\nHow should the revised drawings be created based on updated locations?\n\n\n\n\nStart coding! Many things will clear up when you actually get to work.\n\n\n\n\nYou may wish to use the warp block to make your animations render more quickly. \nIf you uncheck the point list variable at the Variables palette, your animation will run faster because your computer won’t have to display hundreds of coordinates on the stage. \n\n\nBrainstorm with your partner about some possible extensions to the project. Here are some ideas:\n\n\nUse abstraction and revise your code so that all the arrow key inputs (up/down/right/left) can be addressed by a single block with inputs.\n\n\nAdd background image(s), sound/music to your character animation.\n\n\nGive the user options (such as color, pen thickness, etc.) in the drawing phase.\n\n\nCreate a series of animations on your Animation Studio program. Capture, combine and edit them with a software like Screencast-O-Matic and then upload your work to YouTube and share with your classmates."
  },
  {
    "objectID": "unit-3/optional-projects/3-op-art.html",
    "href": "unit-3/optional-projects/3-op-art.html",
    "title": "Op Art",
    "section": "",
    "text": "BH: Only the last TIF is TIFfy, and I really think it should be a regular FYTD. Coloring the picture by hand is weird.\nMF: BH has reviewing to do (see TG)\n\n\nIn this project, you will create tools to explore op art—a form of visual art using optical illusions.\n\n\nInitially, the mouse is used to draw rectangles. Then when the user presses the space bar, the drawing phase ends and the mouse click becomes a paint bucket that fills bounded regions with paint. Here are two examples of phase 1 (drawing rectangles) and phase 2 (filling regions):\n\nExample 1:  \n\nExample 2:  \n\n\n\n\n“U3-OpArt”\n\n\n\nIn the drawing phase (phase 1), you will be drawing many rectangles by clicking and dragging from corner to opposite corner, so it will be helpful to have an abstract data type (ADT) to manage the corner points.\n\n\n\nCreate a constructor corner that will report a list of x and y coordinates of one corner. \n\n\nCreate two selectors x of corner and y of corner that will report either the x or y values for an input corner.  \n\n\n\n\nCreate two global variables to temporarily store the two points of each rectangle as it is drawn:\n\n\ncurrent corner 1: to store the coordinates where the mouse is first clicked\n\n\ncurrent corner 2: to store the coordinates where the mouse is moved as the rectangle is drawn (when the mouse is released, this value will be the final position of the second corner)\n\n\n\n\nNow create a rectangle ADT for storing the two opposite corners of a single rectangle.   \n\n\n\nLike in the Animation Studio project on the previous page, the stage will have to be cleared and redrawn many times so that the user can see each new rectangle changing in size as it drawn. The program needs a way to store all of the rectangles that have already been drawn so that they can be redrawn along with the current rectangle after each stage clear.\n\n\n\nCreate a global variable rectangle list to store the all the rectangles that have been drawn.\n\n\nYour program needs a way to know whether the user is finished drawing. Create a global variable drawing done? that will store a Boolean value (either true or false) to keep track of the phase of the program (drawing or painting).\n\n\nI don’t think we need this. –MF, 9/10/18It is initially false but when the space bar is pressed—which concludes the drawing phase—it is set to true.\n\n\nThe program also needs a way to draw a rectangle given its two defining corners. Create a draw rectangle block, and test that it correctly draws a rectangle with the input corners. \n\n\nUse the seven blocks and four variables you have created to create a program that:\n\n\nrepeatedly collects rectangles until the user is finished phase 1 (drawing) by:\n\n\ncollecting the coordinates of the first corner when the user starts to draw a rectangle\n\n\nrepeatedly collecting the coordinates of the second corner and redrawing that rectangle and all previous rectangles until the user releases the mouse to finish the rectangle\n\n\nstoring the final coordinates for each rectangle so they can be drawn again\n\n\n\n\nuses a keystroke (like space) to tell the computer to switch to phase 2 (painting) and then fills the clicked areas\n\n\n\nClick for hints on creating this program.\n\n\n\n\nWhich variables need to be initialized? Why?\n\n\nHow can you detect the state of the mouse? How can you location the state of the mouse?\n\n\nYou might want to use  and  to improve the efficiency and appearance of your program. The warp block allows the drawing to happen quickly, and hide hides the sprite.\n\n\n\n\n\nI thought about keeping some version of this, but I think it is not needed given the above. –MF, 9/9/18\nIt is recommended that you first write down the algorithm detailing the sequence of events in the program and what should happen at each case before you build the actual code.\n\n\n\n\n\n\n\nCreate a version of your Op Art program that uses polygons.   \n\n\nCreate a version of your Op Art program that uses circles.   \n\n\nStudy the works of legendary Op Artists such as Victor Vasarely and Bridget Riley to get a feel for what is possible in this art form.     \n\n\nIt is possible to fully automate the painting phase by using the following algorithm:\n\n\nfor every pixel on the screen find out inside how many rectangles it is inside\n\n\ncolor each pixel black if the number is odd and white if the number is even (or vice versa)\n\n\nTo understand why this algorithm works, use paper and pencil to apply it to simple cases with few overlapping rectangles."
  },
  {
    "objectID": "unit-3/optional-projects/4-music-project.html",
    "href": "unit-3/optional-projects/4-music-project.html",
    "title": "Music Project",
    "section": "",
    "text": "This page needs KEEP SUCH THAT updated. –MF, 6/22/20\n\n\nPG: I’d very much want to have a map-onto-scale one. (I have an example somewhere.) Kids who care about music will find the switches interesting, and even kids who claim not to be able to hear the differences will.\nBH: This is fine as far as it goes, but it calls out for more, starting with a note-name-to-midi-number reporter, and then making a round.\nMF: BH has reviewing to do (see TG)\nThis page has been renumbered; need to check if this throws off the numbering in the solutions or TG. –MF, 4/26/19\n\n\nSee also:\n\n\nOld sound content collected together\n\n\nOld Looks and Sound page\n\n\nThe Map Block & Music (has invert and round)\n\n\n\n\nIn this project, you will use the Snap! play note block to create music while you review abstract data types and higher-order functions.\n\n\n\n\n\n“U3-MusicProject”\n\n\n\n\n\n\n\n\nReviewing Higher-Order Functions with Sound\n\n\n\n\nBuild and compare these play scripts. Run each script a few times.\n\n\nThe inputs values given to the play note block are musical pitches. Higher values create higher notes. You can input any integer from 0 and 127. The number 60 represents middle C.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNeed to Review?\n\n\nThese need updating!! –MF, 4/5/19\n\n\n\nYou learned about for each in Unit 2 Lab 2: Checking Each Quiz Answer.\n\n\nYou learned about keep in Unit 2 Lab 3.\n\n\nYou learned about map in Unit 3 Lab 2.\n\n\n\n\n\nCreating an Abstract Data Type to Organize Musical Data\n\n\n\n\n\nPitch is the amount of highness or lowness of a musical note; the pitch value goes in the first input slot of the play note block.\nThe length of a note is the amount of time that the note plays (the number of beats); the length value goes in the second slot of play note.\n\nCreate a note ADT to manage the pitch and length of each note in a song.\n\n\nCreate the constructor: \n\n\nCreate two selectors:  \n\n\n\n\n\n\n\nCreating Blocks to Play Music\n\n\n\n\nUse for each together with your selectors to build a  block that takes a list of notes as input and plays each pitch for the specified number length of time.  \n\n\nChart for note pitch numbers. \n\n\n\n\n\nCreate a reporter to reports the notes for a song of your choosing. Here’s an example:  \n\n\nTest your song with your play song block, and debug any problems. \n\n\n\n\n\n\n\nBPM stands for “beats per minute.”\n\n\nUse the  block to change the pace at which the notes are played. A higher number will make your song play faster; a lower number will make it play slower.\n\n\n\n\nTransposing Music\n\n\n\n\n Compare the output of these two scripts that you created above. Discuss what map + 5 does to the sounds you hear:  \n\n\nUse map together with your ADT blocks to create a reporter that transposes (shifts) a list of notes. It should take a list of notes and a number indicating how much to transpose (shift) the song as input, and it should report the adjusted song. For example: \n\nReveal a hint.\n\n\n\n\n\n\nTry playing your song using your transpose block with several different shift numbers so that you can hear the impact of map.\n\n\n\n\nDoesn’t work in Snap! but would have been a nice way to tie the page together… :/\n\nCreating a Round\n\n GitHub Issue #1807\n\n\nBoring? Maybe not for A/V kids…\n\nUsing a Frequency Cutoff\n\n\n\n\n Compare the output of these two scripts that you created above. Discuss what keep \\&lt; 65 does to the sounds you hear:  \n\n\n…"
  },
  {
    "objectID": "unit-4/index.html",
    "href": "unit-4/index.html",
    "title": "Unit 4: How the Internet Works",
    "section": "",
    "text": "In Unit 4, we learn how the internet works… we’ll have less coding in this unit, but the content that you learn will be important for multiple choice questions in this course."
  },
  {
    "objectID": "unit-4/lab-1/1-what-is-internet.html",
    "href": "unit-4/lab-1/1-what-is-internet.html",
    "title": "Page 1: What Is the Internet?",
    "section": "",
    "text": "Consider adding BTB content back:\n\nSeveral pages in this lab suggest a brief reading from the Blown to Bits appendix in the “If There Is Time” sections:\n\n\nPage 1: Addresses in a Network of Networks: IP. Blown to Bits pages 301-306.\n\n\nPage 2: Reliable Transmission on Unreliable Networks: TCP. Blown to Bits pages 306-309.\n\n\nPage 3: A Hierarchy of Open Protocols. Blown to Bits pages 309-312\n\n\nPage 4: Who’s in Charge of the Internet? Blown to Bits pages 312-316. Ideally, this assignment will be read before the class period that covers that lab page.\n\n\n\n\n\nIn this lab, you will learn how the Internet works.\nOn this page, you will learn the basics of what the Internet is, what’s most important about how it works, and what it means to store information in “the cloud.”\n\n\n\n\nThe Internet is a computer network that uses open protocols to standardize communication. A computing device connected to an Internet-connected device is required to access the Internet.\n\n\nA computer network is an interconnected computing system that is capable of sending or receiving data.\n\n\nA computing system is a group of computing devices and programs working together for a common purpose.\n\n\nA computing device is a physical object that can run a program, such as computers, tablets, cell phones, and smart sensors.\n\n\n\n\nThe World Wide Web is a system of linked pages, programs, and files that uses the Internet.\n\n\n\nPeople talk as if “the Internet” and “the World Wide Web” are the same thing, but they are not. The Internet is a network of independent but connected computing devices spread out all over the world. The World Wide Web is the collection of interlinked website documents that you can view with a web browser by typing an address like https://snap.berkeley.edu/snap/snap.html. Most web pages are written with HTML (HyperText Markup Language) and interpreted by your browser using HTTP (HyperText Transfer Protocol).\nThe Internet is more general than the World Wide Web. It also supports email, mobile apps, texting (SMS or Short Message Service), file transfers, and many other ways that computers communicate.\n\n\n\nCSN-1.D (in #1)\n\n\nWhat is the difference between the Internet and the World Wide Web?\n\n\n\n\nIOC-1.B.1\n\nThe World Wide Web has grown far beyond its original purpose, which was rapid and easy exchange of information within the scientific community. The expansion of the Web to include things like online shopping and personal blogs was an unintended consequence of the technology.\n\nCSN-1.B.1 (“open” part), CSN-1.E.1\n\n\n\nHow Does the Internet Work?\n\nThe Internet is a massive network of computers that facilitate communication around the globe. It works because it’s engineered to be fault-tolerant (capable of working even if some of the network breaks down) and uses protocols (a type of abstraction) for routing and transmitting data:\n\n\nThe Internet is fault-tolerant because it is a redundant network. There are multiple pathways among its physical connections to create redundancy. Even if one pathway is unavailable, there is still another way to transmit a message from sender to receiver (as shown right). Software in the connection points knows how to re-route data if one connection fails.\n\n\nData is transmitted via open protocols. Protocols standardize communication, so all data is sent by the same rules for sending and receiving the data. These protocols are open (available for use by anyone) to ensure that anyone can build systems that connect to the Internet.\n\n\nThe Internet isn’t just a network of computers, though. It’s a network of networks. The connection points between networks are called routers, networking devices that route traffic between subnetworks on the Internet. Making sense of the information happens at the destination computer.\n\nImage from UC San Diego Jacobs School of Engineering.\n\n\n\n\nA router is a computer that passes information from one network to another.\n\nYour computer probably uses a router that is somewhere in your home to connect to your ISP.\n\nISPs (Internet Service Providers) are the companies who sell Internet access to homes and institutions.\n\nThe computers connected to the Internet and the connections among them don’t belong to any one organization. Different ISPs provide the Internet to different communities. And typically within a large organization (such as a university), the Internet connections are provided by the organization itself.\n\n\n\n\n\n\n\n\n\nWhy does the graph of the Internet look like a tangle in the middle with fireworks on the outside?\n\n\nDiscuss how this shape is related to how people connect to the Internet (though an ISP, etc.). Write out a brief description and/or explain it to someone else.\n\n\n\nCSN-1.A\n\n  Describe how computing devices are connected in a network.\n\n\n\n\nWhat Is the Cloud?\n\n\n\n\nBandwidth is the maximum amount of data that can be sent in a fixed amount of time (for digital data, it is measured in bits per second). Higher bandwidth is better because the data will travel more quickly.\n\n\nStoring data in the cloud means storing it somewhere on the Internet, but you don’t know where. The cloud service provider (Google, Dropbox, Amazon, Snap!, etc.) manages the actual storage location.\n\n\n\nIn the early days of the Internet, bandwidth was slow, so people couldn’t send video (only text and small pictures). Back then, computers were huge and expensive, so people went to a computer center to do their computations. As the technology became smaller and more efficient, however, these centers became less important because people could do computations on personal computing devices.\nMore recently, though, certain kinds of computation (such as web searches and voice recognition) require more computational power, and these tasks are instead sent to huge “computer farms” where tens of thousands of computers work together on a problem. These computer farms, all together, are referred to as the cloud. You have been using the cloud throughout this course: all of your Snap! projects are stored in the cloud. You still use computer at your desk, but some of the programs actually run on the cloud.\n\nWhen you save your Snap! projects to your account, they aren’t stored on your local computer but on the cloud; that’s why you have to log in to access them. Similarly, if you use Google Drive or Dropbox, all of those files are stored in the cloud. And if you use a web-based email service (such as Gmail or Yahoo), your emails are stored in the cloud too.\n\n\n\n\n\n\n\nWhich of the following is not an advantage of storing data using cloud computing?\n\n\n\nPrevents loss of data due malfunction of user’s personal computer.\n\n\nThis is a main advantage of cloud computing.\n\n\n\n\nEasy to scale up from individual use to implementation by large companies.\n\n\nThis is a main advantage of cloud computing.\n\n\n\n\nHas potential to be environmentally friendly due to many users efficiently sharing large systems and resources.\n\n\nThis is a main potential advantage of cloud computing.\n\n\n\n\nImproved security and privacy over storing data on a personal computer.\n\n\nCorrect. With cloud computing, you are trusting someone else with your data."
  },
  {
    "objectID": "unit-4/lab-1/2-network-redundancy.html",
    "href": "unit-4/lab-1/2-network-redundancy.html",
    "title": "Page 2: Network Redundancy",
    "section": "",
    "text": "On this page, you will learn how the layout of the Internet is redundant (more than one path from here to there) in order to ensure reliability.\n\n\nCSN-1.B.5, CSN-1.B.7, CSN-1.E.3, CSN-1.E.4, CSN-1.E.5, CSN-1.E.6, CSN-1.E.7\n\n\n\nCSN-1.A.5, CSN-1.A.6, CSN-1.B.6, CSN-1.E.2, CSN-1.E.5\n\n\n\nA path is a sequence of directly connected computing devices that connect a sender to a receiver.\n\n\nRouting is the process of finding a path from sender to receiver.\n\n\nScalability is the ability of the Internet to keep working as it grows.\n\n\nRedundancy is the inclusion of back-up elements in case one part fails.\n\n\nFault tolerance is the ability of a system to work around problems.\n\n\n\n\n\nThomas (David) Petite (born 1956) is a member of the Fond du Lac Band of the Lake Superior Chippewa tribe. David is best known for his work on wireless enabled devices. He is one of the early inventors of the wireless ad hoc networks, a temporary decentralized type of wireless network that enables all mobile phones to work today. His inventions were also a driving force behind the development of what is now known as the “Smart Grid” which monitors and harnesses the power of wireless-enabled devices at a specific location.\nLearn More\n\nGiven the enormous number of devices on the Internet and the reality that pieces of a complex system fail at unexpected times (and often in groups of neighbors such as a whole city), the Internet had to be designed to be reliable. This is achieved by building many redundant connections into the physical systems of the Internet. That way, if part of the Internet fails, data can be re-routed via a different path. And such changes to the path can happen in transit because routing on the Internet is dynamic; it is not specified in advance. Creating such redundancy can require additional resources (such as additional computers and cables) but it also increases the Internet’s fault tolerance (ability to work around problems) and helps the Internet scale (expand) to more devices and people.\n\n\n\n Describe what’s going on in this animation.\n\nSomeone should follow-up with Dan about where these images came from. –MF, 8/29/19\n\n\n\n\n\nIn the animation, a lightening bolt strikes one of the nodes. There are many reasons a node can fail, such as power failure, chip burnout, etc. The other thing that can happen is that the nodes can all be fine, but the green lines linking the nodes, which represent connections, could fail (e.g., a cable could be cut or disconnected, either accidentally or on purpose).\n\n\n\n\n\n\n In this model of a network, what is the minimum number of nodes (connection points) that can stop working before the sender and the receiver can’t communicate? (Other than the sender or the receiver themselves, of course.)\n\n\n\n1\n\n\nThere are no nodes that are vital to the system. Pick any node to stop working, and you can still find another path.\n\n\n\n\n2\n\n\nCorrect! If the node with six connections goes down and also either of the two to its left, the sender and receiver can’t communicate.\n\n\n\n\n3\n\n\nTry to find a smaller number of nodes that can stop working and still break communication.\n\n\n\n\n4\n\n\nTry to find a smaller number of nodes that can stop working and still break communication.\n\n\n\n\n5\n\n\nTry to find a smaller number of nodes that can stop working and still break communication.\n\n\n\n\n\n\n\n\n\n\n\n In the same model network, what is the maximum number of nodes that can fail and still let Sender and Receiver communicate?\n\n\n\n10\n\n\nDraw a path from sender to receiver that still works.\n\n\n\n\n9\n\n\nDraw a path from sender to receiver that still works.\n\n\n\n\n8\n\n\nCorrect! If the four nodes on the right and also the four nodes on the left all fail, the remaining two nodes in the middle will still allow the sender and receiver to communicate.\n\n\n\n\n7\n\n\nTry to find a higher number of nodes that can stop working and still permit communication.\n\n\n\n\n6\n\n\nTry to find a higher number of nodes that can stop working and still permit communication.\n\n\n\n\n\n\n\n\n\n\n\nCSN-1.E\n\n \n\n\nDescribe the benefits of fault tolerance. What kind of problems could arise with the connection of millions of devices across the planet that make it necessary for the Internet to be fault-tolerant?\n\n\nWhat feature(s) of the Internet makes it fault-tolerant?\n\n\nIn what ways can the Internet fail?"
  },
  {
    "objectID": "unit-4/lab-1/3-open-protocols.html",
    "href": "unit-4/lab-1/3-open-protocols.html",
    "title": "Page 3: Internet Abstractions and Open Protocols",
    "section": "",
    "text": "On this page, you will learn about the communication standards used on the Internet and how they work together.\n\n\n\nCSN-1.B.3, CSN-1.C.1\n\n\n\nA protocol is set of rules that specify the behavior of a system.\n\n\nAn IP address is a unique number assigned to each device on a computer network.\n\n\nA packet is a small chunk of any kind of data (text, numbers, lists, etc.) and metadata (information about the data) that is passed through the Internet as a data stream.\n\n\nPacket switching means that the Internet sends short bursts of information, not long continuous strings.\n\n\n\n\n\n\n\nVint Cerf (born 1943) is an American Internet pioneer and is recognized as one of “the fathers of the Internet.” Vint Cerf, along with Bob Kahn, co-developed TCP/IP, a framework for organizing the set of communication protocols used in the Internet and similar computer networks. Cerf has also served on the Board of Trustees of Gallaudet University, a university for the education of the deaf and hard-of-hearing. Cerf himself is hard of hearing and wears hearing aids.\nArticle: Sound Off: Technology Has Transformed the Deaf Community\n\nThere are billions of devices connected to the Internet and hundreds of different kinds of devices: laptops, tablets, phones, smart refrigerators, handheld credit card readers, and so on. How do they all know how to find and talk to each other? Protocols (communication standards) ensure that the variety of devices interact with each other smoothly.\nEvery device on the Internet has a unique Internet Protocol (IP) address (or more than one, if it’s a router), like a postal or email address. The Internet Protocol specifies how a router handles a request for a different IP address. Each router knows the layout of its specific neighborhood of the Internet and knows which way to send each message to get it a little bit closer to where it’s going. The fact that each router doesn’t have to know the addresses of the complete Internet improves scalability.\nWhen you stream data over the Internet, the stream is divided into packets that IP sends individually. This process is what makes the Internet a packet switching network.\n\nCSN-1.C.2, CSN-1.C.3\n\nThe Internet is fairly reliable, but every once in a while a packet will be lost, and devices on the Internet need to tolerate these faults. One way to tolerate faults is not to care (if you lose one frame of video, it doesn’t matter). Another way (called TCP for Transmission Control Protocol) is to keep sending packets until they are acknowledged as having been received correctly. For applications that use TCP, it’s TCP that divides the data into packets. Since packets can travel by different paths, they may arrive out of order; and despite the redundancy of the Internet, it’s possible some won’t arrive at all. TCP guarantees reliable data transmission by keeping track of which packets have been received successfully, resending any that have been lost or damaged, and specifying the order for reassembling the data on the other end.\n\nTCP/IP is a pair of protocols that provide two levels of abstraction:\n\n\nIP (Internet Protocol) lets your computer pretend it has a direct connection to another computer. The routers at every connection point on the Internet run IP, which transmits packets from one IP address to another.\n\n\nTCP (Transmission Control Protocol) lets your computer pretend it has a reliable connection to the other computer. The computers (including servers) at the two endpoints of a communication run TCP, which guarantees that packets arrive successfully.\n\n\n\n\n\n\nCSN-1.C\n\n\n Describe how data are sent through the Internet via packets. \n\n\n\n\nInternet Abstraction Hierarchy\n\n\nCSN-1.D.2 (under “Application Layer Protocols”)\n\n\n\nCSN-1.C-4\n\n\nExample protocols for each layer:\n\nApplication layer: Browsers use HTTP (HyperText Transfer Protocol) to interpret HTML instructions for web page formatting. DNS (Domain Name System) converts user-friendly host names (like edc.org or berkeley.edu) into IP addresses. Your email application may use SMTP (Simple Mail Transfer Protocol) to send and IMAP (Internet Message Access Protocol) to read email.\nTransport layer: TCP (Transmission Control Protocol) simulates a reliable, long-term connection between two computers by only displaying data once all packets have arrived. When speed is more important than accuracy, such as for real-time video streaming, people use UDP (User Datagram Protocol).\nInternet layer: Every device on the Internet needs an IP address so other devices can find it. Routers use Internet layer protocols to detect and work around network congestion.\nNetwork interface hardware: You may connect to the Internet with an Ethernet cable or perhaps a WiFi radio antenna inside the case of your computer. Either connects computers to a local network router which then connects to an Internet service provider (ISP). Cell phones use a longer-range cellular connection to a phone carrier.\n\nThere are a lot of protocols! The Internet was designed with several layers of abstraction that sort the protocols according to what part of the process they support. This hierarchy of abstractions manages the complexity of the Internet by hiding the details of lower levels of the system:\n\n\n\nApplication Layer Protocols (such as HTTP) are the highest level of abstraction because they manage how data is interpreted and displayed to users. These protocols give meaning to the bits sent by lower-level protocols; user and server computers must agree on what the bits mean, and application protocols offer this.\n\n\nTransport Layer Protocols (such as TCP) manage the breakdown of a message into packets to be transmitted by lower level protocols and also the reconstruction of the message from the packets upon arrival.\n\n\nInternet Layer Protocols (such as IP) manage the pathways that the data packets travel across networks. These protocols provide an abstraction of the Internet as one large network even though the physical reality on the lower level is one of many subnetworks.\n\n\nNetwork Interface Hardware (using Link Layer Protocols such as WiFi) manage the connection between an Internet device and its local network. These local protocols are the least abstract because they deal directly with your physical hardware.\n\n\n\n\nCSN-1.B.4 (paragraph about “open standards”)\n\n\nThese are all open standards: anyone can look up a protocol and code with it to make new hardware or software without anyone’s permission. The Internet is probably the largest and most complicated artifact in human history, and it relies on cooperation. Despite some governments’ attempts to censor the net, the big picture is one of strong cooperative spirit.\n\n\nWhy care about open standards?\n\n\n\nYour T-Mobile cell phone can talk to your friend’s Verizon phone.\n\n\nYou can send email to someone in a country that’s considered an enemy of your country (from the US to Iran, for example).\n\n\nAn engineer at Microsoft can read a web page at Apple even though their companies are competitors.\n\n\nBefore the Internet, there were several different network protocols that were secrets belonging to particular manufacturers. So if you had a particular brand of computer or router, it could talk only to other computers of the same brand.\n\n\n\n\n\n Explain how each of these protocols is an abstraction. What details does each one hide?\n\n\nHTTP (HyperText Transfer Protocol)—the protocol that your browser uses to access an HTML web page\n\n\nTCP (Transmission Control Protocol)—the protocol that assures reliable transmission of data\n\n\nIP (Internet Protocol)—the hierarchical addressing protocol that manages routing of data between computers\n\n\n\n\nCSN-1.B\n\n\nLocate your descriptions of how people connect to the Internet (from page 1), how devices within a network are connected (from page 2), how and why the Internet is fault tolerant (from page 2), and how TCP/IP works (from page 3). Combine your descriptions into a short paper on how the Internet works.\n\n\n\n\n\n\nRead Blown to Bits pages 301-316."
  },
  {
    "objectID": "unit-4/lab-1/4-who-is-in-charge.html",
    "href": "unit-4/lab-1/4-who-is-in-charge.html",
    "title": "Page 4: Who’s In Charge of the Internet?",
    "section": "",
    "text": "BH: What happened to Snowden’s picture?\n\n\nWe agreed as a team to remove it. –MF, 3/25/19\n\n\nCould we please agree as a team to put it back?\nWait, now even the text is gone! The whole story about NSF control over the net has disappeared. This is not okay.\n\n\nIs it not in the yellowbox? If not, we must have cut or moved it last summer (or before) as it pre-dates the August 29 move in the commit history. We can talk about it, of course. –MF, 5/31/20\n\n\n\n\nOn this page, you will learn about the communities of people who control how the Internet works.\n\nSome people think that nobody’s in charge of the Internet—that everyone just cooperates freely with no central organization. It’s true that free cooperation plays an important role, but people can’t just pick any IP address or host name they want, or else there would be conflicts. For example, we can’t start a server named bjc.org, because that name is already in use (by a health care provider in St. Louis, Missouri). Until 2009, the Internet domain name hierarchy was entirely controlled by the United States government, with the details delegated to ICANN (the Internet Corporation for Assigned Names and Numbers).\n\nIn 2009 the US Department of Commerce signed a new agreement with ICANN recognizing it as an independent, multinational organization, although it is still under contract with the Department of Commerce to maintain certain principles. International critics are still not satisfied that ICANN is truly independent of the United States.\n\n\nThe Power of Open Protocols\n\nThe growth of the Internet has been fueled by open protocols, standards that are not owned by a company.\n\nExamples of open protocols:\n\n\nStandards for sharing information and communicating between browsers and servers on the Web include HTTP, Simple Mail Transfer Protocol (SMTP) and secure sockets layer/transport layer security (SSL/TLS)\n\n\nStandards for packets and routing include transmission control protocol/Internet protocol (TCP/IP).\n\n\n\nThe protocols for the Internet change over time. The Internet Engineering Task Force (IETF) are the experts in charge of developing and approving these protocols. ICANN controls the DNS hierarchy and the allocation of IP addresses.\n\nLearn more about these organizations.\n\nThe work of the IETF is done largely by email, and anyone with the necessary expertise can join the mailing lists. Decisions are made by consensus (everyone has to agree to a change), never by voting. The idea is that if a proposal is controversial enough to need a vote, then it should be improved until everyone’s objections are satisfied. Unlike ICANN, the IETF has been remarkably free from political pressure, even though it, too, has historically been dominated by experts from the United States.\nThe Internet Society (ISOC) is a worldwide nonprofit membership society that anyone can join, for free. It is now officially in charge of the IETF and also conducts education and promotes government policies supporting an open Internet.\n\n\n\nThe Issue of US Control\n\n\nIf you think it’s strange for one country to control a worldwide network, you’re not alone. Other countries have never been happy about the US control of the Internet, which was officially under US control until 2009 and is still, according to many critics, unofficially dominated by the US government.\n\nFor example until 2009, all DNS domain names had to use the English alphabet, despite constant requests to accommodate other languages.\n\nThe issue of US control has become much more heated since 2013 when Edward Snowden (shown right, source: Wikipedia) exposed the US National Security Agency (NSA) for spying on Internet traffic worldwide. It’s too soon to know how these concerns will eventually be resolved.\n\nHow Did the US End Up In Charge?\n\nIn 1968, the Advanced Research Projects Agency (ARPA) of the US Department of Defense announced that they were developing a large-scale packet-switched network. In 1969, the first connections were made among four university research groups. At its peak, the ARPANET reached a few hundred computers. (All those computers were owned either by military installations or by computer science research labs, mostly at universities.)\nThe ARPANET was tiny, but it inspired the protocols that became foundation of the Internet. And it belonged to the US military.\nOnce IP was invented in 1982, the ARPANET became just one network among many, and it was decommissioned in 1990. And in 1981, the National Science Foundation (NSF, a civilian agency of the US government that also funded the development of this curriculum) had built the core of a new cross-country network. At that time, businesses still weren’t allowed on the network, but there was a clear demand. So, commercial IP-based networks were created.\nHow did we move from research to commerce?\n\nDuring all this time, the assignment of IP addresses and host names was controlled first by the ARPA and later by NSF. But when the commercial use of the Internet became larger than the research use, that control was passed to the US Department of Commerce, which set up ICANN to control the domain namespace and allocation of IP addresses.\nIn 2009, the Department of Commerce signed an agreement making ICANN independent, although it still has a contract with the US that gives the Department of Commerce a role in reviewing ICANN’s operation.\n\n\n\n\n\n\nRead Blown to Bits pages 312-316."
  },
  {
    "objectID": "unit-4/lab-2/1-cryptography.html",
    "href": "unit-4/lab-2/1-cryptography.html",
    "title": "Page 1: Cryptography",
    "section": "",
    "text": "BH: It would be nice to look at some serious ciphers, e.g., Playfair.\n\n\nIn this lab, you will learn about security risks on the Internet and how data can be encoded to protect it.\nOn this page, you will experiment with different ways of encoding and decoding a message and learn a simple method of symmetric encryption.\n\n\n\n\nWrite a secret message to send to a partner. Invent some way of encoding the message. Then give the encoded message to your partner.\n\n\nYour partner will give you an encoded message. When you get it, try to decode it. What strategies are you using to decode it?\n\n\nWith another pair of students, compare the methods you used to encode your messages. Was anyone able to decode their message? How?\n\n\n\n\n: Encryption and Decryption\n\nIOC-2.B.5\n\n\n\nEncryption is the process of encoding data to prevent unauthorized access.\n\n\nDecryption is the process of decoding the data.\n\n\n\nYou might have used a substitution cipher to encode your message, substituting each letter of the alphabet with some other letter. You could substitute letters in any order, like this:\n\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nPQVFUBZOTHWYELIXRNAMGDSCKJ\n\nThat’s called a simple substitution cipher.\nAn easier way is to just shift the letters in order. For example, this is a shift of 3:\n\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nDEFGHIJKLMNOPQRSTUVWXYZABC\n\nThat’s a special kind of simple substitution cipher called a Caesar Cipher (named for Julius Caesar) or a shift cipher.\n\n: Symmetric Encryption\n\nIOC-2.B.5\n\nSubstitution ciphers are examples of symmetric encryption because they use the same key for both encryption and decryption.\n\n\nThere are more complicated methods of symmetric encryption, but they always use the same key at both ends. How has symmetric encryption been used?\n\nUp through the 1970s, symmetric encryption was all people had, but they used much more complicated algorithms than substitution ciphers. These days, simple substitution ciphers are used as puzzles in magazines, but breaking the German Enigma cipher in World War II, which you’ll learn about in Unit 5, took a building full of mathematicians and computing equipment.\n\n\n\n\n\nThe person who receives your message has to know how to decode it. Describe an algorithm for decoding a message that was created with a Caesar (shift) cipher.\n\n\n\n\n\n\nIf you intercepted a message that was created with a simple substitution cipher, how might you decode it without knowing the key?\n\n\nWhat are some ways the sender and receiver could make the encryption more secure than a simple substitution cipher?\n\n\n\n\n\n\nA simple substitution cipher is relatively easy to break because some letters are used more frequently than others.\n\n\nRead about Al-Kindi, the Arabic philosopher and mathematician who first described the frequency analysis method of code-breaking, in “Breaking Substitution Ciphers” (Blown to Bits pages 166-169).\n\n\nThis method is still useful today, even with better cryptography tools: How a 1200-year-old Hacking Technique Can Already Crack Tomorrow’s Encrypted Vaults (Forbes, 9/3/15)\n\n\n\n\nRead “Secret Keys and One-Time Pads” (Blown to Bits pages 169-173) to learn about Vigenère ciphers and methods used during World War 2 and the Cold War."
  },
  {
    "objectID": "unit-4/lab-2/2-caesar-cipher.html",
    "href": "unit-4/lab-2/2-caesar-cipher.html",
    "title": "Page 2: Caesar Cipher Project",
    "section": "",
    "text": "Brian, I added “initials part deux” as an ITIT on this page. See below. Is it too much for an ITIT? Should it be a TIF? I can’t decide. If you like it, please add it to the solutions file and only then cut this comment. If you don’t, please revise it or cut it. –MF, 7/4/20\n\n\nOn this page, you will program a shift cipher procedure to encrypt/decrypt text.\n\nComputers store keyboard characters (capital and small letters, punctuation marks, space, digits, symbols, and so on) as numbers called Unicode. This table shows the Unicode for some of the keyboard characters: \nThe unicode of block reports the number that is used for a particular character:  The unicode as letter block reports the character that a given Unicode number represents: \n::: {#second .forYouToDo}\n\n\nExperiment with the unicode of and unicode as letter blocks. Try changing a word into Unicode, telling the Unicode to a friend, and then having them change it back into a word.\n\n\nOn paper, use a shift cipher to encrypt and decrypt a short message to get a feel for how this cipher works.\n\n\nWrite a Caesar cipher procedure that works for any input text and any shift value.\n\n::: endnote Why do we see characters like = ? @ # ^ * {  or ~ ?\n::: {#hint-characters .collapse} You can safely assume that shifting any set of text characters a reasonable distance will result in a set of printable characters, which may include non-alphanumeric (not letter or digit) characters.\nFor example, if we use a shift of 4 to encrypt:\n\nInvasion of Normandy is on 6 June 1944\nit becomes:\n\nMrzewmsr\\(sj\\)Rsvqerh}\\(mw\\)sr\\(:\\)Nyri$5=88\n\n\nWhich character in ciphertext (the coded version) represents a space in the plaintext?\n\n\nIn this code, 1 becomes 5 and 4 becomes 8, clearly showing the shift of 4. What does 9 become?\n\n\n:::\nWhat if your decrypted text is missing some letters?\n\nIf you copy your encrypted message with a method other than by using copy and paste (for example, by writing it by hand or typing it into a phone), some characters may disappear from your message. This is because some of the Unicode characters after 126 are printing characters that symbolize things like “delete.” These characters won’t get displayed in Snap!, so you can’t copy them by hand, but if you use copy and paste, Snap! knows they are there. In Take It Further exercise A, you can develop a method of encryption that avoids this problem.\n\n:::\n\nNow test your work. Agree with your partner on a shift value for the encryption. Then use your program to encrypt a secret message and e-mail it to your partner. Then let your partner decrypt your message by using the program to reverse the shift.\n\n\nYou can extract the encrypted messages from the Snap! interface by right-clicking on the variable that holds the encrypted message and selecting the “Export” option which will download a text file to your computer which then you can copy/paste. \n\n\n:::\n\n\n\nImprove your initials block from your U3L2-ContactList project so that it will find the initials for a person with a hyphenated name like Alexandria Ocasio-Cortez. \n\nClick for some hints.\n\nThere are several ways you could solve this problem. Both of the following ways require higher order functions. (You can review the higher order functions map, keep, and combine on Unit 3 Lab 2 Page 5: Transforming Every List Item.)\n\n\nOne way is to use the unicode block to select all the capital letters rather than splitting by word breaks.\n\n\n\nIf you want to use Unicode, you’ll probably want to build or import a block like is between? from your U2L4-MathLibrary project to check which Unicode values are capital letters. (You learned about exporting and importing blocks on Unit 2 Lab 4 Page 2: Making a Mathematical Library.)\n\n\n\n\nAnother way is to use the split block to check for hyphens as well as to check for spaces between words.\n\n\nIf you want to use split, note that the second input to split can be the character you want to use as the word separator. (You learned about split on Unit 3 Lab 2 Page 5: Transforming Every List Item.)\n\n\n\n\n\n\n\n\n\n\n\n\nImplement a version of the Caesar Cipher that not only shifts the characters but also wraps them around the alphabet when the end of the alphabet is reached. You may wish to restrict your alphabet to the set of printable characters shown above in the Unicode table.\n\n\nDo some research on other types of ciphers used historically. Especially read about the Vigenere Cipher which was used extensively in communicating sensitive information during World War 2.\n\n\nCreate your own encryption/decryption scheme and implement it in Snap!."
  },
  {
    "objectID": "unit-4/lab-2/3-asymmetric_cryptography.html",
    "href": "unit-4/lab-2/3-asymmetric_cryptography.html",
    "title": "Page 3: Public Key Encryption",
    "section": "",
    "text": "On this page, you will learn about a commonly used method of cryptography that is more secure.\n\nThe fundamental problem that cryptography is trying to solve is how to get a message to your friend that can’t be intercepted by your enemies. Symmetric encryption has a fundamental weakness: the encryption key is itself a message that needs to be send to your friend but not intercepted by your enemy.\nPublic key cryptography is a mathematical technique to avoid the need to communicate a secret key from one person to another. Instead, each person has two keys: a private key known only to that person and a public key that everyone in the world is allowed to know. If Bob wants to send Alice a secret message, he encrypts it with Alice’s public key. Then no one but Alice can decrypt it. Only her private key can undo the encryption, and no one can figure out the private key from the public key.\n\n\nIOC-2.B.5\n\nPublic key encryption uses a pair of keys: a public key for encryption and a private key for decryption. The sender uses the public key to encrypt the message, and receiver uses their private key to decrypt it.\n\n\nHere is a visual model of public key encryption (from wikimedia.org).\n\n\n\nHere is a video that uses paint mixing as a metaphor for public key encryption.\n\n \nIf your connection blocks YouTube, watch the video here, but start it at 2:25.\n\n\n\nSymmetric cryptography uses the same secret key to encode and to decode a message, and it’s been around for thousands of years. Its weakness is that the key becomes another message that needs to be transmitted securely.\n\nWho created public key encryption?\n\nThe public key idea was first published by Whitfield Diffie and Martin Hellman in 1976. But it turns out that it had been invented earlier but kept secret by governments.\n\n\nPublic key (asymmetric) cryptography was created in the 1970s. It uses two different keys for encryption and decryption, so sharing the public key doesn’t give away the private key. Public key encryption is the primary method of encryption today because of its high level of security.\n\n\n\n\n\nYou learned about symmetric encryption on Page 1: Cryptography.\n\n Describe how public key encryption offers better message transmission security than symmetric encryption. Would you trust this method to work to send a credit card number?\n\n\n\n\nThis endnote references composition of functions, but I think it’s the first time in the curriculum that this idea has appeared. –MF, 6/15/20\n\n\nIt’s also possible to use the private key for encryption and the public key for decryption…\n\nThat’s no good for secret messages (why not?), but it’s useful for digital signatures. I use my private key to encrypt a message; you use my public key to decrypt it. If you get a meaningful message as the result, that proves that the message was encrypted with my private key. (If I want both secrecy and digital signing, I encrypt the message with my private key to sign it, then encrypt the encrypted result again with your public key to keep it secret. You decrypt it twice, first with your private key and then with my public key.) This is a nice example of composition of functions: the output from the first encryption is the input to the second encryption.\n\n\n\nThis comic was written by Randall Munroe (source: xkcd). \n\n\nSecure HTTP\n\n\nSSL/TLS (secure sockets layer/transport layer security) is the standard used for cryptographically secured information transfer on the Internet.\n\nSecure HTTP connections (those that use https:// instead of http://) use a protocol called Transport Layer Security (TLS) or maybe an older version called Secure Sockets Layer (SSL). Both are based on public key cryptography. With SSL/TLS, the site you are visiting sends its public key, and your browser uses it to encrypt the information you send.\n\n\nOpen standards help security…\n\nIn order to work properly, a cryptographic function has to be easy for the private key holder to invert, but hard for anyone else to invert. How do we know what “hard” means? For example, current cryptographic methods rely on the difficulty of finding prime factors of very large numbers. There’s no proof that someone won’t come up with a fast way to do that, but people are pretty confident about it because the problem has been well studied by many mathematicians. (On the other hand, when quantum computers become practical, factorization will be easy, and new cryptographic methods will be needed. New research developments in 2019 make practical quantum cryptanalysis seem not so far away.)\nWhat makes it possible for mathematicians to study the difficulty of breaking Internet cryptography is that the method used—the cryptographic function—is openly published. This may seem strange; if you want to keep secrets, shouldn’t you keep the technique secret, too? But secret algorithms can have weaknesses that go undiscovered until some bad guy exploits them. Open standards allow an algorithm to be studied before it is used in practice.\n\n\n\nCertificate Authorities\n\n\n\nIOC-2.B.6\n\nCertificate authorities are organizations that issue digital certificates to verify who owns the encryption keys used for secured communications.\nInstead of trusting that the website is who they say they are, you now have to trust that the Certificate Authority is reliable.\n\nPublic key cryptography doesn’t solve all the problems, because an eavesdropper (say, Eve) might publish a fake public key pretending to be Alice. Then Bob might accidentally encrypt his message to Alice using Eve’s fake key, and then only Eve can read the message meant for Alice. In practice, this is partly fixed by relying on trusted third parties, called Certificate Authorities, to certify public keys. In your browser’s security options you can see all of the Certificate Authorities that it trusts.\n\nBut this just pushes the problem back a layer. How does the Certificate Authorities know that you are who you say you are? The problem is a little bit like how your bank knows that you who you say you are when you call them on the phone. Namely, they ask you questions for which they hope only you know the answer.\n\n\n\n\nIt may seem incredible that a sender (e.g., Alice) can make her encryption key public and yet no one except her can decrypt her message. The public key method relies both on mathematics and on current limitations on the speed of computers. Read “Secrecy Changes Forever” (Blown to Bits pages 178-181) to understand some of how this works.\n\n\nRead “The Key Agreement Protocol” and “Public Keys for Private Messages” (Blown to Bits pages 181-183) for more details on Public Key Encryption.\n\n\n\n\n\n\nDo some research about modern encryption systems such as the RSA cryptosystem, which is used to do secure transactions on the Internet."
  },
  {
    "objectID": "unit-4/lab-2/4-who-cares-about-encryption.html",
    "href": "unit-4/lab-2/4-who-cares-about-encryption.html",
    "title": "Page 4: Who Cares About Encryption?",
    "section": "",
    "text": "BH: … although we’re going to want to update the list of articles periodically.\n\n\nOn this page, you will consider some of the impacts of encryption on society.\n\n\n\n\n\n\nImage from Wikimedia user EneasMx\n\n\nLuis von Ahn (born in 1978), one of the pioneers of crowdsourcing, is a Guatemalan computer scientist and entrepreneur. If you’ve ever had to click a box or identify images to confirm you are not a robot, you’ve used technology based on the work of Ahn’s digital security company reCAPTCHA. reCAPTCHA protects websites from fraud and abuse with minimal disruption to user experience. After selling reCAPTCHA to Google in 2009, he co-founded the popular language learning platform Duolingo, which as of 2020 had over 500 million learners across 39 languages.\nArticle: ‘I Just Want to Have an Impact’\n\n\n\nRead “Encryption in the Hands of Terrorists, and Everyone Else” and “Why Not Regulate Encryption?” (Blown to Bits pages 161-165).\n\n\nRead “Cryptography Unsettled” (Blown to Bits pages 191- top of 193).\n\n\nDo the following debate activity on the issue of the availability of encryption software. You will be representing either the government, a civil liberties group, or the business community.\n\n\nDiscuss the position each of these groups will take on the issue. What will the government claim is the right thing to do regarding encryption software? What would civil liberties advocates say should be done? The business community? Each group should have a clear position statement that everyone in the class knows.\n\n\nSplit into three groups - government, civil liberty groups, and businesses. In each group, write the two most convincing reasons or pieces of evidence that support your position. Then write one reason against the position of each of the other two groups. For example, the government group would write:\n\n\nGovernment’s position: ______________\n\n\nReasons for supporting our position:\n\n\n______________\n\n\n______________\n\n\n\n\nWe are against the civil liberty group’s position because ______________\n\n\nWe are against the business’ position because ______________\n\n\n(But don’t think that the three positions have to be opposed to each other. They might agree about most things with only minor disagreements.)\n\n\n\n\nIOC-2.B\n\n\nExplain two or three ways that cryptography improves Internet security.\n\n\n\n\n\n\nWhich group’s reasons were you most convinced by today (even if you don’t actually agree with their position)? Why were they so convincing? What made it hard to argue against their position?\n\n\nThe debate continues:\n\n\nFBI: Weaker Encryption is a Worthwhile Tradeoff for Law Enforcement Access to Data (on nextgov.com, 9/15/15)\n\n\nMost Americans Support Government Backdoors, Even Though They Know The Risks (on forbes.com, 9/11/15)\n\n\nWhy the Fear Over Ubiquitous Data Encryption is Overblown (on WashingtonPost.com, 7/28/15)\n\n\nObama Administration Explored Ways to Bypass Smartphone Encryption (on WashingtonPost.com, 9/24/15)\n\n\nEight Epic Failures of Regulating Cryptography (EFF, 2010)"
  },
  {
    "objectID": "unit-4/lab-2/5-security-risks.html",
    "href": "unit-4/lab-2/5-security-risks.html",
    "title": "Page 5: Security Risks",
    "section": "",
    "text": "SO MUCH TEXT. Paul, can you suggest any cuts? –MF, 8/5/19\n\n\nOn this page, you will learn about threats to online security.\n\nOriginally, network security was a relatively minor consideration because the Arpanet was a small computer network of military personnel and university users. The real need for security arose once businesses were allowed on the Internet in 1995. These days, people give their credit card numbers to online shopping sites, do much of their banking online, and send their social security numbers to tax firms and credit bureaus. And computers controlling critical social infrastructure (such as power plants, telephone switching systems, traffic lights, and hospital equipment) can be attacked by criminals and other countries’ militaries.\n\nCommon Security Issues for Users\n\n\ndesign flaws: IOC-2.B.10, anti-virus and anti-malware: IOC-2.C.7, phishing: IOC-2.C.1\n\n\n\nmalware: IOC-2.B.9, keylogging: IOC-2.C.2, virus: IOC-2.B.8, antivirus or anti-malware software: IOC-2.B.7, phishing: IOC-2.C.1\n\n\n\nMalware is software that was designed to harm or take partial control over your computer.\n\n\nKeylogging software is a kind of malware that records every key pressed by a user.\n\n\nA computer virus is a type of malware that spreads and infects other computers. Viruses can attach themselves to legitimate programs.\n\n\nAntivirus or anti-malware software is software designed to scan your files and Internet transmissions looking for malware.\n\n\nA firewall is a security system that controls the kinds of connections that can be made between a computer or network and the outside world.\n\n\nPhishing is a common security attack in which the victim is tricked into giving up personal information or downloading malware.\n\n\n\nSoftware has bugs (even published software written by professionals). And people can use those bugs for bad purposes (such as crashing your computer or implanting keylogging software to collect everything you type, including passwords and other confidential information). Software developers try to prevent security bugs and fix them when they turn up, but not every software developer distributes fixes promptly. (And not every computer user keeps up with software updates perfectly!)\nThe general name for programs that try to affect your computer badly is malware. You computer can end up with malware if you or someone using your computer downloads untrustworthy software (such as from freeware or shareware sites; not everything on those sites is bad, but if you aren’t careful, you might install something that is).\nOne kind of malware is called a virus. Computer viruses make copies of themselves (just as biological viruses do) and try to spread themselves over the network to other computers. People use antivirus software to help prevent these attacks. People also use firewalls to limit connections into or out of their computer. (Both your computer and your router probably run firewall software.)\nAnother common attack strategy is called phishing: an attacker sends you an email that appears to be from some official organization (such as your bank) and tricks you into giving information to the attackers (such as your bank password). The attacker can then use your personal information to gain access to sensitive online resources, such as your bank accounts or emails.\n\n\n\nIOC-2.C\n\n\nDescribe three ways someone could gain unauthorized access to your computer or data.\n\n\nIOC-2.B\n\n\nDescribe an example of a computer security issue that you or someone you know know has experienced or could experience.\n\n\n\n\nCommon Security Issues with Public Systems\n\nA Denial of Service (DoS) attack consists of sending a lot of requests to a server at the same time (for instance, requests for a web page or some data). This can overload the server’s network bandwidth. A DoS attack doesn’t destroy data or collect passwords; it just causes a temporary inability to reach the targeted server so other users of that server are denied service.\n\nA DDoS (Distributed Denial of Service) attack uses a virus to flood a server with many requests from many computers at once so that users of that server are denied service.\n\nA variant is the Distributed Denial of Service (DDoS) attack, in which the attacker first uses viruses and other malware to take control of many (sometimes hundreds of thousands of) computers around the world. This network of infected computers is called a botnet. The attacker then launches a DoS attack from all of the victims’ computers at the same time. Besides increasing the number of simultaneous server requests, DDoS makes it harder to determine who is at fault, since the attack seems to come from many innocent people.\n\nrogue access point: IOC-2.C.3, IOC-2.C.4\n\nUnless your data is encrypted, it can be read or modified as it’s being sent over public networks. One way that this can happen is through a rogue access point.\n\n:\nA rogue access point is a wireless access point that gives access to a secure network without the authorization of the network administrator.\n\nA rogue access point may be installed by someone trying to improve access to the network or by an attacker. But either way, the lack of proper security can allow data being sent over that WiFi network to be intercepted. For example, if your computer has password access to a WiFi network, and you enable Bluetooth network sharing, you are allowing anyone in Bluetooth range of your computer access to the secure network.\n\nIs Too Much Security Possible?\n\nToo much security has its own set of problems. A perfectly secure Internet would prevent anonymous publishing, restricting freedom of speech. To prevent fraud, it’s important to be able to verify the source of a message, but if the source of a message can be verified, the message can’t be anonymous. That’s problematic both for privacy and for freedom of speech.\n\n\n\nThis question is similar to those you will see on the AP CSP exam.  \n\n\nWhich of the following are existing vulnerabilities of the Internet, according to experts?\n\n\n\nA physical attack that involves cutting fiber-optic cables.\n\n\nYes, but there may be more!\n\n\n\n\nAttacking electrical systems that control the energy grid.\n\n\nYes, but there may be more!\n\n\n\n\nEroding the trust and confidence that the general public has in their online privacy and secure online transactions.\n\n\nYes, but there may be more!"
  },
  {
    "objectID": "unit-4/lab-2/6-cybersecurity.html",
    "href": "unit-4/lab-2/6-cybersecurity.html",
    "title": "Page 6: What Can You Do?",
    "section": "",
    "text": "On this page, you will learn ways to protect your data and your computer.\n\nIt should not be the responsibility of the individual to ensure their safety online just as it’s not their responsibility to do a safety inspection of every subway car before boarding. Without proper regulation, there are no perfect solutions that you as an individual can use to be sure you will never be victimized. However, there are things you can do that will help:\n\n\n\nIOC-2.B.2\n\nA strong password is one that is hard to guess.\n\n\n\n\n\nImage provided for publication with permission from Nicola Whiting\n\n\nNicola Whiting MBE, is an award winning jewelry designer and author, turned cybersecurity expert. She is co-owner of Titania group, which she helped lead from a 3 person start up, to a world-wide leader in cybersecurity, specializing in tools that detect network security and compliance issues. Whiting serves on multiple boards focused on increasing diversity in Cyber Security with the aim of reducing group-think and accelerating innovation & organizational resilience. e.g. She is a key spokesperson for NeuroCyber, an organization whose mission is ensuring neurodivergent people (those who process information differently due to brain differences such as Autism, ADHD, Dyslexia etc) can thrive - through building “inclusion by design” into workplace culture, policy and practice.\nArticle by Nicola Whiting: All the Voices at the Table: the Benefits of Diversity\n\n\nRun up-to-date software. The Windows 98 operating system was not sold after 2000, and not supported after 2006. But there are still computers running this obsolete system, including many in the US Department of Defense.[source] Usually, when people keep using obsolete systems, it’s because they rely on application software that runs only in the old system.\n\n\nUse authentication to protect devices and information from unauthorized access. For example:\n\n\nUse strong passwords. You need a separate password for every site you use. The only good solution is to use a password manager, a program that makes up a random password for every site. You just remember one password, the one for the password manager itself. It takes care of your other ones for you.\n\n\nEnable multifactor authentication (such as two-factor authentication) so you can only access your device or account after entering specific information (typically one is a password and the other requires another of your devices or accounts or the other uses something that detects your body like a fingerprint reader). It may feel like a hassle, but each step added to the login progress adds another layer of security.\n\n\n\n\nDon’t click links on websites or especially in email, without first double-checking that the actual URL in the link is what you expect. (Where does this link to http://google.com really send you?) If a computer or account of someone you know has been compromised, you may receive emails appearing to come from them that contain malicious links that could compromise your system or account. As you know, it’s important to keep your software up-to-date, but a common trick is a pop up window asking you to download an update. Don’t click those unless you’re sure it really is a legitimate update. It’s best to go to the “updates” section of the app or operating system for updates.\n\n\nDon’t use sketchy software. If the advertising says that the program will get you money, free stuff, pornography, or cheats for video games, it’s very likely to be malware. A particularly sneaky category is fake antivirus software! Check the reviews in magazines (and double-check the link you plan to download from) in order to make sure you’re getting what you really want.\n\n\nRegularly review your security settings for the websites, apps, and programs you use. You can control the permissions for collecting and sharing your information.\n\n\nInstall Antivirus and anti-malware software. There are free versions of several popular packages available. Read reviews to find software that will match your needs and budget.\n\n\nDon’t connect to insecure WiFi. Ideally, WiFi networks should use WPA2 or WPA3 (WiFi Protected Access) security, but WPA is better than no security at all.\n\n\n\n\n\nIOC-2.B\n\n\n  What security risks are there for your devices and how can you protect against them?"
  },
  {
    "objectID": "unit-4/lab-3/1-ways-we-communicate.html",
    "href": "unit-4/lab-3/1-ways-we-communicate.html",
    "title": "Page 1: Communication and Community",
    "section": "",
    "text": "pink box new. –MF, 12/21/17\nBH: I’m inclined to flush the TIF (make a video) or at least move it to after the next FYTD.\nMF: could use review/light revision; tough to have 2.17 SI labs back to back\n\n\nIn this lab, you will consider the impacts of technology on how we build community.\nOn this page, you will consider how technology is used to communicate and how it can impact community.\n\n\n\n\nGH Feedback 9/14/15: Could we have an example of a completed citation? http://teachingprivacy.org/ as used in this reference?\n\n\nGH Feedback 9/14/15: Breaking up the two greens (For You To Do loses continuity? The task seems mixed up with the Check it out and the Take it Further in the middle. The Take It further references the items in the For You To Do and it a weak link when implementing?\n\n\n\n\n\n\nWhat are some different ways we use technology to communicate? Generate a list.\n\n\nRemember to cite your sources.\n\n\nChoose one means of communication (such as cell phone call, SMS, Facebook, Skype, Twitter, etc.) and use the Internet to figure out what you can about how that technology works.\n\n\nIdentify one way to communicate over the Internet that didn’t exist three years ago.\n\n\nIdentify a social problem that has been solved using Internet communication, somewhere other than the United States. \n\n\nFor small group discussion: What are the good and bad points about having the BJC lessons online, compared with a paper textbook?\n\n\n\n\nCheck out Teaching Privacy, a site about protecting yourself from giving away private information through social media.\n\n\n\n\nMake a short video explaining what you learned about how one of these ways of communicating works.\n\n\n\n\n\n\nFour Corners (class activity). Do you “strongly agree,” “agree,” “disagree,” or “strongly disagree” with each of the following statements?\n\n\nComputers are isolating. (That is, they cause us to spend less time with other people.)\n\n\nComputers are democratizing. (That is, they give more political power to ordinary people.)\n\n\nYou will choose a viewpoint, then present your reasons for taking that view."
  },
  {
    "objectID": "unit-4/lab-3/2-cyberbullying.html",
    "href": "unit-4/lab-3/2-cyberbullying.html",
    "title": "Page 2: Cyberbullying",
    "section": "",
    "text": "On this page, you will learn about different forms of online harassment.\n\n\nIOC-1.A.3, IOC-1.B.3, IOC-1.B.4, IOC-1.F.8\n\nSocial media are designed to improve lives by helping people communicate and collaborate, but cyberbullying was an unexpected, illegal, and unethical misuse. It would have been better if the programmers who invented social media had anticipated these possibilities (although it’s not obvious what they would have done differently). Today, responsible programmers do try to predict possible misuses of their software before they release it to the world. But it’s not possible for programmers to anticipate all of the possible misuses of a technology.\n\n\n\nWhat are some different forms cyberbullying can take?\n\n\nConduct some online research. Use this resource, or find your own:    What methods work with the different kinds of cyberbullies? (stopcyberbullying.org)\n\n\n\n\nHave a class discussion. First, share some of your findings from the online research about the different forms cyberbullying can take. Then, together, discuss the following:\n\n\nWhat are some ways to effectively address this issue?\n\n\nWhat are challenges to addressing cyberbullying?\n\n\n\n\n\n\n\n\nHow can you bring some of these ideas to the rest of your school? What should all students know about cyberbullying? What school-wide policies might you suggest and communicate to the rest of the student body?"
  },
  {
    "objectID": "unit-4/lab-3/3-censorship.html",
    "href": "unit-4/lab-3/3-censorship.html",
    "title": "Page 3: Censorship",
    "section": "",
    "text": "pink box new (stolen from the H3). –MF, 12/21/17\nMF: could use review/light revision; tough to have 2.17 SI labs back to back\n\n\nOn this page, you will learn about free speech in the United States and around the world.\n\n\nIOC-1.F.9\n\nComputing can play a role in social and political debates, which in turn often raise legal and ethical concerns.\n\n\n\n\nIOC-1.F.9\n\nFour Corners (class activity). Do you “strongly agree,” “agree,” “disagree,” or “strongly disagree” with the following statements?\n\n\nAnyone should be allowed to post anonymous content online.\n\n\nGovernment should prevent people posting messages online that bully or harass another individual.\n\n\nSchools should be able to use Internet filters that prevent students from accessing some online content.\n\n\nGovernments should be able to use Internet filters that prevent citizens from accessing some online content.\n\n\n\n\nChoose a statement from the Four Corners activity and write a paragraph that states your view and provides evidence to support your view.\n\n\n\nThe Internet is global and bits flow all over the world. Each country can have laws for what is allowed or not allowed on the Internet, but what happens when countries (or even states in the US) have different laws?\n\n\n\nRead Blown to Bits pages 253-257.\n\n\nExamine the page This infographic shows the scope of Internet censorship around the globe (Business Insider, 3/20/15), especially Part 2: Methods of Internet Censorship, the Direct Actions and Demands for Removal.\n\n\nDiscuss and/or write about:\n\n\nWhy should people in the United States care about Internet rules in other countries?\n\n\nIs there a risk of government censorship in the United States, or is this just a problem elsewhere?\n\n\n\n\n\n\n\n\nFor example, you can learn that in 2008, Pakistan accidentally blocked YouTube around the world for a couple of hours in trying to block the site in its country.\n\n\nYou can find out more about Internet filtering around the world at opennet.net. In particular, note their different maps showing Internet filtering according to particular topics, as well as filtering of social media and YouTube, specifically."
  },
  {
    "objectID": "unit-4/lab-3/4-search-engines.html",
    "href": "unit-4/lab-3/4-search-engines.html",
    "title": "Page 4: Search Engines",
    "section": "",
    "text": "pink box new (somewhat stolen from the H3). look at other todo box too. –MF, 12/21/17\nBH: Flush the video. And promote the TIF to FYTD. Maybe some of the existing FYTD should be ITIT.\nMF: could use review/light revision; tough to have 2.17 SI labs back to back\n\n\nOn this page, you will learn about search engines and consider whether it matters which tools you use to search the web.\n\n\n\nIf your connection blocks YouTube, watch the video here.\n\n\n\n\n\n\n\nGH Feedback 11/13/15: one of the teachers said this didn’t work.\n\n\n\nI don’t know what this refers to (the video? a link?). Can we cut? –MF, 12/21/17\n\n\n\n\n\n\n\nOpen the search engine you usually use, the DuckDuckGo search engine, and another search engine such as Google, Yahoo, or Bing. Search for a phrase, like “Internet search engines” or “New York restaurants.” Do you get the same search results at each site? Try a search related to politics, such as “Barack Obama.”\n\n\n\nDiscuss with a partner, then share with the class. How do you think a search engine works? What algorithm might the search engine use to decide what to show you?\n\n\nSearch results are different in different countries, even from the same search engine. Investigate the reasons for this. (To start, do a web search for “search censorship.”)\n\n\nIn Blown to Bits, the authors claim that “search is a new form of control over information” (p. 111) and “search is power” (p. 145). Why might it be important to think of the social implications behind searching on the Internet?\n\n\n\n\n\n\n\nJerry Yang (born 1968) is best known as the co-founder and former CEO of Yahoo Inc. Yang’s family immigrated to America from Taiwan when he was ten years old. Although at that time he only knew one English word, “shoe”, Yang went on to graduate with a BS and a MS in electrical engineering from Stanford University. While studying at Stanford, Yang co-created an Internet website which acted as a directory of other websites. Eventually named Yahoo!, this website became the most popular search engine and starting point for web users by 1998. In 2016, Yahoo! was sold to Verizon for $5 Billion.\nArticle: History of Yahoo\n\n\n\n\nGoogle keeps track of searches. You can check out the day’s trending topics or the top searches of 2014 (or any year back to 2004) in the United States (or globally). What are benefits and costs to society in general from this tracking? What are benefits and costs to individual users from this tracking?"
  },
  {
    "objectID": "unit-4/lab-3/5-computing-world.html",
    "href": "unit-4/lab-3/5-computing-world.html",
    "title": "Page 5: Computing Around the World",
    "section": "",
    "text": "On this page, you will investigate how much of the world has access to the Internet.\n\n\n\n\nLook at List of countries by number of Internet users on Wikipedia, which has Internet access information about the different countries.\n\n\nRe-order the list by clicking the headings on the top to investigate:\n\n\nNumber of Internet Users\n\n\nPopulation\n\n\nPercentage (of people online)\n\n\n\n\nDoes anything surprise you in this data? For example, are you surprised by the results for the United States? Are there other countries that surprise you in any way?\n\n\nWhat questions do you have about Internet usage around the world? These can include questions that are not necessarily answered very well by charts, such as “why?” and “how?”\n\n\n\n\nSome people have access to computers and the Internet, and some people do not. This is called the digital divide.\n\n\nIOC-1.C.1, IOC-1.C.2, IOC-1.C.3\n\nThe digital divide refers to unequal access to computers and the Internet based on poverty, racism, sexism, isolation in the countryside, age, and other factors. The digital divide affects both individuals within a country and countries themselves.\n\n\n\n\n\nIOC-1.C\n\n\nIOC-1.C.4, IOC-1.F.10\n\n\nIOC-1.C.5\n\n\n\n\nWhy is there a digital divide?\n\n\nIn what ways does the digital divide create an unfair society?\n\n\nWhat are some ways of minimizing the effects of the digital divide, both in your community and around the world?\n\n\n\n\nIOC-1.C, IOC-1.C.5\n\n\nDo some research.What issues contribute to the digital divide? How do individuals, organizations, and governments contribute to the digital divide?\n\n\n\n\n\n\nRead this article about an innovation to deliver Internet to the world.\n\n\nWhat is being done about the digital divide in the United States? Here’s a government policy brief from July 2015 addressing this issue.\n\n\nThis article (“The Shrinking Digital Divide” from TechCrunch.com, 7/12/15) talks about the impact of smartphones on the digital divide. The article raises an interesting question: If there is no content available in your language, why would you be motivated to get online?"
  },
  {
    "objectID": "unit-4/lab-3/6-benefits.html",
    "href": "unit-4/lab-3/6-benefits.html",
    "title": "Page 6: Benefits of Computing",
    "section": "",
    "text": "On this page, you will consider various ways that computing technologies have improved society.\n\n\nIOC-1.A.5 (“In this course”)\n\nIn this course, when we talk about the social implications of computing, most of the focus is on the risks and challenges of new technologies. That’s because you mostly know about the good implications: the ability to communicate with friends worldwide, the explosion in creative expression, information at your fingertips, and so on. The risks and challenges need attention, but we shouldn’t completely neglect the benefits of computing, as it has inspired advances in a wide range of fields, including the arts, science, engineering, and communications.\n\nCRD-2.A.1 “creative expression” only, IOC-1.A.2, IOC-1.A.5 “arts” only; (“One purpose of the computing innovations”)\n\n\nOne purpose of the computing innovations is creative expression. Music synthesizers, for example, are electronic musical instruments that allow musicians to simulate the sound of dozens of different kinds of instrument without actually having or being able to play them. When synthesizers were first invented, some artists considered this cheating. The 1975 Queen album A Night at the Opera, the one with “Bohemian Rhapsody” on it, for example, had the words “No synthesizers!” featured in the liner notes. Today, of course, digital synthesizers (as well as more specialized computerized instruments such as drum machines) are commonplace in popular music. The new technology often changes people’s expectations and expands the reach of human creativity.\n\nCRD-2.A.1, IOC-1.A.1, IOC-1.A.5 “stem” only; (“People also create computing innovations”)\n\nPeople also create computing innovations to solve problems; every branch of science has been transformed by modern computers. In biology, the central example is DNA sequencing. DNA, the fundamental “blueprint” for all living organisms, consists of very long molecules; human DNA includes over three billion tiny building blocks. Modern supercomputers make it possible for human researchers to perform computations to analyze these sequences.\n\nIOC-1.E.2 (“Another important topic in biochemistry”)\n\n\n::: sidenote\n\nEarly Minimoog synthesizer image by Wikipedia user Magnus Manske; protein folding image by Wikipedia user DrKjaergaard\n:::\nAnother important topic in biochemistry is protein folding. When your body needs to produce a protein molecule, it “folds” another molecule into the right shape. Certain diseases are the result of proteins folding incorrectly, and researchers want to find the correct folding (the correct shape) for every protein. But trying every possibility requires enormous amounts of computer time. So, the Folding@home group at Stanford University asks people to download a protein folding program that will run on your computer or phone only when you’re not doing something else with it. Working together, tens of thousands of computers are like a very large supercomputer, except that supercomputers are expensive, while putting your computer’s idle time to work doesn’t cost anything.\nFolding@home is just one of several citizen science projects. The first one was the Great Internet Mersenne Prime Search, which uses volunteered computer time to search for large prime numbers, which are of importance in public key cryptography. Another early citizen science project, probably the most famous, is SETI@home, the Search for Extra-Terrestrial Intelligence, created by astronomers at the University of California, Berkeley. This project searches the pictures produced by large telescopes for radio signals that could be produced by intelligent life on a faraway planet. (SETI@home hasn’t found any signs of intelligent aliens so far, although it has found candidate radio signals for further study.)\n\n\n\nIOC-1.E.3, IOC-1.E.4 (vocab box)\n\n\nCitizen science is scientific research conducted in whole or part by distributed individuals, many of whom may not be scientists, who contribute relevant data to research using their own computing devices.\n\n\nCrowdsourcing is the general term for using the Internet to get a lot of people to help solve a problem. (Citizen science is a type of crowdsourcing.)\n\n\n\n\nLearn how Folding@home has been turned into a game.\n\nAll of these projects require nothing from their volunteers other than installing a program. But after some Folding@home users declared that they could find protein folds faster than a computer could do it, biochemists at the University of Washington collaborated with computer scientists in the UW Center for Game Science to create a video game, Foldit, in which you get points for folding proteins correctly. People carry out computations much more slowly than computers, but people can look at a picture, such as a picture of a protein, and take in the whole shape at once, instantly seeing possible folds. Computers, so far, can’t do that instant analysis of a picture as a whole.\nThey didn’t have to make Foldit a game; they could have just presented it as an opportunity to help science. But turning it into a game sparks some people’s competitive spirit and gets them to try harder and for a longer period of time than they might without the “gamification” of the task.\n\n\n\nIOC-1.E.6 (“Another kind of crowdsourced collaboration”)\n\nAnother kind of crowdsourced collaboration involves money. When a natural disaster leaves many people homeless, websites such as gofundme.com let large numbers of people contribute small amounts of money that add up to enough to make a difference. The contributors don’t expect anything back for their contributions. Similarly, small businesses can post notices at kickstarter.com encouraging supporters to buy a product before it exists; the developers use the money to pay the initial development and manufacturing costs, and then give the supporters their purchases.\n\nIOC-1.E.1 (“Advances in technology”)\n\nAdvances in technology have also allowed widespread access to information and public data, which facilitates the identification of problems, the development of solutions, and dissemination of the results. In medicine, for example, some combinations of medicines can be very dangerous, and doctors have to know whether the any new medication they prescribe is safe in combination with the ones the patient is already taking. There are thousands of prescription medications available in the United States, and there are medicines available without a prescription that may interact as well. Doctors can’t possibly remember the drug interactions for every pair of medicines, but they can use medical databases to check for drug interactions online. Another example that’s designed for the public is websites like  opensecrets.org, which collect and summarize information about major contributors to political candidates’ campaign funds so that people look up who has privileged access to the people who are supposed to be representing you.\n\n\n\nWhat are some ways that you have used technology to solve problems or for creative expression? Make a list and compare it with others’. Do any ways surprise or inspire you?\n\n\nIOC-1.E\n\n\n\nHow can computers help people around the world cooperate to solve a problem? Research an example that has required large-scale engagement, then describe the problem and how technology has enabled people to help.\n\n\n\n\n\nCRD-1.A.1, CRD-1.A.2\n\n\n\nA computing innovation can be physical (such as a self-driving car), non-physical software (such as picture editing software), or conceptual (such as the idea of e-commerce), but regardless of the form, they must include a program as an integral part of their function.\n\n\n\n\nIOC-1.A.3, IOC-1.B.1 text before bullets and bullet 2, IOC-1.B.2, IOC-1.B.5, IOC-1.B.6\n\nSometimes the impacts of a computing technology can be viewed as both beneficial and harmful. Whatever the intentions of the programmers, they don’t always anticipate all the consequences—good and bad. Here’s an oversimplified chart of some of the implications of Facebook:\n\n\n\n\n\n\n\n\nFacebook Consequences\nIntended\nUnintended\n\n\n\n\nGood\nfinding old friends\norganizing protests and aid\n\n\nBad\nprivacy violation for targeted advertising\n“fake news” to influence elections\n\n\n\nFacebook started as a way for college students to find their friends (their in-person friends, initially) when they go away, for example to a different college. But it turned out also to be good for organizing group activities, such as political protests and disaster support; computing innovations often have unintended beneficial effects in other fields. Facebook’s ability to make money could have been based on charging a fee for a Facebook account, but instead they chose to make the accounts free and to make money by using people’s data to provide advertising targeted to that user’s interests. You learned about how Facebook collects personal data even without users’ knowledge in Unit 1 Lab 4 Page 2: Examining Privacy, and this information gathering was intentionally designed into Facebook. But one thing Facebook didn’t intend was the ability of political campaigns and foreign countries to post content lying about opposing candidates that spreads rapidly throughout the network. This is a harmful impact on society. Technological innovations can also have harmful effects on economy or culture in addition to the many possible benefits.\nWhen Facebook started, it was available only to Harvard students. If that were still the case, neither its good nor its bad effects would matter very much. When Facebook expanded to include almost everyone with a computer or a smartphone, its impact expanded, and now dishonest political messages can spread around the world very quickly.\n\nIOC-1.A.4\n\nA single effect of an innovation can be viewed as both beneficial and harmful by different people, or even by the same person. You might not like your personal data being collected and shared with other companies, but violating people’s privacy isn’t bad for Mark Zuckerberg; on the contrary, it made him one of the richest people on Earth. And you might appreciate seeing advertisements that are relevant to you and still dislike the privacy violation.\n\n\n\n\nCRD-2.A, IOC-1.B\n\n\nPick another computing innovation (whether in the arts, science, or solving a practical problem), and write about its original purpose and unintended consequences. What was it designed for in the first place? What were the consequences, how were they missed in the design of the innovation, and how did the designers respond when they appeared? Make a chart like the Facebook example above."
  },
  {
    "objectID": "unit-4/lab-3/7-collaboration.html",
    "href": "unit-4/lab-3/7-collaboration.html",
    "title": "Page 7: Digital Collaboration",
    "section": "",
    "text": "On this page, you will learn how people use computing to enhance collaboration.\n\n\nIOC-1.E.5: Human capabilities can be enhanced by collaboration via computing.\n\n\nIOC-1.E.5\n\nThe worldwide nature of the Internet both requires and enables collaborative design. Human capabilities can be enhanced by collaboration via computing.\n\nCRD-1.A.3: Effective collaboration produces a computing innovation that reflects the diversity of talents and perspectives of those who designed it. CRD-1.A.5: Consultation and communication with users are important aspects of the development of computing innovations. CRD-1.A.6: Information gathered from potential users can be used to understand the purpose of a program from diverse perspectives and to develop a program that fully incorporates these perspectives.\n\n\nCRD-1.A.3, CRD-1.A.5, CRD-1.A.6\n\n\nComputers these days are so small and so inexpensive that nearly everyone has one in their pocket.  So, for a software project to be successful,\n\n\nit must meet the needs of people at all levels of expertise;\n\n\nit must meet the cultural expectations of users from every country, of every economic class, every race, every gender, and every other social division;\n\n\nit must meet (or create) a need of all those people.\n\n\n\nCRD-2.A.2: An understanding of the purpose of a computing innovation provides developers with an improved ability to develop that computing innovation.\n\n\nCRD-2.A.2\n\nNobody has enough experience with enough cultures to design for all these expectations. Instead, innovations are designed by a team that includes potential users, from a variety of cultures, ideally by choosing diverse technical experts (programmers, graphic artists, user interface experts, and others) who’ll do the actual implementation and who clearly understand the purpose of the innovation. In addition, modern innovators survey large numbers of users outside their team to double-check that everyone’s expectations are satisfied. (This is why you may see invitations from a company to “alpha test” a new program. It’s only partly to help catch out-and-out bugs; it also finds out early if some users are going to get angry about something the developers never considered.\n\nCRD-1.A.4: Collaboration that includes diverse perspectives helps avoid bias in the development of computing innovations. ALREADY COVERED IOC-1.F.11: Computing innovations can raise legal and ethical concerns. Some examples of these include: the development of algorithms that include bias\n\n\nCRD-1.A.4, IOC-1.F.11(2)\n\nAnother reason a variety of people on the design team is desirable is to help avoid bias in the innovation. In some early testing of self-driving cars, it was found that they weren’t good at detecting pedestrians who were people of color. This wasn’t deliberate, of course; the artificial intelligence program that detected pedestrians had been trained on a vast collection of photographs of people, in which all the people happened to be light-skinned. Luckily this problem was discovered in early testing, before the self-driving cars were really sent out on the road.\n\nCRD-1.B.1: Online tools support collaboration by allowing programmers to share and provide feedback on ideas and documents.\n\n\nCRD-1.B.1 (next four paragraphs)\n\nHow do computers and the Internet enable collaboration? The way that’s most taken for granted is the worldwide telephone system. Telephones are older than computers, but the early telephone systems didn’t have area codes, let alone country codes. You could dial people in your town, but to call anyone else you had to ask an operator (a telephone company worker) to connect you by hand. Today, connecting telephone calls is done by computer, and you can dial just about any telephone on Earth yourself.\nComputers are more visibly involved when you use virtual meeting software. Skype, the best-known example, is free in the sense of not costing you money to use it (although not in the sense of giving you the right to see or modify the software). But Skype’s free service degrades significantly if more than two or three people are on the call. Both Skype and other companies offer commercial virtual meeting software that can connect dozens of users with good quality.\nBesides talking with each other, developers can collaborate on multi-author documents using software that allows them to share the ownership of an online document. The best-known such system is Google Docs; like Skype, it’s free in the money sense but not in the sense of sharing the software that implements it.\nSystems that allow several people to edit the same document at the same time have the problem that one person’s edits may contradict another person’s. Revision control systems, of which the best-known is Git (free in both senses), support a more complicated but safer kind of collaboration: Each person has a private copy of the shared document, and edits that copy. When a collaborator is ready to share an edit with the rest of the team, the software synchronizes the local changes with the online, shared version. If changes from two collaborators conflict, the software won’t allow the synchronization until the conflicting text is resolved. The software also remembers the complete history of who changed what when, so it’s possible to undo a change even if other parts of the document have changed since then. But succeeding with Git does require a certain level of expertise.\n\n\n\nCRD-1.B\n\n\nResearch other forms of collaboration technology. How do people use them to work effectively in teams and develop new computing innovations? Write down what you discover.\n\n\nCRD-1.A\n\n\nExplain how computing innovations are improved through collaboration."
  },
  {
    "objectID": "unit-4/lab-3/8-planning-your-pathway.html",
    "href": "unit-4/lab-3/8-planning-your-pathway.html",
    "title": "Page 8: Planning Your Pathway",
    "section": "",
    "text": "On this page, …\n\n\nIOC-1.E.5: Human capabilities can be enhanced by collaboration via computing.\n\n\nFinding Your Communities in Tech\n\n\n\n\nLearn bit a about a few communities that interest you.\n\n\n\nHow is the organization structured?\n\n\nHow big is the organization?\n\n\nWhat kind of support do they offer?\n\n\nDo they host events? If so, where?\n\n\nDo they use social media platforms?\n\n\n\nSome examples of communitites for groups underrepresented in computer science are listed below. There are many, many more groups out there!\n\n\n\nBlack Communities\n\n\nBlack Tech Nation\n\n\n/dev/color\n\n\nBlacks In Technology\n\n\n\n\n\n\n\nYouth Communities\n\n\nBlack Girls Code\n\n\nBlack Boys Code\n\n\nGirls Who Code\n\n\nThe Hidden Genius Project for Black male youth\n\n\nTECHNOLOchicas\n\n\n\n\nLatinx Communities\n\n\nLatinas in STEM\n\n\nLatinos Who Tech\n\n\nTechLatino\n\n\nTechqueria | Latinx in Tech\n\n\n\n\nLGBTQ+ Communitites\n\n\nLGBT Tech\n\n\nOut in Tech supporting LGBTQ+ in tech\n\n\nStartOut supporting LGBTQ+ in tech\n\n\nLesbians Who Tech supporting women, POC, and queer and trans people in tech\n\n\nTransTech Social Enterprises supporting LGBTQ people with a focus on transgender people\n\n\nQueerTech\n\n\nUnicorns in Tech supporting LGBTIQ+ in tech\n\n\n\n\nNative American Communitites\n\n\nNatives in Tech\n\n\nSisterhood of Native American Coders\n\n\nAmerican Indian Science and Engineering Society supporting Indigenous peoples of North America and the Pacific Islands\n\n\n\n\n\n\n\n\n\n\nWomens Communitites\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode2040 supporting racial equity in tech\n\n\nWonder Women Tech for Women, BIPOC, and the Underrepresented\n\n\n\n\n\n\n\n\nConnect with a few communities that appeal to you. Follow them on social media, sign up for their newsletter, or attend an event online or in person.\n\n\n\n\nJobs and Income\n\nMany of the above communities share job listings with the public.\n\n\n\nFind three job postings in computer science that look interesting to you. Write down:\n\n\nThe job title\n\n\nThe qualitications required (degree, experience, special skills, etc.)\n\n\nThe salary\n\n\n\n\n\n\n\n\nBeyond Being a Programmer\n\nComputers and programming is important to careers far beyond software engineers.\n\n\n\nChoose a career you are interested in, and research how computers are used on that field.\n\n\nLook into what kinds of specialized training in software packages and/or programming are relevant in that field."
  },
  {
    "objectID": "unit-4/lab-4/1-bits.html",
    "href": "unit-4/lab-4/1-bits.html",
    "title": "Page 1: Bits",
    "section": "",
    "text": "In this lab, you will explore how different kinds of information are represented in a computer.\nOn this page, you will learn about bits, the basic units of data in computing.\n\n\n: Bit\n\nDAT-1.A.3\n\nA bit is a single unit of data that can only have one of two values. We usually represent the two values as 0 (off) and 1 (on).\n\nAs you probably know, information travels over wires inside the computer, and each wire is either on or off, with no intermediate states allowed. This small piece of information is called a bit, the smallest possible unit of information in the digital domain.\nWhat does the value of a bit mean? By convention, the two states of a bit are interpreted as 0 and 1, but that doesn’t mean they have to represent numbers. A single bit can represent\n\n\nFalse and True\n\n\nOff and On, simulating a light switch\n\n\nRed and Green, simulating a traffic light\n\n\n…and many more\n\n\nBut what if the traffic light also needs a yellow value? It’s tempting to say that, for example, 0 volts on the wire means red, 1 volt means yellow, and 2 volts means green. Long ago, there were computers that worked that way, but there are good reasons to stick with two possible values per wire.\n::: endnote  What good reasons?\n::: {#hint-bistable .collapse} \nThe fundamental building block of computer circuitry is the transistor. In a digital computer, the input to a transistor is either zero or whatever voltage represents one. But electrical circuits aren’t perfect; the input may be a little larger or smaller than it should be.\nThis is a rough graph of the actual input-output behavior of a transistor. Don’t worry about the details; just notice the two blue flat parts of the graph.  Within the “cutoff” region, small changes to the input voltage do not change the output voltage at all; the output is always zero volts. Likewise within the “saturation” region, small input changes don’t affect the output voltage; this output is interpreted as a one. This is how transistors are used as switches in a computer. If there were three flat parts of the curve, maybe we would have three possible values for each wire.\nTransistors are versatile devices. When used in the middle, linear (pink) part of the graph, they’re amplifiers; a small variation in input voltage produces a large variation in output voltage. That’s how they’re used to play music in a stereo.\n\n::: :::\n\nDAT-1.A.2\n\nInstead of multiple-valued wires, we use more than one bit if we need to represent more than two possible values. So, for the traffic light, we could use two bits: 31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATgBBAEEAMQBBAEQASQBBAE0AUQBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEcASQBBAGUAUQBCADAAQQBHAFUAQQBJAEEAQgBwAEEARwA0AEEAWgBBAEIAbABBAEcANABBAGQAQQBBAGkAQQBDAEEAQQBkAHcAQgBwAEEARwBRAEEAZABBAEIAbwBBAEQAMABBAEkAZwBBADAAQQBEAEEAQQBNAEEAQgB3AEEASABnAEEASQBnAEEAZwBBAEcARQBBAGIAQQBCAHAAQQBHAGMAQQBiAGcAQQA5AEEAQwBJAEEAWQB3AEIAbABBAEcANABBAGQAQQBCAGwAQQBIAEkAQQBJAGcAQQBnAEEASABNAEEAZABRAEIAdABBAEcAMABBAFkAUQBCAHkAQQBIAGsAQQBQAFEAQQBpAEEASABRAEEAWQBRAEIAaQBBAEcAdwBBAFoAUQBBAGcAQQBHADgAQQBaAGcAQQBnAEEARwBJAEEAYQBRAEIAdQBBAEcARQBBAGMAZwBCADUAQQBDAEEAQQBjAGcAQgBsAEEASABBAEEAYwBnAEIAbABBAEgATQBBAFoAUQBCAHUAQQBIAFEAQQBZAFEAQgAwAEEARwBrAEEAYgB3AEIAdQBBAEMAQQBBAGIAdwBCAG0AQQBDAEEAQQBkAEEAQgB5AEEARwBFAEEAWgBnAEIAbQBBAEcAawBBAFkAdwBBAGcAQQBIAE0AQQBhAFEAQgBuAEEARwA0AEEAWQBRAEIAcwBBAEMAQQBBAFkAdwBCAHYAQQBHAHcAQQBiAHcAQgB5AEEASABNAEEASQBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAbwBBAEMAQQBBAGMAdwBCAGoAQQBHADgAQQBjAEEAQgBsAEEARAAwAEEASQBnAEIAagBBAEcAOABBAGIAQQBBAGkAQQBEADQAQQBaAGcAQgBwAEEASABJAEEAYwB3AEIAMABBAEMAQQBBAFkAZwBCAHAAQQBIAFEAQQBQAEEAQQB2AEEASABRAEEAYQBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAGcAQQBJAEEAQgB6AEEARwBNAEEAYgB3AEIAdwBBAEcAVQBBAFAAUQBBAGkAQQBHAE0AQQBiAHcAQgBzAEEAQwBJAEEAUABnAEIAegBBAEcAVQBBAFkAdwBCAHYAQQBHADQAQQBaAEEAQQBnAEEARwBJAEEAYQBRAEIAMABBAEQAdwBBAEwAdwBCADAAQQBHAGcAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAbwBBAEMAQQBBAGMAdwBCAGoAQQBHADgAQQBjAEEAQgBsAEEARAAwAEEASQBnAEIAagBBAEcAOABBAGIAQQBBAGkAQQBEADQAQQBiAFEAQgBsAEEARwBFAEEAYgBnAEIAcABBAEcANABBAFoAdwBBADgAQQBDADgAQQBkAEEAQgBvAEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBJAEEAQgB6AEEASABRAEEAZQBRAEIAcwBBAEcAVQBBAFAAUQBBAGkAQQBIAFEAQQBaAFEAQgA0AEEASABRAEEATABRAEIAaABBAEcAdwBBAGEAUQBCAG4AQQBHADQAQQBPAGcAQgB5AEEARwBrAEEAWgB3AEIAbwBBAEgAUQBBAE8AdwBBAGkAQQBEADQAQQBNAEEAQQBtAEEARwA0AEEAWQBnAEIAegBBAEgAQQBBAE8AdwBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBAGcAQQBIAE0AQQBkAEEAQgA1AEEARwB3AEEAWgBRAEEAOQBBAEMASQBBAGQAQQBCAGwAQQBIAGcAQQBkAEEAQQB0AEEARwBFAEEAYgBBAEIAcABBAEcAYwBBAGIAZwBBADYAQQBHAHcAQQBaAFEAQgBtAEEASABRAEEATwB3AEEAaQBBAEQANABBAEoAZwBCAHUAQQBHAEkAQQBjAHcAQgB3AEEARABzAEEATQBBAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEMAWQBBAGIAZwBCAGkAQQBIAE0AQQBjAEEAQQA3AEEASABJAEEAWgBRAEIAawBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBAGcAQQBIAE0AQQBkAEEAQgA1AEEARwB3AEEAWgBRAEEAOQBBAEMASQBBAGQAQQBCAGwAQQBIAGcAQQBkAEEAQQB0AEEARwBFAEEAYgBBAEIAcABBAEcAYwBBAGIAZwBBADYAQQBIAEkAQQBhAFEAQgBuAEEARwBnAEEAZABBAEEANwBBAEMASQBBAFAAZwBBAHcAQQBDAFkAQQBiAGcAQgBpAEEASABNAEEAYwBBAEEANwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEMAQQBBAGMAdwBCADAAQQBIAGsAQQBiAEEAQgBsAEEARAAwAEEASQBnAEIAMABBAEcAVQBBAGUAQQBCADAAQQBDADAAQQBZAFEAQgBzAEEARwBrAEEAWgB3AEIAdQBBAEQAbwBBAGIAQQBCAGwAQQBHAFkAQQBkAEEAQQA3AEEAQwBJAEEAUABnAEEAbQBBAEcANABBAFkAZwBCAHoAQQBIAEEAQQBPAHcAQQB4AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEASgBnAEIAdQBBAEcASQBBAGMAdwBCAHcAQQBEAHMAQQBlAFEAQgBsAEEARwB3AEEAYgBBAEIAdgBBAEgAYwBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBDAEEAQQBjAHcAQgAwAEEASABrAEEAYgBBAEIAbABBAEQAMABBAEkAZwBCADAAQQBHAFUAQQBlAEEAQgAwAEEAQwAwAEEAWQBRAEIAcwBBAEcAawBBAFoAdwBCAHUAQQBEAG8AQQBjAGcAQgBwAEEARwBjAEEAYQBBAEIAMABBAEQAcwBBAEkAZwBBACsAQQBEAEUAQQBKAGcAQgB1AEEARwBJAEEAYwB3AEIAdwBBAEQAcwBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAEkAQQBCAHoAQQBIAFEAQQBlAFEAQgBzAEEARwBVAEEAUABRAEEAaQBBAEgAUQBBAFoAUQBCADQAQQBIAFEAQQBMAFEAQgBoAEEARwB3AEEAYQBRAEIAbgBBAEcANABBAE8AZwBCAHMAQQBHAFUAQQBaAGcAQgAwAEEARABzAEEASQBnAEEAKwBBAEMAWQBBAGIAZwBCAGkAQQBIAE0AQQBjAEEAQQA3AEEARABBAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAbQBBAEcANABBAFkAZwBCAHoAQQBIAEEAQQBPAHcAQgBuAEEASABJAEEAWgBRAEIAbABBAEcANABBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBDAEEAQQBjAHcAQgAwAEEASABrAEEAYgBBAEIAbABBAEQAMABBAEkAZwBCADAAQQBHAFUAQQBlAEEAQgAwAEEAQwAwAEEAWQBRAEIAcwBBAEcAawBBAFoAdwBCAHUAQQBEAG8AQQBjAGcAQgBwAEEARwBjAEEAYQBBAEIAMABBAEQAcwBBAEkAZwBBACsAQQBEAEUAQQBKAGcAQgB1AEEARwBJAEEAYwB3AEIAdwBBAEQAcwBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAEkAQQBCAHoAQQBIAFEAQQBlAFEAQgBzAEEARwBVAEEAUABRAEEAaQBBAEgAUQBBAFoAUQBCADQAQQBIAFEAQQBMAFEAQgBoAEEARwB3AEEAYQBRAEIAbgBBAEcANABBAE8AZwBCAHMAQQBHAFUAQQBaAGcAQgAwAEEARABzAEEASQBnAEEAKwBBAEMAWQBBAGIAZwBCAGkAQQBIAE0AQQBjAEEAQQA3AEEARABFAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAbQBBAEcANABBAFkAZwBCAHoAQQBIAEEAQQBPAHcAQQBtAEEARwA0AEEAWQBnAEIAegBBAEgAQQBBAE8AdwBBAG0AQQBHADQAQQBZAGcAQgB6AEEASABBAEEATwB3AEEAbwBBAEgAVQBBAGIAZwBCADEAQQBIAE0AQQBaAFEAQgBrAEEAQwBrAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBZAFEAQgBpAEEARwB3AEEAWgBRAEEAKwBBAEEAPQA9AAoAcwB1AGYAZgBpAHgAOgA=:31b8e172-b470-440e-83d8-e6b185028602\nThere are four possible combinations of two bits, so with two bits we can represent up to four different values, even though we only need three for the traffic light.\n\n\n\nConvince yourself that there aren’t any more combinations of two bits.\n\n\nWrite down all the possible combinations of three bits. How many are there?\n\n\nHow many combinations of four bits are there?\n\n\n\nEach added bit doubles the number of values you can represent. This means that representing complex situations doesn’t cost a lot of hardware; ten bits is enough to represent over 1000 distinct values.\n\n\n\nHow many values, exactly, can be represented by ten bits?\n\n\nHow many bits do you need to represent the days of the week?\n\n\nHow many bits do you need to represent one decimal digit (that is, to specify a digit 0-9)?\n\n\n\n\n: Byte and Word\n\nDAT-1.A.4\n\nA byte is eight bits.\nA word is a sequence of however many bits the CPU processes at a time. As of 2017, words are 32 or 64 bits.\n\nBits aren’t expensive, but what is expensive is the circuitry to let the programmer use exactly the smallest number of bits for a particular problem.\n\nCan we cut this commented out text? –MF, 8/31/19 I think we should consider moving it to U6, but not tonight… -bh\n\n\nInstead, modern computers generally allow memory allocation in only two sizes: the byte, which is standardized at eight bits, and the word, which is defined as a sequence of however many bits the CPU processes at a time. As of 2017, words can be 32 bits or 64 bits wide, although most new computer models use 64 bits.\n\n\nThe exact answer for 32 bits is 4,294,967,296 so this approximation is pretty close.\n\nHow many distinct values can be represented in 32 bits? You don’t have to memorize the answer, because you can quickly approximate it using the fact that 210 = 1024, which is about 1000. This means that every ten bits of width multiplies the number of values that can be represented by about 1000. So, 10 bits allows about a thousand values, 20 bits is about a million values, 30 bits is about a billion, and 32 bits allows over four billion values (because we double the billion two more times for the difference between 30 and 32).\nYou might find this trick helpful on the AP exam.\n\nFour billion values sounds like it ought to be enough, but it’s not if you’re an astronomer or a banker (or Google or Facebook). That’s why we now have 64-bit computers, which as of 2019 are the standard. (Apple has just removed support for 32-bit programs from MacOS.)\n\n\n\nAbout how many different values can be represented in a 64-bit word? (Don’t use a calculator; use the trick!)\n\n\n\n\nBytes and Characters\n\nThe main use of eight-bit bytes is to represent characters of text.\n\n\n\nHow many bits do you need to represent the 26 letters in English and the ten digits 0-9?\n\n\n\n\nThe widespread use of eight-bit ASCII is the main historical reason why the eight-bit byte became standard. (Another reason is that computer circuitry can most easily deal with widths that are powers of two.)\n\nComputers used six-bit-wide character codes for many years, but to have both UPPER CASE and lower case letters and punctuation requires seven bits. The first officially recognized character encoding was the seven bit ASCII (American Standard Code for Information Interchange) character set. It included an optional eighth bit for error detection, which was taken over to include accented characters in Spanish, French, German, and some other European languages. For example, there is an accented character in the name of the main developer of Snap!, Jens Mönig, who is German. (The closest English sound is the “u” in “lunch.”)\nAs the use of computers and the Internet spread around the world, people wanted to be able to write Chinese, Japanese, Arabic, Kabyle, Russian, Tamil, etc. The Unicode character set supports about 1900 languages, using 32 modern alphabets and 107 historical alphabets that are no longer in living use. The complete Unicode character set includes 136,755 characters.\n\n\n\nWhat’s the minimum number of bits needed to represent any Unicode character?\n\n\n\n\n The actual computer representation of Unicode is complicated.\n\nThe most straightforward representation of Unicode uses one 32-bit word per character, which is more than enough. But program developers consider that an inefficient use of computer memory, and also, a lot of old software still in use was written when eight bits per character was standard. So Unicode characters are generally represented in a multi-byte representation in which the original 128 ASCII characters occupy one byte, while other characters may require up to four bytes. (It’s also possible to use a multi-byte sequence to tell your word processing software that you want to use one-byte or two-byte codes to represent a particular non-Latin alphabet.)\n\n\n\n\n\nThis question is similar to those you will see on the AP CSP exam. \n\n\nWhich of the following CANNOT be expressed using one bit?\n\n\n\nThe state of an ON/OFF switch\n\n\nThis has two possible states so a single bit is enough.\n\n\n\n\nThe value of a Boolean variable\n\n\nThis has two possible values TRUE/FALSE, so a single bit is enough.\n\n\n\n\nThe remainder when dividing a positive integer by 2\n\n\nThere are two possible remainders 0 or 1, so a single bit is enough.\n\n\n\n\nThe position of the hour hand of a clock\n\n\nCorrect. The hour hand spans a range of values between 1 to 12 so one bit is not sufficient. It will actually require 4 bits."
  },
  {
    "objectID": "unit-4/lab-4/2-sequences.html",
    "href": "unit-4/lab-4/2-sequences.html",
    "title": "Page 2: Binary Sequences",
    "section": "",
    "text": "MF: lightly clean up to make the text more concise\n\n\nIn case someone wants to do more with the project one day:\n\n\nThe color version of the project (U6L1-TranslatingBinary_color.xml) breaks Snap! because of an unresolved bug (#1873).\n\n\nThe PHP script that I used to get the binary sequences for images is here: /utilities/colorreader.php. Edit the $im variable initialization (currently line 9) to change the path of the color file exported into a binary sequence, and edit the $imbw initialization (currently line 59) to change the B&W file. It would be amazing to incorporate this into the project, but that would require being able to handle uploaded images or images with an existing URL, and I haven’t thought through that possibility yet. –MF, 11/30/17\n\n\n\n\nOn this page, you will learn more about how information is represented inside the computer as sequences of bits.\n\n\nIn many programming languages there’s a convention that every text string ends with a null byte, in which all eight bits are zero, a code that’s reserved for this purpose. So our “Welcome...” string might actually occupy 44 bytes.\n\nSo far we’ve been working with small chunks of data, from Boolean values (one bit) to characters (eight bits). But of course some information in your computer or smartphone is much bigger than that. For starters, characters aren’t generally used one at a time; they’re used in text strings such as “Welcome to the Beauty and Joy of Computing.” These 43 characters occupy 43 bytes of computer memory. But the real champion users of space are media files: pictures, sounds (mostly music), and video.\nIf we could see inside the memory’s bits, a section of the memory might look something like this:\n\n01000001001000000111001101101101011000010111001001110100001000000111000001101000011011110110111001100101001011000010000001101100011010010110101101100101001000000111100101101111011101010111001000100000011011000110000101110000011101000110111101110000001000000110111101110010001000000110010001100101011100110110101101110100011011110111000000100000011000110110111101101101011100000111010101110100011001010111001000101100001000000110001101100001011011100 `\n\n\nA binary sequence (also called a bitstream) is a string of ones and zeros.\n\nThat shows just 449 bits. A 16GB cell phone has 16 gigabytes (about 16 billion bytes) of storage with each byte containing 8 bits. That’s 128,000,000,000 bits. Printed on paper as ones and zeros, the 16GB phone’s memory would take nearly 40,000,000 pages. The information in storage—whether it is a text message, a photograph, a song, a computer program, or a list of phone numbers—all looks the same, like a sequence of bits that are either On or Off (one or zero), a binary sequence.\n\nHow much information fits in a gigabyte?\n\nHere are a few rough examples of what kind of data would fit in how much memory:\n31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATgBRAEEAMwBBAEQAQQBBAE0AQQBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEcASQBBAGUAUQBCADAAQQBHAFUAQQBJAEEAQgBwAEEARwA0AEEAWgBBAEIAbABBAEcANABBAGQAQQBBAGkAQQBDAEEAQQBjAHcAQgAxAEEARwAwAEEAYgBRAEIAaABBAEgASQBBAGUAUQBBADkAQQBDAEkAQQBkAEEAQgBoAEEARwBJAEEAYgBBAEIAbABBAEMAQQBBAGIAdwBCAG0AQQBDAEEAQQBZAHcAQgB2AEEARwAwAEEAYgBRAEIAdgBBAEcANABBAEkAQQBCAGsAQQBHAEUAQQBkAEEAQgBoAEEAQwBBAEEAYwB3AEIAcABBAEgAbwBBAFoAUQBCAHoAQQBDAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBhAEEAQQBnAEEASABNAEEAWQB3AEIAdgBBAEgAQQBBAFoAUQBBADkAQQBDAEkAQQBZAHcAQgB2AEEARwB3AEEASQBnAEEAKwBBAEcANABBAFkAUQBCAHQAQQBHAFUAQQBQAEEAQQB2AEEASABRAEEAYQBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAGcAQQBJAEEAQgB6AEEARwBNAEEAYgB3AEIAdwBBAEcAVQBBAFAAUQBBAGkAQQBHAE0AQQBiAHcAQgBzAEEAQwBJAEEASQBBAEIAegBBAEgAUQBBAGUAUQBCAHMAQQBHAFUAQQBQAFEAQQBpAEEASABjAEEAYQBRAEIAawBBAEgAUQBBAGEAQQBBADYAQQBEAE0AQQBNAEEAQQB3AEEASABBAEEAZQBBAEEANwBBAEMASQBBAFAAZwBCAGgAQQBHADAAQQBiAHcAQgAxAEEARwA0AEEAZABBAEEAOABBAEMAOABBAGQAQQBCAG8AQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYQBBAEEAZwBBAEgATQBBAFkAdwBCAHYAQQBIAEEAQQBaAFEAQQA5AEEAQwBJAEEAWQB3AEIAdgBBAEcAdwBBAEkAZwBBAGcAQQBIAE0AQQBkAEEAQgA1AEEARwB3AEEAWgBRAEEAOQBBAEMASQBBAGQAdwBCAHAAQQBHAFEAQQBkAEEAQgBvAEEARABvAEEATQB3AEEAdwBBAEQAQQBBAGMAQQBCADQAQQBEAHMAQQBJAGcAQQArAEEARwBVAEEAZQBBAEIAaABBAEcAMABBAGMAQQBCAHMAQQBHAFUAQQBQAEEAQQB2AEEASABRAEEAYQBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEAWQBnAEIAcABBAEgAUQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBCAGwAQQBHAGsAQQBkAEEAQgBvAEEARwBVAEEAYwBnAEEAZwBBAEcARQBBAEkAQQBBAHgAQQBDAEEAQQBiAHcAQgB5AEEAQwBBAEEAWQBRAEEAZwBBAEQAQQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBAHgAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARwBJAEEAZQBRAEIAMABBAEcAVQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBADQAQQBDAEEAQQBZAGcAQgBwAEEASABRAEEAYwB3AEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQARQBBAE0AUQBBAHcAQQBEAEUAQQBNAFEAQQB3AEEARABBAEEATQBRAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBCAHIAQQBHAGsAQQBiAEEAQgB2AEEARwBJAEEAZQBRAEIAMABBAEcAVQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBAHkAQQBEAHcAQQBjAHcAQgAxAEEASABBAEEAUABnAEEAeABBAEQAQQBBAFAAQQBBAHYAQQBIAE0AQQBkAFEAQgB3AEEARAA0AEEASQBBAEEAbwBBAEQARQBBAEwAQQBBAHcAQQBEAEkAQQBOAEEAQQBwAEEAQwBBAEEAWQBnAEIANQBBAEgAUQBBAFoAUQBCAHoAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBZAFEAQQBnAEEARwBNAEEAYgB3AEIAMQBBAEgAQQBBAGIAQQBCAGwAQQBDAEEAQQBiAHcAQgBtAEEAQwBBAEEAYwBBAEIAaABBAEgASQBBAFkAUQBCAG4AQQBIAEkAQQBZAFEAQgB3AEEARwBnAEEAYwB3AEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBCAHQAQQBHAFUAQQBaAHcAQgBoAEEARwBJAEEAZQBRAEIAMABBAEcAVQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBAHkAQQBEAHcAQQBjAHcAQgAxAEEASABBAEEAUABnAEEAeQBBAEQAQQBBAFAAQQBBAHYAQQBIAE0AQQBkAFEAQgB3AEEARAA0AEEASQBBAEEAbwBBAEQARQBBAEwAQQBBAHcAQQBEAFEAQQBPAEEAQQBzAEEARABVAEEATgB3AEEAMgBBAEMAawBBAEkAQQBCAGkAQQBIAGsAQQBkAEEAQgBsAEEASABNAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEIAaABBAEcASQBBAGIAdwBCADEAQQBIAFEAQQBJAEEAQQB4AEEAQwBBAEEAWQBnAEIAdgBBAEcAOABBAGEAdwBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQgBuAEEARwBrAEEAWgB3AEIAaABBAEcASQBBAGUAUQBCADAAQQBHAFUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQB5AEEARAB3AEEAYwB3AEIAMQBBAEgAQQBBAFAAZwBBAHoAQQBEAEEAQQBQAEEAQQB2AEEASABNAEEAZABRAEIAdwBBAEQANABBAEkAQQBBAG8AQQBEAEUAQQBMAEEAQQB3AEEARABjAEEATQB3AEEAcwBBAEQAYwBBAE4AQQBBAHgAQQBDAHcAQQBPAEEAQQB5AEEARABRAEEASwBRAEEAZwBBAEcASQBBAGUAUQBCADAAQQBHAFUAQQBjAHcAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARwBFAEEASQBBAEIAcwBBAEcAawBBAGQAQQBCADAAQQBHAHcAQQBaAFEAQQBnAEEARwAwAEEAYgB3AEIAeQBBAEcAVQBBAEkAQQBCADAAQQBHAGcAQQBZAFEAQgB1AEEAQwBBAEEATQBRAEEAZwBBAEUATQBBAFIAQQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQgAwAEEARwBVAEEAYwBnAEIAaABBAEcASQBBAGUAUQBCADAAQQBHAFUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQB5AEEARAB3AEEAYwB3AEIAMQBBAEgAQQBBAFAAZwBBADAAQQBEAEEAQQBQAEEAQQB2AEEASABNAEEAZABRAEIAdwBBAEQANABBAEkAQQBBAG8AQQBEAEUAQQBMAEEAQQB3AEEARABrAEEATwBRAEEAcwBBAEQAVQBBAE0AUQBBAHgAQQBDAHcAQQBOAGcAQQB5AEEARABjAEEATABBAEEAMwBBAEQAYwBBAE4AZwBBAHAAQQBDAEEAQQBZAGcAQgA1AEEASABRAEEAWgBRAEIAegBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAFkAUQBCAGkAQQBHADgAQQBkAFEAQgAwAEEAQwBBAEEATQBRAEEAcwBBAEQAVQBBAE0AQQBBAHcAQQBDAEEAQQBRAHcAQgBFAEEASABNAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAGMAQQBCAGwAQQBIAFEAQQBZAFEAQgBpAEEASABrAEEAZABBAEIAbABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAE0AZwBBADgAQQBIAE0AQQBkAFEAQgB3AEEARAA0AEEATgBRAEEAdwBBAEQAdwBBAEwAdwBCAHoAQQBIAFUAQQBjAEEAQQArAEEAQwBBAEEASwBBAEEAeABBAEMAdwBBAE0AUQBBAHkAQQBEAFUAQQBMAEEAQQA0AEEARABrAEEATwBRAEEAcwBBAEQAawBBAE0AQQBBADIAQQBDAHcAQQBPAEEAQQAwAEEARABJAEEATABBAEEAMgBBAEQASQBBAE4AQQBBAHAAQQBDAEEAQQBZAGcAQgA1AEEASABRAEEAWgBRAEIAegBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAFkAUQBCAGkAQQBHADgAQQBkAFEAQgAwAEEAQwBBAEEATQBnAEEAdwBBAEMAQQBBAGIAUQBCAHAAQQBHAHcAQQBiAEEAQgBwAEEARwA4AEEAYgBnAEEAZwBBAEcAWQBBAGEAUQBCAHMAQQBHAGsAQQBiAGcAQgBuAEEAQwBBAEEAWQB3AEIAaABBAEcASQBBAGEAUQBCAHUAQQBHAFUAQQBkAEEAQgB6AEEAQwBBAEEAYgB3AEIAbQBBAEMAQQBBAGQAQQBCAGwAQQBIAGcAQQBkAEEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEIAbABBAEgAZwBBAFkAUQBCAGkAQQBIAGsAQQBkAEEAQgBsAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEATQBnAEEAOABBAEgATQBBAGQAUQBCAHcAQQBEADQAQQBOAGcAQQB3AEEARAB3AEEATAB3AEIAegBBAEgAVQBBAGMAQQBBACsAQQBDAEEAQQBLAEEAQQB4AEEAQwB3AEEATQBRAEEAMQBBAEQASQBBAEwAQQBBADUAQQBEAEkAQQBNAFEAQQBzAEEARABVAEEATQBBAEEAMABBAEMAdwBBAE4AZwBBAHcAQQBEAFkAQQBMAEEAQQA0AEEARABRAEEATgBnAEEAcwBBAEQAawBBAE4AdwBBADIAQQBDAGsAQQBJAEEAQgBpAEEASABrAEEAZABBAEIAbABBAEgATQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBCAGgAQQBHAEkAQQBiAHcAQgAxAEEASABRAEEASQBBAEEAeQBBAEQAQQBBAEoAUQBBAGcAQQBHADgAQQBaAGcAQQBnAEEARwBFAEEAYgBBAEIAcwBBAEMAQQBBAGQAQQBCAG8AQQBHAFUAQQBJAEEAQgAzAEEARwA4AEEAYwBnAEIAawBBAEgATQBBAEkAQQBCAGwAQQBIAFkAQQBaAFEAQgB5AEEAQwBBAEEAYwB3AEIAdwBBAEcAOABBAGEAdwBCAGwAQQBHADQAQQBJAEEAQgBpAEEASABrAEEASQBBAEIAbwBBAEgAVQBBAGIAUQBCAGgAQQBHADQAQQBhAHcAQgBwAEEARwA0AEEAWgBBAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgBoAEEARwBJAEEAYgBBAEIAbABBAEQANABBAAoAcwB1AGYAZgBpAHgAOgA=:31b8e172-b470-440e-83d8-e6b185028602\nAs we write this in 2017, it’s common to have a terabyte disk drive on your desk. Web services deal with petabytes or exabytes of data.\nWhere do these prefixes like “tera-” and “peta-” come from?\n\nWhen we write big numbers, we put commas every three digits (counting from the right). Each group of three has a name: thousand, million, billion, and so on. So, the number 1,234,567,890 is pronounced “one billion, 234 million, 567 thousand, 890.” Those group names (“thousand” and so on) also have prefix names used in metric measurements:\n31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATgB3AEEAMABBAEQATQBBAE0AUQBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEcASQBBAGUAUQBCADAAQQBHAFUAQQBJAEEAQgBwAEEARwA0AEEAWgBBAEIAbABBAEcANABBAGQAQQBBAGkAQQBDAEEAQQBkAHcAQgBwAEEARwBRAEEAZABBAEIAbwBBAEQAMABBAEkAZwBBADIAQQBEAEEAQQBNAEEAQgB3AEEASABnAEEASQBnAEEAZwBBAEgATQBBAGQAUQBCAHQAQQBHADAAQQBZAFEAQgB5AEEASABrAEEAUABRAEEAaQBBAEgAUQBBAFkAUQBCAGkAQQBHAHcAQQBaAFEAQQBnAEEARwA4AEEAWgBnAEEAZwBBAEcANABBAGQAUQBCAHQAQQBHAEkAQQBaAFEAQgB5AEEAQwBBAEEAYwBBAEIAeQBBAEcAVQBBAFoAZwBCAHAAQQBIAGcAQQBaAFEAQgB6AEEAQwBJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYQBBAEEAZwBBAEgATQBBAFkAdwBCAHYAQQBIAEEAQQBaAFEAQQA5AEEAQwBJAEEAWQB3AEIAdgBBAEcAdwBBAEkAZwBBACsAQQBIAEEAQQBjAGcAQgBsAEEARwBZAEEAYQBRAEIANABBAEQAdwBBAEwAdwBCADAAQQBHAGcAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAbwBBAEMAQQBBAGMAdwBCAGoAQQBHADgAQQBjAEEAQgBsAEEARAAwAEEASQBnAEIAagBBAEcAOABBAGIAQQBBAGkAQQBEADQAQQBZAFEAQgB0AEEARwA4AEEAZABRAEIAdQBBAEgAUQBBAFAAQQBBAHYAQQBIAFEAQQBhAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAZwBBAEkAQQBCAHoAQQBHAE0AQQBiAHcAQgB3AEEARwBVAEEAUABRAEEAaQBBAEcATQBBAGIAdwBCAHMAQQBDAEkAQQBQAGcAQgBoAEEARwAwAEEAYgB3AEIAMQBBAEcANABBAGQAQQBBAGcAQQBHAEUAQQBjAHcAQQBnAEEARwA0AEEAZABRAEIAdABBAEcAVQBBAGMAZwBCAGgAQQBHAHcAQQBQAEEAQQB2AEEASABRAEEAYQBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEAYQB3AEIAcABBAEcAdwBBAGIAdwBBAHQAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBkAEEAQgBvAEEARwA4AEEAZABRAEIAegBBAEcARQBBAGIAZwBCAGsAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBNAFEAQQBzAEEARABBAEEATQBBAEEAdwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBHADAAQQBaAFEAQgBuAEEARwBFAEEATABRAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEcAMABBAGEAUQBCAHMAQQBHAHcAQQBhAFEAQgB2AEEARwA0AEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAeABBAEMAdwBBAE0AQQBBAHcAQQBEAEEAQQBMAEEAQQB3AEEARABBAEEATQBBAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBCAG4AQQBHAGsAQQBaAHcAQgBoAEEAQwAwAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEIAaQBBAEcAawBBAGIAQQBCAHMAQQBHAGsAQQBiAHcAQgB1AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEATQBRAEEAcwBBAEQAQQBBAE0AQQBBAHcAQQBDAHcAQQBNAEEAQQB3AEEARABBAEEATABBAEEAdwBBAEQAQQBBAE0AQQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQgAwAEEARwBVAEEAYwBnAEIAaABBAEMAMABBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBCADAAQQBIAEkAQQBhAFEAQgBzAEEARwB3AEEAYQBRAEIAdgBBAEcANABBAFAAQQBCAGkAQQBIAEkAQQBJAEEAQQB2AEEARAA0AEEAUABBAEIAegBBAEcAMABBAFkAUQBCAHMAQQBHAHcAQQBQAGcAQQBvAEEARwBFAEEASQBBAEIAdABBAEcAawBBAGIAQQBCAHMAQQBHAGsAQQBiAHcAQgB1AEEAQwBBAEEAYgBRAEIAcABBAEcAdwBBAGIAQQBCAHAAQQBHADgAQQBiAGcAQQBwAEEARAB3AEEATAB3AEIAegBBAEcAMABBAFkAUQBCAHMAQQBHAHcAQQBQAGcAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARABFAEEATABBAEEAdwBBAEQAQQBBAE0AQQBBAHMAQQBEAEEAQQBNAEEAQQB3AEEAQwB3AEEATQBBAEEAdwBBAEQAQQBBAEwAQQBBAHcAQQBEAEEAQQBNAEEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEIAdwBBAEcAVQBBAGQAQQBCAGgAQQBDADAAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQgB4AEEASABVAEEAWQBRAEIAawBBAEgASQBBAGEAUQBCAHMAQQBHAHcAQQBhAFEAQgB2AEEARwA0AEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAeABBAEMAdwBBAE0AQQBBAHcAQQBEAEEAQQBMAEEAQQB3AEEARABBAEEATQBBAEEAcwBBAEQAQQBBAE0AQQBBAHcAQQBDAHcAQQBNAEEAQQB3AEEARABBAEEATABBAEEAdwBBAEQAQQBBAE0AQQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQgBsAEEASABnAEEAWQBRAEEAdABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAGMAUQBCADEAQQBHAGsAQQBiAGcAQgAwAEEARwBrAEEAYgBBAEIAcwBBAEcAawBBAGIAdwBCAHUAQQBEAHcAQQBZAGcAQgB5AEEAQwBBAEEATAB3AEEAKwBBAEQAdwBBAGMAdwBCAHQAQQBHAEUAQQBiAEEAQgBzAEEARAA0AEEASwBBAEIAaABBAEMAQQBBAFkAZwBCAHAAQQBHAHcAQQBiAEEAQgBwAEEARwA4AEEAYgBnAEEAZwBBAEcASQBBAGEAUQBCAHMAQQBHAHcAQQBhAFEAQgB2AEEARwA0AEEASwBRAEEAOABBAEMAOABBAGMAdwBCAHQAQQBHAEUAQQBiAEEAQgBzAEEARAA0AEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAeABBAEMAdwBBAE0AQQBBAHcAQQBEAEEAQQBMAEEAQQB3AEEARABBAEEATQBBAEEAcwBBAEQAQQBBAE0AQQBBAHcAQQBDAHcAQQBNAEEAQQB3AEEARABBAEEATABBAEEAdwBBAEQAQQBBAE0AQQBBAHMAQQBEAEEAQQBNAEEAQQB3AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEAUABnAEEAPQAKAHMAdQBmAGYAaQB4ADoA:31b8e172-b470-440e-83d8-e6b185028602\nDigits for groupings smaller than one (fractions) have metric prefixes too:\n31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATwBBAEEAeQBBAEQAQQBBAE0AdwBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEcASQBBAGUAUQBCADAAQQBHAFUAQQBJAEEAQgBwAEEARwA0AEEAWgBBAEIAbABBAEcANABBAGQAQQBBAGkAQQBDAEEAQQBkAHcAQgBwAEEARwBRAEEAZABBAEIAbwBBAEQAMABBAEkAZwBBADIAQQBEAEEAQQBNAEEAQgB3AEEASABnAEEASQBnAEEAZwBBAEgATQBBAGQAUQBCAHQAQQBHADAAQQBZAFEAQgB5AEEASABrAEEAUABRAEEAaQBBAEgAUQBBAFkAUQBCAGkAQQBHAHcAQQBaAFEAQQBnAEEARwA4AEEAWgBnAEEAZwBBAEcAWQBBAGMAZwBCAGgAQQBHAE0AQQBkAEEAQgBwAEEARwA4AEEAYgBnAEIAaABBAEcAdwBBAEkAQQBCAHUAQQBIAFUAQQBiAFEAQgBpAEEARwBVAEEAYwBnAEEAZwBBAEgAQQBBAGMAZwBCAGwAQQBHAFkAQQBhAFEAQgA0AEEARwBVAEEAYwB3AEEAaQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAZwBBAEkAQQBCAHoAQQBHAE0AQQBiAHcAQgB3AEEARwBVAEEAUABRAEEAaQBBAEcATQBBAGIAdwBCAHMAQQBDAEkAQQBQAGcAQgB3AEEASABJAEEAWgBRAEIAbQBBAEcAawBBAGUAQQBBADgAQQBDADgAQQBkAEEAQgBvAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGEAQQBBAGcAQQBIAE0AQQBZAHcAQgB2AEEASABBAEEAWgBRAEEAOQBBAEMASQBBAFkAdwBCAHYAQQBHAHcAQQBJAGcAQQArAEEARwBFAEEAYgBRAEIAdgBBAEgAVQBBAGIAZwBCADAAQQBEAHcAQQBMAHcAQgAwAEEARwBnAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAG8AQQBDAEEAQQBjAHcAQgBqAEEARwA4AEEAYwBBAEIAbABBAEQAMABBAEkAZwBCAGoAQQBHADgAQQBiAEEAQQBpAEEARAA0AEEAWQBRAEIAdABBAEcAOABBAGQAUQBCAHUAQQBIAFEAQQBJAEEAQgBoAEEASABNAEEASQBBAEIAbQBBAEgASQBBAFkAUQBCAGoAQQBIAFEAQQBhAFEAQgB2AEEARwA0AEEAUABBAEEAdgBBAEgAUQBBAGEAQQBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAGIAUQBCAHAAQQBHAHcAQQBiAEEAQgBwAEEAQwAwAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEIAMABBAEcAZwBBAGIAdwBCADEAQQBIAE0AQQBZAFEAQgB1AEEARwBRAEEAZABBAEIAbwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAE0AUQBBAHYAQQBEAEUAQQBMAEEAQQB3AEEARABBAEEATQBBAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBCAHQAQQBHAGsAQQBZAHcAQgB5AEEARwA4AEEATABRAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEcAMABBAGEAUQBCAHMAQQBHAHcAQQBhAFEAQgB2AEEARwA0AEEAZABBAEIAbwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAE0AUQBBAHYAQQBEAEUAQQBMAEEAQQB3AEEARABBAEEATQBBAEEAcwBBAEQAQQBBAE0AQQBBAHcAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARwA0AEEAWQBRAEIAdQBBAEcAOABBAEwAUQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBHAEkAQQBhAFEAQgBzAEEARwB3AEEAYQBRAEIAdgBBAEcANABBAGQAQQBCAG8AQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBNAFEAQQB2AEEARABFAEEATABBAEEAdwBBAEQAQQBBAE0AQQBBAHMAQQBEAEEAQQBNAEEAQQB3AEEAQwB3AEEATQBBAEEAdwBBAEQAQQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBjAEEAQgBwAEEARwBNAEEAYgB3AEEAdABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAGQAQQBCAHkAQQBHAGsAQQBiAEEAQgBzAEEARwBrAEEAYgB3AEIAdQBBAEgAUQBBAGEAQQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAEUAQQBMAHcAQQB4AEEAQwB3AEEATQBBAEEAdwBBAEQAQQBBAEwAQQBBAHcAQQBEAEEAQQBNAEEAQQBzAEEARABBAEEATQBBAEEAdwBBAEMAdwBBAE0AQQBBAHcAQQBEAEEAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEAWgBnAEIAbABBAEcAMABBAGQAQQBCAHYAQQBDADAAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQgB4AEEASABVAEEAWQBRAEIAawBBAEgASQBBAGEAUQBCAHMAQQBHAHcAQQBhAFEAQgB2AEEARwA0AEEAZABBAEIAbwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAE0AUQBBAHYAQQBEAEUAQQBMAEEAQQB3AEEARABBAEEATQBBAEEAcwBBAEQAQQBBAE0AQQBBAHcAQQBDAHcAQQBNAEEAQQB3AEEARABBAEEATABBAEEAdwBBAEQAQQBBAE0AQQBBAHMAQQBEAEEAQQBNAEEAQQB3AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEcARQBBAGQAQQBCADAAQQBHADgAQQBMAFEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEASABFAEEAZABRAEIAcABBAEcANABBAGQAQQBCAHAAQQBHAHcAQQBiAEEAQgBwAEEARwA4AEEAYgBnAEIAMABBAEcAZwBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBAHgAQQBDADgAQQBNAFEAQQBzAEEARABBAEEATQBBAEEAdwBBAEMAdwBBAE0AQQBBAHcAQQBEAEEAQQBMAEEAQQB3AEEARABBAEEATQBBAEEAcwBBAEQAQQBBAE0AQQBBAHcAQQBDAHcAQQBNAEEAQQB3AEEARABBAEEATABBAEEAdwBBAEQAQQBBAE0AQQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAaABBAEcASQBBAGIAQQBCAGwAQQBEADQAQQAKAHMAdQBmAGYAaQB4ADoA:31b8e172-b470-440e-83d8-e6b185028602 The fractional names are used to measure times in the computer, such as a nanosecond memory access time, or distances between wires on a chip, which are measured in nanometers.\n\n\n\n\nDAT-1.A.6\n\n“Binary sequence” is a very broad category, and often, several layers of abstraction are built on it. For example, you can include a picture in an email or text message, in which case, the message includes a picture, which is a kind of file, which is a kind of binary sequence.\n::: {#first .forYouToDo}\n\n\n\nIt’s unclear what to do here. It might be better to give them some strings to translate. –MF, 6/1/20\nBrian has more or less convinced Mary to change the block names from “convert decimal to binary” to “convert number to binary” and vice versa AND they both agreed to drop the recursion inside the convert number to binary block. The starter project, solutions, and references to it in the page will all need edits. We haven’t decided if changes are needed on the Binary Representation page. –MF, 6/5/20\n\n\nTake a look at these 3 custom blocks that you will use to explore binary sequences:\n\n\nA reporter that accepts a string of text as input and translates that text into a binary sequence: \n\n\nA reporter that accepts a binary sequence as input and translates it into text: \n\n\n\nYou can use the second and third inputs to control where the block breaks the sequence to start a new line and also how large the image is drawn.\n\nA command block that accepts a binary sequence as input and draws a black and white image on the stage where each 0 in the sequence becomes a white “pixel” and each 1 becomes a black “pixel.”  \n\n\n\n\nTranslate a short text string into a binary sequence.\n\n\nThe quotes tell Snap! that the binary sequence should be saved “as is.” Without some text at the beginning, Snap! will think your binary sequence is a number, and it would remove any zeros at the front, which would change the interpretation of where each byte begins and ends.\n\n\nFind the set (output) to... instruction and change the input text to a short text string of your choosing. The reported binary sequence will be stored in the output variable with quotes around it. \n\n\nAccess the output by right-clicking (or control-clicking) on the OUTPUT watcher on the stage and choosing “export…” The binary sequence will download as a text file. Copy the binary sequence out of the file, but not the quotes. \n\n\n\n\nEven Snap! has bugs. When you paste this data into Snap!, it may extend beyond the edges of the box. Developers are working to fix this. \n\n\nPaste the outputted binary sequence into the translate binary sequence to text block and run it. (It may take a moment to report.)\n\n\nIs your original text reported back? (If not, you may have included the quotes or lost a bit or two while copying.)\n\n\nOnce you’ve gotten your original text to report back, try making some changes.\n\n\nWhat happens if you change one bit?\n\n\nWhat happens if you add a bit somewhere in the middle of the sequence?\n\n\nWhat happens if you add a bit at the beginning?\n\n\n\n\n\n\nDAT-1.A\n\n\nGo back to the exported output.txt file and copy your original binary sequence again (without the quotes). Paste it into the translate binary sequence to B&W image block and run the block. You are not likely to see anything meaningful. Why not?\n\n\nTry this binary sequence in translate binary sequence to B&W image with the second input set to 14 pixels wide:\n\n00000110000000000001000110000000010000000000001100100110000011111111000001100111100000010010110011000111001111100000100110110000000001000000000000110000000000111000000011000100011000010000000100000110000110000000111111000000`\nYou see should something like the BJC logo: \n\n\nDAT-1.A\n\n\nWhat do you get if you translate that same binary sequence into text? Why?\n\n\n:::\n\nDAT-1.A.8, DAT-1.A.9, DAT-1.A.10\n\n\nAnalog data have values that change smoothly, unlike digital data which change in discrete intervals.\nSampling means measuring values, called samples, of an analog signal at regular intervals.\nThe sampling rate is the number of samples measured per second.\n\nNot all data are naturally digital. (That is, they may not be individual values that can be represented in the form of binary sequences.) Some real-world values (such as the pitch and volume of music, the colors of a painting, or the position of a sprinter during a race) change smoothly over time or position; they are analog. When analog data are encoded digitally (as bits on a computer), their values are approximated. This is an example of abstraction. The continuously changing air pressure of a sound, for example, is sampled (measured) thousands of times a second, and the samples are stored as bits.\n\nMore examples, please.\n\nA text is a finite number of characters, each of which comes from a finite alphabet. So a book without pictures is naturally digital. When a piece of music is written down, there are a finite number of possible notes, so there’s a finite “alphabet” of symbols such as ♫ or 𝄢, and the piece of music uses only finitely many of them. So the score, the written notation for the music, is naturally digital. But the actual sound of words being read or music being played includes much more information (such as they way someone says the words, their accent, or the way each instrument sounds). So speech and musical performance are not naturally digital.\n\n\n\nSo if pictures, music, and words all look the same in memory—all binary sequences—how can the computer tell what any chunk of memory actually is? For example, should the sequence 01000001 be interpreted as the number 65, the letter A, a rather dark shade of red, or something else?\n\nDAT-1.A.7\n\nThe meaning of a sequence of bits depends on the context in which it is used. What exactly do we mean by “context”? How does a programming language know whether to interpret a bit sequence as an integer, a picture, a string of characters, an instruction, or something else? There’s always another bit sequence somewhere that encodes the data type of the bit sequence.\n\n\nAAP-1.A.3 first sentence\n\nBut different languages use data types differently. In high-level languages, that data type code is attached to the value itself. In lower-level languages, when you make a variable, you have to say what type of value it will contain, and the data type is attached to the variable, so you can’t get exact answers when the values are integers and also be able to handle non-integer values of the same variable. So instead of seeing   you see things like \n\nAAP-1.A.4\n\nSnap! has strengths that many programming languages do not, and it’s very likely that your next year’s computer science class will use one of those other languages. If that’s the case, you’ll have to make sure that the data type you declare for a variable matches what you are going to put in it.\n\n\n\nThis question is similar to those you will see on the AP CSP exam. \n\n\nA particular online retail company uses 9-bit binary sequences to identify each unique product for sale. Expecting to increase the number of products it sells, the company is planning to switch to 10-bit binary sequences. Which of the statements below best describes the consequence of using 10-bit sequences instead of 9-bit sequences?\n\n\n\nTwo more products can be identified uniquely.\n\n\nCompute how many products can be identified before and after the change.\n\n\n\n\nTen more products can be identified uniquely.\n\n\nCompute how many products can be identified before and after the change.\n\n\n\n\nTwice as many products can be identified uniquely.\n\n\nCorrect. Before 29=512 products could identified and now 210=1024 products can be identified.\n\n\n\n\nTen times as many products can be identified uniquely.\n\n\nCompute how many products can be identified before and after the change.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLook inside the translate text to binary sequence and translate binary sequence to text reporters. Describe how these two reporters work. There are several custom blocks inside:\n\n\npack 8-bit byte takes a binary sequence of 8 bits or less and add enough zeros to the front to make a whole byte. How is this used?\n\n\ntranslate text to Unicode list takes a text string and outputs a list of each character’s Unicode value. Why is a list output helpful here?"
  },
  {
    "objectID": "unit-4/lab-4/3-representing-numbers.html",
    "href": "unit-4/lab-4/3-representing-numbers.html",
    "title": "Page 3: Representing Whole Numbers",
    "section": "",
    "text": "BH: Keep… But with my original wording in TIF A.\nMF: lightly clean up to make the text more concise; do we really need to teach width and word??\n\n\nOn this page, you’ll learn how computers store nonnegative integers.\n\nAs you know, numbers show up everywhere in computer algorithms—even if numbers aren’t the topic. For example, the user may be interested in a picture, but that picture is an abstraction over numbers. Numbers are also used to find a specific item in a list. Over the next several pages, you’ll look more closely at numbers inside the computer.\n\n\n\n\nThey have now built factorial in 2.4.1, so this page should either give them a project with ONLY big nums and ask them to import ! or it should ask them to open their U2 Math project and then download and import bignums. –MF, 6/13/19\n\n\nIf you look at the code, you’ll see that it’s a recursive reporter. How does it work? You first saw recursion on Unit 3 Lab 1 Page 2: Fractal Art.\n\n**** The factorial of a positive integer \\(n\\) (written “\\(n!\\)”) is the product of all the integers from 1 to \\(n\\). For example:\n\\[5! = 1 \\times 2 \\times 3 \\times 4 \\times 5 = 120\\]\n Try out these inputs:\n\nYou might see different results depending on your computer’s processor.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis yellowbox had been a stray single line of white text after the FYTD and before the next heading. I think this is better. –MF, 5/31/20\n\n\nThe e+ means “times ten to the power of” so this notation means \\(2.6525285981219103 \\times 10^{32}\\) \\(= 265,252,859,812,191,030,000,000,000,000,000\\).\n\n\n\n\n\n\nFixed Width Computer Hardware\n\n\nwidth: the number of bits that a CPU processes at a time\nword: a binary sequence of that many bits\n\nSo why did Snap! display 20! in ordinary whole number representation but 30! in scientific notation? Every computer model is designed with a certain** width, the number of bits that the processor reads from memory or writes into memory at a time. That number of bits is called a word**. As of 2016, most new computers are 64 bits wide. The first microcomputer, sold in 1971, was four bits wide!\n\nIf you got an answer in scientific notation for 20!, you’re using a 32-bit computer.\n\n\nDAT-1.B.1\n\nA 64-bit word represents 264 different values. We use half for negative numbers, one for zero, and the rest for positives. Half of 264 (which is 263 = 9,223,372,036,854,775,808) is about 9 × 1018. That means that the 19 digits of 20! just barely fit in a 64-bit word. But the 33 digits of 30! don’t. So the computer hardware reports an overflow error, and Snap! computes an approximation.\n\nAre processor widths always powers of two?\n\nProcessor widths don’t have to be a power of two. Some old computers—the kind you see in old movies that filled a large room—used 12-bit, 36-bit, and 60-bit words. But modern personal computers started at 8 bits and the widths have been doubling with each new generation.\n\n\n\n\n\nExperiment in Snap!. What’s the first integer whose factorial doesn’t fit in a word?\n\n\n\n\nBignums\n\n\nA multiple-word integer is called a bignum.\n\n\nDAT-1.B.2\n\nWhy can’t programming languages just use more than one word to represent an integer? They can. It’s just that a single machine language instruction can only add one-word numbers. A programming language must work a little harder to make addition work with multiple-word values. Not all languages do this, but the highest-level languages do.\n\n\n\n\nA great example of a high-level programming language is Scheme. You can learn it from the free, online book Structure and Interpretation of Computer Programs.\n\n\n\n\nThe design of a programming language isn’t just a question of taste; it can be a matter of life and death. Between 1985 and 1987, a therapeutic X-ray machine killed four patients and seriously injured two more because of several bugs in its software; one of the bugs was that a counter that was kept in an eight-bit-wide variable would reach its maximum value of 127 and then overflow to zero instead of 128. When the variable was zero, an important safety check was not performed. This would not have happened if the software had been written in a better programming language.\n\n\n\n\nYou can use bignums in any Snap! project by importing the “Bignums, exact rationals, complex #s” library.\n\nYou learned to import libraries on the Libraries page.\nThey did not. –MF, 6/13/19\n\n\n\nClick on this block in the scripting area: \n\n\nNow try 30! again. \n\nThis (exactly correct) value is different from the (rounded off) floating point value above. (More about floating point in a moment.)\n\n\n\nTry 200!. The reported result won’t fit on your screen, but you can see it this way:\n\n\nHold down the control key and click the  block.\n\n\nIn the menu that appears, choose “result pic.”\n\n\nAn image will download onto your computer or open in a new tab. You should be able to zoom in on it to read the digits.\n\n\n\nPlease remind me again why this is worth doing. It feels clunky after a whole page of super abstract and ungrounded (i.e., “I can forget this as soon as the test is over”) stuff that I only need to learn “because the teacher said so.” –MF, 5/31/20It’s much less clunky now. And the point is to demonstrate that there’s no good excuse for any programming language to give approximate results to integer computations. -bh\n\n\n\nHow many digits are there in 200!? (Don’t count by hand; you have a computer.)"
  },
  {
    "objectID": "unit-4/lab-4/4-floating-point.html",
    "href": "unit-4/lab-4/4-floating-point.html",
    "title": "Page 4: Floating Point",
    "section": "",
    "text": "BH: Keep… But promote TIF A to a FYTD.\nMF: lightly clean up to make the text more concise; do we really need to teach to this depth?\n\n\nDo we really need to teach this content to this depth? I think we could do justice to these ideas without as much text and detail. –MF, 9/26/18\n\n\nOn this page, you’ll learn how computers store numbers that are not integers.\n\nThe way computers store numbers that are not integers is called floating point.\n\nScientific notation (such as 2,350,000 = 2.35 × 106) uses powers of ten to represent very large or very small values. Floating point is the same idea but with powers of two.\n\n\nWhere did that funny name come from?\n\nThis non-obvious name is used because there used to be a fixed point non-integer notation with a fixed number of digits after the decimal point. For example, a fixed point notation with two digits after the decimal point was used to represent an amount of money in dollars and cents: $82.47. But today’s computers always use floating point for non-integer values.\n\n\n\nAAP-1.A.4\n\nIn Snap!, you can store any data type in a variable (number, text string, list, costume, quiz item, etc.). But in some languages, you have to declare what kind of data your variables will store. If you have a collection of values, it’s obvious that you’ll need a list to store it. But it’s not always obvious how best to represent a value in a computer program. For example, the most straightforward way to represent an amount of money is in floating point because it allows for decimals. But if you use floating point to store a value like 3.20, it’s likely to be displayed to the user as 3.2, and people rarely write money this way. Instead, even though it’s more programming effort, you might choose to create an abstract data type money, dollars: ( ) cents: ( ) with two integer inputs so that you can control how the value is displayed.\n\n\nDAT-1.B.3\n\nFloating point allows computers to store very large numbers and also decimals, but the format still has a specific number of bits, and that limits the range of floating point values and mathematical operations just as with integers. However with floating point, values that exceed the limitation may result in round off errors instead.\n\n\n\n\nFor example, try once with bignums on and once with bignums off.\n\n\n\nThe decimal representation of ⅓ is 0.33333… It has infinitely many digits, so the closest you can come in floating point isn’t exactly ⅓; it gets cut off after a while because your computer doesn’t have enough memory.\nRoundoff errors can result in some pretty non-intuitive results…\n\n\n\nTry  and then try .\n\n\n\nThis isn’t a bug in Snap!, which is correctly reporting the result computed by the floating point hardware.\n\nHow can such simple computations get wrong results?\n\nThese results seem surprising because a fractional value such as 0.2 can be represented exactly in decimal (unlike the example of ⅓). But in binary, only fractions whose denominator is a power of 2 can be represented exactly. So 2/16 can be represented exactly, but 2/10 can’t. The binary floating point representation of 0.2 is just slightly too big, and so is the binary representation of 0.4. Adding two slightly-too-big values produces an error big enough to get to the next higher representable value.\n\n\nNo matter how good the hardware is, certain kinds of computations are likely to give severe errors in floating point. One simple example is subtracting two numbers that are almost equal in value. The correct answer will be near zero, and if it’s near enough, it will underflow and an exact zero might be reported.\n\nFloating point errors can be very expensive and can even kill people.\n\n\nBrian wants to add links to these references. –MF, 10/16/19\n\nA notorious example is the fate of the Ariane rocket launched on June 4, 1996 (European Space Agency 1996). In the 37th second of flight, the inertial reference system attempted to convert a 64-bit floating-point number to a 16-bit number, but instead triggered an overflow error which was interpreted by the guidance system as flight data, causing the rocket to veer off course and be destroyed.\nThe Patriot missile defense system used during the Gulf War was also rendered ineffective due to roundoff error (Skeel 1992, U.S. GAO 1992). The system used an integer timing register which was incremented at intervals of 0.1 s. However, the integers were converted to decimal numbers by multiplying by the binary approximation of 0.1, 0.000110011001100110011002 = 209715/2097152.\nAs a result, after 100 hours (3.6 × 106 ticks), an error of \\[(\\frac{1}{10}-\\frac{209715}{2097152})(3600\\times100\\times10)=\\frac{5625}{16384}\n\\approx 0.3433 \\text{ seconds}\\] had accumulated. This discrepancy caused the Patriot system to continuously recycle itself instead of targeting properly. As a result, an Iraqi Scud missile could not be targeted and was allowed to detonate on a barracks, killing 28 people.\nFrom Analog and Digital Conversion, by Wikibooks contributors, https://en.wikibooks.org/wiki/Analog_and_Digital_Conversion/Fixed_Wordlength_Effects\n\n\nComputer arithmetic on integers is straightforward. Either you get an exactly correct integer result or, if the result won’t fit in (non-bignum) integer representation, you get an overflow error and the result is, usually, converted to floating point representation (as 30! was).\nBy contrast, computer arithmetic on floating point numbers is hard to get exactly right. Prior to 1985, every model of computer had a slightly different floating point format, and all of them got wrong answers to certain problems. This situation was resolved by the IEEE 754 floating point standard, which is now used by every computer manufacturer and has been improved several times since it was created in 1985.\n\nThere are alternatives to floating point.\n\nIf the subtle errors in floating point computation turn out to be unacceptable in a particular application, software can use alternative representations:\n\n\nExact rationals. Two bignums, one for the numerator and one for the denominator, can be used to represent any fractional value exactly.\n\n\nBinary coded decimal. A decimal digit can be represented in four bits, with a few four-bit combinations left over for a minus sign and a decimal point. A sequence of decimal digits of any length can be used to create decimal bignums, representing exactly any fractional value that takes a finite number of decimal digits. This would avoid the 0.2+0.4 problem, but wouldn’t work for problems involving ⅓.\n\n\nDecimal floating point. If the binary coded decimal notation is extended with a four-bit code for “times ten to the power,” numbers in (base 10) scientific notation can be represented exactly.\n\n\n\n\nWith bignums turned off, when a result is too large to be an integer, it is converted to floating point. \n\n\n\nTry 200! again with bignums off. \n\n\n\nWhat’s going on? Although 200! is very large, it’s not “infinity.” This report is caused by the size limitation of the floating point format. If the result of a computation is bigger than than the range of numbers that can be stored, then the computer returns a special code that languages print as Infinity or ∞.\n\nIn floating point, there are special codes for infinity, –infinity (smaller than any finite value), and “Not a Number,” which is the notification used for illegal computations such as 0/0. \n\n\n\n\nImagine a decimal floating point representation with one significant digit, and a range of exponents from 10-2 to 102. The smallest positive number representable in this notation is 0.01 (1×10-2) and the largest is 900 (9×102). Sketch a number line from 0 to 1000 and mark all of the positive values representable in this notation. What can you say about the spacing of values? How many fractional values are representable? How many integer values less than 1000 are not representable? What are the strengths and weaknesses of this choice of representable values? (Real floating point has many more representable values, of course, but the way they’re spaced on the number line is similar to this.)\n\n\n\nHow does a programming language know whether to interpret a bit sequence as an integer, a floating point, a text string of Unicode characters, an instruction, or something else?\nProgramming languages differ in how they do this, but there’s always some extra bit sequence that encodes the data type of any sequence of bits that tells the computer how to interpret it.\n\nAt the lowest level of software abstraction, everything in a computer is represented as a binary sequence. For example:\n\n\nA Boolean value is a single bit, 0 for false and 1 for true.\n\n\nA text string is a sequence of Unicode character codes, each of which is stored as a separate integer.\n\n\nLists and blocks are binary sequences too.\n\n\n\n\nBut different languages use data types differently.\n\nIn well-designed languages (those based on Scheme, for example), that data type code is attached to the value itself. In other languages, when you make a variable, you have to say what type of value it will contain, and the data type is attached to the variable, so you can’t both get exact answers when the values are integers and also be able to handle non-integer values of the same variable. So instead of seeing:  you see things like:  In a language with dynamic typing (where you don’t have to declare the types of variables) it’s just as easy to make a list whose items are of different data types as it is to make one whose items are all the same type (all integers or all character strings, etc.)\nSnap! has strengths that many programming languages do not, and it’s very likely that your next computer science class will use one of those other languages.\n\n\n\n\n\n\nDAT-1.B\n\nWhat are some consequences of using a fixed number of bits to represent numbers?"
  },
  {
    "objectID": "unit-4/lab-4/5-binary.html",
    "href": "unit-4/lab-4/5-binary.html",
    "title": "Page 5: Binary Representation",
    "section": "",
    "text": "We’ve looked at how the number of bits used to represent an integer affects how big it can be. Now we turn to the specific way a single-word integer is encoded as bits.\n\n: Bit\n\nDAT-1.A.3\n\nThe word “bit” is an abbreviation for binary digit.\n\n\nDAT-1.C.1\n\nPeople generally use base ten (decimal) digits to write numbers. Computers use base two (binary).\n\nDAT-1.C.3\n\nIn base 10, there are ten digits (0-9), and each place is worth ten times as much as the place to its right.  \n\nDAT-1.C.2\n\nIn binary, base 2, there are only two digits (0 and 1), and each place is worth two times the place to its right. \n\nThe subscript 2 on 11012 means the 1101 is in base 2. Numbers are normally written in base 10, so a subscript 10 is only used when needed for clarity.\n\n\nReading Binary\n\n\nDAT-1.C.5\n\nIn base 10 notation, each place value represents a power of ten: the units place (100 = 1), the tens place (101 = 10), the hundreds place (102 = 100), the thousands place (103 = 1000), etc. So, for example:\n9827   =   9 × 103  +  8 × 102  +  2 × 101  +  7 × 100\n\nDAT-1.C.4\n\n Base 2 uses the same idea but with powers of two instead of powers of ten. Binary place values represent the units place (20 = 1), the twos place (21 = 2), the fours place (22 = 4), the eights place (23 = 8), the sixteens place (24 = 16), etc. So, for example:\n\n100102   =   1 × 24  +  0 × 23  +  0 × 22  +  1 × 21  +  0 × 20   =   16  +  2   =   1810\n\nTo translate from binary (for example, 1011012) to base 10, first, write the number out on paper. Then write out the binary place values by doubling left from the units place:\n\n1011012 has only six digits, so we don’t need powers of two to the left of that.\n\n31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQB3AEEAMgBBAEQAVQBBAE0AZwBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEcASQBBAGUAUQBCADAAQQBHAFUAQQBJAEEAQgBwAEEARwA0AEEAWgBBAEIAbABBAEcANABBAGQAQQBBAGkAQQBDAEEAQQBjAHcAQgAxAEEARwAwAEEAYgBRAEIAaABBAEgASQBBAGUAUQBBADkAQQBDAEkAQQBkAEEAQgB5AEEARwBFAEEAYgBnAEIAegBBAEcAdwBBAFkAUQBCADAAQQBHAGsAQQBiAHcAQgB1AEEAQwBBAEEAYwBBAEIAeQBBAEcAOABBAFkAdwBCAGwAQQBIAE0AQQBjAHcAQQBnAEEARwBZAEEAYwBnAEIAdgBBAEcAMABBAEkAQQBCAGkAQQBHAGsAQQBiAGcAQgBoAEEASABJAEEAZQBRAEEAZwBBAEgAUQBBAGIAdwBBAGcAQQBHAEkAQQBZAFEAQgB6AEEARwBVAEEASQBBAEEAeABBAEQAQQBBAEkAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAG8AQQBDAEEAQQBjAHcAQgBqAEEARwA4AEEAYwBBAEIAbABBAEQAMABBAEkAZwBCAGoAQQBHADgAQQBiAEEAQQBpAEEARAA0AEEATQBRAEEAOABBAEMAOABBAGQAQQBCAG8AQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYQBBAEEAZwBBAEgATQBBAFkAdwBCAHYAQQBIAEEAQQBaAFEAQQA5AEEAQwBJAEEAWQB3AEIAdgBBAEcAdwBBAEkAZwBBAGcAQQBIAE0AQQBkAEEAQgA1AEEARwB3AEEAWgBRAEEAOQBBAEMASQBBAFoAZwBCAHYAQQBHADQAQQBkAEEAQQB0AEEASABjAEEAWgBRAEIAcABBAEcAYwBBAGEAQQBCADAAQQBEAG8AQQBiAGcAQgB2AEEASABJAEEAYgBRAEIAaABBAEcAdwBBAE8AdwBBAGkAQQBEADQAQQBNAEEAQQA4AEEAQwA4AEEAZABBAEIAbwBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBhAEEAQQBnAEEASABNAEEAWQB3AEIAdgBBAEgAQQBBAFoAUQBBADkAQQBDAEkAQQBZAHcAQgB2AEEARwB3AEEASQBnAEEAKwBBAEQARQBBAFAAQQBBAHYAQQBIAFEAQQBhAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAZwBBAEkAQQBCAHoAQQBHAE0AQQBiAHcAQgB3AEEARwBVAEEAUABRAEEAaQBBAEcATQBBAGIAdwBCAHMAQQBDAEkAQQBQAGcAQQB4AEEARAB3AEEATAB3AEIAMABBAEcAZwBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBvAEEAQwBBAEEAYwB3AEIAagBBAEcAOABBAGMAQQBCAGwAQQBEADAAQQBJAGcAQgBqAEEARwA4AEEAYgBBAEEAaQBBAEMAQQBBAGMAdwBCADAAQQBIAGsAQQBiAEEAQgBsAEEARAAwAEEASQBnAEIAbQBBAEcAOABBAGIAZwBCADAAQQBDADAAQQBkAHcAQgBsAEEARwBrAEEAWgB3AEIAbwBBAEgAUQBBAE8AZwBCAHUAQQBHADgAQQBjAGcAQgB0AEEARwBFAEEAYgBBAEEANwBBAEMASQBBAFAAZwBBAHcAQQBEAHcAQQBMAHcAQgAwAEEARwBnAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAG8AQQBDAEEAQQBjAHcAQgBqAEEARwA4AEEAYwBBAEIAbABBAEQAMABBAEkAZwBCAGoAQQBHADgAQQBiAEEAQQBpAEEARAA0AEEATQBRAEEAOABBAEMAOABBAGQAQQBCAG8AQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBADgAQQBIAE0AQQBkAEEAQgB5AEEARwA4AEEAYgBnAEIAbgBBAEQANABBAE0AdwBBAHkAQQBEAHcAQQBMAHcAQgB6AEEASABRAEEAYwBnAEIAdgBBAEcANABBAFoAdwBBACsAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBNAFEAQQAyAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEAUABBAEIAegBBAEgAUQBBAGMAZwBCAHYAQQBHADQAQQBaAHcAQQArAEEARABnAEEAUABBAEEAdgBBAEgATQBBAGQAQQBCAHkAQQBHADgAQQBiAGcAQgBuAEEARAA0AEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAOABBAEgATQBBAGQAQQBCAHkAQQBHADgAQQBiAGcAQgBuAEEARAA0AEEATgBBAEEAOABBAEMAOABBAGMAdwBCADAAQQBIAEkAQQBiAHcAQgB1AEEARwBjAEEAUABnAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQASQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBADgAQQBIAE0AQQBkAEEAQgB5AEEARwA4AEEAYgBnAEIAbgBBAEQANABBAE0AUQBBADgAQQBDADgAQQBjAHcAQgAwAEEASABJAEEAYgB3AEIAdQBBAEcAYwBBAFAAZwBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBJAEEAQgBqAEEARwB3AEEAWQBRAEIAegBBAEgATQBBAFAAUQBBAGkAQQBHADQAQQBiAHcAQgBpAEEARwA4AEEAYwBnAEIAawBBAEcAVQBBAGMAZwBBAGkAQQBDAEEAQQBZAHcAQgB2AEEARwB3AEEAYwB3AEIAdwBBAEcARQBBAGIAZwBBADkAQQBDAEkAQQBOAGcAQQBpAEEARAA0AEEAQwBnAEEAOABBAEcAawBBAGIAUQBCAG4AQQBDAEEAQQBZAHcAQgBzAEEARwBFAEEAYwB3AEIAegBBAEQAMABBAEkAZwBCAHAAQQBHADQAQQBaAEEAQgBsAEEARwA0AEEAZABBAEEAZwBBAEcANABBAGIAdwBCAHoAQQBHAGcAQQBZAFEAQgBrAEEARwA4AEEAZAB3AEEAaQBBAEMAQQBBAGMAdwBCAHkAQQBHAE0AQQBQAFEAQQBpAEEAQwA4AEEAWQBnAEIAcQBBAEcATQBBAEwAUQBCAHkAQQBDADgAQQBhAFEAQgB0AEEARwBjAEEATAB3AEEANABBAEMAMABBAGMAZwBCAGwAQQBHAE0AQQBkAFEAQgB5AEEASABNAEEAYQBRAEIAMgBBAEcAVQBBAEwAUQBCAHkAQQBHAFUAQQBjAEEAQgB2AEEASABJAEEAZABBAEIAbABBAEgASQBBAGMAdwBBAHYAQQBIAEkAQQBMAFEAQgAwAEEARwA4AEEATABRAEIAcwBBAEMANABBAGMAQQBCAHUAQQBHAGMAQQBJAGcAQQBnAEEARwBFAEEAYgBBAEIAMABBAEQAMABBAEkAZwBCAHkAQQBHAGsAQQBaAHcAQgBvAEEASABRAEEATABRAEIAMABBAEcAOABBAEwAUQBCAHMAQQBHAFUAQQBaAGcAQgAwAEEAQwBBAEEAWQBRAEIAeQBBAEgASQBBAGIAdwBCADMAQQBDAEkAQQBJAEEAQgAwAEEARwBrAEEAZABBAEIAcwBBAEcAVQBBAFAAUQBBAGkAQQBIAEkAQQBhAFEAQgBuAEEARwBnAEEAZABBAEEAdABBAEgAUQBBAGIAdwBBAHQAQQBHAHcAQQBaAFEAQgBtAEEASABRAEEASQBBAEIAaABBAEgASQBBAGMAZwBCAHYAQQBIAGMAQQBJAGcAQQBnAEEAQwA4AEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAFAAZwBBAD0ACgBzAHUAZgBmAGkAeAA6AA==:31b8e172-b470-440e-83d8-e6b185028602\nThis means that this number is, in base 10, 32 + 8 + 4 + 1 = 45. So, 1011012 = 4510.\n\n\n\n\nDAT-1.C part a\n\n\nTranslate these binary representations into base 10 notation:\n\n\n1012\n\n\n1112\n\n\n10100112\n\n\n10000000002\n\n\n\n\n\n\nWriting Binary\n\n\nTo translate from base 10 (like 8910) to base 2, first write out the binary place values by doubling left from the units place until you get to a value larger than your number (128 for this example). Then think, “I can take out a 64, so I write a 1 there, and there’s 25 left (89 − 64). I have 0 thirty-twos, because I only have 25. But I can take out 16, and there’s 9 left. So, 8 and 1 are the last nonzero bits.\n\n\n\n\n1\n0\n1\n1\n0\n1\n\n\n**32**\n16\n**8**\n**4**\n2\n**1**\n\n\n\n\n\n\n\nI’m confused about why the arrow is going from right to left. Will that confuse students? Most of the work happens going left to right. Maybe there should be another arrow below the table that goes the other way… –MF, 2/12/18 It may be left over from when we were using the correct algorithm, which does go right to left. -bh\n\nNow, read the number off: 10110012 = 8910.\n\nHere’s a more precise description of this algorithm to find the base 2 representation of any positive integer:\n\n\nFirst, find the largest power of two that is less than the number.\n\n\nThen, subtract that power of 2 from the number, keep the new number, and record a 1 in the place for that power of 2.\n\n\n\nThen, determine if the next largest power of 2 that is less than the new number, and:\n\n\nIf it does, subtract that power of 2 from the number, keep the new number, and record a 1 in the place for that power of 2.\n\n\nIf it doesn’t, keep the same number, and record a 0 for that power of 2.\n\n\nRepeat this whole step with the next largest power of 2 until you have a bit (1 or 0) for all the remaining places down to and including the ones place (by which point you should have nothing left of the original number).\n\n\nThe string of ones and zeros you have recorded is the binary representation of your original number.\n\n\n\nDAT-1.C part a\n\n\nRepresent these base 10 numerals in binary (base 2):\n\n\n63\n\n\n64\n\n\n65\n\n\n129\n\n\n128\n\n\n127\n\n\n\n\n\nDAT-1.C part b\n\nPut these numbers in ascending order without converting them to decimal notation:\n\n\n10110012\n\n\n110012\n\n\n1000012\n\n\n1010112\n\n\n\n\nWhat was your algorithm for comparing these numbers?\n\n\nThis question is similar to those you will see on the AP CSP exam. \n\n\nA particular program uses 4 bits to represent whole numbers. When that program adds the numbers 9 and 7, the result is given as 0. Identify the best explanation of the result.\n\n\n\nData was corrupted during the operation due to a technical glitch.\n\n\nWhile data corruption is possible, it is not a likely explanation for the recurrence of the result as one can demonstrate with repeated attempts to add 9 and 7.\n\n\n\n\nThe result was due to a round-off error.\n\n\nThere is no rounding done here.\n\n\n\n\nThe result was due to an overflow error.\n\n\nCorrect. 9+7=16, which is beyond the capacity of 4 bits to express. 0=(0000)2 is the first and 15=(1111)2 is the last integer expressible in a 4-bit system. 16=(10000)2 leads to an overflow.\n\n\n\n\nA floating-point representation was used to approximate the result.\n\n\n0 is not an approximation of 16."
  },
  {
    "objectID": "unit-4/lab-4/6-compression.html",
    "href": "unit-4/lab-4/6-compression.html",
    "title": "Page 6: Data Compression",
    "section": "",
    "text": "On this page, you learn about different data compression algorithms.\n\n\nDAT-1.D.1\n\nThe size of data (the number of bits required to store it) affects the time it takes to send that data across the Internet. So, people use data compression algorithms to reduce the size of images, sounds, movies and some other kinds of data.\n\nDAT-1.D.3\n\nThe amount of size reduction depends on two things:\n\n\nthe amount of redundancy in the original data\n\n\nthe compression algorithm applied\n\n\nThere are two broad categories of data compression algorithms: lossless and lossy, depending on whether information is lost.\n\n: Lossless Compression\nLossless data compression algorithms (such as PNG) are reversible (there is no loss in quality); you can reconstruct the original data.\n\n\nDAT-1.D.4\n\nLossless compression works by removing redundant data. These algorithms can usually reduce the number of bits required to store or transmit the data while guaranteeing that the original data can be perfectly reconstructed.\n\nRun-length encoding is an example of lossless compression. Consider the 158 pixels in the top row of the BJC logo (at right). The first 60 pixels are white. Then come five pixels of yellowish orange (the top slice of the “b”). And the rest of that row is white.\n\n……\nInstead of storing all 158 pixels individually, we could compress them with run-length encoding and just store six values (three numbers and three colors):\n\n\n\n\n\n\n\npixel count\ncolor code\n\n\n\n\n60\nFFFFFF\n\n\n5\nE5A84A\n\n\n93\nFFFFFF\n\n\n\n\nDAT-1.D.2\n\nThose six values (60, FFFFFF, 5, E5A84A, 93, FFFFFF) can be reconstructed into that whole first row of the image (158 pixels). So, fewer bits does not necessarily mean less information.\n\n: Lossy Compression\nLossy data compression algorithms are not fully reversible; you can reconstruct only an approximation of the original data.\n\n\nDAT-1.D.5\n\nLossy Compression works by removing details that people aren’t likely to notice. The most commonly used lossy compression algorithm for pictures is called JPEG (or JPG, both pronounced “jay peg” for “Joint Photographic Experts Group,” the committee that invented it). JPEG works by preserving most of the brightness information for each pixel (since human eyes are sensitive to that) and performing a kind of averaging process to the color information (because human eyes aren’t as good at distinguishing color, especially colors close to white).\nBelow are an original, uncompressed picture of pebbles in a pond and a highly compressed JPEG of the same image. Can you tell which is which?  \nYou probably can tell which is which, especially if you looked for sharp edges or very shiny spots. But the compressed file uses 1/30th of the space used by the original, and you could still tell that it’s a picture of rocks. So, for many purposes the compressed version would be good enough. Lossy algorithms usually let you control the degree of precision, and generally, people select less extreme compression settings, so the compressed file looks much more like the original than this example.\n\nWhat size is this file when encoded in different formats?\n\nHere are the sizes of the pond pebbles picture in four different formats: 31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATgBBAEEANABBAEQAUQBBAE8AUQBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEcASQBBAGUAUQBCADAAQQBHAFUAQQBJAEEAQgBwAEEARwA0AEEAWgBBAEIAbABBAEcANABBAGQAQQBBAGkAQQBDAEEAQQBkAHcAQgBwAEEARwBRAEEAZABBAEIAbwBBAEQAMABBAEkAZwBBADEAQQBEAFkAQQBKAFEAQQBpAEEAQwBBAEEAYwB3AEIAMQBBAEcAMABBAGIAUQBCAGgAQQBIAEkAQQBlAFEAQQA5AEEAQwBJAEEAWQB3AEIAdgBBAEcAMABBAGMAQQBCAHkAQQBHAFUAQQBjAHcAQgB6AEEARwBrAEEAYgB3AEIAdQBBAEMAQQBBAFoAZwBCAGgAQQBHAE0AQQBkAEEAQgB2AEEASABJAEEAYwB3AEEAZwBBAEcAVQBBAGUAQQBCAGgAQQBHADAAQQBjAEEAQgBzAEEARwBVAEEASQBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAbwBBAEMAQQBBAGMAdwBCAGoAQQBHADgAQQBjAEEAQgBsAEEARAAwAEEASQBnAEIAagBBAEcAOABBAGIAQQBBAGkAQQBEADQAQQBaAGcAQgB2AEEASABJAEEAYgBRAEIAaABBAEgAUQBBAFAAQQBBAHYAQQBIAFEAQQBhAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAZwBBAEkAQQBCAHoAQQBHAE0AQQBiAHcAQgB3AEEARwBVAEEAUABRAEEAaQBBAEcATQBBAGIAdwBCAHMAQQBDAEkAQQBQAGcAQgB6AEEARwBrAEEAZQBnAEIAbABBAEQAdwBBAEwAdwBCADAAQQBHAGcAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBAGcAQQBIAE0AQQBkAEEAQgA1AEEARwB3AEEAWgBRAEEAOQBBAEMASQBBAGQAQQBCAGwAQQBIAGcAQQBkAEEAQQB0AEEARwBFAEEAYgBBAEIAcABBAEcAYwBBAGIAZwBBADYAQQBDAEEAQQBiAEEAQgBsAEEARwBZAEEAZABBAEEANwBBAEMASQBBAFAAZwBCAEMAQQBFADAAQQBVAEEAQQBnAEEARwBVAEEAYgBnAEIAagBBAEcAOABBAFoAQQBCAHAAQQBHADQAQQBaAHcAQQBnAEEARwBVAEEAZABnAEIAbABBAEgASQBBAGUAUQBBAGcAQQBIAEEAQQBhAFEAQgA0AEEARwBVAEEAYgBBAEEAZwBBAEcAawBBAGIAZwBCAGsAQQBHAGsAQQBkAGcAQgBwAEEARwBRAEEAZABRAEIAaABBAEcAdwBBAGIAQQBCADUAQQBDAEEAQQBLAEEAQgB6AEEARwBnAEEAYgB3AEIAMwBBAEcANABBAEkAQQBCAGgAQQBHAEkAQQBiAHcAQgAyAEEARwBVAEEASwBRAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQARQBBAE4AQQBBADQAQQBDAEEAQQBhAHcAQgBDAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAZwBBAEgATQBBAGQAQQBCADUAQQBHAHcAQQBaAFEAQQA5AEEAQwBJAEEAZABBAEIAbABBAEgAZwBBAGQAQQBBAHQAQQBHAEUAQQBiAEEAQgBwAEEARwBjAEEAYgBnAEEANgBBAEMAQQBBAGIAQQBCAGwAQQBHAFkAQQBkAEEAQQA3AEEAQwBJAEEAUABnAEIAUQBBAEUANABBAFIAdwBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAEUAQQBNAEEAQQAyAEEAQwBBAEEAYQB3AEIAQwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBAGcAQQBIAE0AQQBkAEEAQgA1AEEARwB3AEEAWgBRAEEAOQBBAEMASQBBAGQAQQBCAGwAQQBIAGcAQQBkAEEAQQB0AEEARwBFAEEAYgBBAEIAcABBAEcAYwBBAGIAZwBBADYAQQBDAEEAQQBiAEEAQgBsAEEARwBZAEEAZABBAEEANwBBAEMASQBBAFAAZwBCAEsAQQBGAEEAQQBSAFEAQgBIAEEAQwBBAEEAZAB3AEIAcABBAEgAUQBBAGEAQQBBAGcAQQBHAHcAQQBaAFEAQgBoAEEASABNAEEAZABBAEEAZwBBAEcATQBBAGIAdwBCAHQAQQBIAEEAQQBjAGcAQgBsAEEASABNAEEAYwB3AEIAcABBAEcAOABBAGIAZwBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAGsAQQBOAEEAQQBnAEEARwBzAEEAUQBnAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAEkAQQBCAHoAQQBIAFEAQQBlAFEAQgBzAEEARwBVAEEAUABRAEEAaQBBAEgAUQBBAFoAUQBCADQAQQBIAFEAQQBMAFEAQgBoAEEARwB3AEEAYQBRAEIAbgBBAEcANABBAE8AZwBBAGcAQQBHAHcAQQBaAFEAQgBtAEEASABRAEEATwB3AEEAaQBBAEQANABBAFMAZwBCAFEAQQBFAFUAQQBSAHcAQQBnAEEASABjAEEAYQBRAEIAMABBAEcAZwBBAEkAQQBCAHQAQQBHADgAQQBjAHcAQgAwAEEAQwBBAEEAWQB3AEIAdgBBAEcAMABBAGMAQQBCAHkAQQBHAFUAQQBjAHcAQgB6AEEARwBrAEEAYgB3AEIAdQBBAEMAQQBBAEsAQQBCAHoAQQBHAGcAQQBiAHcAQgAzAEEARwA0AEEASQBBAEIAaABBAEcASQBBAGIAdwBCADIAQQBHAFUAQQBLAFEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARABVAEEASQBBAEIAcgBBAEUASQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAWQBRAEIAaQBBAEcAdwBBAFoAUQBBACsAQQBBAD0APQAKAHMAdQBmAGYAaQB4ADoA:31b8e172-b470-440e-83d8-e6b185028602\n\n\nThe MP3 format, which you almost certainly use for portable music files, is a lossy compression format. It tends to emphasize high frequencies, so people accustomed to MP3 music find uncompressed versions of the same music boomy (bassy).\n\nWhich is best?\n\nBoth types of data compression exist because each is useful in certain circumstances:\n\n\nDAT-1.D.7\n\n\nLossless compression is a good choice when there are very sharp transitions between colors (such as in logos) or when it’s essential to be able to recreate original data precisely (such as the code for a program or the text of a book).\n\n\nDAT-1.D.6, DAT-1.D.8\n\n\nLossy compression is a good choice when the data does not require precision (such as images, sound, or movies, which people may not even notice have been compressed) and when reducing number of bits stored or transmitted is most important.\n\n\n\n\n\nThese questions are similar to those you will see on the AP CSP exam. \n\n\nA film student records a movie on his smartphone and then saves a copy on his computer. He notices that the saved copy is of much lower image quality than the original. Which of the following could NOT be a possible explanation for the lower image quality?\n\n\n\nThe movie was saved using fewer bits per second (a lower bit rate) than the original movie.\n\n\nThis is likely what happened. Which one could NOT be a possible explanation?\n\n\n\n\nThe copy of the movie file was somehow corrupted in the process of saving.\n\n\nThis is possible; however if the file is corrupted, it is unlikely to have a consistent negative impact on image quality.\n\n\n\n\nThe movie was saved using a lossy compression technique.\n\n\nThis is very likely. Which one could NOT be a possible explanation?\n\n\n\n\nWhenever a file is saved from one computer to another, some information is always lost.\n\n\nCorrect. It is possible to make exact duplicates of digital information without any loss.\n\n\n\n\n\n\n\n\n\n\n\nA visual artist is processing a digital image. Which of the following describe a lossless transformation from which the original image can be recovered? Choose two answers.\n\n\n\nCreating the negative of an image, where colors are reversed (dark areas appear light).\n\n\nCorrect. This transformation is reversible and is an example of a lossless transformation.\n\n\n\n\nBlurring the edges of an image.\n\n\nThe blurring blends colors at the edges of the image and once colors have blended it is impossible to retrieve the original RGB values of the pixels involved.\n\n\n\n\nCreating a grayscale copy of an image.\n\n\nThe grayscale of an image replaces each RGB value with their average and once the amounts of red, green, and blue have been averaged together, it is impossible to retrieve the original RGB values of the pixels.\n\n\n\n\nCreating a vertically flipped copy of the image.\n\n\nCorrect. This transformation is reversible and is an example of a lossless transformation.\n\n\n\n\n\n\n\n\n\n\n\n\n\nDAT-1.D\n\n\n\nFor which of the following kinds of data would lossy compression be okay? Check as many as apply.\n\n\n\nThe HTML code for this web page.\n\n\nWould you be happy if some of the words on the page disappeared?\n\n\n\n\nYour computer’s desktop picture.\n\n\nCorrect. The picture could have a few wrong pixels and would still look okay.\n\n\n\n\nA live-action movie on Netflix.\n\n\nCorrect. The movie could have a few corrupted frames and would still look okay.\n\n\n\n\nA cartoon on Netflix.\n\n\nActually, corrupted frames are more noticeable in a cartoon, which has solid areas separated by sharp edges. (Fortunately, using techniques such as run length encoding, it’s relatively easy to get a lossless, highly compressed version of a cartoon.)\n\n\n\n\nA digital book, to be read on a computer.\n\n\nDigital books aren’t stored as pictures, but as text. Any error will be noticeable, as gibberish characters on the page."
  },
  {
    "objectID": "unit-4/optional-projects/1-binary-counter.html",
    "href": "unit-4/optional-projects/1-binary-counter.html",
    "title": "Binary Timer Project",
    "section": "",
    "text": "BH: SCRAP.\nMF: Needs a pink box; image shouldn’t have greenflag; I want to review; duplicate content with 8.3.4?\n\nIn this project you will create a timer that reports the number of seconds elapsed in both decimal and binary notations.\n\n\n\nFirst, review this Binary Timer, and then discuss what you know about binary notation. \n\n\nYou can visit this wikihow.com page and discuss conversion from base 10 to base 2.\nNote that there are two methods presented in the link.\n\n\nThe first method (Short Division by Two with Remainder), is more general and works for conversion to any base.\n\n\nThe second method (Descending Powers of Two and Subtraction), is in tandem with a video you may have watched earlier.\n\n\nChoose one of the methods described and come up with a simple algorithm for this procedure.\n\n\nSeveral sprites, blocks, and costumes have already been created for you. The Get Binary Digits block (in Timer) is the only place where you will need to fill in some code.\n\n\n\nIf you look at the Timer sprite code, you will see that the timer block (from the “Sensing” menu) is used as a time keeper. The decimal and binary digits are computed and stored in lists, and then a broadcast is made to the sprites representing the digits to put on the appropriate costumes (0 and 1 for the binary digits and 0 through 9 for the decimal digits.)\n\n(255)){script variables (time); set (time) to (round(timer)); set (Decimal Digits List) to empty list; set (Binary Digits List) to empty list; warp{Get Binary Digits (time); Get Decimal Digits (time); broadcast (time)}}}” title=“when green flag clicked{reset timer; repeat until(round(timer)&gt;(255)){script variables (time); set (time) to (round(timer)); set (Decimal Digits List) to empty list; set (Binary Digits List) to empty list; warp{Get Binary Digits (time); Get Decimal Digits (time); broadcast (time)}}}”/&gt;\nThe “warp” block is used to ensure that all the computation within the block is completed prior to the refreshing of the screen .\nThe code for extracting the base 10 digits of a given number,Get Decimal Digits, is written for you. If you are using method 2 (Descending Powers of Two and Subtraction) to write Get Binary Digits you can ignore the code in Get Decimal Digits. If you are using method 1 (Short Division by Two with Remainder) however, you can use this code as a model to write the Get Binary Digits code as it is based on method 1.\n\n\n\nReview and understand the code for the rest of the sprites representing the decimal digits. Check that your timer works in the decimal notation.\n\n\nNow write the code for the Get Binary Digits custom block using either conversion method. If you get stuck, you can get some  hints for the Binary Timer project. When you are done, review the code for the sprites representing the 8 binary digits. Check that the timer works in the binary notation.\n\n\n\n\n\n\n In this project, you generated the binary number representation of decimal numbers 0 through 255. While it takes only 3 digits to represent the number 255 in base 10, it requires 8 digits to represent the same number in base 2. Can you explain why?\n\n\nCreate a Hexadecimal Timer Project in Snap!\n\n\n\n\n\nYou might want to make use of the current time block in the “Sensing” menu: \n\n\n\nCreate a binary clock that shows the current time in base 2. For example:\n\nHr : Min : Sec 07 : 40 : 16 0111 : 101000 : 010000\n\n\n\nCreate a hexadecimal clock that shows current time in base 16. For example:\n\nHr : Min : Sec 12 : 40 : 59  C : 28 : 3B\n\n\n\n\n Create a reporter in Snap! that converts a given number in a given base to its equivalent in another given base.\n\n\n\nBelow you see a counter that simultaneously shows each number’s representation in bases 2 through 16. Create a Snap! program that will model such a counter."
  },
  {
    "objectID": "unit-4/optional-projects/1b-binary-counter-hints.html",
    "href": "unit-4/optional-projects/1b-binary-counter-hints.html",
    "title": "JacketCS CSP",
    "section": "",
    "text": "&lt;!DOCTYPE html&gt;\n\n\n\n\n\nUnit 4 Optional Projects, Page 1 Hint\n\n\n\n\nBinary Timer Hints\n\nIf you study the examples presented here, you will notice that method 2 (Descending Powers of Two and Subtraction) is in tandem with a video you may have watched earlier so it is recommended that you try this method first to code Get Binary Digits. The algorithm goes something like this:\n\nStarting with the largest power of 2 down to the lowest power of 2 (in our case from 27 to 20 as there are 8 binary digits) check if that power of 2 is contained in the number (i.e. if the number is greater than or equal to that power of 2.) If so, write 1 for the current binary digit and replace the number with that power of 2 subtracted from the number. Otherwise, write 0 for the current binary digit.\n\nNote: In the starter file, if you look at the Operators menu you will notice that a block is included to compute powers of 2.\nIf you decide to code Get Binary Digits with method 1 (Short Division by Two with Remainder), then you will need to compute a lot of remainders and quotients during division with 2, which you can get by using the mod and floor operators in Snap!. The code will be similar to the Get Decimal Digitscode.\n\nWhichever method you chose, the task to accomplish in Get Binary Digits is to fill the Binary Digits List with the correct sequence of zeros and ones, padding the front of the list with zeros if necessary. The rest of the program will take care of the proper display of these digits.\nIf you need more examples and explanation, you can look at the Appendix here."
  },
  {
    "objectID": "unit-4/optional-projects/1c-binarycounter-appendix.html",
    "href": "unit-4/optional-projects/1c-binarycounter-appendix.html",
    "title": "Binary Timer Appendix",
    "section": "",
    "text": "Base Conversion with Method 1 (Short Division by Two with Remainder)\n\nFirst a reminder how to extract each digit in base 10 system.\nExample: If you were trying to extract the digits of a number, say, 527 in base 10, you would take the following steps.  (Recall that the floor() function rounds a number down to the closest integer.)\n\n\nFind the “ones” digit, via remainder in 527 divided by 10:  527 mod 10 = 7 Get quotient: floor(527/10)= 52\n\n\nRepeat, find the “tens” digit, via remainder in 52 divided by 10:  52 mod 10 = 2 Get quotient: floor(52/10) = 5\n\n\nRepeat, find the “hundreds” digit, via remainder in 5 divided by 10:  5 mod 10 = 5 Get quotient: floor(5/10) = 0\n\n\nThis is where we stop. So 527= 5(100) + 2(10) + 7(1)\nNote with the algorithm we extracted the digits right to left. (7 first, 2 next, 5 last)\nExample: If you apply a similar procedure to get the binary representation of a number, say, 25, you would take the following steps. \n\n\nFind the “ones” digit, via remainder in 25 divided by 2:  25 mod 2 = 1 Get quotient: floor(25/2)= 12\n\n\nRepeat, find the “twos” digit, via remainder in 12 divided by 2:  12 mod 2= 0 Get quotient: floor(12/2)= 6\n\n\nRepeat, find the “fours” digit, via remainder in 6 divided by 2:  6 mod 2= 0 Get quotient: floor(6/2)= 3\n\n\nRepeat, find the “eights” digit, via remainder in 3 divided by 2:  3 mod 2= 1 Get quotient: floor(3/2)= 1\n\n\nRepeat, find the “sixteens” digit, via remainder in 1 divided by 2:  1 mod 2= 1 Get quotient: floor(1/2)= 0\n\n\nThis is where we stop. Note with the algorithm again we extracted the digits right to left.\nSo 25= 1(16) + 1(8)+ 0(4) + 0(2) + 1(1) = (11001)2\nUsing these examples come up with an algorithm to represent any base 10 number in base 2.\n\nBase conversion with Method 2: (Descending Powers of Two and Subtraction)\n\nExample: If you are trying to get the binary representation of a number, say, 25, you would take the following steps. \nIs 24 =16 contained in 25? Yes, write 1.\n25-16=9\nIs 23 = 8 contained in  9? Yes, write 1.\n9-8=1\nIs 22 = 4 contained in  1? No,  write 0.\nIs 21 = 2 contained in  1? No,  write 0.\nIs 20 = 1 contained in  1? Yes, write 1.\n1-1=0  Done."
  },
  {
    "objectID": "unit-4/optional-projects/2-tcp.html",
    "href": "unit-4/optional-projects/2-tcp.html",
    "title": "Reliable Transmission on Unreliable Networks: TCP",
    "section": "",
    "text": "BH: Yucky video. Otherwise okay. We should get TCP out of the TIF – it’s the only real activity!\nMF: Brian wants to make improvements to this project–can that become an optional project? We don’t have any for U4.\n\n\nOn this page, you will learn the system for ensuring that communication is reliable on the Internet.\n\n\nWhat you will do: You will watch a video, read, and explore a simulation of unreliable IP transmissions.\nWhat you will learn: You will learn about how the Internet sends data reliably by using protocols.\nOn your own: You can code your own Transmission Control Protocol.\n\nComputers, servers, and routers are fairly reliable, but every once in a while a packet will be lost, and devices on the Internet need to tolerate these faults. One way to tolerate faults is not to care. (If you lose one frame of video, it doesn’t matter.) Another way (called TCP) is to keep sending packets until they are acknowledged as having been received correctly. TCP (Transmission Control Protocol) guarantees reliable data transmission by keeping track of which packets have been received successfully, resending any that have been lost or damaged, and specifying the order for reassembling the data on the other end.\n\nTCP/IP is a pair of protocols that provide an abstraction. IP lets your computer pretend it has a direct connection to another computer. TCP lets your computer pretend it has a reliable connection to the other computer.\n\n\n\nIf your connection blocks YouTube, watch the video here.\n\n\n\n\nThe TCP/IP end-to-end design of the Internet is an abstraction:\n\n\nThe computers (including servers) at the two endpoints of a communication run the Transmission Control Protocol (TCP), which guarantees reliable transmission.\n\n\nThe routers at every connection point on the Internet run the Internet Protocol (IP), which transmits packets from one IP address to another.\n\n\nThe routers don’t know anything about the messages they carry; all they care about is transmitting them. The computers that send and receive the messages are the only ones concerned with what the messages mean.\n\n\n\n\n\n This project provides a simulation of unreliable data transmission by Internet Protocol.\n\n\nClick the green flag to initialize the incoming transmission variables before each experiment.\n\n\nClick either character to enter a message for it to send to the other one.\n\n\n\n\nIn this simulation, the complete message is a string of text that is divided into packets of one letter each. In reality, the packet length is not so strictly limited and messages are usually much longer.\n\n\n\n Compare the result with what you sent. What problems do you see?\n\n\n\nTCP works by including additional information along with each packet so that the receiving computer can keep track of how many packets it has received, re-request any missing packets, and reorder the packets to reconstruct the original message. In this simulation, a packet either arrives correctly (even if it’s out of order) or it doesn’t arrive at all. But on the Internet, it’s possible for a packet to arrive with erroneous data, so the real TCP has to check for errors and request re-transmission of packets with errors too.\n\n\n\nRead Blown to Bits pages 306-309.\n\n\n\n\n\n\n\nBuild a simple TCP. Resolve the unreliability so that messages are received reliably despite the limitations of IP packets. You’ll need to change the definitions of:\n\n\n\n\n\n\n\n\n\nDo not change the definition of . That block simulates the unreliable network. You could “solve” the problem by rewriting this block to simulate a perfect network instead of an imperfect one, but that misses the point.\n\nTo solve this problem, you’ll need a way to keep track of the order of the data and a way to re-request missing packets:\n\n\nFirst, solve the problem of packets arriving out of order. You can include extra header information in addition to the packet data in order to help the receiver reconstruct the message. This will require cooperation by both sender and receiver (that is, changes to both gray blocks).\n\n\nThen, solve the problem of packets not arriving at all. That is, make the transmission reliable even though IP is unreliable. This, too, will require changing both sender and receiver."
  },
  {
    "objectID": "unit-4/optional-projects/writing-html.html",
    "href": "unit-4/optional-projects/writing-html.html",
    "title": "Writing HTML (Teacher’s Choice)",
    "section": "",
    "text": "Unlike Snap!, which is a general purpose programming language that can be used to develop a variety of algorithms, HTML is a special purpose programming language; it’s designed for one specific task: designing web pages. HTML controls the layout and style of text and images on a webpage, but it doesn’t allow for real programming like Snap! does. People use other languages like JavaScript to program algorithms into websites.\nThe fundamental skeleton of every HTML webpage looks like the code below. Browsers use HTTP to turn the HTML into the site you see. Notice that most of the HTML tags (like \\&lt;head\\&gt;) have a closing tag (like \\&lt;/head\\&gt;) designating the end, and the relevant content goes between the two tags. (The color and ms-4ation improve readability but are not necessary.)\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;The Page Title Goes Here&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\nThe page content goes here.\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\nExperiment with this HTML example from w3schools.com. Write some HTML code inside the \\&lt;body\\&gt; and \\&lt;/body\\&gt; tags. You might add a second heading and more paragraphs.\n\n\nYou can create various sized headings for your content using \\&lt;h3\\&gt;\\&lt;/h3\\&gt; tags. (Try numbers 1-6.)\n\n\nYou can add paragraphs with \\&lt;p\\&gt;\\&lt;/p\\&gt;.\n\n\nYou can link to another webpage: &lt;a href=“http://bjc.edc.org”&gt;BJC Website&lt;/a&gt;`\n\n\nYou can create lists: \n\n\nYou can put comments in the HTML that will not show in the browser window using \\&lt;!-- and --\\&gt; tags: &lt;!– This is a comment. –&gt;`\n\n\n\n\nFind the “View Page Source” feature of your browser (try right-clicking or control-clicking a page, or look around in menus like “View” or “Developer”).\n\n\nLook at the source code for a few different web pages and compare them to the pages. Make a list of the HTML formatting commands you can figure out. For example, what code makes text appear in bold or italics?\n\n\n\n\nAs you learn other programming languages, you will begin to see similarities. Here’s an example from JavaScript, a language that website developers use to add behavior and interactivity to websites:\n\n\n\n defines a new procedure called myFunction. It’s like in Snap!.\n\n\n is like the code below`;varcreates the new variable, and=is likeset` in Snap!. \n\n\n\n\n\n\nVisit the home of the first website ever built. It was created using a very old style of HTML. What code do you see that you recognize?\n\n\nCSS allows website designers to control the style of their web pages more easily. Experiment with the w3schools CSS example. Change the color of the heading or the background. Change the size of the text. Try some other changes too.\n\n\nBriefly explore the w3schools.com JavaScript example.\n\n\n\n\n\n\nTeach yourself more HTML with the w3schools HTML tutorial.\n\n\nAfter learning more HTML, you could:\n\n\nLearn about CSS styles with the w3schools CSS tutorial.\n\n\nLearn more with the w3schools JavaScript tutorial.\n\n\n\n\nSnap! itself is written in JavaScript, and the  block lets you extend Snap! by writing new blocks using JavaScript. Some of the Snap! libraries are written that way. You can experiment with this block by choosing “Libraries…” from the File menu, choosing “Set RGB or HSV pen color”, and looking in the “Pen” palette. \n\n\nYou may also enjoy these “Algorithmic Designs” done with Processing.\n\n\nCheck out p5.js, a web-based, JavaScript library of the visual graphics language Processing. Learn more with these examples and tutorials."
  },
  {
    "objectID": "unit-5/index.html",
    "href": "unit-5/index.html",
    "title": "Unit 5: Algorithms and Simulations",
    "section": "",
    "text": "In Unit 5, we learn about … algorithms and simulations.\nThis is also the last unit that will be included on the AP Exam in May."
  },
  {
    "objectID": "unit-5/lab-1/1-sorted-lists.html",
    "href": "unit-5/lab-1/1-sorted-lists.html",
    "title": "Page 1: Guess My Number",
    "section": "",
    "text": "In this lab, you will use two different algorithms to search a list, and you will learn that algorithms are categorized by the time required to run them.\nOn this page, you will modify your number guessing game from Unit 2 to make the computer do the guessing.\n\n\n\n\nYou built a number guessing game in Unit 2, Lab 2: Developing a Number Guessing Game with Script Variables.\n\n\nClick the picture to load a version of the number guessing game in which you guess a number from 1 to 60.    \n\n\nPlay a few times. Keep track of how many guesses it takes you to identify the number each time.\n\n\n Develop a strategy that will identify the secret number in no more than 6 guesses.\n\n\n Write down your strategy clearly enough for others to use it to play the game.\n\n\n Then compare your algorithm with another pair of students.\n\n\nNow make the computer guess your number using this strategy.\n\nThere are three sprites with costumes (“too small,”just right,” and “too big”) that are hidden in your project file. Use the show block in the “Looks” menu to see them.\n\n\n\n Save your work."
  },
  {
    "objectID": "unit-5/lab-1/2-how-many-five-letter-words.html",
    "href": "unit-5/lab-1/2-how-many-five-letter-words.html",
    "title": "Page 2: How Many Five-Letter Words Are There?",
    "section": "",
    "text": "TG and solutions need to be checked. –MF, 12/19/18\n\n\n\nOn this page, you will see how long it takes to run a linear search algorithm.\n\nOn Unit 2 Lab 3 Page 6: Solving a Word Puzzle, you built a  block and used it with keep to find words of a specific length in a word list. How long does a process like that take?\n\n\n\n\n\nThis project provides the variables 1,000 words, 10,000 words, and 100,000 words (each containing a list of words) and a copy of the does () have () letters? predicate.\n\n\n\nHow many five-letter words are in the 10,000 words list?\n\n\nUse the  block provided in this project to determine how long it takes for the computer to answer that question.\n\n\n\nThe computation time block takes any reporter (with its inputs filled in), computes the result but ignores it, and instead reports how long it took to do the computation (in milliseconds). \nIn this example, it took 27 milliseconds to compute the list of integers from 1 to 1000. (The report you see will depend on how fast your computer is and what other programs are running on it.)\nYou can look inside computation time to see how it works: Right-click (or control-click on a mac) the block and select “edit…” from the menu that appears.\n\n\n\nClick on the computation time expression you just used to answer the previous question three more times and note the range of answers. They’re not exactly the same because of other things that your computer is doing at the same time, so you should always take whatever result it gives you as approximate.\n\n\n How long do you think it would take to count five-letter words if the list had 100,000 words?\n\n\nUse computation time to check using the 100,000 words list.\n\n\n\nSearching for all the five-letter words in a specific word list is an instance of a more general problem: searching for all the words of any particular length.\n\n: Problem and Instance of a Problem\n\nAAP-4.A.1\n\n\n\nA problem is a general description of a task that may (or may not) be solved algorithmically.\n\n\nAn instance of a problem is one case of a problem, with specific inputs.\n\n\n\n\n\n\nSuppose instead, we count the seven-letter words. Will this take… \n\n\nMore time because seven letters is more than five letters?\n\n\nLess time because there are fewer seven-letter words than five-letter words?\n\n\nThe same time because it’s not the word length that matters; it’s the size of the dictionary?\n\n\n\nI was thrown off by the format of this exercise and rephrased it as a question. –MF, 5/31/20\nShould this maybe be a quizlet? Not sure… –MF, 7/13/20\n\n\n\nExperiment to find out for sure.\n\n\n\nThe only way to answer a “How many words…” problem is to check every single word in the dictionary. So if you have ten times as many words in the dictionary, it takes ten times as long to check them all.\n\n: Linear Search or Sequential Search\n\n\nAn algorithm takes linear time if multiplying the input size by ten multiplies the time required by ten. \n\n\nAAP-2.O.5\n\n\nA linear search (or sequential search) algorithm checks each element of a list in order, a process which takes linear time."
  },
  {
    "objectID": "unit-5/lab-1/3-spell-checker.html",
    "href": "unit-5/lab-1/3-spell-checker.html",
    "title": "Page 3: Is ‘Seperate’ Spelled Correctly?",
    "section": "",
    "text": "TG and solutions need to be checked. –MF, 12/19/18\n\n\n\nOn this page, you will use a binary search algorithm to search efficiently in a sorted list.\n\nAnswering this question is simple in Snap! because you can just ask a dictionary: . But “simple” doesn’t mean fast. The contains block still has to look at each item in the list until it finds the one you are looking for (and says true) or reaches the end of the list (and says false). It is still a linear search.\nWhen you are only looking for one thing in a list (for example, checking whether a particular word is spelled correctly) rather than finding all the words with some characteristic (for example, looking for all five-letter words), you can use the strategy from Page 1: Guess My Number to make your algorithm faster. The best strategy for that problem is a binary search algorithm: always guess the middle value and then adjust your guess based on whether it was too high or too low. That way, you eliminate half the possibilities with each guess. We can use a similar strategy to look for a word in a word list.\n\nYou could have written a simpler number guessing program: the computer could guess the number 1, then 2, then 3, and so on until it finds the number. That would be a linear search algorithm; it’s easier to code, but it takes longer to run because every time it makes a wrong guess, it eliminates only that guess. With binary search, every wrong guess eliminates half the possibilities at once.\n\n\n: Binary Search\n\nAAP-2.P.1, AAP-2.P.2\n\nA binary search algorithm starts in the middle of a sorted list and repeatedly eliminates half the list until either the desired value is found or all elements have been eliminated.\n\nAAP-2.O.1\n\n\nYou learned about traversing a list on Unit 2 Lab 2 Page 3: Checking Each Quiz Answer.\n\nLinear search does a complete traversal of the list. Binary search saves time by doing a partial traversal of the list.\n\n\nThe one thing that almost everyone knows about computers is that they use binary: ones and zeros. Binary search has nothing to do with that. The word “binary” just means “two,” whether it’s two digits or two halves.\n\n\n\n\n\n Compare this binary search block with your code from Page 1: Guess My Number. What parts are the same? What parts are different? (high)) { set (current index) to (average of (low) and (high)) #comment: find the middle word set (current item) to (item (current index) of (data)) if ((current item) = (value)) { report (true) } else { if ((current item) &gt; (value)) #comment: eliminate half the list { set (high) to ((current index) – (1)) } else { set (low) to ((current index) + (1)) } } } report (false) }” title=“binary search for (value) in (data) { script variables (low) (high) (current index) (current item) set (low) to (1) set (high) to (length of (data)) repeat until ((low) &gt; (high)) { set (current index) to (average of (low) and (high)) #comment: find the middle word set (current item) to (item (current index) of (data)) if ((current item) = (value)) { report (true) } else { if ((current item) &gt; (value)) #comment: eliminate half the list { set (high) to ((current index) – (1)) } else { set (low) to ((current index) + (1)) } } } report (false) }” /&gt;\n\nThe `&gt;` block (as well as the `&lt;` and `=` blocks) compares words alphabetically: &lt;br /&gt;\n&lt;img class=\"ms-4\" src=\"/img/5-algorithms/carrot-gt-banana-reporting.png\" alt=\"(carrot) &gt; (banana) reporting true\" title=\"(carrot) &gt; (banana) reporting true\" /&gt;\n&lt;img class=\"ms-4\" src=\"/img/5-algorithms/apple-gt-banana-reporting.png\" alt=\"(apple) &gt; (banana) reporting false\" title=\"(apple) &gt; (banana) reporting false\" /&gt;\n&lt;/div&gt;\n&lt;/li&gt;\n&lt;li&gt;Check whether \"seperate\" is spelled correctly by using `binary search` to look for the word in the sorted list &lt;img class=\"inline\" src=\"/img/5-algorithms/100000-words-(sorted).png\" alt=\"100,000 words (sorted)\" title=\"100,000 words (sorted)\" /&gt;.&lt;/li&gt;\n\nTry binary search with some words that you know are spelled correctly and some that you know are incorrect.\n\n&lt;div class=\"todo\"&gt;Maybe change it to \"Practice using `binary search`: Try it with some words that you know are spelled correctly and some that you know are incorrect.\" --MF, 7/13/20&lt;/div&gt;\n\nNow use binary search to search for the same words in the unsorted 100,000 words.\n\n&lt;div class=\"ap-standard\"&gt;AAP-2.P.2&lt;/div&gt;\n\n Why does binary searching work on one list but not the other? Consider how the binary search algorithm works.\n\n\n\nThe contains block can’t make any assumptions about the ordering in list you are searching, but if you are looking for one thing in a sorted, list you can use binary search.\n\n\n&lt;div class=\"ap-standard\"&gt;AAP-2.P.2&lt;/div&gt;\n\nTwo things affect whether you can use a binary search algorithm to make your program more efficient:\n&lt;ul&gt;\n&lt;li&gt;What question you are trying to answer? Are you searching for &lt;em&gt;one&lt;/em&gt; thing in a list or are you finding &lt;em&gt;all&lt;/em&gt; the things in the list with some characteristic?&lt;/li&gt;\n&lt;li&gt;What is the condition of your data? Are they sorted or unsorted?&lt;/li&gt;\n&lt;/ul&gt;\n&lt;table class=\"bordered center standard\" summary=\"table showing that in order to use binary search, you have to be looking for one specific value and you have to be looking in sorted data\"&gt;\n&lt;tr&gt;\n&lt;th scope=\"col\"&gt;&nbsp;&lt;/th&gt;\n&lt;th scope=\"col\"&gt;find one value&lt;/th&gt;\n&lt;th scope=\"col\"&gt;find many values&lt;/th&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;th scope=\"col\"&gt;sorted data&lt;/th&gt;\n&lt;td style=\"color: green\"&gt;can use binary search&lt;/td&gt;\n&lt;td&gt;must use linear search&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;th scope=\"col\"&gt;unsorted data&lt;/th&gt;\n&lt;td&gt;must use linear search&lt;/td&gt;\n&lt;td&gt;must use linear search&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n\n&lt;/div&gt;\n&lt;div class=\"endnote\"&gt;If you are working with short lists, it's not so important which algorithm you use. It's when you are dealing with a lot of data that you have to think carefully about the algorithm.&lt;/div&gt;\n&lt;div class=\"forYouToDo\"&gt;\n\n\n\n\n&lt;div class=\"prompt\"&gt;\n&lt;div class=\"ap-standard\"&gt;AAP-2.P part b, AAP-2.P.2&lt;/div&gt;\nIn order to use a binary search, the data must be...\n&lt;/div&gt;\n&lt;div class=\"choice\" identifier=\"c1\"&gt;\n&lt;div class=\"text\"&gt;binary&lt;/div&gt;\n&lt;div class=\"feedback\"&gt;\nAll data in a computer are represented using binary (ones and zeros), but that has nothing to do with binary searches, which compare against the middle value to choose which of two halves to eliminate.\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"choice\" identifier=\"c2\"&gt;\n&lt;div class=\"text\"&gt;sorted&lt;/div&gt;\n&lt;div class=\"feedback\"&gt;\nCorrect! If the data are sorted, then comparing to the middle value will give you good information about which half of the data to keep.\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"choice\" identifier=\"c3\"&gt;\n&lt;div class=\"text\"&gt;unsorted&lt;/div&gt;\n&lt;div class=\"feedback\"&gt;\nIf the data are unsorted, you can't be sure that everything before or everything after the middle value can be eliminated.\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"choice\" identifier=\"c4\"&gt;\n&lt;div class=\"text\"&gt;linear&lt;/div&gt;\n&lt;div class=\"feedback\"&gt;\n\"Linear\" is the name of another search algorithm, not a property of the data.\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"responseDeclaration\" identifier=\"ri1\"&gt;\n&lt;div class=\"correctResponse\" identifier=\"c2\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;!-- Question 2 --&gt;\n&lt;div class=\"assessment-data\" type=\"multiplechoice\" identifier=\"Which of the following questions can be answered with a binary search, assuming the data are sorted?\"\nhasinlinefeedback=\"true\" maxchoices=\"2\" responseIdentifier=\"ri2\" shuffle=\"true\"&gt;\n&lt;div class=\"prompt\"&gt;\nWhich of the following questions can be answered with a binary search, assuming the data are sorted? Check all that apply:\n&lt;/div&gt;\n&lt;div class=\"choice\" identifier=\"c1\"&gt;\n&lt;div class=\"text\"&gt;What is my friend Rasheed's phone number?&lt;/div&gt;\n&lt;div class=\"feedback\"&gt;\nCorrect! You are searching for **one** phone number in the list.\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"choice\" identifier=\"c2\"&gt;\n&lt;div class=\"text\"&gt;Give me a list of all the Beyoncé songs.&lt;/div&gt;\n&lt;div class=\"feedback\"&gt;\nWe have to find **all** the Beyoncé songs, not just one.\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"choice\" identifier=\"c3\"&gt;\n&lt;div class=\"text\"&gt;Tell me if bread is on my shopping list.&lt;/div&gt;\n&lt;div class=\"feedback\"&gt;\nCorrect! You are searching for **one** item in the list.\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"choice\" identifier=\"c4\"&gt;\n&lt;div class=\"text\"&gt;Who in my contact list lives on Grand Avenue?&lt;/div&gt;\n&lt;div class=\"feedback\"&gt;\nYour contact list is probably **sorted by name**, not by address. Also, there may be **more than one** person who lives on Grand Avenue.\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"responseDeclaration\" identifier=\"ri2\"&gt;\n&lt;div class=\"correctResponse\" identifier=\"c1\"&gt;&lt;/div&gt;\n&lt;div class=\"correctResponse\" identifier=\"c3\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n\n\n\n\nBuild a spell-checker.\n\n&lt;div class=\"endnote\"&gt;Use &lt;img class=\"inline\" src=\"/img/blocks/split-by-whitespace.png\" width=\"190\" alt=\"split () by (whitespace)\" title=\"split () by (whitespace)\" /&gt; to convert the input text into a list.&lt;/div&gt;\n&lt;li&gt;&lt;img class=\"inline\" src=\"/img/icons/talk-with-your-partner.png\" alt=\"Talk with Your Partner\" title=\"Talk with Your Partner\" /&gt;Should your spell-checker look through the dictionary for each word of the text or look through the text for each word of the dictionary?&lt;/li&gt;"
  },
  {
    "objectID": "unit-5/lab-1/4-efficiency.html",
    "href": "unit-5/lab-1/4-efficiency.html",
    "title": "Page 4: Exactly How Much Faster Is Binary Search?",
    "section": "",
    "text": "TG and solutions need to be checked. –MF, 12/19/18\n\n\n\nOn this page, you will compare the time required for binary search and for linear search.\n\nTG: Students compare these two algorithms in two ways: empirically (with clock time) and by counting operations (steps).\n\n\n\n\n\n\nAAP-2.P.3\n\nLocate the  block included in your project, and look inside it. Compare it to the algorithm you used to count the number of five- or seven-letter words. This block does the same computation as the binary search block, but it uses the linear algorithm.\n\n\nUse  to test how much time linear search takes to find the word “zebra” in each length list. 31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBRAEEAegBBAEQATQBBAE0AdwBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEcASQBBAGIAdwBCAHkAQQBHAFEAQQBaAFEAQgB5AEEARwBVAEEAWgBBAEEAZwBBAEcATQBBAFoAUQBCAHUAQQBIAFEAQQBaAFEAQgB5AEEAQwBBAEEAYwB3AEIAMABBAEcARQBBAGIAZwBCAGsAQQBHAEUAQQBjAGcAQgBrAEEAQwBJAEEASQBBAEIAegBBAEgAVQBBAGIAUQBCAHQAQQBHAEUAQQBjAGcAQgA1AEEARAAwAEEASQBnAEIAdwBBAEcARQBBAGMAZwBCADAAQQBHAGsAQQBZAFEAQgBzAEEARwB3AEEAZQBRAEEAZwBBAEcASQBBAGIAQQBCAGgAQQBHADQAQQBhAHcAQQBnAEEASABRAEEAWQBRAEIAaQBBAEcAdwBBAFoAUQBBAGcAQQBIAE0AQQBhAEEAQgB2AEEASABjAEEAYQBRAEIAdQBBAEcAYwBBAEkAQQBCADAAQQBHAGcAQQBaAFEAQQBnAEEASABRAEEAYQBRAEIAdABBAEcAVQBBAEkAQQBCADAAQQBHADgAQQBJAEEAQgB5AEEASABVAEEAYgBnAEEAZwBBAEUAdwBBAFMAUQBCAE8AQQBFAFUAQQBRAFEAQgBTAEEAQwBBAEEAVQB3AEIARgBBAEUARQBBAFUAZwBCAEQAQQBFAGcAQQBJAEEAQgBtAEEARwA4AEEAYwBnAEEAZwBBAEcAdwBBAGEAUQBCAHoAQQBIAFEAQQBjAHcAQQBnAEEARwA4AEEAWgBnAEEAZwBBAEcAUQBBAGEAUQBCAG0AQQBHAFkAQQBaAFEAQgB5AEEARwBVAEEAYgBnAEIAMABBAEMAQQBBAGIAQQBCAGwAQQBHADQAQQBaAHcAQgAwAEEARwBnAEEAYwB3AEEAaQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAZwBBAEkAQQBCAHoAQQBHAE0AQQBiAHcAQgB3AEEARwBVAEEAUABRAEEAaQBBAEcATQBBAGIAdwBCAHMAQQBDAEkAQQBQAGcAQgBNAEEARwBVAEEAYgBnAEIAbgBBAEgAUQBBAGEAQQBBAGcAQQBHADgAQQBaAGcAQQBnAEEARQB3AEEAYQBRAEIAegBBAEgAUQBBAFAAQQBBAHYAQQBIAFEAQQBhAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAZwBBAEkAQQBCAHoAQQBHAE0AQQBiAHcAQgB3AEEARwBVAEEAUABRAEEAaQBBAEcATQBBAGIAdwBCAHMAQQBDAEkAQQBQAGcAQQA4AEEARwBNAEEAYgB3AEIAawBBAEcAVQBBAFAAZwBCAE0AQQBHAGsAQQBiAGcAQgBsAEEARwBFAEEAYwBnAEEAZwBBAEYATQBBAFoAUQBCAGgAQQBIAEkAQQBZAHcAQgBvAEEARAB3AEEATAB3AEIAagBBAEcAOABBAFoAQQBCAGwAQQBEADQAQQBJAEEAQgBVAEEARwBrAEEAYgBRAEIAbABBAEQAdwBBAEwAdwBCADAAQQBHAGcAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAEUAQQBNAEEAQQB3AEEARABBAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBAHgAQQBEAEEAQQBMAEEAQQB3AEEARABBAEEATQBBAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAEUAQQBNAEEAQQB3AEEAQwB3AEEATQBBAEEAdwBBAEQAQQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAaABBAEcASQBBAGIAQQBCAGwAQQBEADQAQQAKAHMAdQBmAGYAaQB4ADoA:31b8e172-b470-440e-83d8-e6b185028602\n\n\n Look at the table. How would you describe what happens to the time as the input gets bigger?\n\n\n\nThe actual amount of physical time that it takes to solve a problem depends not only on your algorithm but also on how fast your computer is and what other programs you have running, etc. Therefore, computer scientists who want to measure the speed of an algorithm do it in terms of the number of steps. For example, what we really want to know about the efficiency of the linear search algorithm is how many times current item is compared to value (that is, how many times  is called).\n\n\n\n\nAAP-2.P.3\n\nAdd another column to your table. Assuming “zebra” is the last word in each word list, how many comparisons are made by the linear search algorithm for each length list? 31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBnAEEANQBBAEQARQBBAE0AdwBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEcASQBBAGIAdwBCAHkAQQBHAFEAQQBaAFEAQgB5AEEARwBVAEEAWgBBAEEAZwBBAEcATQBBAFoAUQBCAHUAQQBIAFEAQQBaAFEAQgB5AEEAQwBBAEEAYwB3AEIAMABBAEcARQBBAGIAZwBCAGsAQQBHAEUAQQBjAGcAQgBrAEEAQwBJAEEASQBBAEIAegBBAEgAVQBBAGIAUQBCAHQAQQBHAEUAQQBjAGcAQgA1AEEARAAwAEEASQBnAEIAdwBBAEcARQBBAGMAZwBCADAAQQBHAGsAQQBZAFEAQgBzAEEARwB3AEEAZQBRAEEAZwBBAEcASQBBAGIAQQBCAGgAQQBHADQAQQBhAHcAQQBnAEEASABRAEEAWQBRAEIAaQBBAEcAdwBBAFoAUQBBAGcAQQBIAE0AQQBhAEEAQgB2AEEASABjAEEAYQBRAEIAdQBBAEcAYwBBAEkAQQBCADAAQQBHAGcAQQBaAFEAQQBnAEEASABRAEEAYQBRAEIAdABBAEcAVQBBAEkAQQBCAGgAQQBHADQAQQBaAEEAQQBnAEEARwA0AEEAYgB3AEIAMwBBAEMAQQBBAFkAUQBCAHMAQQBIAE0AQQBiAHcAQQBnAEEASABNAEEAZABBAEIAbABBAEgAQQBBAGMAdwBBAGcAQQBIAFEAQQBiAHcAQQBnAEEASABJAEEAZABRAEIAdQBBAEMAQQBBAFQAQQBCAEoAQQBFADQAQQBSAFEAQgBCAEEARgBJAEEASQBBAEIAVABBAEUAVQBBAFEAUQBCAFMAQQBFAE0AQQBTAEEAQQBnAEEARwBZAEEAYgB3AEIAeQBBAEMAQQBBAGIAQQBCAHAAQQBIAE0AQQBkAEEAQgB6AEEAQwBBAEEAYgB3AEIAbQBBAEMAQQBBAFoAQQBCAHAAQQBHAFkAQQBaAGcAQgBsAEEASABJAEEAWgBRAEIAdQBBAEgAUQBBAEkAQQBCAHMAQQBHAFUAQQBiAGcAQgBuAEEASABRAEEAYQBBAEIAegBBAEMASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGEAQQBBAGcAQQBIAE0AQQBZAHcAQgB2AEEASABBAEEAWgBRAEEAOQBBAEMASQBBAFkAdwBCAHYAQQBHAHcAQQBJAGcAQQBnAEEASABNAEEAZABBAEIANQBBAEcAdwBBAFoAUQBBADkAQQBDAEkAQQBkAHcAQgBvAEEARwBrAEEAZABBAEIAbABBAEMAMABBAGMAdwBCAHcAQQBHAEUAQQBZAHcAQgBsAEEARABvAEEASQBBAEIAdQBBAEcAOABBAGQAdwBCAHkAQQBHAEUAQQBjAEEAQQA3AEEAQwBJAEEAUABnAEIATQBBAEcAVQBBAGIAZwBCAG4AQQBIAFEAQQBhAEEAQQBnAEEARwA4AEEAWgBnAEEAZwBBAEUAdwBBAGEAUQBCAHoAQQBIAFEAQQBQAEEAQQB2AEEASABRAEEAYQBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAGcAQQBJAEEAQgB6AEEARwBNAEEAYgB3AEIAdwBBAEcAVQBBAFAAUQBBAGkAQQBHAE0AQQBiAHcAQgBzAEEAQwBJAEEAUABnAEEAOABBAEcATQBBAGIAdwBCAGsAQQBHAFUAQQBQAGcAQgBNAEEARwBrAEEAYgBnAEIAbABBAEcARQBBAGMAZwBBAGcAQQBGAE0AQQBaAFEAQgBoAEEASABJAEEAWQB3AEIAbwBBAEQAdwBBAEwAdwBCAGoAQQBHADgAQQBaAEEAQgBsAEEARAA0AEEASQBBAEIAVQBBAEcAawBBAGIAUQBCAGwAQQBEAHcAQQBMAHcAQgAwAEEARwBnAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAG8AQQBDAEEAQQBjAHcAQgBqAEEARwA4AEEAYwBBAEIAbABBAEQAMABBAEkAZwBCAGoAQQBHADgAQQBiAEEAQQBpAEEAQwBBAEEAYwB3AEIAMABBAEgAawBBAGIAQQBCAGwAQQBEADAAQQBJAGcAQgAzAEEARwBnAEEAYQBRAEIAMABBAEcAVQBBAEwAUQBCAHoAQQBIAEEAQQBZAFEAQgBqAEEARwBVAEEATwBnAEEAZwBBAEcANABBAGIAdwBCADMAQQBIAEkAQQBZAFEAQgB3AEEARABzAEEASQBnAEEAKwBBAEQAdwBBAFkAdwBCAHYAQQBHAFEAQQBaAFEAQQArAEEARQB3AEEAYQBRAEIAdQBBAEcAVQBBAFkAUQBCAHkAQQBDAEEAQQBVAHcAQgBsAEEARwBFAEEAYwBnAEIAagBBAEcAZwBBAFAAQQBBAHYAQQBHAE0AQQBiAHcAQgBrAEEARwBVAEEAUABnAEEAZwBBAEYATQBBAGQAQQBCAGwAQQBIAEEAQQBjAHcAQQA4AEEAQwA4AEEAZABBAEIAbwBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAeABBAEQAQQBBAE0AQQBBAHcAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAeABBAEQAQQBBAEwAQQBBAHcAQQBEAEEAQQBNAEEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAE0AUQBBAHcAQQBEAEEAQQBMAEEAQQB3AEEARABBAEEATQBBAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAWQBRAEIAaQBBAEcAdwBBAFoAUQBBACsAQQBBAD0APQAKAHMAdQBmAGYAaQB4ADoA:31b8e172-b470-440e-83d8-e6b185028602\n\n\n How would you describe what happens to the number of steps as the input list gets bigger? Write your hypothesis about the pattern.\n\n\nDoes what happens with steps match what happens with time? That is, can you count steps as a measure of time?\n\n\n\n\n\nAAP-4.A.3\n\nThe relationship between the input size and the number of steps required to solve a problem is the efficiency of the algorithm used to solve the problem.\n\n\nAAP-4.A.4, AAP-4.A.5\n\nCounting the number of steps, as you just did, is an informal, but perfectly good way to determine the efficiency of an algorithm. The formal measurement of an algorithm requires a mathematical proof.\n\nIn this course, you are mostly working with small problems, so it doesn’t matter how efficient the algorithm is. But in the real world, programmers deal with lists of billions of items, so the efficiency of an algorithm can make a huge difference.\n\n\n\n\n\nAAP-2.P part a\n\n\nAAP-2.P.3\n\nNow, test how much time binary search takes to find the word “zebra” in the sorted lists, and determine how many comparisons are made by the algorithm if “zebra” is the last word in each length list. 31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATgBRAEEAdwBBAEQASQBBAE4AZwBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEcASQBBAGIAdwBCAHkAQQBHAFEAQQBaAFEAQgB5AEEARwBVAEEAWgBBAEEAZwBBAEcATQBBAFoAUQBCAHUAQQBIAFEAQQBaAFEAQgB5AEEAQwBBAEEAYwB3AEIAMABBAEcARQBBAGIAZwBCAGsAQQBHAEUAQQBjAGcAQgBrAEEAQwBJAEEASQBBAEIAegBBAEgAVQBBAGIAUQBCAHQAQQBHAEUAQQBjAGcAQgA1AEEARAAwAEEASQBnAEIAdwBBAEcARQBBAGMAZwBCADAAQQBHAGsAQQBZAFEAQgBzAEEARwB3AEEAZQBRAEEAZwBBAEcASQBBAGIAQQBCAGgAQQBHADQAQQBhAHcAQQBnAEEASABRAEEAWQBRAEIAaQBBAEcAdwBBAFoAUQBBAGcAQQBIAE0AQQBhAEEAQgB2AEEASABjAEEAYQBRAEIAdQBBAEcAYwBBAEkAQQBCADAAQQBHAGcAQQBaAFEAQQBnAEEASABRAEEAYQBRAEIAdABBAEcAVQBBAEkAQQBCAGgAQQBHADQAQQBaAEEAQQBnAEEARwA0AEEAYgB3AEIAMwBBAEMAQQBBAFkAUQBCAHMAQQBIAE0AQQBiAHcAQQBnAEEASABNAEEAZABBAEIAbABBAEgAQQBBAGMAdwBBAGcAQQBIAFEAQQBiAHcAQQBnAEEASABJAEEAZABRAEIAdQBBAEMAQQBBAFQAQQBCAEoAQQBFADQAQQBSAFEAQgBCAEEARgBJAEEASQBBAEIAVABBAEUAVQBBAFEAUQBCAFMAQQBFAE0AQQBTAEEAQQBnAEEARwBZAEEAYgB3AEIAeQBBAEMAQQBBAGIAQQBCAHAAQQBIAE0AQQBkAEEAQgB6AEEAQwBBAEEAYgB3AEIAbQBBAEMAQQBBAFoAQQBCAHAAQQBHAFkAQQBaAGcAQgBsAEEASABJAEEAWgBRAEIAdQBBAEgAUQBBAEkAQQBCAHMAQQBHAFUAQQBiAGcAQgBuAEEASABRAEEAYQBBAEIAegBBAEMASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGEAQQBBAGcAQQBIAE0AQQBZAHcAQgB2AEEASABBAEEAWgBRAEEAOQBBAEMASQBBAFkAdwBCAHYAQQBHAHcAQQBJAGcAQQArAEEARQB3AEEAWgBRAEIAdQBBAEcAYwBBAGQAQQBCAG8AQQBDAEEAQQBiAHcAQgBtAEEAQwBBAEEAVABBAEIAcABBAEgATQBBAGQAQQBBADgAQQBDADgAQQBkAEEAQgBvAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGEAQQBBAGcAQQBIAE0AQQBZAHcAQgB2AEEASABBAEEAWgBRAEEAOQBBAEMASQBBAFkAdwBCAHYAQQBHAHcAQQBJAGcAQQArAEEARAB3AEEAWQB3AEIAdgBBAEcAUQBBAFoAUQBBACsAQQBFAEkAQQBhAFEAQgB1AEEARwBFAEEAYwBnAEIANQBBAEMAQQBBAFUAdwBCAGwAQQBHAEUAQQBjAGcAQgBqAEEARwBnAEEAUABBAEEAdgBBAEcATQBBAGIAdwBCAGsAQQBHAFUAQQBQAGcAQQBnAEEARgBRAEEAYQBRAEIAdABBAEcAVQBBAFAAQQBBAHYAQQBIAFEAQQBhAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAZwBBAEkAQQBCAHoAQQBHAE0AQQBiAHcAQgB3AEEARwBVAEEAUABRAEEAaQBBAEcATQBBAGIAdwBCAHMAQQBDAEkAQQBQAGcAQQA4AEEARwBNAEEAYgB3AEIAawBBAEcAVQBBAFAAZwBCAEMAQQBHAGsAQQBiAGcAQgBoAEEASABJAEEAZQBRAEEAZwBBAEYATQBBAFoAUQBCAGgAQQBIAEkAQQBZAHcAQgBvAEEARAB3AEEATAB3AEIAagBBAEcAOABBAFoAQQBCAGwAQQBEADQAQQBJAEEAQgBUAEEASABRAEEAWgBRAEIAdwBBAEgATQBBAFAAQQBBAHYAQQBIAFEAQQBhAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBNAFEAQQB3AEEARABBAEEATQBBAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBNAFEAQQB3AEEAQwB3AEEATQBBAEEAdwBBAEQAQQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARABFAEEATQBBAEEAdwBBAEMAdwBBAE0AQQBBAHcAQQBEAEEAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEAUABnAEEAPQAKAHMAdQBmAGYAaQB4ADoA:31b8e172-b470-440e-83d8-e6b185028602\n\n\n Describe what happens to the time and the number of steps as the input list gets bigger. Write down your hypothesis.\n\n\n\nAAP-2.P.3, AAP-4.A.6\n\nLook back at your tables for the linear search and the binary search algorithm, and compare the two search algorithms:\n\n\nWhich has more blocks in its code?\n\n\nWhich runs faster for large inputs?\n\n\nWhich algorithm is more efficient?\n\n\n\n\n\nAAP-2.P part b\n\n What are the two requirements to use a binary search?"
  },
  {
    "objectID": "unit-5/lab-1/5-categorizing-algorithms.html",
    "href": "unit-5/lab-1/5-categorizing-algorithms.html",
    "title": "Page 5: Categorizing Algorithms",
    "section": "",
    "text": "TG and solutions need to be checked. –MF, 12/19/18\n\n\n\nOn this page, you will compare four algorithms and learn how they each take a different category of time to run.\n\n\n\n\nLocate the  block included in your project, and time it for various starting numbers. 31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATgBnAEEAMABBAEQAUQBBAAoAcAByAGUAZgBpAHgAOgAKAHMAbwB1AHIAYwBlADoAUABBAEIAMABBAEcARQBBAFkAZwBCAHMAQQBHAFUAQQBJAEEAQgBqAEEARwB3AEEAWQBRAEIAegBBAEgATQBBAFAAUQBBAGkAQQBHAEkAQQBiAHcAQgB5AEEARwBRAEEAWgBRAEIAeQBBAEcAVQBBAFoAQQBBAGcAQQBHAE0AQQBaAFEAQgB1AEEASABRAEEAWgBRAEIAeQBBAEMAQQBBAGMAdwBCADAAQQBHAEUAQQBiAGcAQgBrAEEARwBFAEEAYwBnAEIAawBBAEMASQBBAEkAQQBCAHoAQQBIAFUAQQBiAFEAQgB0AEEARwBFAEEAYwBnAEIANQBBAEQAMABBAEkAZwBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEASQBBAEIAegBBAEcAZwBBAGIAdwBCADMAQQBHAGsAQQBiAGcAQgBuAEEAQwBBAEEAZABBAEIAbwBBAEcAVQBBAEkAQQBCAHUAQQBIAFUAQQBiAFEAQgBpAEEARwBVAEEAYwBnAEEAZwBBAEcAOABBAFoAZwBBAGcAQQBHAGMAQQBkAFEAQgBsAEEASABNAEEAYwB3AEIAbABBAEgATQBBAEkAQQBCAHUAQQBHAFUAQQBaAFEAQgBrAEEARwBVAEEAWgBBAEEAZwBBAEgAUQBBAGIAdwBBAGcAQQBHAFkAQQBhAFEAQgB1AEEARwBRAEEASQBBAEIAMABBAEcAZwBBAFoAUQBBAGcAQQBHAHcAQQBZAFEAQgB6AEEASABRAEEASQBBAEIAdQBBAEgAVQBBAGIAUQBCAGkAQQBHAFUAQQBjAGcAQQBnAEEARwBrAEEAYgBnAEEAZwBBAEcARQBBAEkAQQBCAHoAQQBHADgAQQBjAGcAQgAwAEEARwBVAEEAWgBBAEEAZwBBAEcAdwBBAGEAUQBCAHoAQQBIAFEAQQBJAEEAQgBtAEEARwA4AEEAYwBnAEEAZwBBAEcARQBBAEkAQQBCAHMAQQBHAGsAQQBjAHcAQgAwAEEAQwBBAEEAYgB3AEIAbQBBAEMAQQBBAFkAUQBBAGcAQQBHAGMAQQBhAFEAQgAyAEEARwBVAEEAYgBnAEEAZwBBAEcAdwBBAFoAUQBCAHUAQQBHAGMAQQBkAEEAQgBvAEEAQwBJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYQBBAEEAZwBBAEgATQBBAFkAdwBCAHYAQQBIAEEAQQBaAFEAQQA5AEEAQwBJAEEAWQB3AEIAdgBBAEcAdwBBAEkAZwBBACsAQQBGAE0AQQBkAEEAQgBoAEEASABJAEEAZABBAEIAcABBAEcANABBAFoAdwBBAGcAQQBFADQAQQBkAFEAQgB0AEEARwBJAEEAWgBRAEIAeQBBAEQAdwBBAEwAdwBCADAAQQBHAGcAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAbwBBAEMAQQBBAGMAdwBCAGoAQQBHADgAQQBjAEEAQgBsAEEARAAwAEEASQBnAEIAagBBAEcAOABBAGIAQQBBAGkAQQBEADQAQQBQAEEAQgBqAEEARwA4AEEAWgBBAEIAbABBAEQANABBAE0AZwBBADEAQQBDAHcAQQBNAEEAQQB3AEEARABBAEEASQBBAEIAcABBAEcANABBAGQAQQBCAGwAQQBHAGMAQQBaAFEAQgB5AEEASABNAEEAUABBAEEAdgBBAEcATQBBAGIAdwBCAGsAQQBHAFUAQQBQAGcAQQBnAEEARgBRAEEAYQBRAEIAdABBAEcAVQBBAFAAQQBBAHYAQQBIAFEAQQBhAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBNAFEAQQB3AEEARABBAEEATQBBAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAEUAQQBNAEEAQQBzAEEARABBAEEATQBBAEEAdwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBNAFEAQQB3AEEARABBAEEATABBAEEAdwBBAEQAQQBBAE0AQQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARABFAEEATABBAEEAdwBBAEQAQQBBAE0AQQBBAHMAQQBEAEEAQQBNAEEAQQB3AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAE0AUQBBAHcAQQBDAHcAQQBNAEEAQQB3AEEARABBAEEATABBAEEAdwBBAEQAQQBBAE0AQQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEcARQBBAFkAZwBCAHMAQQBHAFUAQQBQAGcAQQA9AAoAcwB1AGYAZgBpAHgAOgA=:31b8e172-b470-440e-83d8-e6b185028602\n\n\n Look at the table. How would you describe what happens to the time as the starting number gets bigger? Write a hypothesis about the pattern.\n\n\n\nThere are several different ways to sort a list, some of which you will learn about in Unit 8. This sort block uses an “insertion sort” algorithm.\n\nLocate the  block included in your project, and time it for each length list. 31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBRAEEANABBAEQARQBBAE0AdwBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEcASQBBAGIAdwBCAHkAQQBHAFEAQQBaAFEAQgB5AEEARwBVAEEAWgBBAEEAZwBBAEcATQBBAFoAUQBCAHUAQQBIAFEAQQBaAFEAQgB5AEEAQwBBAEEAYwB3AEIAMABBAEcARQBBAGIAZwBCAGsAQQBHAEUAQQBjAGcAQgBrAEEAQwBJAEEASQBBAEIAegBBAEgAVQBBAGIAUQBCAHQAQQBHAEUAQQBjAGcAQgA1AEEARAAwAEEASQBnAEIAMABBAEcARQBBAFkAZwBCAHMAQQBHAFUAQQBJAEEAQgB6AEEARwBnAEEAYgB3AEIAMwBBAEcAawBBAGIAZwBCAG4AQQBDAEEAQQBkAEEAQgBvAEEARwBVAEEASQBBAEIAdQBBAEgAVQBBAGIAUQBCAGkAQQBHAFUAQQBjAGcAQQBnAEEARwA4AEEAWgBnAEEAZwBBAEcAYwBBAGQAUQBCAGwAQQBIAE0AQQBjAHcAQgBsAEEASABNAEEASQBBAEIAdQBBAEcAVQBBAFoAUQBCAGsAQQBHAFUAQQBaAEEAQQBnAEEASABRAEEAYgB3AEEAZwBBAEcAWQBBAGEAUQBCAHUAQQBHAFEAQQBJAEEAQgAwAEEARwBnAEEAWgBRAEEAZwBBAEcAdwBBAFkAUQBCAHoAQQBIAFEAQQBJAEEAQgB1AEEASABVAEEAYgBRAEIAaQBBAEcAVQBBAGMAZwBBAGcAQQBHAGsAQQBiAGcAQQBnAEEARwBFAEEASQBBAEIAegBBAEcAOABBAGMAZwBCADAAQQBHAFUAQQBaAEEAQQBnAEEARwB3AEEAYQBRAEIAegBBAEgAUQBBAEkAQQBCAG0AQQBHADgAQQBjAGcAQQBnAEEARwBFAEEASQBBAEIAcwBBAEcAawBBAGMAdwBCADAAQQBDAEEAQQBiAHcAQgBtAEEAQwBBAEEAWQBRAEEAZwBBAEcAYwBBAGEAUQBCADIAQQBHAFUAQQBiAGcAQQBnAEEARwB3AEEAWgBRAEIAdQBBAEcAYwBBAGQAQQBCAG8AQQBDAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBhAEEAQQBnAEEASABNAEEAWQB3AEIAdgBBAEgAQQBBAFoAUQBBADkAQQBDAEkAQQBZAHcAQgB2AEEARwB3AEEASQBnAEEAKwBBAEUAdwBBAFoAUQBCAHUAQQBHAGMAQQBkAEEAQgBvAEEAQwBBAEEAYgB3AEIAbQBBAEMAQQBBAFQAQQBCAHAAQQBIAE0AQQBkAEEAQQA4AEEAQwA4AEEAZABBAEIAbwBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBhAEEAQQBnAEEASABNAEEAWQB3AEIAdgBBAEgAQQBBAFoAUQBBADkAQQBDAEkAQQBZAHcAQgB2AEEARwB3AEEASQBnAEEAKwBBAEQAdwBBAFkAdwBCAHYAQQBHAFEAQQBaAFEAQQArAEEARgBNAEEAYgB3AEIAeQBBAEgAUQBBAFAAQQBBAHYAQQBHAE0AQQBiAHcAQgBrAEEARwBVAEEAUABnAEEAZwBBAEYAUQBBAGEAUQBCAHQAQQBHAFUAQQBQAEEAQQB2AEEASABRAEEAYQBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEATQBRAEEAdwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBNAFEAQQB3AEEARABBAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBAHgAQQBEAEEAQQBNAEEAQQB3AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBZAFEAQgBpAEEARwB3AEEAWgBRAEEAKwBBAEEAPQA9AAoAcwB1AGYAZgBpAHgAOgA=:31b8e172-b470-440e-83d8-e6b185028602\n\n\nHow would you describe what happens to the time as the size of the input list gets bigger? Write a hypothesis.\n\n\n\nYou can classify algorithms by the amount of time they take to run. \n\n\n\n\nAn algorithm takes linear time the number of steps is proportional to the input size; doubling the input size doubles the time required.\n\n\nAn algorithm takes sublinear time if the number of steps grows more slowly than the size.\n\n\nAn algorithm takes constant time if it takes the same number of steps regardless of input size.\n\n\nAn algorithm takes quadratic time if the number of steps is proportional to the square of the input size.\n\n\n\n\n\nLook back at your table for linear search. Confirm that multiplying the list length by ten roughly multiplies the time taken by ten (linear time).\n\n\nLook back at your table for binary search. Confirm that the search time for each word list is less than for linear search (sublinear time).\n\n\nLook back at your table for 25,000 integers. Confirm that it takes about the same amount of time regardless of the input (constant time).\n\n\nLook back at your table for sort. Confirm that multiplying the list length by ten roughly multiplies the time taken by one hundred (quadratic time).\n\n\n\nThe difference between linear search and binary search can be very important if you’re searching in a list of ten million items, but the most important difference in algorithm efficiency is between polynomial time (proportional to any power of the input size) and exponential time.\n\n\n\nAn algorithm takes polynomial time if the number of steps is less than or equal to a power of the size of the input, such as constant (n0), sublinear, linear (n1), quadratic (n2), or cubic (n3).\n\n\nAn algorithm takes exponential time if the number of steps is proportional to an exponential function of the size of the input, such as 2n, 10n, etc., which is much slower than any polynomial.\n\n\n\nIn an exponential time algorithm, just adding 1 to the input size (n) of a 2n time algorithm doubles the number of steps! So, for example, if the input size is 20, any polynomial time algorithm will be fast enough, but an exponential time algorithm might take many years to finish.\n\n\n\n\nAAP-4.A.7\n\n\nThe term “reasonable time” describes any algorithm that runs in polynomial time. Exponential time algorithms are not considered reasonable.\n\n\n\n\n\nOn the Internet, many people use the word exponential to mean “happening very fast”, such as clickbait-headline-example-blah or example-bleh. -some nicer version of, now you know better-\n\n\n\n\nAAP-2.M.2 text before bullets\n\nOne reason it’s worth learning these categories is to avoid reinventing the wheel. For example, you’ve learned that if a list is sorted you can search it in sublinear time using binary search. So when you’re writing a program that needs to search through a list repeatedly, it’s worthwhile to sort the list before searching. Knowing about algorithms that already exist can help you construct new algorithms.\nAll of the algorithms you’ve explored so far in this lab (linear search; binary search; 25,000 integers; and sort) are reasonable time algorithms. The following optional activity is an example of an exponential time algorithm.\n\n\nA problem that may be familiar that requires an exponential time algorithm is computing any given element of Pascal’s Triangle. In Pascal’s Triangle, each number is found by adding the two numbers above it. For example, 4 + 6 = 10 and 15 + 6 = 21 as shown below. The first and last number of each row, which don’t have two numbers above them are 1.   \n\nLocate the  block included in your project, and time it for various inputs.\n\nIf these take too long to run, you can stop your program; just fill in the table as far as the speed of your computer will allow.\n\n31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATwBRAEEANQBBAEQASQBBAE0AdwBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEcASQBBAGIAdwBCAHkAQQBHAFEAQQBaAFEAQgB5AEEARwBVAEEAWgBBAEEAZwBBAEcATQBBAFoAUQBCAHUAQQBIAFEAQQBaAFEAQgB5AEEAQwBJAEEASQBBAEIAegBBAEgAVQBBAGIAUQBCAHQAQQBHAEUAQQBjAGcAQgA1AEEARAAwAEEASQBnAEIAMABBAEcARQBBAFkAZwBCAHMAQQBHAFUAQQBJAEEAQgB6AEEARwBnAEEAYgB3AEIAMwBBAEcAawBBAGIAZwBCAG4AQQBDAEEAQQBkAEEAQgBvAEEARwBVAEEASQBBAEIAdQBBAEgAVQBBAGIAUQBCAGkAQQBHAFUAQQBjAGcAQQBnAEEARwA4AEEAWgBnAEEAZwBBAEcAYwBBAGQAUQBCAGwAQQBIAE0AQQBjAHcAQgBsAEEASABNAEEASQBBAEIAdQBBAEcAVQBBAFoAUQBCAGsAQQBHAFUAQQBaAEEAQQBnAEEASABRAEEAYgB3AEEAZwBBAEcAWQBBAGEAUQBCAHUAQQBHAFEAQQBJAEEAQgAwAEEARwBnAEEAWgBRAEEAZwBBAEcAdwBBAFkAUQBCAHoAQQBIAFEAQQBJAEEAQgB1AEEASABVAEEAYgBRAEIAaQBBAEcAVQBBAGMAZwBBAGcAQQBHAGsAQQBiAGcAQQBnAEEARwBFAEEASQBBAEIAegBBAEcAOABBAGMAZwBCADAAQQBHAFUAQQBaAEEAQQBnAEEARwB3AEEAYQBRAEIAegBBAEgAUQBBAEkAQQBCAG0AQQBHADgAQQBjAGcAQQBnAEEARwBFAEEASQBBAEIAcwBBAEcAawBBAGMAdwBCADAAQQBDAEEAQQBiAHcAQgBtAEEAQwBBAEEAWQBRAEEAZwBBAEcAYwBBAGEAUQBCADIAQQBHAFUAQQBiAGcAQQBnAEEARwB3AEEAWgBRAEIAdQBBAEcAYwBBAGQAQQBCAG8AQQBDAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBhAEEAQQBnAEEASABNAEEAWQB3AEIAdgBBAEgAQQBBAFoAUQBBADkAQQBDAEkAQQBZAHcAQgB2AEEARwB3AEEASQBnAEEAZwBBAEgATQBBAGQAQQBCADUAQQBHAHcAQQBaAFEAQQA5AEEAQwBJAEEAZAB3AEIAbwBBAEcAawBBAGQAQQBCAGwAQQBDADAAQQBjAHcAQgB3AEEARwBFAEEAWQB3AEIAbABBAEQAbwBBAEkAQQBCAHUAQQBHADgAQQBkAHcAQgB5AEEARwBFAEEAYwBBAEEANwBBAEMASQBBAFAAZwBCAEoAQQBHADQAQQBjAEEAQgAxAEEASABRAEEAYwB3AEEAOABBAEMAOABBAGQAQQBCAG8AQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYQBBAEEAZwBBAEgATQBBAFkAdwBCAHYAQQBIAEEAQQBaAFEAQQA5AEEAQwBJAEEAWQB3AEIAdgBBAEcAdwBBAEkAZwBBAGcAQQBIAE0AQQBkAEEAQgA1AEEARwB3AEEAWgBRAEEAOQBBAEMASQBBAGQAdwBCAG8AQQBHAGsAQQBkAEEAQgBsAEEAQwAwAEEAYwB3AEIAdwBBAEcARQBBAFkAdwBCAGwAQQBEAG8AQQBJAEEAQgB1AEEARwA4AEEAZAB3AEIAeQBBAEcARQBBAGMAQQBBADcAQQBDAEkAQQBQAGcAQgBRAEEARwBFAEEAYwB3AEIAagBBAEcARQBBAGIAQQBBAG4AQQBIAE0AQQBJAEEAQgBVAEEASABJAEEAYQBRAEIAaABBAEcANABBAFoAdwBCAHMAQQBHAFUAQQBJAEEAQgBVAEEARwBrAEEAYgBRAEIAbABBAEQAdwBBAEwAdwBCADAAQQBHAGcAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAFUAQQBMAEEAQQBnAEEARABJAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBAHgAQQBEAEEAQQBMAEEAQQBnAEEARABVAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBAHgAQQBEAFUAQQBMAEEAQQBnAEEARABjAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBAHkAQQBEAEEAQQBMAEEAQQBnAEEARABFAEEATQBBAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAEkAQQBOAFEAQQBzAEEAQwBBAEEATQBRAEEAeQBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAWQBRAEIAaQBBAEcAdwBBAFoAUQBBACsAQQBBAD0APQAKAHMAdQBmAGYAaQB4ADoA:31b8e172-b470-440e-83d8-e6b185028602\n\nThe row value is the input to pascals triangle that matters. (The position input is only given so you get a time for one of the positions near the middle of the row, which take longer to compute.)\n\nThese row inputs are very small compared to the input size for the linear search, binary search, and sort algorithms, and yet the time required for pascals triangle is much higher. Your computer probably can’t do much past 25.\n\nThis algorithm works by adding the two numbers above using the algorithm inside itself recursively, but there are better algorithms that compute the value a number in Pascal’s Triangle in linear time.\n\n\n\n\n\n\n\nAAP-4.A part a\n\n\nWrite a paragraph explaining the difference between algorithms that run in a reasonable time and those that do not.\n\n\nThis question is similar to those you will see on the AP CSP exam. \n\n\nThe table below shows the computer time it takes to complete various tasks on the data of different sized towns.\n31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBRAEEAeABBAEQAZwBBAE0AdwBBADIAQQBBAD0APQAKAHAAcgBlAGYAaQB4ADoACgBzAG8AdQByAGMAZQA6AFAAQQBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEASQBBAEIAagBBAEcAdwBBAFkAUQBCAHoAQQBIAE0AQQBQAFEAQQBpAEEARwBJAEEAYgB3AEIAeQBBAEcAUQBBAFoAUQBCAHkAQQBHAFUAQQBaAEEAQQBnAEEARwBNAEEAWgBRAEIAdQBBAEgAUQBBAFoAUQBCAHkAQQBDAEEAQQBjAHcAQgAwAEEARwBFAEEAYgBnAEIAawBBAEcARQBBAGMAZwBCAGsAQQBDAEkAQQBJAEEAQgB6AEEASABVAEEAYgBRAEIAdABBAEcARQBBAGMAZwBCADUAQQBEADAAQQBJAGcAQgBvAEEARwA4AEEAZABRAEIAeQBBAEgATQBBAEkAQQBCAHkAQQBHAFUAQQBjAFEAQgAxAEEARwBrAEEAYwBnAEIAbABBAEcAUQBBAEkAQQBCAG0AQQBHADgAQQBjAGcAQQBnAEEASABZAEEAWQBRAEIAeQBBAEcAawBBAGIAdwBCADEAQQBIAE0AQQBJAEEAQgBrAEEARwBFAEEAZABBAEIAaABBAEMAQQBBAGIAUQBCAGgAQQBHADQAQQBZAFEAQgBuAEEARwBVAEEAYgBRAEIAbABBAEcANABBAGQAQQBBAGcAQQBIAFEAQQBZAFEAQgB6AEEARwBzAEEAYwB3AEEAZwBBAEcAWQBBAGIAdwBCAHkAQQBDAEEAQQBkAEEAQgB2AEEASABjAEEAYgBnAEIAegBBAEMAQQBBAGIAdwBCAG0AQQBDAEEAQQBkAGcAQgBoAEEASABJAEEAYQBRAEIAdgBBAEgAVQBBAGMAdwBBAGcAQQBIAE0AQQBhAFEAQgA2AEEARwBVAEEAYwB3AEEAaQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAZwBBAEkAQQBCAHoAQQBHAE0AQQBiAHcAQgB3AEEARwBVAEEAUABRAEEAaQBBAEcATQBBAGIAdwBCAHMAQQBDAEkAQQBQAGcAQgBVAEEARwBFAEEAYwB3AEIAcgBBAEQAdwBBAEwAdwBCADAAQQBHAGcAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAbwBBAEMAQQBBAGMAdwBCAGoAQQBHADgAQQBjAEEAQgBsAEEARAAwAEEASQBnAEIAagBBAEcAOABBAGIAQQBBAGkAQQBEADQAQQBVAHcAQgB0AEEARwBFAEEAYgBBAEIAcwBBAEMAQQBBAFYAQQBCAHYAQQBIAGMAQQBiAGcAQQA4AEEARwBJAEEAYwBnAEEAZwBBAEMAOABBAFAAZwBBAG8AQQBIAEEAQQBiAHcAQgB3AEEASABVAEEAYgBBAEIAaABBAEgAUQBBAGEAUQBCAHYAQQBHADQAQQBJAEEAQQB4AEEAQwB3AEEATQBBAEEAdwBBAEQAQQBBAEsAUQBBADgAQQBDADgAQQBkAEEAQgBvAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGEAQQBBAGcAQQBIAE0AQQBZAHcAQgB2AEEASABBAEEAWgBRAEEAOQBBAEMASQBBAFkAdwBCAHYAQQBHAHcAQQBJAGcAQQArAEEARQAwAEEAYQBRAEIAawBBAEMAMABBAGMAdwBCAHAAQQBIAG8AQQBaAFEAQgBrAEEAQwBBAEEAVgBBAEIAdgBBAEgAYwBBAGIAZwBBADgAQQBHAEkAQQBjAGcAQQBnAEEAQwA4AEEAUABnAEEAbwBBAEgAQQBBAGIAdwBCAHcAQQBIAFUAQQBiAEEAQgBoAEEASABRAEEAYQBRAEIAdgBBAEcANABBAEkAQQBBAHgAQQBEAEEAQQBMAEEAQQB3AEEARABBAEEATQBBAEEAcABBAEQAdwBBAEwAdwBCADAAQQBHAGcAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAbwBBAEMAQQBBAGMAdwBCAGoAQQBHADgAQQBjAEEAQgBsAEEARAAwAEEASQBnAEIAagBBAEcAOABBAGIAQQBBAGkAQQBEADQAQQBUAEEAQgBoAEEASABJAEEAWgB3AEIAbABBAEMAQQBBAFYAQQBCAHYAQQBIAGMAQQBiAGcAQQA4AEEARwBJAEEAYwBnAEEAZwBBAEMAOABBAFAAZwBBAG8AQQBIAEEAQQBiAHcAQgB3AEEASABVAEEAYgBBAEIAaABBAEgAUQBBAGEAUQBCAHYAQQBHADQAQQBJAEEAQQB4AEEARABBAEEATQBBAEEAcwBBAEQAQQBBAE0AQQBBAHcAQQBDAGsAQQBQAEEAQQB2AEEASABRAEEAYQBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBvAEEAQwBBAEEAYwB3AEIAagBBAEcAOABBAGMAQQBCAGwAQQBEADAAQQBJAGcAQgB5AEEARwA4AEEAZAB3AEEAaQBBAEQANABBAFIAUQBCAHUAQQBIAFEAQQBaAFEAQgB5AEEARwBrAEEAYgBnAEIAbgBBAEMAQQBBAFIAQQBCAGgAQQBIAFEAQQBZAFEAQQA4AEEAQwA4AEEAZABBAEIAbwBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARABJAEEASQBBAEIAbwBBAEcAOABBAGQAUQBCAHkAQQBIAE0AQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQB5AEEARABBAEEASQBBAEIAbwBBAEcAOABBAGQAUQBCAHkAQQBIAE0AQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQB5AEEARABBAEEATQBBAEEAZwBBAEcAZwBBAGIAdwBCADEAQQBIAEkAQQBjAHcAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBnAEEASQBBAEIAegBBAEcATQBBAGIAdwBCAHcAQQBHAFUAQQBQAFEAQQBpAEEASABJAEEAYgB3AEIAMwBBAEMASQBBAFAAZwBCAEMAQQBHAEUAQQBZAHcAQgByAEEARwBrAEEAYgBnAEIAbgBBAEMAQQBBAGQAUQBCAHcAQQBDAEEAQQBSAEEAQgBoAEEASABRAEEAWQBRAEEAOABBAEMAOABBAGQAQQBCAG8AQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAQQBBAEwAZwBBADEAQQBDAEEAQQBhAEEAQgB2AEEASABVAEEAYwBnAEIAegBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAE4AUQBBAGcAQQBHAGcAQQBiAHcAQgAxAEEASABJAEEAYwB3AEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAVQBBAE0AQQBBAGcAQQBHAGcAQQBiAHcAQgAxAEEASABJAEEAYwB3AEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAZwBBAEkAQQBCAHoAQQBHAE0AQQBiAHcAQgB3AEEARwBVAEEAUABRAEEAaQBBAEgASQBBAGIAdwBCADMAQQBDAEkAQQBQAGcAQgBUAEEARwBVAEEAWQBRAEIAeQBBAEcATQBBAGEAQQBCAHAAQQBHADQAQQBaAHcAQQBnAEEASABRAEEAYQBBAEIAeQBBAEcAOABBAGQAUQBCAG4AQQBHAGcAQQBJAEEAQgBFAEEARwBFAEEAZABBAEIAaABBAEQAdwBBAEwAdwBCADAAQQBHAGcAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAE4AUQBBAGcAQQBHAGcAQQBiAHcAQgAxAEEASABJAEEAYwB3AEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQARQBBAE4AUQBBAGcAQQBHAGcAQQBiAHcAQgAxAEEASABJAEEAYwB3AEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQASQBBAE4AUQBBAGcAQQBHAGcAQQBiAHcAQgAxAEEASABJAEEAYwB3AEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAZwBBAEkAQQBCAHoAQQBHAE0AQQBiAHcAQgB3AEEARwBVAEEAUABRAEEAaQBBAEgASQBBAGIAdwBCADMAQQBDAEkAQQBQAGcAQgBUAEEARwA4AEEAYwBnAEIAMABBAEcAawBBAGIAZwBCAG4AQQBDAEEAQQBSAEEAQgBoAEEASABRAEEAWQBRAEEAOABBAEMAOABBAGQAQQBCAG8AQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAQQBBAEwAZwBBAHcAQQBEAEUAQQBJAEEAQgBvAEEARwA4AEEAZABRAEIAeQBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAE0AUQBBAGcAQQBHAGcAQQBiAHcAQgAxAEEASABJAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAeABBAEQAQQBBAE0AQQBBAGcAQQBHAGcAQQBiAHcAQgAxAEEASABJAEEAYwB3AEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgBoAEEARwBJAEEAYgBBAEIAbABBAEQANABBAAoAcwB1AGYAZgBpAHgAOgA=:31b8e172-b470-440e-83d8-e6b185028602\nBased on the information in the table, which of the following tasks is likely to take the longest amount of time when scaled up for a city of population 1,000,000.\n\n\n\nEntering data\n\n\n\nAs the population size is multiplied by 10, the time needed for entering data is also multiplied by 10, so for a population of 1,000,000, it should take about 10×200=2000 hours.\n\n\n\n\nBacking up data\n\n\n\nAs the population size is multiplied by 10, time needed for backing up data is multiplied by 10, so for a population of 1,000,000, it should take about 10×50=500 hours.\n\n\n\n\nSearching through data\n\n\nSearching through the data seems to go up by about 10 hours each time the population is multiplied by 10, so for a population of 1,000,000, it should take about 35 hours.\n\n\n\n\nSorting data\n\n\nCorrect!  As the population size is multiplied by 10, the time needed for the sorting of data is multiplied by 100. So, for a population of 1,000,000, it should take about 100×100=10,000 hours."
  },
  {
    "objectID": "unit-5/lab-1/6-heuristics.html",
    "href": "unit-5/lab-1/6-heuristics.html",
    "title": "Page 6: Heuristic Solutions",
    "section": "",
    "text": "TG and solutions need to be checked. –MF, 12/19/18\n\n\n\nOn this page, you’ll learn that even for unreasonable time problems, there can still be reasonable time “close enough” solutions.\n\n\nAAP-4.A.6, AAP-4.A.8, AAP-4.A.9\n\nIf a problem can be solved in exponential time, there might be a different algorithm that can do it in polynomial time (that is, more quickly), but some problems can’t possibly be answered in polynomial time. It’s important to recognize that an exponential time algorithm still solves a problem correctly; it just takes a unreasonably long time (perhaps even hundreds of years for some inputs, for example).\nExponential time algorithms can sometimes be replaced by heuristics, which are polynomial-time algorithms that don’t solve the problem exactly, but give a good enough approximation. But heuristics are useful only for certain kinds of problems.\n\n\nAAP-4.A.2\n\n\n\nA decision problem is a problem with a true/false answer (for example, “is 5,825,496,221 a prime number?”).\n\n\nAn optimization problem is one with the goal of finding the best solution among many (for example, “what’s the best school schedule to place every student into as many of their requested classes as possible?”).\n\n\n\n\n\n\nFor which kind of problems (optimization problems or decision problems) is a heuristic solution likely to be useful?\n\n\n\nAn example of a problem for which a heuristic solution is useful is the traveling salesperson problem: For a group of cities, what is the shortest route for a salesperson to visit every city and return to their home city? This is good case for heuristics because:\n\n\nIt’s clear that there must actually be a shortest route.\n\n\nThere is no known polynomial time algorithm for this problem. (Most computer scientists think that it’s not possible to write one.)\n\n\nThere is a possible heuristic: pick a path at random, then try to improve it by swapping two cities repeatedly until you can’t make the path better with such small changes.\n\n\n\nThis heuristic is called “hill climbing” because you’ll find the best nearby path (the top of a hill), but there might be a higher hill (a better path) further away.\n\n\n\n\n\nAAP-4.A part b\n\n\n\n\nIn which of the following problems is a heuristic solution appropriate?\n\n\n\nFind the biggest item in a list.\n\n\nWe can find the solution to this problem in polynomial time.\n\n\n\n\nFind the best combination of ingredients for spaghetti sauce.\n\n\nThere is no perfect (correct) solution to this problem because different people have different tastes.\n\n\n\n\nPlaying chess.\n\n\nCorrect! This is a good example because there is a solution (a way to determine the outcome of a perfectly played game), the solution can’t be found in polynomial time, and an approximate solution would be helpful.\n\n\n\n\nFind the combination to a lock with n numbers.\n\n\nThere is no possibility of a heuristic because it’s not helpful to have an almost correct combination (an approximate solution).\n\n\n\n\n\n\n\n\n\n\n\n\nCan All Decision Problems Be Solved?\n\nAs it turns out, not all decision problems (true/false questions) can be solved with an algorithm.\n\n\nAAP-4.B.1, AAP-4.B.2, AAP-4.B.3\n\nA decidable problem a decision problem for which it’s possible to write an algorithm that will give a correct output for all inputs.\nAn undecidable problem is the opposite. It’s not possible to write an algorithm that will give a correct output for all inputs—even though it might be possible for some of them.\n\n\nThe question “Is the integer even?” is an example of a decidable problem because it’s possible to write an algorithm that will determine whether any integer is even.\nThe question “Will this computer program that takes an input always eventually report a result?” is an undecidable problem. It’s possible to write such a checking algorithm that would be able to say for some programs with some inputs whether they will report a result or get stuck in an infinite loop and never report. But it turns out that it’s not possible write a checking algorithm that will work for any program with any input. (You can see a proof that no such checking algorithm—for a computer or a person—can be written in Lab 4.)\n\n\n\n\nAAP-4.B\n\n\n What does it mean for a problem to be undecidable?"
  },
  {
    "objectID": "unit-5/lab-1/7-comparing-search-algorithms.html",
    "href": "unit-5/lab-1/7-comparing-search-algorithms.html",
    "title": "Page 7: Removing Duplicates",
    "section": "",
    "text": "On this page, you will learn a recursive technique to remove duplicates from a list. \n\nSuppose you have a list of items and want to know if the elements of the list are distinct. For example, you might want to make sure that you don’t have anything on your shopping list twice.\nAs a first step, we’ll just answer the yes/no question: are there any duplicates on your list? \n\n\n\nExperiment with the  block using a few different input lists.  What does this block report?\n\n\nFinish building the are the items distinct? predicate, which is started below. Since you’re writing a predicate, your procedure should always report true or false.\n\nTry doing it without this hint.\n\nIf the program gets to the third report block at the bottom, what does that tell you about the items in the list?\n\n\n\n\n\nNotice that this procedure calls itself at the end. (It is recursive.) This won’t work if the input to that call is the same as the original input. So you can’t say . Instead, you have to use a smaller input value.\n\n\n\n If you doubled the length of the list, would this algorithm take the same amount of time? Twice as long? More than twice as long?\n\n\n\nFor your grocery list, you wouldn’t just want to know whether or not there are duplicates. You’d want a new list with the duplicates removed.\n::: forYouToDo\n\n\nExperiment with the  block using a few different inputs.  What does this block report?\n\n\nBuild a distinct items from reporter using a structure similar to that of the are the items distinct? predicate.\n::: endnote \nThe algorithm for this block will make the same decisions as in are the items distinct?. But that was a predicate. This one has to report a list. So look at the three report blocks in your code for the are the items distinct? predicate, and decide what they should report for the distinct items from reporter.\nNeed another hint?\n\n\n\nIf the list is empty, what should distinct items from report?\n\n\nIf the first item in the list appears in the rest of the list, it doesn’t matter which copy you leave out. Is there an easy way to get a version of the list without one of those copies?\n\n\nWhat if there are other duplicates in that list?\n\n\n\n\nIf computer makes it to the third report block, what does that tell you about the first item in the list? Do you want the first item as part of the list you report?\n\n\n\n\n:::\n\n\nTest it. Be sure to pick good test cases: More than one pair of duplicates, more than two items of the same value, duplicates right next to each other in the list, etc.\n\n\n\n“U5L1-Removing-Duplicates”\n\n\n\n:::"
  },
  {
    "objectID": "unit-5/lab-1/8-sequential.html",
    "href": "unit-5/lab-1/8-sequential.html",
    "title": "Page 8: Parallelism",
    "section": "",
    "text": "On this page, you will learn how running multiple scripts in parallel can reduce the total time it takes to run an algorithm.\n\nIn Snap!, you are accustomed to seeing a bunch of scripts that all run independently, which may or may not be associated with different sprites. This is kind of like parallel computing. So, if we had a different computer for each sprite, that would be true parallelism. As it is, there is only one computer, and it divides its attention among the processes by running a little bit of one and then running a little bit of the next one. Specifically, it switches at the bottom of loops (forever, repeat, etc.).\n\n: Sequential and Parallel Computing\n\nCSN-2.A.1, CSN-2.A.2\n\nThis section covers two computational models:\n\n\nIn sequential computing, operations are performed in order one at a time.\n\n\nIn parallel computing, the program is broken into smaller steps, some of which are performed at the same time. Modern computers have multiple processors (2, 4, or 8) in a single computer, so you can do small-scale parallel processing on the machine on your desk.\n\n\n\n\nCSN-2.A.4\n\nYou can compare the efficiency of two different algorithmic solutions to a problem by comparing the time it takes them to perform the same task.\n\n\n\n\n\n\n\nCSN-2.A part b, CSN-2.A.5\n\nHow long will this sequential program take to run? \n\n\n\n18\n\n\nCorrect!\n\n\n\n\n8\n\n\nA sequential solution takes as long as the sum of the run times of all of its steps.\n\n\n\n\n4\n\n\nA sequential solution takes as long as the sum of the run times of all of its steps.\n\n\n\n\n6\n\n\nA sequential solution takes as long as the sum of the run times of all of its steps.\n\n\n\n\n\n\n\n\n\n\n\n\nCSN-2.A.5\n\nThe run time of a sequential algorithm is the sum of the run times of all its steps.\n\n\n\n\n\n\n\nCSN-2.A part b, CSN-2.A.6\n\nHow long will this parallel program take to run?   \n\n\n\n18\n\n\nThe two when I receive tasks happen in parallel, not one after the other.\n\n\n\n\n8\n\n\nThe longest parallel time does matter, but it’s not the only thing that contributes to the total time.\n\n\n\n\n6\n\n\nBroadcast and wait waits until all the tasks that it started have finished.\n\n\n\n\n14\n\n\nCorrect!\n\n\n\n\n\n\n\n\n\n\n\n\nCSN-2.B.1, CSN-2.B.2, CSN-2.B.3, CSN-2.B.4\n\n\n\nCSN-2.A.3\n\nDistributed computing is a form of parallel computing that uses multiple computers (perhaps even spread out around the world).\n\nWriting a program that does nothing but wait is, of course, unrealistic, but what is realistic is that in most problems, there isn’t a solution that’s purely parallel. Some part of the computation has to be done sequentially. In the previous question, the sequential part is modeled by wait 6 secs. Parallelization with this silly example feels trivial, but imagine you work for Google. Millions of search queries and web page edits have happened today, and it’s your job to have to process them. If they didn’t have huge server farms with thousands of computers in each building, they couldn’t keep up at all. Distributed computing lets you scale to very large problems.\n\nCSN-2.A.6\n\n As a more specific example, suppose you want to know the average word length in list of 100,000 words. You can divide the task among several computers (one for each starting letter). Each computer adds the lengths of all the words assigned to it (all the “A” words, all the “B” words, etc). Then one computer has to add the 26 partial results and divide by the total number of words to find the average. To calculate the run time of this parallel solution, you would add the run time of the longest parallel portion (the run time for the letter with the most words) to the run time of the sequential portion (adding the 26 partial results and dividing the sum by the total number of words).\n\nBecause every computation includes a sequential portion, there is a limit to how much you can speed up a task by adding processors.\n\nA processor is a piece of circuitry inside a computer that processes the instructions from computer programs.\n\nImage credit: Wikipedia user Solipsist\n\n\n\nCSN-2.A parts a and b, CSN-2.A.4, CSN-2.B.5\n\n\nSuppose a task includes one minute of sequential steps and a parallelizable portion that would take an hour if done sequentially. Fill in this table: 31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATwBBAEEAMgBBAEQAVQBBAE0AUQBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEcASQBBAGIAdwBCAHkAQQBHAFEAQQBaAFEAQgB5AEEARwBVAEEAWgBBAEEAZwBBAEgATQBBAGQAQQBCAGgAQQBHADQAQQBaAEEAQgBoAEEASABJAEEAWgBBAEEAZwBBAEcANABBAGIAdwBCADMAQQBIAEkAQQBZAFEAQgB3AEEAQwBBAEEAWQB3AEIAbABBAEcANABBAGQAQQBCAGwAQQBIAEkAQQBJAGcAQQBnAEEASABNAEEAZABRAEIAdABBAEcAMABBAFkAUQBCAHkAQQBIAGsAQQBQAFEAQQBpAEEARgBRAEEAWQBRAEIAaQBBAEcAdwBBAFoAUQBBAGcAQQBHADgAQQBaAGcAQQBnAEEARwA0AEEAZABRAEIAdABBAEcASQBBAFoAUQBCAHkAQQBDAEEAQQBiAHcAQgBtAEEAQwBBAEEAYwBBAEIAeQBBAEcAOABBAFkAdwBCAGwAQQBIAE0AQQBjAHcAQgB2AEEASABJAEEAYwB3AEEAZwBBAEgAWQBBAGMAdwBBAHUAQQBDAEEAQQBkAEEAQgB2AEEASABRAEEAWQBRAEIAcwBBAEMAQQBBAGMAQQBCAHkAQQBHADgAQQBaAHcAQgB5AEEARwBFAEEAYgBRAEEAZwBBAEgASQBBAGQAUQBCAHUAQQBHADQAQQBhAFEAQgB1AEEARwBjAEEASQBBAEIAMABBAEcAawBBAGIAUQBCAGwAQQBDAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBhAEEAQQBnAEEASABNAEEAWQB3AEIAdgBBAEgAQQBBAFoAUQBBADkAQQBDAEkAQQBZAHcAQgB2AEEARwB3AEEASQBnAEEAKwBBAEUANABBAGQAUQBCAHQAQQBHAEkAQQBaAFEAQgB5AEEAQwBBAEEAYgB3AEIAbQBBAEMAQQBBAFUAQQBCAHkAQQBHADgAQQBZAHcAQgBsAEEASABNAEEAYwB3AEIAdgBBAEgASQBBAGMAdwBBADgAQQBDADgAQQBkAEEAQgBvAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGEAQQBBAGcAQQBIAE0AQQBZAHcAQgB2AEEASABBAEEAWgBRAEEAOQBBAEMASQBBAFkAdwBCAHYAQQBHAHcAQQBJAGcAQQArAEEARgBRAEEAYgB3AEIAMABBAEcARQBBAGIAQQBBAGcAQQBGAFEAQQBhAFEAQgB0AEEARwBVAEEASQBBAEIAUwBBAEcAVQBBAGMAUQBCADEAQQBHAGsAQQBjAGcAQgBsAEEARwBRAEEAUABBAEEAdgBBAEgAUQBBAGEAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBnAEEASQBBAEIAegBBAEcATQBBAGIAdwBCAHcAQQBHAFUAQQBQAFEAQQBpAEEARwBNAEEAYgB3AEIAcwBBAEMASQBBAFAAZwBCAFQAQQBHADgAQQBiAEEAQgAxAEEASABRAEEAYQBRAEIAdgBBAEcANABBAEkAQQBCAFUAQQBIAGsAQQBjAEEAQgBsAEEARAB3AEEATAB3AEIAMABBAEcAZwBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQARQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBADIAQQBEAEUAQQBJAEEAQgB0AEEARwBrAEEAYgBnAEIAMQBBAEgAUQBBAFoAUQBCAHoAQQBDAEEAQQBLAEEAQQB4AEEAQwBBAEEAYQBBAEIAeQBBAEMAQQBBAEsAdwBBAGcAQQBEAEUAQQBJAEEAQgB0AEEARwBrAEEAYgBnAEEAcABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAGMAdwBCAGwAQQBIAEUAQQBkAFEAQgBsAEEARwA0AEEAZABBAEIAcABBAEcARQBBAGIAQQBBAGcAQQBIAE0AQQBiAHcAQgBzAEEASABVAEEAZABBAEIAcABBAEcAOABBAGIAZwBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQB5AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEATQB3AEEAeABBAEMAQQBBAGIAUQBCAHAAQQBHADQAQQBkAFEAQgAwAEEARwBVAEEAYwB3AEEAZwBBAEMAZwBBAE0AdwBBAHcAQQBDAEEAQQBiAFEAQgBwAEEARwA0AEEASQBBAEEAcgBBAEMAQQBBAE0AUQBBAGcAQQBHADAAQQBhAFEAQgB1AEEAQwBrAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEASQBBAEIAeQBBAEcAOABBAGQAdwBCAHoAQQBIAEEAQQBZAFEAQgB1AEEARAAwAEEASQBnAEEAeABBAEQAQQBBAEkAZwBBACsAQQBIAEEAQQBZAFEAQgB5AEEARwBFAEEAYgBBAEIAcwBBAEcAVQBBAGIAQQBBAGcAQQBIAE0AQQBiAHcAQgBzAEEASABVAEEAZABBAEIAcABBAEcAOABBAGIAZwBCAHoAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARABNAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBADAAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEATQBRAEEAdwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBNAGcAQQB3AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAE0AdwBBAHcAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEATgBnAEEAdwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBNAFEAQQB5AEEARABBAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBAHkAQQBEAFEAQQBNAEEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAUQBBAE8AQQBBAHcAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAFkAUQBCAGkAQQBHAHcAQQBaAFEAQQArAEEAQQA9AD0ACgBzAHUAZgBmAGkAeAA6AA==:31b8e172-b470-440e-83d8-e6b185028602\n\n\nCSN-2.B.5\n\n\nConsider the law of diminishing returns:\n\n\nIf you have one processor and you add one more, how much time do you save?\n\n\nIf you have 240 processors and you add 240 more, how much time do you save?\n\n\n How many processors do you think are worth having for this problem?\n\n\n\n\nWhat is the law of diminishing returns?\n\nThe law of diminishing returns is an idea from economics that basically says that after a certain point, more is not better. For example, if you got five birthday presents, you might be happier than if you got only one, but getting more presents isn’t necessarily better. Imagine you received a hundred presents. You’d get bored opening them and probably feel overwhelmed. And getting a thousand or a million presents wouldn’t make your birthday any happier. The same rule applies to birthday cake!\n\n\n\n\n\n\nCSN-2.A.7\n\nProgrammers refer to the speedup of parallel solution to describe how many times as fast the parallel solution is compared to the sequential solution: \\[\\text{speedup} = \\frac{\\text{sequential time}}{\\text{parallel time}}\\]\n\nComputer hardware is very reliable; it’s rare for the hardware to break down while you’re running a program. But in distributed computing with tens of thousands of computers working on the same problem, it’s likely that one of them will fail. (If the probability of one computer failing during a program run is 0.0001, and you use 10,000 computers, then the probability of one of them failing is about 0.368—about a third of the time!) So software has to compensate by checking that the machines are running and reassigning the tasks of a failed computer to a working one.\nAlso, when you are doing things in parallel, the parallel processes can interfere with each other.\n\nAn example of interfering processes with banking…\n\nIf one person withdraws money from an ATM at the same time as someone at a different ATM withdraws money from the same account, you could run into a situation like this: 31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBRAEEAeQBBAEQAQQBBAE4AdwBBADMAQQBBAD0APQAKAHAAcgBlAGYAaQB4ADoACgBzAG8AdQByAGMAZQA6AFAAQQBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEASQBBAEIAagBBAEcAdwBBAFkAUQBCAHoAQQBIAE0AQQBQAFEAQQBpAEEARwBJAEEAYgB3AEIAeQBBAEcAUQBBAFoAUQBCAHkAQQBHAFUAQQBaAEEAQQBnAEEASABNAEEAZABBAEIAaABBAEcANABBAFoAQQBCAGgAQQBIAEkAQQBaAEEAQQBnAEEARwA0AEEAYgB3AEIAMwBBAEgASQBBAFkAUQBCAHcAQQBDAEEAQQBZAHcAQgBsAEEARwA0AEEAZABBAEIAbABBAEgASQBBAEkAZwBBAGcAQQBIAE0AQQBkAFEAQgB0AEEARwAwAEEAWQBRAEIAeQBBAEgAawBBAFAAUQBBAGkAQQBGAEEAQQBiAHcAQgB6AEEASABNAEEAYQBRAEIAaQBBAEcAdwBBAFoAUQBBAGcAQQBIAE0AQQBaAFEAQgB4AEEASABVAEEAWgBRAEIAdQBBAEcATQBBAFoAUQBBAGcAQQBHADgAQQBaAGcAQQBnAEEARwBVAEEAZABnAEIAbABBAEcANABBAGQAQQBCAHoAQQBDAEEAQQBkAHcAQgBvAEEARwBVAEEAYgBnAEEAZwBBAEgAUQBBAGQAdwBCAHYAQQBDAEEAQQBRAFEAQgBVAEEARQAwAEEASQBBAEIAMABBAEgASQBBAFkAUQBCAHUAQQBIAE0AQQBZAFEAQgBqAEEASABRAEEAYQBRAEIAdgBBAEcANABBAGMAdwBBAGcAQQBHAGcAQQBZAFEAQgB3AEEASABBAEEAWgBRAEIAdQBBAEMAQQBBAGEAUQBCAHUAQQBDAEEAQQBjAEEAQgBoAEEASABJAEEAWQBRAEIAcwBBAEcAdwBBAFoAUQBCAHMAQQBDAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQBnAEEASABJAEEAYgB3AEIAMwBBAEgATQBBAGMAQQBCAGgAQQBHADQAQQBQAFEAQQBpAEEARABrAEEASQBnAEEAZwBBAEgATQBBAGQAQQBCADUAQQBHAHcAQQBaAFEAQQA5AEEAQwBJAEEAZABnAEIAbABBAEgASQBBAGQAQQBCAHAAQQBHAE0AQQBZAFEAQgBzAEEAQwAwAEEAWQBRAEIAcwBBAEcAawBBAFoAdwBCAHUAQQBEAG8AQQBJAEEAQgB0AEEARwBrAEEAWgBBAEIAawBBAEcAdwBBAFoAUQBBADcAQQBDAEEAQQBZAGcAQgB2AEEASABJAEEAWgBBAEIAbABBAEgASQBBAEwAUQBCAHMAQQBHAFUAQQBaAGcAQgAwAEEARABvAEEASQBBAEEAdwBBAEQAcwBBAEkAQQBCAGkAQQBHADgAQQBjAGcAQgBrAEEARwBVAEEAYwBnAEEAdABBAEgAUQBBAGIAdwBCAHcAQQBEAG8AQQBJAEEAQQB3AEEARABzAEEASQBBAEIAaQBBAEcAOABBAGMAZwBCAGsAQQBHAFUAQQBjAGcAQQB0AEEARwBJAEEAYgB3AEIAMABBAEgAUQBBAGIAdwBCAHQAQQBEAG8AQQBJAEEAQQB3AEEARABzAEEASQBnAEEAKwBBAEQAdwBBAGEAUQBCAHQAQQBHAGMAQQBJAEEAQgBqAEEARwB3AEEAWQBRAEIAegBBAEgATQBBAFAAUQBBAGkAQQBHAGsAQQBiAGcAQgBzAEEARwBrAEEAYgBnAEIAbABBAEMAQQBBAGIAZwBCAHYAQQBIAE0AQQBhAEEAQgBoAEEARwBRAEEAYgB3AEIAMwBBAEMASQBBAEkAQQBCAHoAQQBIAEkAQQBZAHcAQQA5AEEAQwBJAEEATAB3AEIAaQBBAEcAbwBBAFkAdwBBAHQAQQBIAEkAQQBMAHcAQgBwAEEARwAwAEEAWgB3AEEAdgBBAEQAVQBBAEwAUQBCAGgAQQBHAHcAQQBaAHcAQgB2AEEASABJAEEAYQBRAEIAMABBAEcAZwBBAGIAUQBCAHoAQQBDADgAQQBkAEEAQgBwAEEARwAwAEEAWgBRAEEAdABBAEcARQBBAGMAZwBCAHkAQQBHADgAQQBkAHcAQQB1AEEASABBAEEAYgBnAEIAbgBBAEMASQBBAEkAQQBCAGgAQQBHAHcAQQBkAEEAQQA5AEEAQwBJAEEAWgBBAEIAdgBBAEgAYwBBAGIAZwBCADMAQQBHAEUAQQBjAGcAQgBrAEEAQwBBAEEAYwBBAEIAdgBBAEcAawBBAGIAZwBCADAAQQBHAGsAQQBiAGcAQgBuAEEAQwBBAEEAWQBRAEIAeQBBAEgASQBBAGIAdwBCADMAQQBDAEEAQQBiAEEAQgBoAEEARwBJAEEAWgBRAEIAcwBBAEcAVQBBAFoAQQBBAGcAQQBDAGMAQQBkAEEAQgBwAEEARwAwAEEAWgBRAEEAbgBBAEMASQBBAEkAQQBCADAAQQBHAGsAQQBkAEEAQgBzAEEARwBVAEEAUABRAEEAaQBBAEcAUQBBAGIAdwBCADMAQQBHADQAQQBkAHcAQgBoAEEASABJAEEAWgBBAEEAZwBBAEgAQQBBAGIAdwBCAHAAQQBHADQAQQBkAEEAQgBwAEEARwA0AEEAWgB3AEEAZwBBAEcARQBBAGMAZwBCAHkAQQBHADgAQQBkAHcAQQBnAEEARwB3AEEAWQBRAEIAaQBBAEcAVQBBAGIAQQBCAGwAQQBHAFEAQQBJAEEAQQBuAEEASABRAEEAYQBRAEIAdABBAEcAVQBBAEoAdwBBAGkAQQBDAEEAQQBMAHcAQQArAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBvAEEAQwBBAEEAYwB3AEIAagBBAEcAOABBAGMAQQBCAGwAQQBEADAAQQBJAGcAQgBqAEEARwA4AEEAYgBBAEEAaQBBAEQANABBAFEAUQBCAFUAQQBFADAAQQBJAEEAQQB4AEEARAB3AEEATAB3AEIAMABBAEcAZwBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBvAEEAQwBBAEEAYwB3AEIAagBBAEcAOABBAGMAQQBCAGwAQQBEADAAQQBJAGcAQgBqAEEARwA4AEEAYgBBAEEAaQBBAEQANABBAFEAUQBCAFUAQQBFADAAQQBJAEEAQQB5AEEARAB3AEEATAB3AEIAMABBAEcAZwBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEcAdwBBAGIAdwBCAHYAQQBHAHMAQQBjAHcAQQBnAEEASABVAEEAYwBBAEEAZwBBAEgAUQBBAGEAQQBCAGwAQQBDAEEAQQBZAGcAQgBoAEEARwB3AEEAWQBRAEIAdQBBAEcATQBBAFoAUQBBAGcAQQBDAGcAQQBKAEEAQQB4AEEARABBAEEATQBBAEEAcABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQgBzAEEARwA4AEEAYgB3AEIAcgBBAEgATQBBAEkAQQBCADEAQQBIAEEAQQBJAEEAQgAwAEEARwBnAEEAWgBRAEEAZwBBAEcASQBBAFkAUQBCAHMAQQBHAEUAQQBiAGcAQgBqAEEARwBVAEEASQBBAEEAbwBBAEMAUQBBAE0AUQBBAHcAQQBEAEEAQQBLAFEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEcATQBBAGEAQQBCAGwAQQBHAE0AQQBhAHcAQgB6AEEAQwBBAEEAYQBRAEIAbQBBAEMAQQBBAGQAQQBCAG8AQQBHAFUAQQBJAEEAQgBoAEEARwAwAEEAYgB3AEIAMQBBAEcANABBAGQAQQBBAGcAQQBIAEkAQQBaAFEAQgB4AEEASABVAEEAWgBRAEIAegBBAEgAUQBBAFoAUQBCAGsAQQBDAEEAQQBLAEEAQQBrAEEARABRAEEATQBBAEEAcABBAEMAQQBBAGEAUQBCAHoAQQBDAEEAQQBZAFEAQgAyAEEARwBFAEEAYQBRAEIAcwBBAEcARQBBAFkAZwBCAHMAQQBHAFUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEIAaABBAEcAUQBBAGEAZwBCADEAQQBIAE0AQQBkAEEAQgB6AEEAQwBBAEEAZABBAEIAbwBBAEcAVQBBAEkAQQBCAGkAQQBHAEUAQQBiAEEAQgBoAEEARwA0AEEAWQB3AEIAbABBAEMAQQBBAEsAQQBBAGsAQQBEAFkAQQBNAEEAQQBwAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAFoAQQBCAHAAQQBIAE0AQQBjAEEAQgBsAEEARwA0AEEAYwB3AEIAbABBAEgATQBBAEkAQQBCADAAQQBHAGcAQQBaAFEAQQBnAEEARwAwAEEAYgB3AEIAdQBBAEcAVQBBAGUAUQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQgBqAEEARwBnAEEAWgBRAEIAagBBAEcAcwBBAEkAQQBCAHAAQQBHAFkAQQBJAEEAQgAwAEEARwBnAEEAWgBRAEEAZwBBAEcARQBBAGIAUQBCAHYAQQBIAFUAQQBiAGcAQgAwAEEAQwBBAEEAYwBnAEIAbABBAEgARQBBAGQAUQBCAGwAQQBIAE0AQQBkAEEAQgBsAEEARwBRAEEASQBBAEEAbwBBAEMAUQBBAE0AZwBBAHcAQQBDAGsAQQBJAEEAQgBwAEEASABNAEEASQBBAEIAaABBAEgAWQBBAFkAUQBCAHAAQQBHAHcAQQBZAFEAQgBpAEEARwB3AEEAWgBRAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBHAEUAQQBaAEEAQgBxAEEASABVAEEAYwB3AEIAMABBAEgATQBBAEkAQQBCADAAQQBHAGcAQQBaAFEAQQBnAEEARwBJAEEAWQBRAEIAcwBBAEcARQBBAGIAZwBCAGoAQQBHAFUAQQBJAEEAQQBvAEEAQwBRAEEATwBBAEEAdwBBAEMAawBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQgBrAEEARwBrAEEAYwB3AEIAdwBBAEcAVQBBAGIAZwBCAHoAQQBHAFUAQQBjAHcAQQBnAEEASABRAEEAYQBBAEIAbABBAEMAQQBBAGIAUQBCAHYAQQBHADQAQQBaAFEAQgA1AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBZAFEAQgBpAEEARwB3AEEAWgBRAEEAKwBBAEEAPQA9AAoAcwB1AGYAZgBpAHgAOgA=:31b8e172-b470-440e-83d8-e6b185028602\nBecause ATM 2 changed the account balance after ATM 1 looked up the balance, ATM 1 didn’t know that the balance had been changed. The bank account ended up a balance of $80 even though it started at $100 and a total of $60 was withdrawn.\n\n\nFor these reasons and others, a parallel program is harder to write and debug than a sequential program.\n\n\n\nCSN-2.B\n\n\n Identify some benefits and potential challenges of parallel and distributed computing. \n\n\n\n\n\n\n\n\n\nWhat is the speedup for this parallel solution when compared to the sequential solution?\n\n\nSequential solution: \n\n\nParallel solution:   \n\n\n\n\n\n\\(\\frac{18}{14}\\)\n\n\nCorrect!\n\n\n\n\n\\(\\frac{14}{18}\\)\n\n\nSpeedup is calculated by dividing the sequential time by the parallel time.\n\n\n\n\n\\(\\frac{18}{6}\\)\n\n\nBroadcast and wait waits until all the tasks that it started have finished.\n\n\n\n\n\\(\\frac{18}{8}\\)\n\n\nThe longest parallel time does matter, but it’s not the only thing that contributes to the total parallel time."
  },
  {
    "objectID": "unit-5/lab-2/1-intro-to-simulations.html",
    "href": "unit-5/lab-2/1-intro-to-simulations.html",
    "title": "Page 1: Why Use Simulations?",
    "section": "",
    "text": "In this lab, you will explore how simulations can be used to gain insight into real-world phenomena.\nOn this page, you will learn why simulations are used instead of real-world experiments.\n\n\n\nAAP-3.F.1, AAP-3.F.2\n\nSimulations are computer representations of real things or situations that vary over time. A simulation is an abstraction designed for a particular purpose.\n\n\nAAP-3.F.3, AAP-3.F.6\n\nThere are many reasons to use computer simulations rather than real-world experiments to prove things about a situation. Experimenting in the real world may be:\n\n\nExpensive, such as testing a proposed new airplane that might fall apart in strong winds. A simulation of the airplane and wind can eliminate some bad designs before building and testing a real airplane.\n\n\nTime-consuming, such as testing the effects of a genetic mutation in a species across generations.\n\n\nDangerous, such as testing whether a nuclear reactor will survive an earthquake.\n\n\nUnethical, such as giving a population a disease to test how fast it spreads.\n\n\n\nAAP-3.F.4\n\nComputer simulations rarely capture the full complexity of real situations. For example, simulations of global climate change should account for hundreds of interconnected factors such as wind patterns, the course of rivers, geological fault lines that cause earthquakes, and interactions of local plants and animals. However, because of limitations in computer speed, researchers leave out details to make simulations practical.\n\nAAP-3.F.5\n\nThere are risks in making simplifications. For example, there might be an interaction between elements of the real situation that isn’t obvious but turns out to be crucial. A simplification might lose the details that would have shown that interaction. Another issue is that if you have ideas in mind about what’s going on, you are more likely to emphasize details—even unconsciously—that support your ideas. (This kind of distortion is so common that researchers have a name for it: confirmation bias.)\n\n\n\nCome up with some examples of complex real-life phenomena for which it would be impractical, impossible, dangerous, or unethical to conduct real-world experiments.\n\n\nAAP-3.F part a, AAP-3.F part b\n\n\nExplain how simulations may help with our understanding of these phenomena. What are some pros and cons of using computers to explore these situations?"
  },
  {
    "objectID": "unit-5/lab-2/2-disease-spread.html",
    "href": "unit-5/lab-2/2-disease-spread.html",
    "title": "Page 2: Disease Spread Project",
    "section": "",
    "text": "On this page, you will model the spread of a disease in a population.\n\nNote: There was a disease spread simulation in BJC long before covid-19, but we want to acknowledge that right now the spread of a disease isn’t an abstract question. Everyone has been affected by isolation at home, and some students may have lost loved ones to this disease. Medical researchers do use simulations (much more complex than this one) to try to predict the future course of the disease.\n\nSuppose you are a medical researcher and would like to understand the factors that contribute to the spread of disease. In particular, you want to know the effect of population size on the time it takes for everyone to be infected, under the simplifying assumption that once infected, a person stays infected.\n\n\n\n What would be a sensible hypothesis on how population size affects the elapsed time?\n\n\nWhat if the people interacted with one and other more frequently?\n\n\n\nYou may not have enough data to test your hypothesis, and it would be unethical to induce the disease in a population just to gather new data. A simulation would allow you to test your hypotheses without the constraints of time, cost, and ethics.\n\n\n\n It includes:\n\n\na population variable that stores the total number of people (represented by clones of a sprite)\n\n\na percent initially infected variable that stores the fraction of the population who are sick at the beginning of the simulation\n\n\na speed variable that stores the pace at which the clones move\n\n\na sprites ready? variable that stores a Boolean that keeps track of whether or not all the clones have been created and the simulation can begin\n\n\na number infected variable that keep track of how many clones are currently infected\n\n\nan infected? sprite-local variable that stores a Boolean that keeps track of whether or not a clone is sick (each clone will have its own separate variable with that name)\n\n\ntwo costumes, sick () and well (), that display the status of each clone\n\n\n\nYou learned how to clone a sprite in Unit 3 Lab 1 Page 5: Building a Tic-Tac-Toe Board.\nThe primitive block  reports a list of sprites that are near the sprite that uses it.\n\na simulate disease function for you to complete that takes three inputs: total population, percent initially infected, and sprite speed; creates the clones that enact the simulation; and outputs the time until the entire population is infected\n\n\nan initialize simulation block that initializes the global variables and sets the parent sprite costume\n\n\na touching infected person? predicate for you to complete that checks whether the current clone is being exposed to the disease\n\n\nan initialize clone block that decides whether a clone will start out sick and positions it randomly on the stage\n\n\na when I start as a clone script for you to complete that moves the clones until they are all infected\n\n\n\n\nComplete the simulate disease function, the touching infected person? predicate, and the when I start as clone script.\n\n\n Discuss how your simulation is similar to and different from a real-life disease outbreak. Identify the simplifying assumptions you made in this simulation.\n\n\n\nYou want to know the effect of population size on the time elapsed. Because there is some randomness in the simulation, you are going to get some variation in the reported time. (This isn’t a bug; in real life, random events affect the elapsed time.)\n\n\n\n\nAAP-3.F.8\n\nWrite a function that takes population size as input, runs the simulation ten times, keeps the percent initially infected at 10 and the speed of infection at 2, and reports the average time elapsed. \n\n\nAAP-3.F.7\n\n\nUsing clones is a form of parallelism. But as you learned on the Unit 5 Lab 1 Page 8: Parallelism, because the clones are all running on one processor, cloning doesn’t give you any speedup.\n\n\nCall this function four times with different populations (50, 100, 150, and 200), and write down the results. Create a refined hypothesis about the relationship between population size and time for the entire population to be infected.\n\n\nIn real disease scenarios, not everyone ends up getting sick. How would you decide if the simplifications you used in a simulation invalidate the conclusions you might draw?\n\n\n\nThis is a simplified model. There are many things you could do to make the model more realistic. For example, you could make the infected people get better over time or some people could be immune to the disease, but you will always have to make some simplifications.\n\n\n\nNow conduct a similar experiment holding population size constant and varying the percent initially infected. Come up with a hypothesis for this relationship.\n\n\nThen conduct an other experiment by varying movement speed and keeping population size and percent initially infected constant, and create a third hypothesis.\n\n\nAdd some more inputs to the simulation block. We’ve suggested people getting better after time or getting healed by doctors, but there are many more you could think of.\n\n\nYou have hypotheses for changing only one variable, but what if you change two things? Do they affect the result independently, or is there a cross effect (for example, if sick people heal quickly, does that change the relationship between population size and time elapsed)? Run experiments to find out.\n\n\nDesign and implement a predator-prey simulation in Snap!. For example, you could model an environment with wolf and deer populations where the wolf prey on the deer. What are some parameters you need to incorporate into your model so you can simulate realistic fluctuations in the populations of predator and prey?\n\n\nImagine you work at a bank that wants to minimize customer wait times in line. The bank is considering two alternatives:\n\n\na single line where the customers stand in arrival order and wait for the next available teller, or\n\n\nseparate lines for each teller.\n\n\nDesign and implement two simulations in Snap! to help the bank determine the average wait time for customers in each scenario in order to choose the best option. \n\n\nDo some research: Why do (most) banks use a single teller line, but (most) grocery stores use a line per checkout station?"
  },
  {
    "objectID": "unit-5/lab-3/1-health-data.html",
    "href": "unit-5/lab-3/1-health-data.html",
    "title": "Page 1: Analyzing Global Health Data",
    "section": "",
    "text": "Tim points out that we are missing an “In this lab” on this first page of the lab. –MF, 5/23/20\n\n\nOn this page, you will learn how data visualization can help people understand data.\n\nLarge data sets can be overwhelming to analyze, but software tools can help people extract information, identify trends, make connections, and solve problems with data. Software programs, such as the graph below from Google can allow you to process data interactively to gain insight and knowledge.\n\n\n\n\n\nIf the interactive graph doesn’t work on this page, you can view it on google.com.\n\nExplore the following interactive data set.\n\n\nWhat does each point represent?\n\n\nWhat does each axis represent? Reveal a hint about the axes.\n\nIf you are viewing the data on this page, the label for the vertical axis is at the top of that axis. (If you are viewing it directly on google.com, it’s along the left where it usually is.)\n\n\n\nWhat do the colors represent?\n\n\nWhat does the size of each point indicate?\n\n\nWhat does the slider at the bottom do?\n\n\n\n\n\n\n Analyze the data. In the interactive graph above, click the play button in the lower-left or move the slider at the bottom. Discuss the following:\n\n\nWhat does this interactive data set tell you about global trends in life expectancy over time (on average)?\n\n\nWhat about global trends in fertility over time (on average)?\n\n\n\n\n\nDAT-2.E, DAT-2.E.3 clustering only\n\nLooking at clusters in the data can help you gain insight and knowledge. Do some research online or in the library to help you answer the following:\n\nIt’s not clear to me that “doing some research” is needed to answer these questions. Did we say that because of the standards? If so, maybe the questions below could ask more pointed questions that can’t be answered just from exploring the interactive data. If not, maybe the phrasing above should be adjusted. –MF, 5/31/20\n\n\n\nMove the slider to 1960 (all the way to the left), and describe the meaning of the cluster of orange data points in the lower right. What does this tell you about trends in about this region of the world at that time?\n\n\nMove the slider to 2016 (all the way to the right), and describe the meaning of the cluster of pink data points in the upper left. What does this tell you about trends in about this region of the world at that time?\n\n\nMove the slider back and forth across time, and select one country that follows a path that is interesting to you. Describe what this tells you about the life expectancy and fertility of this country over this time period.\n\n\n\n\n\nIn ordinary speech, the words “data” and “information” are used interchangeably. But in computing, these words have specific technical meanings.\n\n: Data vs. Information\n\nDAT-2.A.1\n\n\n\nData are the values that computers receive from various sources, including human activity, sensors, etc.\n\n\nInformation is the humanly-useful patterns extracted from data.\n\n\n\nDAT-2.A.2\n\nData provide opportunities for identifying trends, making connections, and addressing problems. Information is the result of analyzing that data.\n\nThe data given in the graph above let us answer some questions but not others. We can, for example, answer questions about how patterns of fertility and life expectancy differ from one continent to another, but not questions about how life expectancy is affected by the jobs people do, because the data displayed doesn’t show jobs.\n\n\n\n\nDAT-2.E.5\n\nIn any given year, the graph has a downward slope. That is, countries with a higher fertility rate have a lower life expectancy. This kind of relationship is called a correlation. What (if anything) does that tell you about the relationship between fertility rates and life expectancy? This pattern in the data becomes obvious looking at the picture, but it would not have been obvious just looking at the data.\n\n\nA correlation is a particular kind of information, namely a dependence between two variables. For example in the first picture here, as one variable goes up the other goes down. It’s also a correlation when as one variable goes up or down the other changes in the same manner.\n\n\n\n\n\n\n\n\n\n\n\nnegative correlation\n\n\npositive correlation\n\n\nno correlation\n\n\n\n\nMake up a scenario in which high fertility rates cause low life expectancy. Then make up a scenario in which low life expectancy causes high fertility rates.\n\n\n\n\n\nDAT-2.E.4\n\nInsight is a meaningful conclusion drawn from analyzing information.\n\n\nDAT-2.A.3, DAT-2.A.4\n\nThe data by themselves don’t tell you what causes what. There may be a correlation between two things, but this does not mean one thing causes the other. People often say, “Correlation does not imply causation.” Additional research is needed to gain insight into the exact nature of the relationship, such as causation.\n\nAn example of two things that are obviously correlated, but obviously neither caused the other. You can click “Discover a new correlation” on that site to find other strange correlations.\n\n\nDAT-2.E.3, DAT-2.E.1\n\nOften, a single source does not contain the data needed to draw a conclusion; it may be necessary to combine data from a variety of sources. As you found using visualization software with the fertility and life expectancy data, sometimes a pattern you discover in one data set can just raise another question for research such as, “Are either of these things correlated with median income in the country?” To answer this question, you could find an economic database, download some data, and use look for additional correlations. There can be several cycles of seeing something in the data and collecting more data to examine before you have what seems like a reliable insight about causation.\n\n\n\nDAT-2.A\n\n\nSummarize your findings. Write a paragraph or two with your partner describing your findings about life expectancy and fertility for the country you chose over this time period.\n\n\n\n\n\n\nUse the Internet to research the country you chose. Determine what likely impacted life expectancy and fertility across this time period. Be specific. Was there a war at a time that life expectancy dropped? Were there advances in maternal care at a time that fertility increased?\n\n\n\n\nTwo jokes about correlation and causation from XKCD…\n\n\nDon’t get the correlation joke about statistics class?\n\nDon’t get the correlation joke about cell phones and cancer?"
  },
  {
    "objectID": "unit-5/lab-3/2-self-check.html",
    "href": "unit-5/lab-3/2-self-check.html",
    "title": "Page 2: Self-Check: Big Data",
    "section": "",
    "text": "On this page, you will prepare for data questions on the AP exam.\n\n\nDAT-2.C.6, DAT-2.C.7, DAT-2.C.8\n\nThe size of a data set affects the amount of information that can be extracted from it. The datasets you work with in this course are small compared to the “big data” used to look at trends in Internet searches, environmental research, or financial technology. Large data sets (billions or trillions of entries) are difficult to process using a single computer and may require parallel computing across multiple systems; scalability becomes an issue because the computational capacity of a system can impact how data sets can be processed and stored.\n\n\n\nDAT-2.A\n\n\nThese questions are similar to those you will see on the AP CSP exam. \n\n\nScientists studying birds often attach tracking tags to migrating birds. For each bird, the following data is collected regularly at frequent intervals:\n\n\nDate and time\n\n\nLatitude and Longitude\n\n\nAltitude\n\n\nTemperature\n\n\nWhich of the following questions about a particular bird could not be answered using only the data gathered from the tracking tags.\n\n\n\nApproximately how much time does the bird spend in the air and on the ground?\n\n\nThis could be determined from the “Altitude” data.\n\n\n\n\nDoes the bird travel in groups with other tracked birds?\n\n\nThis could be determined from the “Latitude and Longitude” data.\n\n\n\n\nIs the migration path of the bird affected by temperature patterns?\n\n\nThis could be determined from the “Temperature” data.\n\n\n\n\nWhat are the effects of industrial pollution on the migration path of the bird?\n\n\nCorrect, there is no data collected on pollution in the bird’s environment.\n\n\n\n\n\n\n\n\n\n\n\nUsing computers, researchers often search large data sets to find interesting patterns in the data. Which is of the following is not an example where searching for patterns is needed to gather desired information?\n\n\n\nAn online shopping company analyzing customers purchase history to recommend new products.\n\n\nThis is an example of searching for patterns to gather desired information.\n\n\n\n\nA high school analyzing student attendance records to determine which students should receive a disciplinary warning.\n\n\nCorrect, there is no need here for pattern analysis, just sorting the data to get a list of students with poor attendance records.\n\n\n\n\nA credit scoring company analyzing purchase history of clients to identify cases of identity theft.\n\n\nThis is an example of searching for patterns to gather desired information.\n\n\n\n\nA college analyzing high school students’ GPA and SAT scores to assess their potential college success.\n\n\nThis is an example of searching for patterns to gather desired information.\n\n\n\n\n\n\n\n\n\n\n\nA car hailing company uses an app to track the travel trends of its customers. The data collected can be filtered and sorted by geographic location, time and date, miles traveled, and fare charged for the trip. Which of the following is least likely to be answerable using only the trends feature?\n\n\n\nWhat time of the day is the busiest for the company at a given city.\n\n\nFiltering by geographic location and sorting through time information would yield this information.\n\n\n\n\nFrom which geographical location do the longest rides originate.\n\n\nSorting through miles traveled and noting geographic location would yield this information.\n\n\n\n\nHow is competition with the local cab companies affecting business in a given district.\n\n\nCorrect, there is no information on the competition available in the data collected.\n\n\n\n\nHow much money was earned by the company in a given month.\n\n\nFiltering by date and summing up fares charged would yield this information.\n\n\n\n\n\n\n\n\n\n\n\nAn online music download company stores information about song purchases made by its customers. Every day, the following information is made publicly available on a company website database.\n\n\nThe day and date of each song purchased.\n\n\nThe title of the song.\n\n\nThe cities where customers purchased each song.\n\n\nThe number of times each song was purchased in a given city.\n\n\nAn example portion of the database is shown below. The database is sorted by date and song title. 31b8e172-b470-440e-83d8-e6b185028602::31b8e172-b470-440e-83d8-e6b185028602 Which of the following cannot be determined using only the information in the database?\n\n\n\nThe song that is purchased the most in a given week.\n\n\nThis information can be found by summing all the purchases of every song in a given week.\n\n\n\n\nThe city with the fewest purchases on a particular day.\n\n\nThis information can be found by summing all the purchases of every city on a given day.\n\n\n\n\nThe total number of cities in which a certain song was purchased in a given month.\n\n\nThis information can be found by listing the cities for all the purchases of a given song in a given month.\n\n\n\n\nThe total number of songs purchased by a particular customer during the course of a given year.\n\n\nCorrect, there is no data publicly displayed on individual customers."
  },
  {
    "objectID": "unit-5/lab-3/3-importing-data.html",
    "href": "unit-5/lab-3/3-importing-data.html",
    "title": "Page 3: Importing and Accessing Data",
    "section": "",
    "text": "DAT-2.D.1, DAT-2.C.1\n\nComputers can be useful in processing data to gain information, but your ability process data depends both on your capabilities and the tools you have available.\nOn this page, you will build various tools (specifically, selectors) to help you answer questions about data that interests you.\n\nYou learned about selectors on Unit 2 Lab 2 Page 2: Planning a Quiz App.\n\n\n\n\n\n\n“U5L3-Data-Processing”\n\n\n\nVisit the CORGIS Datasets Project and select a dataset you’d like to explore. Download the CSV file for the data you want to explore.\n\n\nOpen Snap! and drag the downloaded file into the Snap! window. You should see a table full of data. Look over the data (including the column headings in the top row) to give yourself a sense of what kind of information is included. Then click “OK” to close the window. You can still see the data in the watcher on the Snap! stage.\n\n\n\n\nDAT-2.D.5\n\n You may be familiar with tables from spreadsheet applications (such as Google Sheets, Apple Numbers, or Microsoft Excel) which store tabular data in different file formats. Spreadsheet programs help efficiently organize information, and they can find trends in data automatically (such as the line shown at right). CSV is an open spreadsheet format that works in any of these applications and in Snap!.\n\nWhat does CSV stand for?\n\nCSV stands for “comma separated values.” CSV files are tables of data stored with commas between each item in a row and line breaks between each row in the table. (You can see the commas and line breaks of a CSV by opening it in a text editor.)\n\n\nAlthough spreadsheets are a common kind of data, they aren’t the only kind. Consider the list of words that you used in Lab 1 to check spelling. It’s not a list of lists with two dimensions of data (rows and columns); it’s just a list with one dimension of data. “Spreadsheet” refers to two-dimensional data organized in rows and columns. “Dataset” is the more general term for any collection of data, including simple, one-dimensional lists; spreadsheets (two-dimensional lists of lists); and more complicated datasets such as spreadsheets with multiple tabs.\n\n\n\nExperiment with different inputs to the  block to access different rows in the dataset.\n\n\n How does the first item of your data set (item (1) of) differ from the other items?\n\n\nLocate the  block and determine what it does with your data.\n\n\nBuild selectors:\n\n\n that reports just the headings in a table\n\n\n that reports just the data (not the headings)\n\n\n\n\n\n\nA table is represented in Snap! as a list of lists. If you right-click (or control-click on a Mac) a table, you can switch to “list view” and see how the data (and column headings) are stored. See examples of table view and list view.\n\n\n\nTable View\n\n\nList View\n\n\n\n\n\n\n\n\n\n\n\n: Records, Fields, and Columns\n\n\nA record is one row in a dataset (other than the first row, which contains the column headings). A single record might be the data for one student in your school, the data for one earthquake that happened, the data for one hospital in the U.S, or the data for one contact in your contact list. In other words, a record is a horizontal slice of the dataset.\n\n\nA field is one item of a record in a dataset. It might be one person’s homeroom teacher, the magnitude of an earthquake in Los Angeles last week, the owner of one hospital in Chicago, or the phone number of one person in your contact list.\n\n\nA column is a list containing the data from one field for all records in a dataset. A column might be the homeroom teacher for every student in your school, the magnitude of every earthquake in the dataset, the owner of every hospital in the U.S., or the phone number of every person in your contact list. In other words, a column is a vertical slice of the dataset.\n\n\n\n\n\n\n\nBuild  and  blocks to make it easier to think about the structure of the table.\n\n\n Build  to report just one column of your dataset.\n\nRecord and column are selectors for a table abstract data type. We don’t need a constructor for this abstract data type because we are importing the data from the Internet, but the selectors will be useful. (Field is a selector for record, which is, itself, an abstract data type.)\nNotice that these suggested block names include the word “table” or “record” before the second input. Including the expected input data type in the block name can help you avoid bugs caused by using a selector that doesn’t match the input you want to use.\nTry to figure out how to report just one column, but click if you really need a hint.\n\n performs the same function on every item in a list. Have I seen map before?\n\nSince a table is a list of lists (where each inner list is one record), map will perform the same function on every record in your dataset. You will need to determine what function to map over the dataset. You learned about map on Unit 3 Lab 2 Page 5: Transforming Every List Item.\n\n\n\n\n\n Determine one question you can answer by looking at a single column of your data set, and then build code to answer your question. You may need to build additional blocks or import them from other projects.\n\nYou can see the column number by holding your mouse pointer over the letter at the top of the column in table view. \nYou may need to use map, keep, or combine to answer your question. Click to see where you learned about these higher order functions.\n\n\n\nYou learned about map on Unit 3 Lab 2 Page 5: Transforming Every List Item.\n\n\nYou learned about keep on Unit 2 Lab 3 Page 5: Keeping Items from a List .\n\n\nYou learned about combine on Unit 2 Lab 4 Page 3: Other Mathematical Reporters.\n\n\n\nClick for example questions to ask about a single column.\n\n\n\nWhat’s the average MPG that cars in this database get in the city? (You’d need an average block.)\n\n\nWhat’s the year of the oldest car in this dataset? (You’d need a minimum block.)\n\n\nHow many cars in this dataset have manual transmission?\n\n\nNotice that all of these examples only require data from one column. If you want to ask a question that requires looking at another column (for example, “What’s the model of the car with the highest MPG?”), you can do the Take It Further Activity below.\n\n\n\n\n\n\nChallenges in Collecting Data\n\n\nThis section looks long. We should do another pass to trim it down. –MF, 4/4/20\n\n\nDAT-2.C.3, DAT-2.C.2 all bullets\n\nResearchers often face challenges with data before they even begin analysis. Suppose you are combining data from different countries about distances between cities, and you discover that the distance data from the U.S. is measured in miles, but the distance data from Europe is measured in kilometers; to make meaningful comparisons, you need uniform data (all in miles or all in kilometers). As another example, if you use an online survey to collect data, the way participants abbreviate, spell, or capitalize their entries may vary. Data may also be incomplete (if some people didn’t complete the survey) or invalid (if some people made mistakes).\n\n\nDAT-2.C.4, DAT-2.E.2\n\nCleaning data is the process of making the data uniform without changing its meaning (such as replacing abbreviations, spellings, and capitalizations with the intended word or converting miles to kilometers). Programmers can use programs to filter and clean digital data, thereby gaining insight and knowledge.\n\n\nDAT-2.C.5\n\nImagine you read in the news that people who eat a lot of broccoli are less likely to get cancer. The conclusion that broccoli prevents cancer could be a result of bias. It could be that people who eat a lot of broccoli tend to be the same people who also get a lot of exercise, and it’s actually the exercise that makes the difference. In research, the term “bias” doesn’t have to mean prejudice; it’s about reasons the data might not mean what they seem to mean.\nPeople sometimes think that the way to overcome bias is to use a bigger sample (asking more people if they eat broccoli and have cancer). But if the bigger sample has the same problem (people getting more exercise also eat more broccoli), then a bigger sample won’t eliminate the bias.\n\n\n\nDAT-2.C\n\n\nDescribe possible challenges about the data you might face if you were going to collect your own data to answer a question like the one you investigated in the previous problem.\n\n\n\n\nI need to redo these images and code statements with “record” instead of “row.” –MF, 6/27/19\n\n\n\n\nAnswer a question like “What’s the model of the car with the highest MPG?” by building a  block.\n\n\n\nClick for a hint about how to build row with maximum in column () of table ().\n\nOne way to build a  function for a simple list (that isn’t a table) is shown below. You can build a  block that compares two inputs and use it with combine to find the maximum of a whole list.   You can use a similar approach here by first building a  that compares a specific field (column) for two rows and reports the row with the higher value in the specified column.\n\n\nNeed to fix “specific field (column)” in the TIF. –MF, 6/27/19\n\n\n\n\nWriting specific field numbers into the code is problematic for several reasons: It’s easy to get wrong, it makes for unreadable code, and (this actually happened with the cars database between edits of BJC) the layout of a table might change over time.\n\n\nWrite a block  that looks for the given name in the table header , finds what item number it is in the header list, and uses that as the field number to extract from the given record.\n\n\nAlso write , which should take the full table (header and data) as input, but should report the desired column from only the data of the table (so that the result can be used directly as input to blocks such as AVERAGE OF LIST).\n\n\nYou may find  helpful."
  },
  {
    "objectID": "unit-5/lab-3/4-filtering-data.html",
    "href": "unit-5/lab-3/4-filtering-data.html",
    "title": "Page 4: Analyzing Data",
    "section": "",
    "text": "On this page, you will ask and answer more demanding questions about your dataset and learn new tools.\n\n\nDAT-2.D.4\n\nYou can ask questions about a specific subset of your data by filtering the data using keep. Filtering is a powerful technique for finding information and recognizing patterns in data. For example, filtering can help you answer questions like “What is the average city MPG for just the Subarus in this dataset?”  Column 14 is the “Make” of the vehicle, so we keep all the records from cars for which the 14th field is “Subaru.” Then, we take column 9 of those records (the “City MPG”) and find their average.\n\nNotice that there are many digits in the answer above. How many digits are given in the table for each car’s MPG? An important rule in data science is not to claim more precision in a result than is warranted by the given data, so this answer should be rounded to 19.\nYou might find expressions with many nested function calls easier to build by using the pipe function. What would this look like using pipe?\n\nYou can use the pipe function from the “Bar Charts” library to work through your data analysis one function at at time:  The pipe function sends the data from table (cars) through keep to filter it for just the Subarus, through column (9) of table to get just the “City MPG” for those Subarus, and finally through average to get the average of those Subaru MPG values.\nRecall that the empty input slots in each function are filled by the output of the previous function (or the starting dataset in the case of the first function): the empty slots in the keep function are both filled by data from table (cars); the empty slot in column (9) of table is filled by the output of keep; and the empty slot in average is filled by the output of column (9) of table. It’s like a pipe of made of pieces connected together; the data goes in one end and works through each function, computing a new value at each step.\n\n\n\n\n\nOpen your U5L3-Data-Processing project if it isn’t open already.\n\n\n\nYou learned about loading libraries and exporting/importing blocks on Unit 2 Lab 4 Page 2: Making a Mathematical Library.\n\nAdd the tools you will need for this project:\n\n\nLoad the “Bar Charts” library from the “Libraries…” option in the Snap! File menu ().\n\n\nImport the maximum of list, minimum of list, sum of list, and average of list blocks from your U2L4-MathTools project.\n\n\n\n\nDAT-2.D\n\n\n Determine one question you can answer by looking at a single column of a portion  of your data set, and then build code to answer that question. You can nest your function or use pipe. (Or try both!)\n\n\nClick for example questions to ask about a portion of a single column.\n\n\n\nWhat’s the average MPG that Volvos in this database get in the city? (You’d need average.)\n\n\nWhat’s the year of the oldest Honda in this dataset? (You’d need minimum.)\n\n\nHow many 2009 cars in this dataset have manual transmission?\n\n\nNotice that the column you use to filter the data (such as year) doesn’t have to be the column you are asking about (such as transmission).\n\n\n\n\n\nSometimes, you want to keep a subset of your data (such as “Which cars were made in 2010?”), but other times, you just want one item that matches your requirement, often because what you really want to know is whether any items match, and as soon as you find one, the answer is “yes” (such as “Were any electric cars made in 2010?”). Snap! has a higher order function  that works similarly to keep, but it reports only the first item that’s found, so it can be faster.\n\nFind first is equivalent to item (1) of (keep). It is a higher order function like keep, map, and combine because it takes a function (a predicate) as input.\n\nImages need alt/title text. –MF, 6/27/19 and new column numbers -bh\n\nClick for an example of keep vs. find first.\n\n \n\n\n\nDAT-2.D.6\n\nYou can access or change data to create new information by using:\n\n\nMap to transform every element of a data set (such as doubling every element in a list, or extracting the parent’s email from every student record)\n\n\nKeep or find first to filter a data set (such as keeping only the positive numbers from a list, or keeping only students who signed up for band from a database of all students)\n\n\nCombine to combine or compare data in some way (such as adding up a list of numbers, or finding the student who has the highest GPA)\n\n\nVisualization tools to present the data set in a chart, graph, or other visual representation (such as by using bar chart, which you will learn on the next page)\n\n\n\n\n\nDAT-2.D\n\n\n Ask and answer a question that you can answer by looking at a single column of a portion of your data set and examining just the first matching item. Build code to answer your question.\n\n\n\nPick a computing innovation that uses a lot of data. Write about what kinds of data it uses, where those data come from, and how the application transforms the data to extract information."
  },
  {
    "objectID": "unit-5/lab-3/5-visualizing-data.html",
    "href": "unit-5/lab-3/5-visualizing-data.html",
    "title": "Page 5: Visualizing Data",
    "section": "",
    "text": "DAT-2.D.2, DAT-2.D.6 bullet 4\n\nTables, diagrams, text, charts, graphs, and other visual tools help extract, modify, and communicate information from data.\nOn this page, you will create a visualizations to help you analyze and communicate information from your dataset.\n\n\nGrouping Data\n\n\n\nDAT-2.E.3 classifying only\n\nClassifying data means distributing data into groups based on common characteristics.\n\nAnother thing that’s often done in data science is grouping (or classifying) data. For example, here is the cars data grouped by vehicle make (column 14): \n\n\nColumn A shows all of the vehicle makes (field 14 of each record).\n\n\nColumn B shows the total number of vehicles of each make.\n\n\nColumn C contains a list of all the data from cars for the vehicles of that Make (such as all the data for the Acuras or all the data for the Nissans). If you double-click one of the lists in column C, another table will open showing the data for all cars of that make.\n\n\n\nThe by intervals of input to the group table block should be left empty when, as in this example, the field on which you’re grouping is text rather than numbers. Later on this page, you’ll see how to use intervals in graphing.\n\n\n\n\nOpen your U5L3-Data-Processing project if it isn’t open already.\n\n\n Determine one question you can answer by grouping your data, and build code to answer it.\n\nClick for example questions for which grouping is helpful.\n\n\n\nHow many Toyotas are in the database?\n\n\nWhich brand in the table has the most models listed?\n\n\nHow many 2010 Hyundais are in the database? (This requires looking inside one of the lists in column C, so you’d need two keep functions.)\n\n\nPipe may be useful for questions that require looking inside the inner lists of the grouped data (in column C).\n\n\n\n\n\n\nPlotting Data\n\nThe bar chart function works like the group function, but with special features for numeric data: it allows you to select upper and lower limits of the data; you can have a range of values in one bucket, such as values 6–10, values 11–15, and so on; and it sorts the groups. For example, here is the cars data grouped by city MPG (column 9): \n\n\nNow, Column A shows city MPG (field 9 of each record) grouped into intervals of 5 and sorted.\n\n\nAs before, Column B shows the total number of vehicles within each MPG range (0–5, 6–10, 11–15, etc.)\n\n\nAs before, Column C contains a list of all the data from cars within that MPG range (such as all the data for the 879 cars that get between 21 and 25 MPG in the city).\n\n\n\nThe number in column A is the largest value included in each group. If the values aren’t all integers, the next group includes anything larger. For example, the group numbered 15 includes values from 10.0001 (or anything more than 10) to exactly 15.\n\nYou can plot the data from bar chart to visualize them:  \n\n\n\nPlot a few bar charts of some fields from your dataset and make at least one new observation about your data.\n\n\n\nThe mode of a data set is the value that appears most often in it.\n\nHere is a bar chart of field 11 from the cars data set (highway MPG) with MPG values from 5 to 50, using an interval of 3. Identify the mode. (It will be a range of values such as 13–15 or 16–18.)  \n\n\nHere is another bar chart with all the inputs the same as before, but with an interval of 6. Identify the mode.  \n\n\n How can these results both be correct? (There’s nothing wrong with the graphs.)\n\n\n Why would you ever use an interval larger than 1?\n\n\n\n\n\n\nResearch the question of why would you ever use an interval larger than 1."
  },
  {
    "objectID": "unit-5/lab-3/6-metadata.html",
    "href": "unit-5/lab-3/6-metadata.html",
    "title": "Page 6: Metadata",
    "section": "",
    "text": "On this page, you will learn about metadata (data about data) and how they can be used.\n\n\n\nDAT-2.B.1\n\nMetadata are data about data. For example, the piece of data may be an image, while the metadata may include the date of creation or the file size of the image.\n\n\nDAT-2.B.2, DAT-2.B.3, DAT-2.B.4, DAT-2.B.5\n\nData can even include data about itself. For example, a music file might contain data describing the song title, artist, album, genre, record label, etc. Or an image file might include data for the date that the picture was taken, the location where it was taken, information about the camera settings, the serial number of the specific camera, etc. This kind of information about data is called metadata. Metadata tell you additional information about the data you are working with and can be used to organize and manage your data. For example, you can use metadata to find all of your photos from a particular time and place or to restrict access to all videos recorded by your old phone. Metadata are connected to but different from your data and can be changed without impacting the primary data. For example, changing the album name of a song won’t change what the song sounds like.\nBecause metadata are often not displayed by software, it’s easy to violate privacy without realizing it when posting data online…\n\n“…an electronic camera is not just a camera. Harry Potter and the Deathly Hallows is, as far as anyone knows, the last book in the Harry Potter series. Its arrival was eagerly awaited, with lines of anxious Harry fans stretching around the block at bookstores everywhere. One fan got a prerelease copy, painstakingly photographed every page, and posted the entire book online before the official release. A labor of love, no doubt, but a blatant copyright violation as well. He doubtless figured he was just posting the pixels, which could not be traced back to him. If that was his presumption, he was wrong. His digital fingerprints were all over the images. (Blown to Bits, page 24, emphasis added)\n\n\nBrian, you want to make the point that privacy of metadata is important. –MF, 6/6/20\n\n\n\n\nDAT-2.B\n\n\nThese questions about metadata are similar to those you will see on the AP CSP exam. \n\n\nA new mobile phone company—unbeknownst to its customers—periodically records random snippets of their conversations and considers the recordings as data. In addition, it collects the following metadata on the conversations:\n\n\nThe start and end time of the conversation\n\n\nThe phone numbers of the users in the conversation\n\n\nThe GPS locations of the users in the conversation\n\n\nFor which of the following goals would it be more useful to analyze the data instead of the metadata?\n\n\n\nTo determine if any of its users was present at the time and place of a crime.\n\n\nFor this purpose, GPS and time information (in the metadata) would be more useful.\n\n\n\n\nTo determine the time of day the app is used most frequently in a certain geographic location.\n\n\nFor this purpose, GPS and time information (in the metadata) would be more useful.\n\n\n\n\nTo determine the language most commonly used in user conversations.\n\n\nCorrect. For this purpose, the conversation data itself would be analyzed.\n\n\n\n\nTo determine the most active users of the app for a given year.\n\n\nFor this purpose, user phone numbers and time information (in the metadata) would be more useful.\n\n\n\n\n\n\n\n\n\n\n\nWhich of the following is not an example of metadata?\n\n\n\nData about a digital image describing the size of the image, image resolution, color depth, and when the image was created.\n\n\nThis is an example of data about data.\n\n\n\n\nData about a text document containing information about the length of the document, its author, the date the document was written, and a short summary of the content.\n\n\nThis is an example of data about data.\n\n\n\n\nData about a pack of wolves describing their habitat, hunting habits, diet, and sleep cycles.\n\n\nCorrect. Data about wolves is not data about data.\n\n\n\n\nData about a web page containing a description of page content and a list of key words linked to the content.\n\n\nThis is an example of data about data."
  },
  {
    "objectID": "unit-5/lab-3/assessment-data5.html",
    "href": "unit-5/lab-3/assessment-data5.html",
    "title": "Lab 3 Practice Questions",
    "section": "",
    "text": "5.3.2\n\nScientists studying birds often attach tracking tags to migrating birds. For each bird, the following data is collected regularly at frequent intervals:\n\n\nDate and time\n\n\nLatitude and Longitude\n\n\nAltitude\n\n\nTemperature\n\n\nWhich of the following questions about a particular bird could not be answered using only the data gathered from the tracking tags.\n\n\n\nApproximately how much time does the bird spend in the air and on the ground?\n\n\nThis could be determined from the “Altitude” data.\n\n\n\n\nDoes the bird travel in groups with other tracked birds?\n\n\nThis could be determined from the “Latitude and Longitude” data.\n\n\n\n\nIs the migration path of the bird affected by temperature patterns?\n\n\nThis could be determined from the “Temperature” data.\n\n\n\n\nWhat are the effects of industrial pollution on the migration path of the bird?\n\n\nCorrect, there is no data collected on pollution in the bird’s environment.\n\n\n\n\n\n\n\n\n\n5.3.2\n\nUsing computers, researchers often search large data sets to find interesting patterns in the data. Which is of the following is not an example where searching for patterns is needed to gather desired information?\n\n\n\nAn online shopping company analyzing customers purchase history to recommend new products.\n\n\nThis is an example of searching for patterns to gather desired information.\n\n\n\n\nA high school analyzing student attendance records to determine which students should receive a disciplinary warning.\n\n\nCorrect, there is no need here for pattern analysis, just sorting the data to get a list of students with poor attendance records.\n\n\n\n\nA credit scoring company analyzing purchase history of clients to identify cases of identity theft.\n\n\nThis is an example of searching for patterns to gather desired information.\n\n\n\n\nA college analyzing high school students’ GPA and SAT scores to assess their potential college success.\n\n\nThis is an example of searching for patterns to gather desired information.\n\n\n\n\n\n\n\n\n\n5.3.2\n\nA car hailing company uses an app to track the travel trends of its customers. The data collected can be filtered and sorted by geographic location, time and date, miles traveled, and fare charged for the trip. Which of the following is least likely to be answerable using only the trends feature?\n\n\n\nWhat time of the day is the busiest for the company at a given city.\n\n\nFiltering by geographic location and sorting through time information would yield this information.\n\n\n\n\nFrom which geographical location do the longest rides originate.\n\n\nSorting through miles traveled and noting geographic location would yield this information.\n\n\n\n\nHow is competition with the local cab companies affecting business in a given district.\n\n\nCorrect, there is no information on the competition available in the data collected.\n\n\n\n\nHow much money was earned by the company in a given month.\n\n\nFiltering by date and summing up fares charged would yield this information.\n\n\n\n\n\n\n\n\n\n5.3.2\n\nAn online music download company stores information about song purchases made by its customers. Every day, the following information is made publicly available on a company website database.\n\n\nThe day and date of each song purchased.\n\n\nThe title of the song.\n\n\nThe cities where customers purchased each song.\n\n\nThe number of times each song was purchased in a given city.\n\n\nAn example portion of the database is shown below. The database is sorted by date and song title.\n\n\n\n\n\n\n\n\n\nDay and Date\nSong Title\nCity\nNumber of Times Purchased\n\n\n\n\nMon 07/10/17\nDespacito\nBoston, MA\n117\n\n\nMon 07/10/17\nMalibu\nChicago, IL\n53\n\n\nMon 07/10/17\nMalibu\nNew York, NY\n197\n\n\nMon 07/10/17\nBad Liar\nAnchorage, AK\n11\n\n\nTue 07/11/17\nDespacito\nSan Diego, CA\n241\n\n\n\nWhich of the following cannot be determined using only the information in the database?\n\n\n\nThe song that is purchased the most in a given week.\n\n\nThis information can be found by summing all the purchases of every song in a given week.\n\n\n\n\nThe city with the fewest purchases on a particular day.\n\n\nThis information can be found by summing all the purchases of every city on a given day.\n\n\n\n\nThe total number of cities in which a certain song was purchased in a given month.\n\n\nThis information can be found by listing the cities for all the purchases of a given song in a given month.\n\n\n\n\nThe total number of songs purchased by a particular customer during the course of a given year.\n\n\nCorrect, there is no data publicly displayed on individual customers.\n\n\n\n\n\n\n\n\n\n5.3.6\n\nA new mobile phone company—unbeknownst to its customers—periodically records random snippets of their conversations and considers the recordings as data. In addition, it collects the following metadata on the conversations:\n\n\nThe start and end time of the conversation\n\n\nThe phone numbers of the users in the conversation\n\n\nThe GPS locations of the users in the conversation\n\n\nFor which of the following goals would it be more useful to analyze the data instead of the metadata?\n\n\n\nTo determine if any of its users was present at the time and place of a crime.\n\n\nFor this purpose, GPS and time information (in the metadata) would be more useful.\n\n\n\n\nTo determine the time of day the app is used most frequently in a certain geographic location.\n\n\nFor this purpose, GPS and time information (in the metadata) would be more useful.\n\n\n\n\nTo determine the language most commonly used in user conversations.\n\n\nCorrect. For this purpose, the conversation data itself would be analyzed.\n\n\n\n\nTo determine the most active users of the app for a given year.\n\n\nFor this purpose, user phone numbers and time information (in the metadata) would be more useful.\n\n\n\n\n\n\n\n\n\n5.3.6\n\nWhich of the following is not an example of metadata?\n\n\n\nData about a digital image describing the size of the image, image resolution, color depth, and when the image was created.\n\n\nThis is an example of data about data.\n\n\n\n\nData about a text document containing information about the length of the document, its author, the date the document was written, and a short summary of the content.\n\n\nThis is an example of data about data.\n\n\n\n\nData about a pack of wolves describing their habitat, hunting habits, diet, and sleep cycles.\n\n\nCorrect. Data about wolves is not data about data.\n\n\n\n\nData about a web page containing a description of page content and a list of key words linked to the content.\n\n\nThis is an example of data about data.\n\n\n\n\n\n\n\n\n\nLab 3: Turning Data into Information\n\n\n5.3.2\n\nScientists studying birds often attach tracking tags to migrating birds. For each bird, the following data is collected regularly at frequent intervals:\n\n\nDate and time\n\n\nLatitude and Longitude\n\n\nAltitude\n\n\nTemperature\n\n\nWhich of the following questions about a particular bird could not be answered using only the data gathered from the tracking tags.\n\n\n\nApproximately how much time does the bird spend in the air and on the ground?\n\n\nThis could be determined from the “Altitude” data.\n\n\n\n\nDoes the bird travel in groups with other tracked birds?\n\n\nThis could be determined from the “Latitude and Longitude” data.\n\n\n\n\nIs the migration path of the bird affected by temperature patterns?\n\n\nThis could be determined from the “Temperature” data.\n\n\n\n\nWhat are the effects of industrial pollution on the migration path of the bird?\n\n\nCorrect, there is no data collected on pollution in the bird’s environment.\n\n\n\n\n\n\n\n\n\n5.3.2\n\nUsing computers, researchers often search large data sets to find interesting patterns in the data. Which is of the following is not an example where searching for patterns is needed to gather desired information?\n\n\n\nAn online shopping company analyzing customers purchase history to recommend new products.\n\n\nThis is an example of searching for patterns to gather desired information.\n\n\n\n\nA high school analyzing student attendance records to determine which students should receive a disciplinary warning.\n\n\nCorrect, there is no need here for pattern analysis, just sorting the data to get a list of students with poor attendance records.\n\n\n\n\nA credit scoring company analyzing purchase history of clients to identify cases of identity theft.\n\n\nThis is an example of searching for patterns to gather desired information.\n\n\n\n\nA college analyzing high school students’ GPA and SAT scores to assess their potential college success.\n\n\nThis is an example of searching for patterns to gather desired information.\n\n\n\n\n\n\n\n\n\n5.3.2\n\nA car hailing company uses an app to track the travel trends of its customers. The data collected can be filtered and sorted by geographic location, time and date, miles traveled, and fare charged for the trip. Which of the following is least likely to be answerable using only the trends feature?\n\n\n\nWhat time of the day is the busiest for the company at a given city.\n\n\nFiltering by geographic location and sorting through time information would yield this information.\n\n\n\n\nFrom which geographical location do the longest rides originate.\n\n\nSorting through miles traveled and noting geographic location would yield this information.\n\n\n\n\nHow is competition with the local cab companies affecting business in a given district.\n\n\nCorrect, there is no information on the competition available in the data collected.\n\n\n\n\nHow much money was earned by the company in a given month.\n\n\nFiltering by date and summing up fares charged would yield this information.\n\n\n\n\n\n\n\n\n\n5.3.2\n\nAn online music download company stores information about song purchases made by its customers. Every day, the following information is made publicly available on a company website database.\n\n\nThe day and date of each song purchased.\n\n\nThe title of the song.\n\n\nThe cities where customers purchased each song.\n\n\nThe number of times each song was purchased in a given city.\n\n\nAn example portion of the database is shown below. The database is sorted by date and song title.\n\n\n\n\n\n\n\n\n\nDay and Date\nSong Title\nCity\nNumber of Times Purchased\n\n\n\n\nMon 07/10/17\nDespacito\nBoston, MA\n117\n\n\nMon 07/10/17\nMalibu\nChicago, IL\n53\n\n\nMon 07/10/17\nMalibu\nNew York, NY\n197\n\n\nMon 07/10/17\nBad Liar\nAnchorage, AK\n11\n\n\nTue 07/11/17\nDespacito\nSan Diego, CA\n241\n\n\n\nWhich of the following cannot be determined using only the information in the database?\n\n\n\nThe song that is purchased the most in a given week.\n\n\nThis information can be found by summing all the purchases of every song in a given week.\n\n\n\n\nThe city with the fewest purchases on a particular day.\n\n\nThis information can be found by summing all the purchases of every city on a given day.\n\n\n\n\nThe total number of cities in which a certain song was purchased in a given month.\n\n\nThis information can be found by listing the cities for all the purchases of a given song in a given month.\n\n\n\n\nThe total number of songs purchased by a particular customer during the course of a given year.\n\n\nCorrect, there is no data publicly displayed on individual customers.\n\n\n\n\n\n\n\n\n\n5.3.6\n\nA new mobile phone company—unbeknownst to its customers—periodically records random snippets of their conversations and considers the recordings as data. In addition, it collects the following metadata on the conversations:\n\n\nThe start and end time of the conversation\n\n\nThe phone numbers of the users in the conversation\n\n\nThe GPS locations of the users in the conversation\n\n\nFor which of the following goals would it be more useful to analyze the data instead of the metadata?\n\n\n\nTo determine if any of its users was present at the time and place of a crime.\n\n\nFor this purpose, GPS and time information (in the metadata) would be more useful.\n\n\n\n\nTo determine the time of day the app is used most frequently in a certain geographic location.\n\n\nFor this purpose, GPS and time information (in the metadata) would be more useful.\n\n\n\n\nTo determine the language most commonly used in user conversations.\n\n\nCorrect. For this purpose, the conversation data itself would be analyzed.\n\n\n\n\nTo determine the most active users of the app for a given year.\n\n\nFor this purpose, user phone numbers and time information (in the metadata) would be more useful.\n\n\n\n\n\n\n\n\n\n5.3.6\n\nWhich of the following is not an example of metadata?\n\n\n\nData about a digital image describing the size of the image, image resolution, color depth, and when the image was created.\n\n\nThis is an example of data about data.\n\n\n\n\nData about a text document containing information about the length of the document, its author, the date the document was written, and a short summary of the content.\n\n\nThis is an example of data about data.\n\n\n\n\nData about a pack of wolves describing their habitat, hunting habits, diet, and sleep cycles.\n\n\nCorrect. Data about wolves is not data about data.\n\n\n\n\nData about a web page containing a description of page content and a list of key words linked to the content.\n\n\nThis is an example of data about data."
  },
  {
    "objectID": "unit-5/lab-4/1-logical-inconsistency.html",
    "href": "unit-5/lab-4/1-logical-inconsistency.html",
    "title": "Page 1: Proof by Contradiction",
    "section": "",
    "text": "Averaging just under 50 minutes, Lab 5: Unsolvable and Undecidable Problems, was the lab to which teachers devoted the least amount of time. It was also found to be the least successful, with only 20% reporting very successful and the majority (71%) noting the lab was neither unsuccessful or very successful.\n\n\nTeachers reported supplementing with videos from YouTube\n\n\n\n\n\n\n\nPG: Language inconsistency! Edit to clean up typos. I /really/ like the ideas here but the feedback has not been good.\nBH: But change the “at least four” problem to make it clear that you’re only allowed to ask one question.\nMF: I want review this page and cut down on the switching back and forth among colored boxes.\n\n\n“Zoey and I are from the same family.” is a poor choice for motivating proof by contradiction because it doesn’t require it. –MF, 9/1/19\nAlso, this lab overdoes decidability and solvability which has been simplified in the standards now (and is fully covered in 5.1.6 Heuristic Solutions. When we revise, we should distill down to the core of what we want to teach. –MF, 9/1/19\n\n\nIn this lab, you will learn that some problems can’t be solved at all.\nOn this page, you will solve logic puzzles by finding a contradiction, that is, by showing that one possibility has to be true because the other possibility doesn’t make sense.\n\n\n\n\nImagine an island somewhere with two large families. One family (unlike normal people) can tell only the truth, even when they’d rather lie. This Truth-teller family can’t ever make false statements, even by mistake. The other family, the False-Teller family, is just as reliable but in the opposite way: they can’t make true statements ever.\nYou are visiting the island and meet two of its people, Diego and Zoey. Diego says, “Zoey and I are from the same family.”\n\n\n\nCan you say for sure which family Zoey is from? If so, which family?\n\n\nCan you say for sure which family Diego is from? If so, which family?\n\n\n\n\n\n\n\nBetsy, Gamal, and Alphie are considering the problem above.\n\n\nBetsy: I’m pretty sure Zoey is a Truth-teller, but I don’t know how to prove it.\n\n\nA proof by contradiction is a two-step proof that a statement is false, which is done by\n\n\nassuming the statement is true\n\n\nbased on that assumption, proving something known to be false (that is, showing the assumption creates a contradiction)\n\n\n\n\nGamal: Sometimes it’s easier to prove that something is false than to prove that something is true. So let’s assume the opposite of what you want to prove, and see where that leads us. Let’s assume that Zoey is a False-teller.\n\n\nBetsy: Okay. So if Diego is a Truth-teller, then what he said is true, and they are from the same family, the Truth-tellers. But we assumed that Zoey is a False-teller, so they’re actually from different families, and so Diego can’t be a Truth-teller.\n\n\nAlphie: So, Diego has to be a False-teller.\n\n\nGamal: But that won’t work either! If Diego is a False-teller, then what he said is false, and they are from different families. But they are both False-tellers, so they’re actually in the same family, and so Diego can’t be a False-teller either.\n\n\nBetsy: No matter what family Diego is from, our assumption that Zoey is a False-teller led us to a contradiction. Zoey can’t be a False-teller, so has to be a Truth-teller. We proved it.\n\n\n\n\n\nImagine you meet someone named Derek on the island and you ask him if he’s from the Truth-teller family. What does he answer?\n\n\nWhat if you ask Derek if he’s from the False-Teller family?\n\n\n\n\n\nBetsy and Gamal are exploring logical statements of their own.\n\n\nBetsy: The statement I’m making right now is false.\n\n\nGamal: (Thinks for a moment) Wait! What?!?\n\n\n\n\n\nBetsy claims her statement is false. What do you think? Explain your thinking clearly.\n\n\n\n\n\nGamal: That’s very clever, Betsy. Your statement can’t be true, and it can’t be false. So neither a Truth-teller nor a False-teller could say that.\n\n\n\nThere are four kinds of true/false statements:\n\nAn undecidable statement might be true or might be false; we don’t know which.\nA self-contradictory statement can be neither true nor false.\n\n\n\nProvably True: For example in this problem, “Zoey is a Truth-teller.”\n\n\nProvably False: For example, “Zoey is a False-teller.”\n\n\nUndecidable: For example, “Diego is a Truth-teller.”\n\n\nSelf-Contradictory: Such as “This statement is false.”\n\n\n\n\n\n\nWhat questions can you ask in order to determine whether a person is a Truth-teller or a False-Teller?  Talking with others, find at least four questions that will work reliably.\n\nIf Diego were a Truth-teller, how would he answer your questions? Check to make sure that if he were a False-Teller, he’d answer differently.\n\n\n\n\n\nTheorem: All positive integers are interesting.\nProof:\n\n\nIn order to prove this by contradiction, assume that not all positive integers are interesting.\n\n\nSince positive integers don’t go down forever, there must be a smallest non-interesting positive integer.\n\n\nBut isn’t that an interesting thing about that number? ;)\n\n\n\n\n\n\nOn that island of Truth-tellers and False-Tellers, you meet Max and Min. Max says “Min and I are both liars!” Which kind of statement is this? Is it self-contradictory? Is it undecidable (it could be either, but there’s no way to tell)? Or is it definitely resolvable? If resolvable, who’s in what family?"
  },
  {
    "objectID": "unit-5/lab-4/2-halting-problem.html",
    "href": "unit-5/lab-4/2-halting-problem.html",
    "title": "Page 2: An Undecidable Problem",
    "section": "",
    "text": "PG: This is a lovely piece of logic, well written. I’d love to keep it (and see if we can simplify writing even further), but reasoning by contradiction is notoriously hard in all contexts (though, perhaps, page 1 sets it up well enough?) and it isn’t obvious that doing it in a programming context would be easier. In fact, the unfamiliarity and extra layer of technicality might make it harder. Do we have any feedback? All this said, CB insists on “teaching this,” so the question is how we can make more than an empty factoid out of it. I like our approach. Does it work?\nBH: But FYTD 1c is kinda TIFfy. And, I think Church actually proved it before Turing, but we should check. And, bring back his picture!\nMF: I want to review this page just because the idea deserves it\n\n\nOn this page, you will consider a problem that can’t have an answer.\n\nBy this point in the course, you’ve experienced the frustration of debugging a program. It would be great if there were a general-purpose debugging program that could read any code and determine if there were bugs. Unfortunately, we can use proof by contradiction (as Alphie, Betsy, and Gamal did on the previous page) to prove that this can’t be done.\nFirst, we’ll assume that it’s possible to write a function to determine if there are infinite loops in a program (situations in which a function runs forever without reporting a value). Then, we’ll use that function in a program especially designed to create a contradiction (a logical incompatibility) to prove that the assumption is wrong—no general-purpose debugging program can exist. “Does this program have bugs” is an undecidable problem; no algorithm can ever be constructed that always solves it correctly for every program.\n\nAn infinite loop is a sequence of computer instructions that repeats forever.\nAn unsolvable problem is one for which no algorithm can ever be written to find the solution.\nAn undecidable problem is one for which no algorithm can ever be written that will always give a correct true/false decision for every input value. Undecidable problems are a subcategory of unsolvable problems that include only problems that should have a yes/no answer (such as: does my code have a bug?).\n\n\nAssuming That a Halts? Function Exists\n\n\nMaking the Assumption\n\n\nWe can’t show the code inside halts?; we are proving that it can’t be written at all, no matter what code implements it.\n\nFirst, we assume there exists a function called halts? that determines whether a given reporter will report a value in a finite time. (If so, we say that the reporter halts.) It takes two inputs: a function and an input value for that function. It reports true if the function would report a value when given that input; it reports false if the function would run forever (in an infinite loop). \nFor example, the function round will not run forever when given the input 7.5; it will report 8.\n\nThe gray ring around the input function means that the halts? code will treat the input function as data instead of running it.\n\n\n because  reports a value.\nOn the other hand, imagine we had a function that will get stuck in an infinite loop when given the input foo; it would never report (never halt).\n\n because  loops infinitely.\n\nReviewing the Plan for the Proof\n\nWe’ll use proof by contradiction to show that the following question can’t be answered in general:\nWill a certain computer program, given a certain input, report a result in a finite amount of time?\n\nThe “computer program” is the first input to halts?. The “given input” is the second input to halts?. And what halts? reports is either true or false: yes the “computer program” will halt or no it won’t.\nNote that halts? itself must always report a result, even if the program it’s testing doesn’t. This is because we are assuming (an assumption we’ll show is false) that halts? always works—that it always reports an answer.\n\nWe can answer this question for some specific functions, but we are trying to determine whether we can devise a general test that will tell us whether any particular function will report a value for any specific input.\n\nWhat does it mean to answer the question for specific functions?\n\nThe “in general” part is important. Of course we can answer the question for certain particular programs. This one halts (reports a value) for any input: \nThis one never halts for any input: \nAnd this one halts sometimes—for any input except 87: \nRecall: the question is whether we can devise a test that will tell us whether any particular function will report a value for any specific input.\n\n\n\n\n\n\n\n\nDescribe the process of proof by contradiction.\n\n\nDescribe what the halts? function does.\n\n\nDescribe how you are going use the halts? function in this proof by contradiction process.\n\n\n\n\n\n\nShowing How This Creates a Contradiction\n\n\nConstructing a Program For Which Halts? Won’t Work\n\nTo prove there can be no such function, we need to create a contradiction. We need to show that there has to be at least one function and one input to that function for which halts? fails to work the way we assumed it does. So, we can make up a block, tester, specifically for the purpose of breaking halts?:\n\nJust like the \\# and ⋮ symbols for inputs declared to be numbers or lists, the λ is not part of the input’s name but is a type hint that was created when selecting the reporter input type:\n Recall that selecting an input type changes the appearance of the input slot so that it indicates what kind of input is expected. The input slot for tester will have a rounded gray ring to indicate that the input should be a reporter: \n\n\nThe forever block in this script creates an infinite loop. If the tester code ends up in this part of the if statement, it will never report anything. So whether tester itself will halt depends on the output of the halts? predicate in the if statement inside it.\nThe expression  asks what will happen if we call the input function (reporter) with itself as its own input. This is similar to when Betsy made a statement about the statement she was making, when she said, “The statement I’m making right now is false.”\n\n This is challenging. Stick with it! We are creating a contradiction to prove that the halts? function called inside tester can’t exist.\n\n\nUsing Self-Reference to Lead to Contradiction\n\nTo make the situation exactly like what Betsy said (“The statement I’m making right now is false.”), we’ll call tester on itself:  Now, the if statement inside the tester block will ask if tester will halt (not run forever) if it’s called with tester as its input. The predicate in the if statement will become halts? (tester) (tester).\n\nI took out class=“ms-4” on this picture so that it’d fit in the window. If you don’t like that, figure out how to shrink the picture without fuzzing it up. -bhOK, leaving this comment here to remind me for another day. –MF, 2/1/18\n\n\nSo, just as in the examples above,\n\n would mean that  returns a value.\n\n would mean that  loops infinitely.\n\nUnderstanding the Contradiction\n\nWhen we call , we run into the contradiction. To see how, look back at the tester definition: \nShowing that the result has to be wrong involves a case analysis like the ones used to solve the logic puzzles on page 1. Consider the two possible cases:\n\n\nIf  then tester will take the first branch of the if, and so it will loop forever. That means  won’t halt, and so halts? gave the wrong answer.\n\n\nIf  then tester will take the else branch and report “It doesn’t matter what value is reported.” That means  will halt, and so halts? is wrong again.\n\n\n\nIt doesn’t matter what value tester reports, just that it reports some value, but it does matter what value halts? reports.\n\n\nNo matter what halts? reports, it will always disagree with itself in a program like this. This contradiction (this logical impossibility) means that the assumption that it’s possible write halts? has to be wrong. This isn’t just a claim about what will happen in Snap!. The language you use to explore a computational problem can impact the clarity or readability of your code but not whether a solution to a problem exists. Even with advances in quantum computing, we will never be able to create a general-purpose debugging program. This famous example is known as the halting problem, and the fact that the halting problem is not decidable is the Halting Theorem.\n\n\n\n\n Go over this whole proof again together. Make sure both you and your partner understand:\n\n\nEverything from exercise 1 about proof by contradiction, what halts? does, and how halts? is going to be used in the proof\n\n\nThe basics of how the tester function behaves (for any input function)\n\n\nHow calling  leads to a contradiction\n\n\nWhat that contradiction means in the proof\n\n\nWhether the Halting problem is an unsolvable problem, an undecidable problem, or both; and why\n\n\n\n\nWrite a paragraph explaining the difference between an problem that can’t be solved (such as the halting problem) and a problem that takes unreasonable time.\n\n\n\n\n\n\n\nAlan Turing (1912–1954) was a British computer scientist and mathematician. During World War II, he developed a number of critical technologies to decipher encrypted German messages, playing a key role in helping the Allied forces defeat the Nazis. While working at the University of Manchester after the war, he devoted more of his time to the idea of Artificial Intelligence, proposing what is now known as the “Turing Test”. Together with his colleague Alonzo Church, Turing was a founder of theoretical computer science: proving that computers must work regardless of future technology.\nHe proved that there are well-defined mathematical problems that computers can never solve, no matter how large and fast they get. Tragically, Turing was prosecuted for “indecency” when authorities discovered he was gay, and it is suspected that he commited suicide after being subjected to hormone treatments. He is often considered to be the “father of modern computing.”\nArticle: Overlooked No More"
  },
  {
    "objectID": "unit-5/lab-5/1-war-and-technology.html",
    "href": "unit-5/lab-5/1-war-and-technology.html",
    "title": "Page 1: War and Technology",
    "section": "",
    "text": "BH: I think 5.5 is the best lab in the whole curriculum!\nMF: I still have concerns about the only thing a POC invented in this course being a children’s toy (that POC children are killed for playing with)\n\n\nIn this lab, you will consider the implications of technology on warfare.\nOn this page, you will consider the importance of pre-computer technologies in warfare.\n\n\nBrian, what is this “Explain” text? Are we planning to do something with it? –MF, 9/6/18\n\n\nExplain: “War is all about technology” - in what ways is war related to technology?\n\n\nWho wins a war is largely determined by technology, more than by the size of armies, etc. Students may know the example of the importance of metal-clad warships in the Civil War.\n\n\nNew technology changes the rules. For a long time you could make a clear distinction between soldiers and civilians, and just do battle with soldiers. But the ability to drop bombs from airplanes undid that.\n\n\n\n\n\n\nPlease do not use tables for anything other than tabular data. –MF 12/15/16\n\n\nW3schools: “The width attribute of &lt;td&gt; is not supported in HTML5. Use CSS instead.” –MF, 9/6/18\n\n\n\n31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBRAEEAMABBAEQAYwBBAE4AQQBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCADMAQQBHAGsAQQBaAEEAQgAwAEEARwBnAEEAUABRAEEAaQBBAEQARQBBAE0AQQBBAHcAQQBDAFUAQQBJAGcAQQBnAEEARwBJAEEAYgB3AEIAeQBBAEcAUQBBAFoAUQBCAHkAQQBEADAAQQBJAGcAQQB3AEEAQwBJAEEAUABnAEEAZwBBAEEAbwBBAFAAQQBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEMAQQBBAGMAdwBCADAAQQBIAGsAQQBiAEEAQgBsAEEARAAwAEEASQBnAEIAMABBAEcAVQBBAGUAQQBCADAAQQBDADAAQQBZAFEAQgBzAEEARwBrAEEAWgB3AEIAdQBBAEQAbwBBAGMAZwBCAHAAQQBHAGMAQQBhAEEAQgAwAEEARABzAEEASQBBAEIAdwBBAEcARQBBAFoAQQBCAGsAQQBHAGsAQQBiAGcAQgBuAEEAQwAwAEEAYwBnAEIAcABBAEcAYwBBAGEAQQBCADAAQQBEAG8AQQBNAFEAQQAxAEEASABBAEEAZQBBAEEAaQBBAEQANABBAFYAdwBCAGgAQQBIAFEAQQBaAFEAQgB5AEEAQwBBAEEAWgB3AEIAMQBBAEcANABBAGMAdwBBAGcAQQBIAFUAQQBjAHcAQgBsAEEARwBRAEEASQBBAEIAMABBAEcAOABBAEkAQQBCAHMAQQBHADgAQQBiAHcAQgByAEEAQwBBAEEAYgBBAEIAcABBAEcAcwBBAFoAUQBBAGcAQQBIAFEAQQBhAEEAQgBwAEEASABNAEEATwBnAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAZwBBAEgAYwBBAGEAUQBCAGsAQQBIAFEAQQBhAEEAQQA5AEEAQwBJAEEATgBBAEEAdwBBAEMAVQBBAEkAZwBBACsAQQBBAG8AQQBQAEEAQgBwAEEARwAwAEEAWgB3AEEAZwBBAEgATQBBAGMAZwBCAGoAQQBEADAAQQBJAGcAQQB2AEEARwBJAEEAYQBnAEIAagBBAEMAMABBAGMAZwBBAHYAQQBHAGsAQQBiAFEAQgBuAEEAQwA4AEEATgBRAEEAdABBAEcARQBBAGIAQQBCAG4AQQBHADgAQQBjAGcAQgBwAEEASABRAEEAYQBBAEIAdABBAEgATQBBAEwAdwBCADMAQQBHAEUAQQBkAEEAQgBsAEEASABJAEEAWgBnAEIAcABBAEcAYwBBAGEAQQBCADAAQQBGADgAQQBhAFEAQgB0AEEARwBjAEEATAB3AEIAMwBBAEcARQBBAGQAQQBCAGwAQQBIAEkAQQBaAHcAQgAxAEEARwA0AEEATQBnAEEAdQBBAEgAQQBBAGIAZwBCAG4AQQBDAEkAQQBJAEEAQgBoAEEARwB3AEEAZABBAEEAOQBBAEMASQBBAFQAdwBCAHMAQQBHAFEAQQBJAEEAQgAzAEEARwBFAEEAZABBAEIAbABBAEgASQBBAEkAQQBCAG4AQQBIAFUAQQBiAGcAQQBpAEEAQwBBAEEAZABBAEIAcABBAEgAUQBBAGIAQQBCAGwAQQBEADAAQQBJAGcAQgBQAEEARwB3AEEAWgBBAEEAZwBBAEgAYwBBAFkAUQBCADAAQQBHAFUAQQBjAGcAQQBnAEEARwBjAEEAZABRAEIAdQBBAEMASQBBAEwAdwBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBADgAQQBIAFEAQQBaAEEAQQBnAEEARwBFAEEAYgBBAEIAcABBAEcAYwBBAGIAZwBBADkAQQBDAEkAQQBZAHcAQgBsAEEARwA0AEEAZABBAEIAbABBAEgASQBBAEkAZwBBACsAQQBEAHcAQQBjAHcAQgB0AEEARwBFAEEAYgBBAEIAcwBBAEQANABBAFAAQQBCAHoAQQBHADAAQQBZAFEAQgBzAEEARwB3AEEAUABnAEIARwBBAEcAdwBBAGEAUQBCAGoAQQBHAHMAQQBjAGcAQQA2AEEAQwBBAEEAUgBBAEIAbABBAEcARQBBAGIAZwBBAGcAQQBFAGcAQQBiAHcAQgBqAEEARwBnAEEAYgBRAEIAaABBAEcANABBAEwAQQBBAGcAQQBFAE0AQQBRAHcAQQB0AEEARQBJAEEAVwBRAEEAdABBAEQASQBBAEwAZwBBAHcAQQBEAHcAQQBMAHcAQgB6AEEARwAwAEEAWQBRAEIAcwBBAEcAdwBBAFAAZwBBADgAQQBDADgAQQBjAHcAQgB0AEEARwBFAEEAYgBBAEIAcwBBAEQANABBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAFAAZwBBAD0ACgBzAHUAZgBmAGkAeAA6AA==:31b8e172-b470-440e-83d8-e6b185028602 31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBRAEEANABBAEQAVQBBAE0AUQBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCADMAQQBHAGsAQQBaAEEAQgAwAEEARwBnAEEAUABRAEEAaQBBAEQARQBBAE0AQQBBAHcAQQBDAFUAQQBJAGcAQQBnAEEARwBJAEEAYgB3AEIAeQBBAEcAUQBBAFoAUQBCAHkAQQBEADAAQQBJAGcAQQB3AEEAQwBJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCAHAAQQBHADAAQQBaAHcAQQBnAEEASABNAEEAYwBnAEIAagBBAEQAMABBAEkAZwBBAHYAQQBHAEkAQQBhAGcAQgBqAEEAQwAwAEEAYwBnAEEAdgBBAEcAawBBAGIAUQBCAG4AQQBDADgAQQBOAFEAQQB0AEEARwBFAEEAYgBBAEIAbgBBAEcAOABBAGMAZwBCAHAAQQBIAFEAQQBhAEEAQgB0AEEASABNAEEATAB3AEIAMwBBAEcARQBBAGQAQQBCAGwAQQBIAEkAQQBaAGcAQgBwAEEARwBjAEEAYQBBAEIAMABBAEYAOABBAGEAUQBCAHQAQQBHAGMAQQBMAHcAQgAzAEEARwBFAEEAZABBAEIAbABBAEgASQBBAFoAZwBCAHAAQQBHAGMAQQBhAEEAQgAwAEEARgBNAEEAVgBBAEEAdQBBAEcAbwBBAGMAQQBCAGwAQQBHAGMAQQBJAGcAQQBnAEEARwBFAEEAYgBBAEIAMABBAEQAMABBAEkAZwBCAHoAQQBIAEUAQQBkAFEAQgBwAEEASABJAEEAZABBAEEAZwBBAEcAYwBBAGQAUQBCAHUAQQBDAEEAQQBaAGcAQgBwAEEARwBjAEEAYQBBAEIAMABBAEMAQQBBAGQAdwBCAHAAQQBIAFEAQQBhAEEAQQBnAEEARwA4AEEAYgBnAEIAbABBAEMAQQBBAGMAQQBCAGwAQQBIAEkAQQBjAHcAQgB2AEEARwA0AEEASQBBAEIAegBBAEgAUQBBAFkAUQBCAHUAQQBHAFEAQQBhAFEAQgB1AEEARwBjAEEASQBBAEIAdgBBAEcANABBAEkAQQBCAGgAQQBDAEEAQQBhAEEAQgBwAEEARwBjAEEAYQBBAEIAbABBAEgASQBBAEkAQQBCAHoAQQBIAFUAQQBjAGcAQgBtAEEARwBFAEEAWQB3AEIAbABBAEMASQBBAEkAQQBCADAAQQBHAGsAQQBkAEEAQgBzAEEARwBVAEEAUABRAEEAaQBBAEgATQBBAGMAUQBCADEAQQBHAGsAQQBjAGcAQgAwAEEAQwBBAEEAWgB3AEIAMQBBAEcANABBAEkAQQBCAG0AQQBHAGsAQQBaAHcAQgBvAEEASABRAEEASQBBAEIAMwBBAEcAawBBAGQAQQBCAG8AQQBDAEEAQQBiAHcAQgB1AEEARwBVAEEASQBBAEIAdwBBAEcAVQBBAGMAZwBCAHoAQQBHADgAQQBiAGcAQQBnAEEASABNAEEAZABBAEIAaABBAEcANABBAFoAQQBCAHAAQQBHADQAQQBaAHcAQQBnAEEARwA4AEEAYgBnAEEAZwBBAEcARQBBAEkAQQBCAG8AQQBHAGsAQQBaAHcAQgBvAEEARwBVAEEAYwBnAEEAZwBBAEgATQBBAGQAUQBCAHkAQQBHAFkAQQBZAFEAQgBqAEEARwBVAEEASQBnAEEAdgBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBAGcAQQBIAE0AQQBkAEEAQgA1AEEARwB3AEEAWgBRAEEAOQBBAEMASQBBAGMAQQBCAGgAQQBHAFEAQQBaAEEAQgBwAEEARwA0AEEAWgB3AEEAdABBAEcAdwBBAFoAUQBCAG0AQQBIAFEAQQBPAGcAQQB4AEEARABVAEEAYwBBAEIANABBAEMASQBBAFAAZwBCAEMAQQBHAFUAQQBZAHcAQgBoAEEASABVAEEAYwB3AEIAbABBAEMAQQBBAFkAUQBCAHMAQQBHAHcAQQBJAEEAQgAwAEEARwBnAEEAWgBRAEEAZwBBAEgAYwBBAFkAUQBCADAAQQBHAFUAQQBjAGcAQQBnAEEASABBAEEAYwBnAEIAbABBAEgATQBBAGMAdwBCADEAQQBIAEkAQQBaAFEAQQBnAEEARwBNAEEAWQBRAEIAdABBAEcAVQBBAEkAQQBCAGsAQQBHAGsAQQBjAGcAQgBsAEEARwBNAEEAZABBAEIAcwBBAEgAawBBAEkAQQBCAG0AQQBIAEkAQQBiAHcAQgB0AEEAQwBBAEEAZQBRAEIAdgBBAEgAVQBBAGMAZwBBAGcAQQBIAFEAQQBjAGcAQgBwAEEARwBjAEEAWgB3AEIAbABBAEgASQBBAEkAQQBCAG0AQQBHAGsAQQBiAGcAQgBuAEEARwBVAEEAYwBnAEEAcwBBAEMAQQBBAGUAUQBCAHYAQQBIAFUAQQBJAEEAQgBvAEEARwBFAEEAWgBBAEEAZwBBAEgAUQBBAGIAdwBBAGcAQQBHAEkAQQBaAFEAQQBnAEEASABBAEEAYwBnAEIAaABBAEcATQBBAGQAQQBCAHAAQQBHAE0AQQBZAFEAQgBzAEEARwB3AEEAZQBRAEEAZwBBAEcAOABBAGIAZwBBAGcAQQBIAFEAQQBiAHcAQgB3AEEAQwBBAEEAYgB3AEIAbQBBAEMAQQBBAGQAQQBCAG8AQQBHAFUAQQBJAEEAQgB2AEEASABRAEEAYQBBAEIAbABBAEgASQBBAEkAQQBCAHcAQQBHAFUAQQBjAGcAQgB6AEEARwA4AEEAYgBnAEEAdQBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAUABBAEIAMABBAEcAUQBBAEkAQQBCAGgAQQBHAHcAQQBhAFEAQgBuAEEARwA0AEEAUABRAEEAaQBBAEcATQBBAFoAUQBCAHUAQQBIAFEAQQBaAFEAQgB5AEEAQwBJAEEAUABnAEEAOABBAEgATQBBAGIAUQBCAGgAQQBHAHcAQQBiAEEAQQArAEEARAB3AEEAYwB3AEIAdABBAEcARQBBAGIAQQBCAHMAQQBEADQAQQBVAHcAQQB1AEEARgBRAEEAWgBRAEIANgBBAEcAVQBBAGIAQQBBAHMAQQBDAEEAQQBRAHcAQgBEAEEAQwAwAEEAUQBnAEIAWgBBAEMAMABBAFQAZwBCAEQAQQBDADAAQQBUAGcAQgBFAEEAQwAwAEEATgBBAEEAdQBBAEQAQQBBAFAAQQBBAHYAQQBIAE0AQQBiAFEAQgBoAEEARwB3AEEAYgBBAEEAKwBBAEQAdwBBAEwAdwBCAHoAQQBHADAAQQBZAFEAQgBzAEEARwB3AEEAUABnAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBQAEEAQQB2AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBZAFEAQgBpAEEARwB3AEEAWgBRAEEAKwBBAEEAPQA9AAoAcwB1AGYAZgBpAHgAOgA=:31b8e172-b470-440e-83d8-e6b185028602 31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBnAEEAegBBAEQAYwBBAE0AQQBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCADMAQQBHAGsAQQBaAEEAQgAwAEEARwBnAEEAUABRAEEAaQBBAEQARQBBAE0AQQBBAHcAQQBDAFUAQQBJAGcAQQBnAEEARwBJAEEAYgB3AEIAeQBBAEcAUQBBAFoAUQBCAHkAQQBEADAAQQBJAGcAQQB3AEEAQwBJAEEAUABnAEEAZwBBAEEAbwBBAFAAQQBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEMAQQBBAGMAdwBCADAAQQBIAGsAQQBiAEEAQgBsAEEARAAwAEEASQBnAEIAMABBAEcAVQBBAGUAQQBCADAAQQBDADAAQQBZAFEAQgBzAEEARwBrAEEAWgB3AEIAdQBBAEQAbwBBAGMAZwBCAHAAQQBHAGMAQQBhAEEAQgAwAEEARABzAEEASQBBAEIAdwBBAEcARQBBAFoAQQBCAGsAQQBHAGsAQQBiAGcAQgBuAEEAQwAwAEEAYwBnAEIAcABBAEcAYwBBAGEAQQBCADAAQQBEAG8AQQBNAFEAQQAxAEEASABBAEEAZQBBAEEAaQBBAEQANABBAFEAZwBCADEAQQBIAFEAQQBJAEEAQgBwAEEARwA0AEEASQBBAEEAeABBAEQAawBBAE8AQQBBAHkAQQBDAEEAQQBkAEEAQgBvAEEARwBVAEEASQBBAEIAVABBAEgAVQBBAGMAQQBCAGwAQQBIAEkAQQBJAEEAQgBUAEEARwA4AEEAWQBRAEIAcgBBAEcAVQBBAGMAZwBBAGcAQQBIAGMAQQBZAFEAQgB6AEEAQwBBAEEAYQBRAEIAdQBBAEgAWQBBAFoAUQBCAHUAQQBIAFEAQQBaAFEAQgBrAEEAQwA0AEEASQBBAEIASgBBAEgAUQBBAEkAQQBCAG8AQQBHAEUAQQBjAHcAQQBnAEEARwBFAEEASQBBAEIAdwBBAEgAVQBBAGIAUQBCAHcAQQBDAEEAQQBkAEEAQgBvAEEARwBFAEEAZABBAEEAZwBBAEgAawBBAGIAdwBCADEAQQBDAEEAQQBiAHcAQgB3AEEARwBVAEEAYwBnAEIAaABBAEgAUQBBAFoAUQBBAGcAQQBIAGMAQQBhAFEAQgAwAEEARwBnAEEASQBBAEIAeQBBAEcAVQBBAGMAQQBCAGwAQQBHAEUAQQBkAEEAQgBsAEEARwBRAEEASQBBAEIAaQBBAEcARQBBAFkAdwBCAHIAQQBDADAAQQBZAFEAQgB1AEEARwBRAEEATABRAEIAbQBBAEcAOABBAGMAZwBCADAAQQBHAGcAQQBJAEEAQgB0AEEARwA4AEEAZABBAEIAcABBAEcAOABBAGIAZwBCAHoAQQBDAHcAQQBJAEEAQgBoAEEARwBNAEEAWQB3AEIAMQBBAEcAMABBAGQAUQBCAHMAQQBHAEUAQQBkAEEAQgBwAEEARwA0AEEAWgB3AEEAZwBBAEcARQBBAEkAQQBCAHQAQQBIAFUAQQBZAHcAQgBvAEEAQwBBAEEAWgB3AEIAeQBBAEcAVQBBAFkAUQBCADAAQQBHAFUAQQBjAGcAQQBnAEEASABjAEEAWQBRAEIAMABBAEcAVQBBAGMAZwBBAGcAQQBIAEEAQQBjAGcAQgBsAEEASABNAEEAYwB3AEIAMQBBAEgASQBBAFoAUQBBAHUAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBDAEEAQQBkAHcAQgBwAEEARwBRAEEAZABBAEIAbwBBAEQAMABBAEkAZwBBADAAQQBEAEEAQQBKAFEAQQBpAEEARAA0AEEAQwBnAEEAOABBAEcAawBBAGIAUQBCAG4AQQBDAEEAQQBjAHcAQgB5AEEARwBNAEEAUABRAEEAaQBBAEMAOABBAFkAZwBCAHEAQQBHAE0AQQBMAFEAQgB5AEEAQwA4AEEAYQBRAEIAdABBAEcAYwBBAEwAdwBBADEAQQBDADAAQQBZAFEAQgBzAEEARwBjAEEAYgB3AEIAeQBBAEcAawBBAGQAQQBCAG8AQQBHADAAQQBjAHcAQQB2AEEASABjAEEAWQBRAEIAMABBAEcAVQBBAGMAZwBCAG0AQQBHAGsAQQBaAHcAQgBvAEEASABRAEEAWAB3AEIAcABBAEcAMABBAFoAdwBBAHYAQQBIAE0AQQBkAFEAQgB3AEEARwBVAEEAYwBnAEIAegBBAEcAOABBAFkAUQBCAHIAQQBHAFUAQQBjAGcAQQB1AEEASABBAEEAYgBnAEIAbgBBAEMASQBBAEkAQQBCAGgAQQBHAHcAQQBkAEEAQQA5AEEAQwBJAEEAVQB3AEIAMQBBAEgAQQBBAFoAUQBCAHkAQQBDAEEAQQBVAHcAQgB2AEEARwBFAEEAYQB3AEIAbABBAEgASQBBAEkAQQBBAHgAQQBEAEEAQQBNAEEAQQBpAEEAQwBBAEEAZABBAEIAcABBAEgAUQBBAGIAQQBCAGwAQQBEADAAQQBJAGcAQgBUAEEASABVAEEAYwBBAEIAbABBAEgASQBBAEkAQQBCAFQAQQBHADgAQQBZAFEAQgByAEEARwBVAEEAYwBnAEEAZwBBAEQARQBBAE0AQQBBAHcAQQBDAEkAQQBMAHcAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBIAEkAQQBQAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQA4AEEASABRAEEAWgBBAEEAZwBBAEcARQBBAGIAQQBCAHAAQQBHAGMAQQBiAGcAQQA5AEEAQwBJAEEAWQB3AEIAbABBAEcANABBAGQAQQBCAGwAQQBIAEkAQQBJAGcAQQArAEEARAB3AEEAYwB3AEIAdABBAEcARQBBAGIAQQBCAHMAQQBEADQAQQBQAEEAQgB6AEEARwAwAEEAWQBRAEIAcwBBAEcAdwBBAFAAZwBCAFUAQQBHAGcAQQBaAFEAQQBnAEEARgBNAEEAZABBAEIAeQBBAEcAOABBAGIAZwBCAG4AQQBDAHcAQQBJAEEAQgBEAEEARQBNAEEATABRAEIAQwBBAEYAawBBAEwAUQBCAE8AQQBFAE0AQQBMAFEAQgBPAEEARQBRAEEATABRAEEAMABBAEMANABBAE0AQQBBADgAQQBDADgAQQBjAHcAQgB0AEEARwBFAEEAYgBBAEIAcwBBAEQANABBAFAAQQBBAHYAQQBIAE0AQQBiAFEAQgBoAEEARwB3AEEAYgBBAEEAKwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgBoAEEARwBJAEEAYgBBAEIAbABBAEQANABBAAoAcwB1AGYAZgBpAHgAOgA=:31b8e172-b470-440e-83d8-e6b185028602 31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBnAEEANABBAEQAYwBBAE0AZwBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCADMAQQBHAGsAQQBaAEEAQgAwAEEARwBnAEEAUABRAEEAaQBBAEQARQBBAE0AQQBBAHcAQQBDAFUAQQBJAGcAQQBnAEEARwBJAEEAYgB3AEIAeQBBAEcAUQBBAFoAUQBCAHkAQQBEADAAQQBJAGcAQQB3AEEAQwBJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAZwBBAEgAYwBBAGEAUQBCAGsAQQBIAFEAQQBhAEEAQQA5AEEAQwBJAEEATgBBAEEAdwBBAEMAVQBBAEkAZwBBACsAQQBBAG8AQQBQAEEAQgBwAEEARwAwAEEAWgB3AEEAZwBBAEgATQBBAGMAZwBCAGoAQQBEADAAQQBJAGcAQQB2AEEARwBJAEEAYQBnAEIAagBBAEMAMABBAGMAZwBBAHYAQQBHAGsAQQBiAFEAQgBuAEEAQwA4AEEATgBRAEEAdABBAEcARQBBAGIAQQBCAG4AQQBHADgAQQBjAGcAQgBwAEEASABRAEEAYQBBAEIAdABBAEgATQBBAEwAdwBCADMAQQBHAEUAQQBkAEEAQgBsAEEASABJAEEAWgBnAEIAcABBAEcAYwBBAGEAQQBCADAAQQBGADgAQQBhAFEAQgB0AEEARwBjAEEATAB3AEIAMwBBAEcARQBBAGQAQQBCAGwAQQBIAEkAQQBaAHcAQgAxAEEARwA0AEEAWgBnAEIAcABBAEcAYwBBAGEAQQBCADAAQQBDADQAQQBhAGcAQgB3AEEARwBjAEEASQBnAEEAZwBBAEcARQBBAGIAQQBCADAAQQBEADAAQQBJAGcAQgBEAEEASABJAEEAYgB3AEIAMwBBAEcAUQBBAEkAQQBCAHYAQQBHAFkAQQBJAEEAQgB3AEEARwBVAEEAYgB3AEIAdwBBAEcAdwBBAFoAUQBBAGcAQQBHAGcAQQBZAFEAQgAyAEEARwBrAEEAYgBnAEIAbgBBAEMAQQBBAFUAdwBCADEAQQBIAEEAQQBaAFEAQgB5AEEAQwBBAEEAVQB3AEIAdgBBAEcARQBBAGEAdwBCAGwAQQBIAEkAQQBJAEEAQgAzAEEARwBFAEEAZABBAEIAbABBAEgASQBBAEkAQQBCAG4AQQBIAFUAQQBiAGcAQQBnAEEARwBZAEEAYQBRAEIAbgBBAEcAZwBBAGQAQQBBAGkAQQBDAEEAQQBkAEEAQgBwAEEASABRAEEAYgBBAEIAbABBAEQAMABBAEkAZwBCAEQAQQBIAEkAQQBiAHcAQgAzAEEARwBRAEEASQBBAEIAdgBBAEcAWQBBAEkAQQBCAHcAQQBHAFUAQQBiAHcAQgB3AEEARwB3AEEAWgBRAEEAZwBBAEcAZwBBAFkAUQBCADIAQQBHAGsAQQBiAGcAQgBuAEEAQwBBAEEAVQB3AEIAMQBBAEgAQQBBAFoAUQBCAHkAQQBDAEEAQQBVAHcAQgB2AEEARwBFAEEAYQB3AEIAbABBAEgASQBBAEkAQQBCADMAQQBHAEUAQQBkAEEAQgBsAEEASABJAEEASQBBAEIAbgBBAEgAVQBBAGIAZwBBAGcAQQBHAFkAQQBhAFEAQgBuAEEARwBnAEEAZABBAEEAaQBBAEMAOABBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBDAEEAQQBjAHcAQgAwAEEASABrAEEAYgBBAEIAbABBAEQAMABBAEkAZwBCAHcAQQBHAEUAQQBaAEEAQgBrAEEARwBrAEEAYgBnAEIAbgBBAEMAMABBAGIAQQBCAGwAQQBHAFkAQQBkAEEAQQA2AEEARABFAEEATgBRAEIAdwBBAEgAZwBBAEkAZwBBACsAQQBGAFEAQQBhAEEAQgBwAEEASABNAEEASQBBAEIAcABBAEcANABBAGQAZwBCAGwAQQBHADQAQQBkAEEAQgBwAEEARwA4AEEAYgBnAEEAZwBBAEgAUQBBAGIAdwBCADAAQQBHAEUAQQBiAEEAQgBzAEEASABrAEEASQBBAEIAagBBAEcAZwBBAFkAUQBCAHUAQQBHAGMAQQBaAFEAQgBrAEEAQwBBAEEAZABBAEIAbwBBAEcAVQBBAEkAQQBCAGoAQQBHAGcAQQBZAFEAQgB5AEEARwBFAEEAWQB3AEIAMABBAEcAVQBBAGMAZwBBAGcAQQBHADgAQQBaAGcAQQBnAEEASABjAEEAWQBRAEIAMABBAEcAVQBBAGMAZwBBAGcAQQBHAFkAQQBhAFEAQgBuAEEARwBnAEEAZABBAEIAegBBAEMANABBAEkAQQBCAE8AQQBHADgAQQBkAHcAQQBnAEEASABrAEEAYgB3AEIAMQBBAEMAQQBBAFkAdwBCAGgAQQBHADQAQQBJAEEAQgBvAEEARwBrAEEAWgBBAEIAbABBAEMAQQBBAFkAZwBCAGwAQQBHAGcAQQBhAFEAQgB1AEEARwBRAEEASQBBAEIAMABBAEcAZwBBAGEAUQBCAHUAQQBHAGMAQQBjAHcAQQBnAEEARwBFAEEAWQB3AEIAeQBBAEcAOABBAGMAdwBCAHoAQQBDAEEAQQBkAEEAQgBvAEEARwBVAEEASQBBAEIANQBBAEcARQBBAGMAZwBCAGsAQQBDAEEAQQBaAGcAQgB5AEEARwA4AEEAYgBRAEEAZwBBAEgAawBBAGIAdwBCADEAQQBIAEkAQQBJAEEAQgAwAEEARwBFAEEAYwBnAEIAbgBBAEcAVQBBAGQAQQBBAHMAQQBDAEEAQQBZAFEAQgB1AEEARwBRAEEASQBBAEIAbABBAEgAWQBBAFoAUQBCAHkAQQBIAGsAQQBiAHcAQgB1AEEARwBVAEEASQBBAEIAbABBAEcANABBAFoAQQBCAHoAQQBDAEEAQQBkAFEAQgB3AEEAQwBBAEEAZABRAEIAMABBAEgAUQBBAFoAUQBCAHkAQQBHAHcAQQBlAFEAQQBnAEEARwBRAEEAYwBnAEIAbABBAEcANABBAFkAdwBCAG8AQQBHAFUAQQBaAEEAQQB1AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBQAEEAQgAwAEEARwBRAEEASQBBAEIAaABBAEcAdwBBAGEAUQBCAG4AQQBHADQAQQBQAFEAQQBpAEEARwBNAEEAWgBRAEIAdQBBAEgAUQBBAFoAUQBCAHkAQQBDAEkAQQBQAGcAQQA4AEEASABNAEEAYgBRAEIAaABBAEcAdwBBAGIAQQBBACsAQQBEAHcAQQBjAHcAQgB0AEEARwBFAEEAYgBBAEIAcwBBAEQANABBAFIAZwBCAHMAQQBHAGsAQQBZAHcAQgByAEEASABJAEEATwBnAEEAZwBBAEUAbwBBAGIAdwBCAG8AQQBHADQAQQBJAEEAQgBUAEEARwBnAEEAWgBRAEIAawBBAEgASQBBAGEAUQBCAGoAQQBHAHMAQQBMAEEAQQBnAEEARQBNAEEAUQB3AEEAdABBAEUASQBBAFcAUQBBAHQAQQBEAEkAQQBMAGcAQQB3AEEARAB3AEEATAB3AEIAegBBAEcAMABBAFkAUQBCAHMAQQBHAHcAQQBQAGcAQQA4AEEAQwA4AEEAYwB3AEIAdABBAEcARQBBAGIAQQBCAHMAQQBEADQAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEcARQBBAFkAZwBCAHMAQQBHAFUAQQBQAGcAQQA9AAoAcwB1AGYAZgBpAHgAOgA=:31b8e172-b470-440e-83d8-e6b185028602\n\n\n\n\nLonnie Johnson (born 1949) is an engineer working on energy production, especially solid-state batteries and solar panels, and he is the inventor of the Super Soaker. His earliest professional work was in the U.S. Air Force, and he later worked at NASA’s Jet Propulsion Laboratory on the Galileo mission to Jupiter. Johnson attended Williamson High School, an all-black school in Mobile, Alabama. In 1968, he won the first-place prize at the state science fair for his compressed air powered robot. Before working for the U.S. Air Force, Johnson obtained a B.S. in mechanical engineering and a master’s degree in nuclear engineering from Tuskegee University.\nTimeline of Lonnie Johnson’s Life\n\nTechnology affects real wars, too. The outcome of individual battles may be decided by numbers of soldiers, the strategies of generals, and other human factors. But, with rare exceptions, if one side has better technology, they win in the long run. For example, in the Seventh Century, the Eastern Roman (Byzantine) Empire was militarily weak until its invention of “Greek fire,” a flammable chemical that was fired through hoses or in projectiles, with the special property that it would keep burning in water, so it was valuable in naval battles. This weapon was very important to the survival of the empire, which lasted until the 15th Century.\n\n\n\nWhat happens if you have the latest Super Soaker and your friend can only afford an old-fashioned squirt gun?\n\n\nSee how many important military technologies you can list in two minutes. (Don’t neglect defensive technologies such as thick castle walls.)\n\n\nWith a partner, pick one of these examples to research online, then share your results with the class.\n\n\nWhy were metal-clad ships important in the (U.S.) Civil War?\n\n\nWhy did armies generally have bright-colored uniforms through the 19th Century but dull-colored uniforms after that?\n\n\nHow did airplanes change the rules of war for civilians?"
  },
  {
    "objectID": "unit-5/lab-5/2-machines-and-lives.html",
    "href": "unit-5/lab-5/2-machines-and-lives.html",
    "title": "Page 2: Computers and War",
    "section": "",
    "text": "MF: lightly clean up to make the text more concise\nThis page is long and there are so many things to research. I paced it at 60-120 min, and marked it skippable. –MF, 5/31/20\n\n\nOn this page, you will consider several examples of computer-based military technology.\n\nWhen you were listing military technologies, did you think of cryptography? GPS? Those technologies have other uses too, but they’re of definite military importance, and were developed mainly for military use. Cryptography is older than computers, but modern cryptography depends on computers, and some of the earliest computers were developed for that purpose.\n\n\n\nWhat other computer-based military technology can you think of?\n\n\n\nOn this page we’re going to focus on three really important computer-based military technologies.\n\nMalware\n\nYou learned about malware on Unit 4 Lab 2 Page 5: Security Risks. This is a general name for all kinds of programs intended to do harm, including viruses (which copy themselves like real viruses), DNS spoofing, phishing, and denial of service software.\nMalware is generally used either just to make trouble or to steal money. But various countries’ military groups are actively developing malware to disrupt an enemy country’s communications or technology centers.\n\n\n\nLook up “Stuxnet,” which is the best-known military malware attack. You can also research other military malware.\n\n\n\n\nAutonomous weapons\n\nAn autonomous weapon is one that can decide to fire itself without human decision-making. You can see why the military might want autonomous weapons.\n\n\n\nLook up the amount of time between the detection of a missile attack on the US and the actual explosion of the incoming missiles.\n\n\n\nOn the other hand, autonomous weapons raise the possibility that a programming error could start a nuclear war by accident.\n\n\n\nLook up “nuclear near misses” to read some of the stories about automated false alarms caused by a bear and other mishaps.\n\n\n\nIn all of these cases, what prevented the outbreak of World War III is that some human expert didn’t trust the automatic missile detectors and, sometimes in violation of direct orders, refused to attack the other side.\nIn 1983, then-President Ronald Reagan announced a program called the “Strategic Defense Initiative” (SDI) that would have placed military satellites in orbit, equipped with both missile detectors and anti-missile weapons, including high-energy lasers. The satellites would be equipped with computers that would detect an enemy attack, aim its weapons at incoming missiles, and destroy them. The project became known by the (sarcastic) nickname “Star Wars.”\n\n\n\nLook up “Strategic Defense Initiative,” and some of the controversies surrounding it, both in 1983 and in later revivals of the idea.\n\n\nLook up the Anti-Ballistic Missile Treaty, which SDI would have violated. Why would a treaty limit defensive weapons rather than offensive ones?\n\n\nFor a more recent perspective, read this article about killer robots.\n\n\n\n\nDrones\n\nDrones are remotely piloted aircraft. They vary in size from toys for hobbyists to bombers used in warfare. The remote control depends on computers both in the airplane and on the ground.\n\n“Many contend that President Bush’s re-election and increased vote share prove that the Iraq War was either irrelevant or even an asset to him. We present evidence to the contrary. Focusing on the change in Bush’s 2004 showing compared to 2000, we discover that Iraq War casualties from a state significantly depressed the President’s vote share there. We infer that were it not for the approximately 10,000 U.S. dead and wounded in Iraq by Election Day, Bush would have won nearly 2% more of the popular vote, carrying several additional states and winning decisively… In contrast, National Guard/Reservist call-ups had no significant additional effect beyond the main casualty effect.”\n— “Iraq War Casualties and the 2004 U.S. Presidential Election,” David Karol and Edward Miguel, 2004\n\nFor an elected president, there are political benefits and political costs to starting a war. A benefit is that when a war starts, especially if voters feel that their country is under attack, a war makes people feel patriotic, and that is reflected in greater approval of the president. That’s the primary effect until American soldiers die. Voters disapprove of American deaths. In the study quoted above, the researchers examined George W. Bush’s approval ratings state by state, and found that his rating was measurably lower in states from which more soldiers had died.\nThe risk of American deaths, leading to votes against the president’s party, is what keeps presidents from fighting unnecessary wars. It’s also why Barack Obama promised “no American boots on the ground” in the war against ISIS in Iraq and Syria.\nDrone aircraft are important mainly because they make it easier to start a war in which no Americans die. The pilots are in the US, not in the country being bombed. It’s not that the drones are faster or more accurate or otherwise better from a strictly military viewpoint; it’s that they’re politically valuable, making it easier to start a war.\n\n\n\nDiscuss: Is making it easier for the US to start a war good or bad? Come up with some arguments on both sides before deciding on your answer.\n\n\nDiscuss: “The US are the good guys, so we won’t start a war unless it’s in a good cause.” This list of US wars may help."
  },
  {
    "objectID": "unit-5/lab-5/3-everyday-life.html",
    "href": "unit-5/lab-5/3-everyday-life.html",
    "title": "Page 3: Military Technology in Everyday Life",
    "section": "",
    "text": "new pink box. added some comments for later (including suggesting splitting this page). cut a FYTD that didn’t make sense. –MF, 12/24/17\n\n\nMF: could use a review and perhaps a page cut\n\n\nOn this page, you will learn how military technologies end up being used for civilian purposes and consider the ethics of working on military technologies.\n\n\n\n\nDual use: How have we benefited from technologies developed for war (nuclear energy, space race, GPS, drones)\n\n\nProfessional codes of ethics all say you shouldn’t build technology that’s harmful. Is it justifiable to work for the military, or for a military contractor?\n\n\nIs there such a thing as a good war?\n\n\nAre US wars good?\n\n\n\n\n\n\nDARPA\n\n\nput in Paul’s find about Stingray. Wikipedia page - as an example of technology coming into non-military use, but being questionable. Paul’s email was from ColorofChange.org and included the following references: References:\n\n“Feds to study illegal use of spy gear’,” The Washington Post, 08-11-2014 https://act.colorofchange.org/go/5846?t=7&akid=5391.1236061.7CEC0Q\n“Chicago Cops Used Stingray to Intercept Protester’s Conversations,” The Free Thought Project, 12-07-2014 http://act.colorofchange.org/go/5847?t=9&akid=5391.1236061.7CEC0Q\n“Warrantless stingray case finally arrives before federal appellate judges,” Ars Technica, 01-29-2016 http://act.colorofchange.org/go/5848?t=11&akid=5391.1236061.7CEC0Q\n“NYPD tracked citizens’ cellphones 1,000 times since 2008 without warrants,” The Guardian, 02-11-2016 http://act.colorofchange.org/go/5849?t=13&akid=5391.1236061.7CEC0Q\n“Police keep quiet about cell-tracking technology,” Yahoo News, 03-22-2014 http://act.colorofchange.org/go/5850?t=15&akid=5391.1236061.7CEC0Q\n“New Evidence Shows Milwaukee Police Hide Stingray Usage From Courts and Defense,” ACLU, 01-25-2016 https://act.colorofchange.org/go/5851?t=17&akid=5391.1236061.7CEC0Q\n“Chicago activists claim police used ‘Stingray’ surveillance during Garner protests,” RT, 10-24-2014 https://act.colorofchange.org/go/5852?t=19&akid=5391.1236061.7CEC0Q\n“The Black Panthers: Vanguard of the Revolution,” PBS, 02-16-2016 http://act.colorofchange.org/go/5868?t=21&akid=5391.1236061.7CEC0Q\n\n\n\n\n\n\n\nLook up the following:\n\n\nWhich came first, nuclear power plants or nuclear weapons?\n\n\nWho set up the GPS satellite network, and why?\n\n\nWho paid for the development of the Internet, and why?\n\n\n\n\n\nMany technologies are developed for military purposes and turn out also to be useful for the rest of us.\n\n\n\nBrainstorm as big a list as you can of dual-use technologies. (It doesn’t count as dual-use if a technology developed for everyone to use, such as the telephone, is useful to the military in the same way that it’s useful to anyone.)\n\n\n\n\nShould You Work on Military Technology?\n\n\nThis feels like it should be a separate page. –MF, 12/24/17\n\n\n\n\n\n\nImage from Museum of Women Pilots\n\n\nMary Golda Ross (1908–2008) was a ground-breaking Native American engineer and the first female employed by Lockheed, an American aerospace technology corporation. Ross was passionate about educating women and Native Americans and spent over ten years teaching while earning her Master’s degree in mathematics during the summer. Lockheed hired her as a mathematician in 1942. During her thirty-plus years there, Ross contributed to cutting-edge aerospace designs including concepts for interplanetary space travel, crewed and uncrewed Earth-orbiting flights, and orbiting satellites.\nArticle: Aerospace Engineer, Educator, and Advocate\n\n\nThe Code of Ethics and Professional Conduct from the Association for Computing Machinery\n\n1. General Moral Imperatives\nAs an ACM member I will…\n1.1 Contribute to society and human well-being.\nThis principle concerning the quality of life of all people affirms an obligation to protect fundamental human rights and to respect the diversity of all cultures. An essential aim of computing professionals is to minimize negative consequences of computing systems, including threats to health and safety. When designing or implementing systems, computing professionals must attempt to ensure that the products of their efforts will be used in socially responsible ways, will meet social needs, and will avoid harmful effects to health and welfare…\n1.2 Avoid harm to others.\n“Harm” means injury or negative consequences, such as undesirable loss of information, loss of property, property damage, or unwanted environmental impacts. This principle prohibits use of computing technology in ways that result in harm to any of the following: users, the general public, employees, employers. Harmful actions include intentional destruction or modification of files and programs leading to serious loss of resources or unnecessary expenditure of human resources such as the time and effort required to purge systems of “computer viruses.” …\n\n\n\n\nWhich do you think is more harmful to others: deleting their computer files, or killing them? Which of these does the ACM consider more harmful?\n\n\nResearch and discuss: Is it ethical to work on weapons? How do some ACM members justify such work? Does it matter if the work is on a dual-use technology?"
  },
  {
    "objectID": "unit-5/lab-6/1-review.html",
    "href": "unit-5/lab-6/1-review.html",
    "title": "Page 1: Review Your Tic-Tac-Toe Project",
    "section": "",
    "text": "MF: Project still needs to be wrapped up and updated online\n\n\nIn this lab, you’ll extend your Tic-Tac-Toe program to make the computer play against you.\nOn this page, you’ll review the blocks in your previous Tic-Tac-Toe project.\n\n\n\n\nOpen your U3L3-TicTacToe project, and save it as U5L6-TicTacToe so you’ll still have your old version as a backup.\n\n\nPlay part of a game, stop before finishing, and then click on each of the following blocks.  Discuss what each expression does and how its code works.\n\n\n\n\n\nYou can edit a block to remind yourself of how it works if you’ve forgotten.\n\n\n\n\n\n\n\n\n\n\n\n\n\n Two of these blocks report what’s on the board but in different ways: status of all winning triples and board. Why do you need both of those? When do you use each of them?\n\n\nWhat tells the program that clicking in a square means to move in that square? How does it know which square you clicked?"
  },
  {
    "objectID": "unit-5/lab-6/2-creating-computer-player.html",
    "href": "unit-5/lab-6/2-creating-computer-player.html",
    "title": "Page 2: Creating a Computer Player",
    "section": "",
    "text": "MF: Project still needs to be wrapped up and updated online\n\n\nOn this page, you’ll make the computer play against the human player.\n\nThe game currently allows two human players to take turns playing. But you don’t really need a computer to keep track of moves for two human players. We want the human player to take turns with a computer player that will move automatically. To simplify the project, we’ll assume that the human player will always move first (playing X) and that the computer is playing O.\n\nHave the Computer Move Randomly\n\nFor now, you’ll create a computer player that moves to random positions on the board. (It won’t be a very good player, but you’ll fix that once the structure of the code for the computer’s move is in place.) Once the program decides where it wants to move, you’ll use broadcast to send a message to tell the clone with the matching position number to record a move. (For the human player, when I am clicked serves this purpose, but the computer’s moves aren’t prompted by the user clicking a square.)\n\nRecall that clones are temporary copies of a sprite. You learned about them in Unit 3 Lab 1 Page 5: Building a Tic-Tac-Toe Board.\n\n \n\nYou first saw broadcast and when I receive on Unit 1 Lab 2 Page 2: Making Programs Talk.\n\nBroadcast sends out a message to all the sprites in the project. Any scripts that start with when I receive and have a matching message in the input slot will run.\nIf you select “any message” from the when I receive dropdown menu and you click the right-pointing triangle, you can use the data variable to access the message. \n\n\n\nIf it isn’t open already, open your U5L6-TicTacToe project.\n\n\nFind the script that starts when I am clicked. That script handles a move by the human player. Now start a new script next to it: \n\n\nCreate an abstraction to contain everything inside the if statement from the when I am (clicked) script and use it in both scripts.     \n\n\n\nHow do I know which squares are vacant?\n\nLook in board.\n\n\nIn order to debug the when I receive script, edit the move in this square block. After your code for Player X’s turn, temporarily pick a random vacant square and use broadcast with that square number as the message. (If your when I receive script is working, the computer will move in the corresponding square.)\n\n\nTake turns with your partner playing Tic-Tac-Toe against the computer. Fix any bugs you find.\n\n\n\n\nGive the Computer a Simple Strategy\n\nInstead of having the computer move at random, you will start to give the computer some strategy. Unlike people, all squares on the tic-tac-toe board are not created equal. Playing in the center (position 5) or on a corner (positions 1, 3, 7, or 9) is better than playing on an edge (positions 2, 4, 6, or 8). \n\n\n\n Why is playing in the center or a corner better than an edge? Compare your explanation with that of other students.\n\n\nCreate a  block that reports the best position on the board that is not yet filled. Use it as input to your broadcast instruction in place of random.\n\nClick for a hint about best empty square.\n\n\n\n\n\n\nTake turns playing games against the computer. Make sure the computer player only chooses an edge if all of the corners and the center are already filled."
  },
  {
    "objectID": "unit-5/lab-6/3-developing-strategy.html",
    "href": "unit-5/lab-6/3-developing-strategy.html",
    "title": "Page 3: Developing a Gameplay Strategy",
    "section": "",
    "text": "On this page, you’ll define the strategy that the computer will use by investigating the strategies that humans use.\n\nYou’ve already built into your project the most basic Tic-Tac-Toe strategy rule: the computer will move to the best empty square on its turn. But there are other important elements to a good strategy…\n\n\n\nPlay a couple of games of Tic-Tac-Toe with your partner on paper.\n\n\nDiscuss your strategy with your partner, and write out a list of if/then rules that you both use to play (for example, “if such-and-such is the case, then play here”).\n\n\n\nThe strategy rules for Tic-Tac-Toe have different degrees of priority. For example, the most important rule is “if I can win on this turn, then play in the winning square.”\n\n\n\nWhat’s the second most important rule?\n\n\n Think through how the computer can determine if a player can win on their next turn. The won? block works by looking for a triple in which all three slots are X or all three slots are O. Describe what the slots of a triple will contain if player O can win on their next move by filling that triple’s last square.\n\n\n\n\nThese three rules (if you can win on this move, do so; if the other player can win on their next move, block them; and otherwise just pick the best empty square) are part of most human Tic-Tac-Toe strategies. But the best players develop additional rules that come after the first two but before the last. You can explore some of these rules in the Take It Further problems at the end of the lab.\n\n\n\nYou’re going to start implementing “If I can win…” and “If the other player can win…” rules, starting by detecting those situations.\n\nMake a block .\n\n\nLook inside the  block that you wrote in Unit 3. Remind yourself how it finds a triple that has three in a row of the desired X or O.\n\n\n\nClick if you need a hint.\n\nA possible winning triple for O on the next move has ____ Os and ____ Xs.\n\n\nNow write . It should report the first triple it finds that contains a place where the player could win on the next move. \n\n\nPlay part of a game, and then test winning triple for both inputs (X and O). Play a little more, and then test them both again. Fix any bugs.\n\n\nWhat does winning triple report if there is no winning triple?\n\n\nNow write the  block. Make sure it works even if there is no winning square.\n\n\nClick for a hint about winning square.\n\n \n\n\n\nPlay part of a game, test winning square for both players, and fix any bugs.\n\n\n\n\nOn the next page you’ll use winning square to finish giving the computer a better strategy."
  },
  {
    "objectID": "unit-5/lab-6/4-making-computer-player-strategic.html",
    "href": "unit-5/lab-6/4-making-computer-player-strategic.html",
    "title": "Page 4: Making the Computer Play Strategically",
    "section": "",
    "text": "MF: Project still needs to be wrapped up and updated online\n\n\nOn this page, you’ll implement the Tic-Tac-Toe strategy rules to make the computer play strategically.\n\nYou’ll set up a  block so you can broadcast to all the clones the position where the computer will move. As before, only the clone with the matching position number will make the move.\nThe code for next move for computer will implement the three strategy rules:\n\n\nRule 1: If I (the computer, player O) can win, do so.\n\n\nRule 2: If my opponent (the human, player X) can win, block them.\n\n\nFinal rule: Otherwise, just pick the best empty square.\n\n\n\n\n\nIf it isn’t open already, open your U5L6-TicTacToe project.\n\n\nThe English description of Rules 1 and 2 is “If … do …” To turn that into code using the if block, you’ll need a predicate to put in the hexagonal input slot of if. Write  using the  block you wrote on the previous page.\n\n\nNow, create the  block that implements the strategy rules using these two new blocks, and use it as the input to broadcast instead of best empty square.\n\n\nClick for a hint about implementing the strategy rules.\n\nUse your  block too.\n\n\n\nPlay several games against the program. Fix any bugs. Make sure computer is using three rules.\n\n\n\n\n\n\nModify the program so that the computer can play either X or O. When the game starts, ask the human player to choose X or O.\n\n\nCreate a way for the player to decide whether they want to play against another human or against the computer.\n\n\n\n\n\n\nPlay against the computer, and find a strategy that lets you win the game. (This isn’t trivial; just the computer rules you already have are pretty good.)\n\n\nProgram more rules to make the computer a better player. This will involve looking more than one move ahead. There are various ways to do it, and what follows is just one suggestion.\n\n\nIt’s not good enough just to look for a winning move for yourself two moves from now. If you can see such a move, so can your opponent, who’ll move to block you. So what you have to find is a fork: two triples in which you have one appearance and your opponent has none, and which have a free square in common. This is much easier to see with a picture: \n\nPlayer X opened the game with the standard opening move, in the center. Player O responded poorly, on the top edge, and is therefore about to lose the game. Player X played in the top left corner. Player O had to respond in the bottom right corner in order to block an immediate win for player X. It’s player X’s turn. There is no winning combination with two Xs, nor with two Os. But player X can find two winning combinations, the ones marked with the red lines, both of which have one X and two free squares, with one of the free squares in common. In the picture, the common square is 4, the left edge square, and so that’s where Player X should move.\n\n\n\nFind all the triples (that is, report a list of triples) in which the computer has one square and the other two are empty, and store them in a variable called singles.\n\n\nMake one big list of all the letters and numbers from the triples: \n\n\n“Atom” is a technical term for a value that isn’t a list. A list contains a bunch of items, just as a molecule contains a bunch of atoms.\n\n\nNow find a number that appears more than once in atoms.\n\n\nYou solved a related problem in Unit 5 Lab 1 Page 7: Removing Duplicates."
  },
  {
    "objectID": "unit-5/unit-5-exam-reference.html",
    "href": "unit-5/unit-5-exam-reference.html",
    "title": "Unit 5 Exam Questions",
    "section": "",
    "text": "Unit 5 Lab 1: Search Algorithms and Efficiency, Page 5\n\n\nLab 1: Search Algorithms and Efficiency\n\n\n5.1.5\n\n\nAAP-4.A.7\n\n\nThe term “reasonable time” describes any algorithm that runs in polynomial time. Exponential time algorithms are not considered reasonable."
  },
  {
    "objectID": "unit-5/unit-5-self-check.html",
    "href": "unit-5/unit-5-self-check.html",
    "title": "Unit 5 Self-Check Questions",
    "section": "",
    "text": "Unit 5 Lab 1: Search Algorithms and Efficiency, Page 3\n\n\nLab 1: Search Algorithms and Efficiency\n\n\n5.1.3\n\n\nAAP-2.P part b, AAP-2.P.2\n\nIn order to use a binary search, the data must be…\n\n\n\nbinary\n\n\nAll data in a computer are represented using binary (ones and zeros), but that has nothing to do with binary searches, which compare against the middle value to choose which of two halves to eliminate.\n\n\n\n\nsorted\n\n\nCorrect! If the data are sorted, then comparing to the middle value will give you good information about which half of the data to keep.\n\n\n\n\nunsorted\n\n\nIf the data are unsorted, you can’t be sure that everything before or everything after the middle value can be eliminated.\n\n\n\n\nlinear\n\n\n“Linear” is the name of another search algorithm, not a property of the data.\n\n\n\n\n\n\n\n\n\n5.1.3\n\nWhich of the following questions can be answered with a binary search, assuming the data are sorted? Check all that apply:\n\n\n\nWhat is my friend Rasheed’s phone number?\n\n\nCorrect! You are searching for one phone number in the list.\n\n\n\n\nGive me a list of all the Beyoncé songs.\n\n\nWe have to find all the Beyoncé songs, not just one.\n\n\n\n\nTell me if bread is on my shopping list.\n\n\nCorrect! You are searching for one item in the list.\n\n\n\n\nWho in my contact list lives on Grand Avenue?\n\n\nYour contact list is probably sorted by name, not by address. Also, there may be more than one person who lives on Grand Avenue.\n\n\n\n\n\n\n\n\n\n\n\n\n5.1.5\n\nThe table below shows the computer time it takes to complete various tasks on the data of different sized towns.\n\n\n\n\nTask\n\n\nSmall Town(population 1,000)\n\n\nMid-sized Town(population 10,000)\n\n\nLarge Town(population 100,000)\n\n\n\n\nEntering Data\n\n\n2 hours\n\n\n20 hours\n\n\n200 hours\n\n\n\n\nBacking up Data\n\n\n0.5 hours\n\n\n5 hours\n\n\n50 hours\n\n\n\n\nSearching through Data\n\n\n5 hours\n\n\n15 hours\n\n\n25 hours\n\n\n\n\nSorting Data\n\n\n0.01 hour\n\n\n1 hour\n\n\n100 hours\n\n\n\n\nBased on the information in the table, which of the following tasks is likely to take the longest amount of time when scaled up for a city of population 1,000,000.\n\n\n\nEntering data\n\n\n\nAs the population size is multiplied by 10, the time needed for entering data is also multiplied by 10, so for a population of 1,000,000, it should take about 10×200=2000 hours.\n\n\n\n\nBacking up data\n\n\n\nAs the population size is multiplied by 10, time needed for backing up data is multiplied by 10, so for a population of 1,000,000, it should take about 10×50=500 hours.\n\n\n\n\nSearching through data\n\n\nSearching through the data seems to go up by about 10 hours each time the population is multiplied by 10, so for a population of 1,000,000, it should take about 35 hours.\n\n\n\n\nSorting data\n\n\nCorrect!  As the population size is multiplied by 10, the time needed for the sorting of data is multiplied by 100. So, for a population of 1,000,000, it should take about 100×100=10,000 hours.\n\n\n\n\n\n\n\n\n\n5.1.6\n\nIn which of the following problems is a heuristic solution appropriate?\n\n\n\nFind the biggest item in a list.\n\n\nWe can find the solution to this problem in polynomial time.\n\n\n\n\nFind the best combination of ingredients for spaghetti sauce.\n\n\nThere is no perfect (correct) solution to this problem because different people have different tastes.\n\n\n\n\nPlaying chess.\n\n\nCorrect! This is a good example because there is a solution (a way to determine the outcome of a perfectly played game), the solution can’t be found in polynomial time, and an approximate solution would be helpful.\n\n\n\n\nFind the combination to a lock with n numbers.\n\n\nThere is no possibility of a heuristic because it’s not helpful to have an almost correct combination (an approximate solution).\n\n\n\n\n\n\n\n\n\n5.1.8\n\n\nCSN-2.A part b, CSN-2.A.5\n\nHow long will this sequential program take to run?\n\n\n\n18\n\n\nCorrect!\n\n\n\n\n8\n\n\nA sequential solution takes as long as the sum of the run times of all of its steps.\n\n\n\n\n4\n\n\nA sequential solution takes as long as the sum of the run times of all of its steps.\n\n\n\n\n6\n\n\nA sequential solution takes as long as the sum of the run times of all of its steps.\n\n\n\n\n\n\n\n\n\n5.1.8\n\n\nCSN-2.A part b, CSN-2.A.6\n\nHow long will this parallel program take to run?\n\n\n\n18\n\n\nThe two when I receive tasks happen in parallel, not one after the other.\n\n\n\n\n8\n\n\nThe longest parallel time does matter, but it’s not the only thing that contributes to the total time.\n\n\n\n\n6\n\n\nBroadcast and wait waits until all the tasks that it started have finished.\n\n\n\n\n14\n\n\nCorrect!\n\n\n\n\n\n\n\n\n\n5.1.8\n\nWhat is the speedup for this parallel solution when compared to the sequential solution?\n\n\nSequential solution: \n\n\nParallel solution:\n\n\n\n\n\n\\(frac{18}{14}\\)\n\n\nCorrect!\n\n\n\n\n&lt;span \\(frac{14}{18}\\)\n\n\nSpeedup is calculated by dividing the sequential time by the parallel time.\n\n\n\n\n\\(frac{18}{6}\\)\n\n\nBroadcast and wait waits until all the tasks that it started have finished.\n\n\n\n\n\\(frac{18}{8}\\)\n\n\nThe longest parallel time does matter, but it’s not the only thing that contributes to the total parallel time.\n\n\n\n\n\n\n\n\n\nLab 3: Turning Data into Information\n\n\n5.3.2\n\nScientists studying birds often attach tracking tags to migrating birds. For each bird, the following data is collected regularly at frequent intervals:\n\n\nDate and time\n\n\nLatitude and Longitude\n\n\nAltitude\n\n\nTemperature\n\n\nWhich of the following questions about a particular bird could not be answered using only the data gathered from the tracking tags.\n\n\n\nApproximately how much time does the bird spend in the air and on the ground?\n\n\nThis could be determined from the “Altitude” data.\n\n\n\n\nDoes the bird travel in groups with other tracked birds?\n\n\nThis could be determined from the “Latitude and Longitude” data.\n\n\n\n\nIs the migration path of the bird affected by temperature patterns?\n\n\nThis could be determined from the “Temperature” data.\n\n\n\n\nWhat are the effects of industrial pollution on the migration path of the bird?\n\n\nCorrect, there is no data collected on pollution in the bird’s environment.\n\n\n\n\n\n\n\n\n\n5.3.2\n\nUsing computers, researchers often search large data sets to find interesting patterns in the data. Which is of the following is not an example where searching for patterns is needed to gather desired information?\n\n\n\nAn online shopping company analyzing customers purchase history to recommend new products.\n\n\nThis is an example of searching for patterns to gather desired information.\n\n\n\n\nA high school analyzing student attendance records to determine which students should receive a disciplinary warning.\n\n\nCorrect, there is no need here for pattern analysis, just sorting the data to get a list of students with poor attendance records.\n\n\n\n\nA credit scoring company analyzing purchase history of clients to identify cases of identity theft.\n\n\nThis is an example of searching for patterns to gather desired information.\n\n\n\n\nA college analyzing high school students’ GPA and SAT scores to assess their potential college success.\n\n\nThis is an example of searching for patterns to gather desired information.\n\n\n\n\n\n\n\n\n\n5.3.2\n\nA car hailing company uses an app to track the travel trends of its customers. The data collected can be filtered and sorted by geographic location, time and date, miles traveled, and fare charged for the trip. Which of the following is least likely to be answerable using only the trends feature?\n\n\n\nWhat time of the day is the busiest for the company at a given city.\n\n\nFiltering by geographic location and sorting through time information would yield this information.\n\n\n\n\nFrom which geographical location do the longest rides originate.\n\n\nSorting through miles traveled and noting geographic location would yield this information.\n\n\n\n\nHow is competition with the local cab companies affecting business in a given district.\n\n\nCorrect, there is no information on the competition available in the data collected.\n\n\n\n\nHow much money was earned by the company in a given month.\n\n\nFiltering by date and summing up fares charged would yield this information.\n\n\n\n\n\n\n\n\n\n5.3.2\n\nAn online music download company stores information about song purchases made by its customers. Every day, the following information is made publicly available on a company website database.\n\n\nThe day and date of each song purchased.\n\n\nThe title of the song.\n\n\nThe cities where customers purchased each song.\n\n\nThe number of times each song was purchased in a given city.\n\n\nAn example portion of the database is shown below. The database is sorted by date and song title.\n\n\n\n\nDay and Date\n\n\nSong Title\n\n\nCity\n\n\nNumber of Times Purchased\n\n\n\n\nMon 07/10/17\n\n\nDespacito\n\n\nBoston, MA\n\n\n117\n\n\n\n\nMon 07/10/17\n\n\nMalibu\n\n\nChicago, IL\n\n\n53\n\n\n\n\nMon 07/10/17\n\n\nMalibu\n\n\nNew York, NY\n\n\n197\n\n\n\n\nMon 07/10/17\n\n\nBad Liar\n\n\nAnchorage, AK\n\n\n11\n\n\n\n\nTue 07/11/17\n\n\nDespacito\n\n\nSan Diego, CA\n\n\n241\n\n\n\n\nWhich of the following cannot be determined using only the information in the database?\n\n\n\nThe song that is purchased the most in a given week.\n\n\nThis information can be found by summing all the purchases of every song in a given week.\n\n\n\n\nThe city with the fewest purchases on a particular day.\n\n\nThis information can be found by summing all the purchases of every city on a given day.\n\n\n\n\nThe total number of cities in which a certain song was purchased in a given month.\n\n\nThis information can be found by listing the cities for all the purchases of a given song in a given month.\n\n\n\n\nThe total number of songs purchased by a particular customer during the course of a given year.\n\n\nCorrect, there is no data publicly displayed on individual customers.\n\n\n\n\n\n\n\n\n\n5.3.6\n\nA new mobile phone company—unbeknownst to its customers—periodically records random snippets of their conversations and considers the recordings as data. In addition, it collects the following metadata on the conversations:\n\n\nThe start and end time of the conversation\n\n\nThe phone numbers of the users in the conversation\n\n\nThe GPS locations of the users in the conversation\n\n\nFor which of the following goals would it be more useful to analyze the data instead of the metadata?\n\n\n\nTo determine if any of its users was present at the time and place of a crime.\n\n\nFor this purpose, GPS and time information (in the metadata) would be more useful.\n\n\n\n\nTo determine the time of day the app is used most frequently in a certain geographic location.\n\n\nFor this purpose, GPS and time information (in the metadata) would be more useful.\n\n\n\n\nTo determine the language most commonly used in user conversations.\n\n\nCorrect. For this purpose, the conversation data itself would be analyzed.\n\n\n\n\nTo determine the most active users of the app for a given year.\n\n\nFor this purpose, user phone numbers and time information (in the metadata) would be more useful.\n\n\n\n\n\n\n\n\n\n5.3.6\n\nWhich of the following is not an example of metadata?\n\n\n\nData about a digital image describing the size of the image, image resolution, color depth, and when the image was created.\n\n\nThis is an example of data about data.\n\n\n\n\nData about a text document containing information about the length of the document, its author, the date the document was written, and a short summary of the content.\n\n\nThis is an example of data about data.\n\n\n\n\nData about a pack of wolves describing their habitat, hunting habits, diet, and sleep cycles.\n\n\nCorrect. Data about wolves is not data about data.\n\n\n\n\nData about a web page containing a description of page content and a list of key words linked to the content.\n\n\nThis is an example of data about data."
  },
  {
    "objectID": "unit-5/unit-5-vocab.html",
    "href": "unit-5/unit-5-vocab.html",
    "title": "Unit 5 Vocabulary",
    "section": "",
    "text": "Unit 5 Lab 1: Search Algorithms and Efficiency, Page 2\n\n\nLab 1: Search Algorithms and Efficiency\n\n\n** 5.1.2: Problem** and Instance of a Problem  \n\nAAP-4.A.1\n\n\n\nA problem is a general description of a task that may (or may not) be solved algorithmically.\n\n\nAn instance of a problem is one case of a problem, with specific inputs.\n\n\n\n\n** 5.1.2: Linear Search** or Sequential Search  \n\n\nAn algorithm takes linear time if multiplying the input size by ten multiplies the time required by ten. \n\n\nAAP-2.O.5\n\n\nA linear search (or sequential search) algorithm checks each element of a list in order, a process which takes linear time.\n\n\n\n\n** 5.1.3: Binary Search**  \n\nAAP-2.P.1, AAP-2.P.2\n\nA binary search algorithm starts in the middle of a sorted list and repeatedly eliminates half the list until either the desired value is found or all elements have been eliminated.\n\nAAP-2.O.1\n\n\nYou learned about traversing a list on Unit 2 Lab 2 Page 3: Checking Each Quiz Answer.\n\nLinear search does a complete traversal of the list. Binary search saves time by doing a partial traversal of the list.\n\n\n** 5.1.4**  \n\nAAP-4.A.3\n\nThe relationship between the input size and the number of steps required to solve a problem is the efficiency of the algorithm used to solve the problem.\n\n\n** 5.1.5**  \n\n\nAn algorithm takes linear time the number of steps is proportional to the input size; doubling the input size doubles the time required.\n\n\nAn algorithm takes sublinear time if the number of steps grows more slowly than the size.\n\n\nAn algorithm takes constant time if it takes the same number of steps regardless of input size.\n\n\nAn algorithm takes quadratic time if the number of steps is proportional to the square of the input size.\n\n\n\n\n** 5.1.5**  \n\n\nAn algorithm takes polynomial time if the number of steps is less than or equal to a power of the size of the input, such as constant (n0), sublinear, linear (n1), quadratic (n2), or cubic (n3).\n\n\nAn algorithm takes exponential time if the number of steps is proportional to an exponential function of the size of the input, such as 2n, 10n, etc., which is much slower than any polynomial.\n\n\n\n\n** 5.1.6**  \n\nAAP-4.A.2\n\n\n\nA decision problem is a problem with a true/false answer (for example, “is 5,825,496,221 a prime number?”).\n\n\nAn optimization problem is one with the goal of finding the best solution among many (for example, “what’s the best school schedule to place every student into as many of their requested classes as possible?”).\n\n\n\n\n** 5.1.6**  \n\nAAP-4.B.1, AAP-4.B.2, AAP-4.B.3\n\nA decidable problem a decision problem for which it’s possible to write an algorithm that will give a correct output for all inputs. An undecidable problem is the opposite. It’s not possible to write an algorithm that will give a correct output for all inputs—even though it might be possible for some of them.\n\n\n** 5.1.8: Sequential** and Parallel Computing  \n\nCSN-2.A.1, CSN-2.A.2\n\nThis section covers two computational models:\n\n\nIn sequential computing, operations are performed in order one at a time.\n\n\nIn parallel computing, the program is broken into smaller steps, some of which are performed at the same time. Modern computers have multiple processors (2, 4, or 8) in a single computer, so you can do small-scale parallel processing on the machine on your desk.\n\n\n\n\n** 5.1.8**  \n\nCSN-2.A.3\n\nDistributed computing is a form of parallel computing that uses multiple computers (perhaps even spread out around the world).\n\n\n** 5.1.8   A processor** is a piece of circuitry inside a computer that processes the instructions from computer programs.  Image credit: Wikipedia user Solipsist\n\n\n** 5.1.8**  \n\nCSN-2.A.7\n\nProgrammers refer to the speedup of parallel solution to describe how many times as fast the parallel solution is compared to the sequential solution: \\[\\text{speedup} = \\frac{\\text{sequential time}}{\\text{parallel time}}\\]\n\n\nLab 2: Simulations\n\n\n** 5.2.1**  \n\nAAP-3.F.1, AAP-3.F.2\n\nSimulations are computer representations of real things or situations that vary over time. A simulation is an abstraction designed for a particular purpose.\n\n\nLab 3: Turning Data into Information\n\n\n** 5.3.1: Data** vs. Information  \n\nDAT-2.A.1\n\n\n\nData are the values that computers receive from various sources, including human activity, sensors, etc.\n\n\nInformation is the humanly-useful patterns extracted from data.\n\n\n\nDAT-2.A.2\n\nData provide opportunities for identifying trends, making connections, and addressing problems. Information is the result of analyzing that data.\n\n\n** 5.3.1**  \nA correlation is a particular kind of information, namely a dependence between two variables. For example in the first picture here, as one variable goes up the other goes down. It’s also a correlation when as one variable goes up or down the other changes in the same manner.\n\n\n\n\n\n\n\n\n\n\n\n\nnegative correlation\n\n\npositive correlation\n\n\nno correlation\n\n\n\n\n\n** 5.3.1**  \n\nDAT-2.E.4\n\nInsight is a meaningful conclusion drawn from analyzing information.\n\n\n** 5.3.3: Records, Fields, and Columns**  \n\n\nA record is one row in a dataset (other than the first row, which contains the column headings). A single record might be the data for one student in your school, the data for one earthquake that happened, the data for one hospital in the U.S, or the data for one contact in your contact list. In other words, a record is a horizontal slice of the dataset.\n\n\nA field is one item of a record in a dataset. It might be one person’s homeroom teacher, the magnitude of an earthquake in Los Angeles last week, the owner of one hospital in Chicago, or the phone number of one person in your contact list.\n\n\nA column is a list containing the data from one field for all records in a dataset. A column might be the homeroom teacher for every student in your school, the magnitude of every earthquake in the dataset, the owner of every hospital in the U.S., or the phone number of every person in your contact list. In other words, a column is a vertical slice of the dataset.\n\n\n\n\n\n** 5.3.3**  \n\nDAT-2.C.4, DAT-2.E.2\n\nCleaning data is the process of making the data uniform without changing its meaning (such as replacing abbreviations, spellings, and capitalizations with the intended word or converting miles to kilometers). Programmers can use programs to filter and clean digital data, thereby gaining insight and knowledge.\n\n\n** 5.3.5**  \n\nDAT-2.E.3 classifying only\n\nClassifying data means distributing data into groups based on common characteristics.\n\n\n** 5.3.5   The mode** of a data set is the value that appears most often in it.\n\n\n** 5.3.6**  \n\nDAT-2.B.1\n\nMetadata are data about data. For example, the piece of data may be an image, while the metadata may include the date of creation or the file size of the image.\n\n\nLab 4: Unsolvable and Undecidable Problems\n\n\n** 5.4.1**  \nA proof by contradiction is a two-step proof that a statement is false, which is done by:\n\n\nassuming the statement is true\n\n\nbased on that assumption, proving something known to be false (that is, showing the assumption creates a contradiction)\n\n\n\n\n** 5.4.1   An undecidable** statement might be true or might be false; we don’t know which. A self-contradictory statement can be neither true nor false.\n\n\n** 5.4.2   An infinite loop** is a sequence of computer instructions that repeats forever. An unsolvable problem is one for which no algorithm can ever be written to find the solution. An undecidable problem is one for which no algorithm can ever be written that will always give a correct true/false decision for every input value. Undecidable problems are a subcategory of unsolvable problems that include only problems that should have a yes/no answer (such as: does my code have a bug?)."
  },
  {
    "objectID": "unit-6/index.html",
    "href": "unit-6/index.html",
    "title": "Unit 6: How Computers Work",
    "section": "",
    "text": "In this unit, we’ll break down on the functionality of computers: what we know about them as we use them, the components of computers that let us use them, and what makes the components of computers work."
  },
  {
    "objectID": "unit-6/lab-1/01-abstraction.html",
    "href": "unit-6/lab-1/01-abstraction.html",
    "title": "Page 1: Abstraction Inside the Computer",
    "section": "",
    "text": "Why this? AP talks about the abstraction hierarchy. This page shows some level of detail, but also highlights the two crucial abstraction barriers: between hardware and software, and between the analog domain and the digital domain.\nWhy here? This page is sort of preview of coming attractions. It’s a short page, with nothing really to do except read it and move on to the full story.\nPG, on unit: This whole unit is a lot of reading and very little action. Of course, that’s true of most school courses so, for better or for worse, kids are used to it. We’ve thought about it and (currently) have no solution. I very much like all the content. I equally much want the entire unit to be optional extra. To me, it feels like the second course in computer science, not the attract-students-in course. For those who want to see what’s under the hood of the /computer/—the computer engineering interest—this should be available, but if it were not for CB, I’d leave it all optional.\nBH, on lab: There’s hardly anything to do in this lab, and if we could improve on that it’d be great, but I don’t see how.\nMF: lightly clean up to make the text more concise\nIn Unit 4 A Hierarchy of Open Protocols, you saw that the Internet software is arranged in several levels of abstraction, with application programs (like your email program) at the highest level and network hardware protocols such as WiFi and Ethernet at the lowest level. Recall that higher levels are closer to what users want to be thinking about; lower levels are closer to the way machines work.\nLike the Internet, the way a computer works on the inside also has levels of abstraction.\nThere are a lot of levels of abstraction in how computers work. Here they are organized into three overarching domains:"
  },
  {
    "objectID": "unit-6/lab-1/01-abstraction.html#software-domain",
    "href": "unit-6/lab-1/01-abstraction.html#software-domain",
    "title": "Page 1: Abstraction Inside the Computer",
    "section": "Software Domain",
    "text": "Software Domain\nThe programs you write and use are software, but underneath these programs is more software that helps them work. In this lab, we’ll look at four layers of abstraction in the software domain:\n\n\napplications that you write and use\n\n\nprogramming languages that are used to write them\n\n\nlibraries of useful functions that hide messy details\n\n\noperating systems that interface with the hardware\n\n\nSoftware is an abstraction—a way of thinking about the computer without thinking about how it works.\n\nSimilarly, an automobile driver is operating at a high level of abstraction when using the brake pedal. As long as the engineers and mechanics designed and built the car right, drivers don’t need to know the details about how the brake system works—they just use it at a high level.\n\n\n\n\nImage by Wikipedia user Julianprescott2604juuly"
  },
  {
    "objectID": "unit-6/lab-1/01-abstraction.html#digital-domain",
    "href": "unit-6/lab-1/01-abstraction.html#digital-domain",
    "title": "Page 1: Abstraction Inside the Computer",
    "section": "Digital Domain",
    "text": "Digital Domain\nIn the software domain, each level of abstraction is a different piece of software, but the levels of abstraction in the digital domain are different ways of thinking about the same physical object. The circuitry inside a computer is complicated, and to make building it possible, engineers think about it at several different levels of abstraction:\n\n\nThe architecture is the instructions that software can send that the hardware will understand.\n\n\nThe computer has components (such as memory, processors, video cards, etc.) that implement the architecture.\n\n\nThose components are built out of integrated circuits (chips), which are the black rectangles that you can see on this circuit board.\n\n\nThose integrated circuits are designed around logic gates, the fundamental building blocks that implement Boolean functions.\n\n\nYou learned about Boolean functions in &lt;a href=“/unit-2/lab-1/a&gt;.   \n\n\n\nDo we need this commented out content? –MF, 6/12/20"
  },
  {
    "objectID": "unit-6/lab-1/01-abstraction.html#analog-domain",
    "href": "unit-6/lab-1/01-abstraction.html#analog-domain",
    "title": "Page 1: Abstraction Inside the Computer",
    "section": "Analog Domain",
    "text": "Analog Domain\nLogic gates, which are the lowest abstraction level of the digital domain, operate on ones and zeros. In physical reality, those logic gates are built out of transistors, a type of circuit component. Transistors aren’t like light switches that are either on or off. There can be in-between values (like “only 23% on”). So, electrical engineers have to think about the laws of electronics to design digital circuits so that in-between values don’t happen.\n\n: analog vs. digital\nDigital and analog are opposites. Digital means information that is represented as ones and zeros. Analog means information that is represented by signals that vary continuously (that is, including in-between values)."
  },
  {
    "objectID": "unit-6/lab-1/02-software-applications.html",
    "href": "unit-6/lab-1/02-software-applications.html",
    "title": "Page 2: The Software Domain: Applications",
    "section": "",
    "text": "Significant changes in new framework: Most of 6.1.2 (the descriptions of categories of software and how creative you can be with them) can go. (from Brian)\nMF: lightly clean up to make the text more concise\n\n\nOn this page, you’ll explore some of the many purposes for which people use software applications.\n\nApplication programs (or “apps” for short) are the programs that users interact with. Here are some uses of such software that you may be familiar with:\n\n\nCommunication. You use a browser to view web pages on the World Wide Web. You keep in touch with friends using social networking, email, text messages, and chat applications that can be text-based, audio-based, or video-based. You can also tell the world what you think in a blog (short for weblog) or a vlog (short for video blog).\n\n\nAudio. Your computer or phone almost certainly has an application to play music—either from your own collection or from an Internet radio server. You can also use software to create music by using synthesizers that make new sounds, sampling (reusing) existing sounds, and recording sounds around you. For example, instead of being limited to someone else’s music selections on the radio, apps like Pandora create an individualized radio station just for you.\n\n\nPictures. You likely have a photo viewing application on your own computer or phone. You can also use software to manipulate pictures to create artwork, sharpen the focus, or create “fake news” by combining unrelated images. For example, when you get x-rays, the results are emailed to the doctor right away instead of having to wait for the images to be developed.\n\n\nIt would be great to have a funny picture here—maybe Obama shaking hands with an alien or something obviously fake like this (but not as creepy)… –MF, 11/13/17 Brian wants it to not be political (maybe a rock star or something). I agree. –MF, 12/8/17 \n\n\nVideo. You can use streaming video services to watch movies online, or you can create your own. You can shoot movies on your phone, edit them by combining video from different sources,  and upload them to the Internet or burn them onto a DVD to share them with your friends. Professional movie-making uses computer animation to create special effects like space aliens, armies of soldiers, and super heroes jumping over buildings.\n\n\nYour programs. The projects you’ve been creating in Snap! are apps too!\n\n\nThere are other kinds of software that aren’t for personal use but are used in industry and universities. Software applications are written to guide rockets, to analyze the results of experiments, and to design buildings and cars. Software is even written to write software.\n\n\nThe amount of information available on the Internet is huge. Computers can learn to combine information from different sources, to produce surprising results. This is called data mining. For example, businesses can combine location information from your phone with similar information from other phones to find traffic jams or popular restaurants. Or they can combine multiple sources of online information about you to send you targeted advertising for products you’re likely to want or to keep track of your political views for voter registration drives.\n\n\nComputers can be taught to generalize from the information they find to patterns they can use to predict the future. This is called machine learning. For example, scientists teach computers to explore telescope observations to learn new things about how the physical universe works.\n\n\nYou can use spreadsheets to manage your budget or to make charts and tables. Spreadsheets are a computer implementation of what was previously a pencil-and-paper process; they are the application that made businesses take personal computers seriously.\n\n\nAs new kinds of hardware are invented, new kinds of software become important. For example, the invention of the smartphone, which is always with its owner, has enabled applications such as song identification: you hear a song you like that you haven’t heard before so you hold your phone up, and it samples the sound and finds it in a song database. Because our phones are almost always on, they can collect information about where you are. This can be desirable when you look for friends who have agreed to share location information with you, but it also may allow your employer to find out that you took part in a political demonstration for or against civil rights.\n\n\n\nList three programs for each of the following categories:\n\n\nCommunication\n\n\nAudio\n\n\nPictures\n\n\nVideo\n\n\nYour Snap! projects\n\n\n\n\n\n\n\n\nWhich popular composers use sampling for their songs?\n\n\nWhat is autotune and which popular artists use it?\n\n\nWhat kinds of photo processing can you do with software? What kinds have you done?"
  },
  {
    "objectID": "unit-6/lab-1/03-software-languages.html",
    "href": "unit-6/lab-1/03-software-languages.html",
    "title": "Page 3: The Software Domain: Programming Languages",
    "section": "",
    "text": "KEEP SUCH THAT needs to be fixed. –MF, 6/22/20\nJavaScript, Python, Snap!, C++, Java, Scheme, Prolog… Why are there so many programming languages? Why don’t we just pick the best one, or design a new best one, and stick with that?\nSome languages have very narrow purposes; these are called special-purpose languages. For example, Microsoft Word has a programming language built into it called “Word macros” that’s just for generating data and formatting in a document. Likewise, HTML (Hypertext Markup Language) is just for structuring web pages.\nGeneral-purpose languages don’t have a narrow purpose in mind. In a sense, these languages are all the same: if an algorithm can be expressed in one language, it can be expressed in all of them. Several basic features are included in nearly all languages including arithmetic operators (+, -, ×, ÷) and Boolean operators (and, or, not). The differences among languages are mostly about levels of abstraction."
  },
  {
    "objectID": "unit-6/lab-1/03-software-languages.html#high-level-and-low-level-languages",
    "href": "unit-6/lab-1/03-software-languages.html#high-level-and-low-level-languages",
    "title": "Page 3: The Software Domain: Programming Languages",
    "section": "High-Level and Low-Level Languages",
    "text": "High-Level and Low-Level Languages\n\nA high-level language (like Snap! or Scheme) includes many built-in abstractions that make it easier to focus on the problem you want to solve rather than on how computer hardware works. A low-level language (like C) has fewer abstractions, requiring you to know a lot about your computer’s architecture to write a program.\n\nWhy do programmers use high-level languages?\nHigh-level languages can produce safer programs—ones that are less likely to have bugs—because the abstractions manage messy details that can trip up programmers.\n\nHigh-level languages reduce bugs in memory use. Older, low-level languages required the programmer to manage the use of the computer’s memory with instructions saying “get me a block of memory big enough to hold 100 numbers” and other instructions saying “okay, I’m finished using this block of memory; it can be allocated for some other purpose.”\nThis is a nuisance to have to think about, and human programmers are bad at it. In low level languages, a very common bug is for one part of a program to say “I’m done with this block of memory” while another part of the program is still using it. High-level languages take care of this for us by using a technique called garbage collection that puts the computer in charge of knowing when a block of memory is no longer in use.\n\nHigh-level languages can also make programming much more convenient because they offer more abstractions. One example is higher-order functions (like map, keep, combine, and for each), which allow the programmer to write shorter, cleaner code.\n\n\n\n\n\n\nThis code is similar to a higher-order procedure that you have learned.  Identify the procedure that this code imitates: \n\n\n\nYou learned about for each in Unit 2 Lab 2: Checking Each Quiz Answer.\n\n\nYou learned about keep in Unit 2 Lab 3: Keeping Items from a List.\n\n\nYou learned about map in Unit 3 Lab 2: Transforming Every List Item.\n\n\nYou learned about combine in Unit 2 Lab 4: Other Mathematical Reporters.\n\n\n\n\n\n\n\n\n\nDoes the original script report a list of words or does it report each word separately? Which would this do?\n\n\n\n\n\n\n\nKeep takes a predicate (a question) as input and reports a list of the items that make that predicate true.\n\n\n\n\n\n\n\nCorrect!\n\n\n\n\n\n\n\nCombine takes a predicate with two blanks (like  or ) as input and reports the result of combining all the list items using that function (for example, adding them all together or joining them all into one text string).\n\n\n\n\n\n\n\n\n\n\n\nIn C, you can do this the long way:  but C doesn’t let you take an expression (like  or ) and stick it into a higher-order function like map: \n\n\nWhy do programmers use low-level languages?\nThe best reason to use low-level languages is to write operating systems (like Windows, Mac OS X, Android, or iOS). You’ll learn more about Operating systems on the The Software Domain: Operating Systems page.\n\nWhy else would a programmer use a low-level language?\n\n\nI still think this is too long and needs wordsmithing the next time around. –MF, 11/16/17\n\nApplication programmers don’t often decide “I’m going to write this program in a low level language.” They may simply not realize that higher levels of abstraction are possible. For example, a computer’s hardware limits the size of numbers that its arithmetic unit can add in a single step. Four billion—about ten digits—is a common size limit for integers. Programmers who use Java, JavaScript, Python, C or C++ may think that this limit is unavoidable. But programmers who use really high level languages, such as Scheme or Common Lisp, know that they can do arithmetic on numbers with millions or billions of digits, limited only by the size of the computer’s memory. As you will see later, Snap! has a library that lets it do this, too.\nPeople often say that different programming languages are good for different kinds of programs, but except for 3-D video processing (next paragraph), it’s hard to imagine an application that would be harmed by things like garbage collection or higher-order functions. There are just a few cases in which people deliberately design languages with features that might not be wanted for some applications. Here’s one such example: In Snap!, a text string of only digits is considered to be a number; you can do arithmetic on it. In a language for learners, requiring explicit conversion between data types just makes it harder to get started programming. But most languages that aren’t meant for beginners keep the two data types separate.\nProgrammers may think that abstraction is too slow. This used to be true, and programmers of 3-D video games still need all the speed they can get because their programs strain the speed of modern computers. So they often write part of their programs, the part that actually puts pictures on the screen, in machine language, just for speed. But most programmers write applications that don’t strain computers at all. When you send an email or text message, the limiting factor is how fast you can type, not how fast your computer can run programs.\n\nFrom Michael: Somewhere the was a comment about the speed of abstraction. IMO, we shouldn’t have this in the curriculum – but probably in the teachers guide. “Abstraction slows things down” is an argument students won’t hear if they’re just learning CS from BJC. By trying to address the argument before it happens, we just introduced to students who I think would have no reason to believe otherwise.\n\n\nBrian thinks that Michael would not have this concern if the link was still, “There are also less-good reasons.” However, Mary and Paul find that text problematic. Brian and Mary agreed to record and ignore this issue for now. –MF, 11/21/17\n\n\n\nLegacy code. Programmers in industry hardly ever get to write a program from the beginning. Much more often, they’re maintaining a program that somebody wrote years ago, and that person might not even work for that company anymore. In the long run, it might be better to rewrite the program in a more modern language, but in the short run, there’s no time to do that so they end up modifying the existing code in the existing programming language.\n\n\n\n\nWhat is machine language?\nBoth high- and low-level languages are used by people to write computer programs. Computer hardware understands a sort of ultra-low-level language, called machine language. Special programs called compilers and interpreters are used to translate human programming languages into machine language to be run by the computer.\n\nRead more about compilers and interpreters.\n\nA compiler is a program that takes a high- or low-level language program (the source code) as input and produces a machine language program (the object code) as its output. Once produced, the machine language program can be run repeatedly without needing to be compiled again.\nAn interpreter is a program that takes a high- or low-level program as input and carries out machine language instructions as needed to run the program. It does not produce a stand-alone machine language program as output and will have to repeat the process again next time.\nDoes that mean compilers are better?\n\nIt would mean that, except that the process of writing a program includes debugging. During the debugging, an interpreter can help by providing information about the progress of the program, like the visual stepping feature in Snap!, and allowing small changes in the source program without having to run a compiler repeatedly. For example, in Snap! you can drag a block into a script while it’s running, and a compiler couldn’t allow that.\nFor professional programmers, the best arrangement is to have both an interpreter and a compiler for the same language. The programmer writes and debugs the program using an interpreter, and once they’re sure it works, they compile it. Then, the compiler can run slowly, putting a lot of effort into optimizing the machine language code, so they get the fastest possible compiled program.\n\n\n\n\n\n\nThese questions are similar to those you will see on the AP CSP exam. \n\n\nWhich of the following statements are correct about a low-level programming language compared with a high-level programming language?\n\n\nLow-level language programs are generally harder for people to understand than programs written in a high-level language.\n\n\nA low-level language provides programmers with more abstractions than a high-level language.\n\n\nLow-level language programs are generally harder to debug than programs written in a high-level language.\n\n\n\n\n\nI only.\n\n\nI is true but is it the only true statement?\n\n\n\n\nI and III only.\n\n\nCorrect. Both statements are correct and opposite of II is true as high-level languages are more expressive and able in creating abstractions.\n\n\n\n\nII and III only.\n\n\nOpposite of II is true as high-level languages are more expressive and able in creating abstractions.\n\n\n\n\nI, II, and III.\n\n\nOpposite of II is true as high-level languages are more expressive and able in creating abstractions.\n\n\n\n\n\n\n\n\n\n\n\nA program is written in a high-level programming language. Identify the correct statement about the program?\n\n\n\nThe program can also be written in machine language using binary code, but then it will be less easily understood by people.\n\n\nCorrect. Binary code is very hard to read for humans.\n\n\n\n\nThe program can also be written in machine language using binary code, which will decrease the possibility of mistakes.\n\n\nMistakes will likely increase as it is harder for humans to make sense of binary code.\n\n\n\n\nThe program cannot be written in binary code as only data can be represented by using binary notation.\n\n\nEntire program can be converted to binary code. Such a code is actually the only code a machine can understand.\n\n\n\n\nSimple parts of the program can be written in binary code, but control elements such as conditionals, loops must be expressed in a high-level programming language.\n\n\nEntire program can be converted to binary code. Such a code is actually the only code a machine can understand."
  },
  {
    "objectID": "unit-6/lab-1/03-software-languages.html#code-readability",
    "href": "unit-6/lab-1/03-software-languages.html#code-readability",
    "title": "Page 3: The Software Domain: Programming Languages",
    "section": "Code Readability",
    "text": "Code Readability\nOne of the features that Snap! gives you is that you can put title text in the middle of a block.\n\nYou built polygon in Unit 1: Graphics and Art.\n\n Compared to some other languages where the function has one name at the beginning and then all the inputs, this increases clarity and readability of your function.\n\npolygon(30, 15)\n\nAlso, in a text-based language, when you see something like 3 × 5 + 4, you need to have memorized that multiplication comes before addition (so the answer is 19). If you want it the other way, you have to use parentheses: 3 × (5 + 4) to get 27. In a blocks-based language, the blocks show you what was intended: . You’ve learned order of operations for +, –, ×, and ÷ in math class, but you probably haven’t learned order of operations for an expression like this:\nx && y &lt;&lt; z\n. How you know which comes first\n&&\nor\n&lt;&lt;\n?\n\n\nHow do you know?\n\nSee for example, C Operator Precedence."
  },
  {
    "objectID": "unit-6/lab-1/03-software-languages.html#parallelism",
    "href": "unit-6/lab-1/03-software-languages.html#parallelism",
    "title": "Page 3: The Software Domain: Programming Languages",
    "section": "Parallelism",
    "text": "Parallelism\nOne reason to create new programming languages is to make it easier to write parallel programs—programs that can use more than one processor at the same time. Today in 2017, computers and smartphones have multicore processor chips that may include 2, 4, or 8 processors all running code at the same time. (The number of processors will increase even further over time.) Big companies such as Google use parallelism even more; they have clusters of thousands of computers, all working on the same program.\nFunctional programming languages (languages in which programmers never change the value of a variable) are particularly well suited to parallelism because there’s no danger of one processor changing the value of a variable that another processor is using. We’ve introduced you to functional programming techniques wherever possible throughout this course, including writing reporters and using higher-order functions (map, keep, and combine).\n\nSnap! isn’t a functional programming language, but it would be if the Snap! developers removed just a few procedures, including set (instead, you’d use input variables of recursive functions) and these four list commands: add, delete, insert, and replace (instead, you’d use in front of, item 1 of, and all but first of to report a new list with different values instead of changing the old list)."
  },
  {
    "objectID": "unit-6/lab-1/04-software-libraries.html",
    "href": "unit-6/lab-1/04-software-libraries.html",
    "title": "Page 4: The Software Domain: Libraries",
    "section": "",
    "text": "On this page, you’ll learn that a library is a package of procedures written by other programmers that helps solve a problem.\nSuppose a programmer wants a picture to move around on a screen that also has other pictures on it. In Snap!, that’s built in: import a picture as a sprite costume, and then move it by moving the sprite. The sprite abstraction lets a programmer move a picture over other pictures without thinking about what happens where the images overlap or how to get back parts of the image after they are covered up. Not all languages have the sprite abstraction.\nOther common tasks (such as knowing where the mouse pointer is, doing arithmetic on huge numbers, or managing sound) also have complex parts. If programmers had to deal with all of these details in every program, no software would ever get developed. And because many applications need the same abilities, programmers write libraries for other programmers to use."
  },
  {
    "objectID": "unit-6/lab-1/04-software-libraries.html#languages-vs.-libraries",
    "href": "unit-6/lab-1/04-software-libraries.html#languages-vs.-libraries",
    "title": "Page 4: The Software Domain: Libraries",
    "section": "Languages vs. Libraries",
    "text": "Languages vs. Libraries\nOften when people compare what different programming languages can do, they are really comparing libraries. For example, people may think they like JavaScript because they can use it to program web pages, but that’s not a property of JavaScript. It’s actually a web page library built into the browser that lets you program web pages."
  },
  {
    "objectID": "unit-6/lab-1/04-software-libraries.html#libraries-in-snap",
    "href": "unit-6/lab-1/04-software-libraries.html#libraries-in-snap",
    "title": "Page 4: The Software Domain: Libraries",
    "section": "Libraries in Snap!",
    "text": "Libraries in Snap!\n\n\nDo we need all this commented out text? –MF, 6/12/20\n\nYou’ve used libraries in Snap!. For example, you used the “Bar Charts” library in Unit 5 Lab 3 Page 4: Analyzing Data.\n\n\n\nRead through the libraries listed in Snap! (as shown above), and choose one block that interests you and that you have never used. Build a small project that uses that block, and use your project to teach that block to some of your classmates."
  },
  {
    "objectID": "unit-6/lab-1/05-software-OS.html",
    "href": "unit-6/lab-1/05-software-OS.html",
    "title": "Page 5: The Software Domain: Operating Systems",
    "section": "",
    "text": "On this page, you’ll learn about the software that directly manages the computer’s hardware, the operating system.\nYour computer came with an operating system (OS) installed. Operating systems are the underlying programs that your apps interact with to communicate with the computer. For computers with keyboards, it’s probably Linux, macOS, or Windows. For phones and tablets, it’s probably Android or iOS.\nRoughly speaking, the operating system handles the basic tasks that your applications depend on, including:"
  },
  {
    "objectID": "unit-6/lab-1/05-software-OS.html#the-kernel",
    "href": "unit-6/lab-1/05-software-OS.html#the-kernel",
    "title": "Page 5: The Software Domain: Operating Systems",
    "section": "The Kernel",
    "text": "The Kernel\nThe kernel deals directly with hardware (keyboard, mouse, microphone, camera, hard drives, memory, printer, speakers, screen, etc.). So the kernel is generally written in a low level language so it can control that hardware. It handles several important tasks:\n\n\nScheduling. The kernel has access to the time clock that’s built into the hardware and lets each program run for a small amount of time (typically about 1/10 second) and then switches to the next program in line.\n\n\nSecurity. Those many application programs may have bugs or malicious code. The kernel, which has access to the memory where programs and data are stored, ensures that each program is assigned a separate location in memory and doesn’t interfere with other programs. The kernel also controls which data files a program can use based on file protection settings that users or applications specify for each file.\n\n\nInput and output. Many devices can be attached to your computer. The kernel knows how the computer’s hardware reads or writes to each device. Only the kernel is allowed direct access to these devices, and it carries out authorized transfers of information for the applications.\n\n\nThese days, OS kernels are remarkably similar. Of the five systems listed earlier (Linux, macOS, Windows, Android, and iOS), four of them (all but Windows) are based on variants of a single kernel, called Unix.\nRead more about Unix.\n\n(“Unix” is a trademark, currently owned by The Open Group, and not all of the variants discussed here are authorized to use that name, but they all provide essentially the same program interface.) Unix was created around 1970 by Ken Thompson and Dennis Ritchie at AT&T Bell Laboratories.\nPrior to Unix, almost everyone thought that an operating system had to be developed for a particular computer architecture, and had to be written in the machine language of that computer, the very low-level instructions that the hardware understands directly. The first version of Unix was also written in the machine language of a particular computer, the Digital Equipment Corporation PDP-7. But the Unix developers knew that the PDP-7 wasn’t the only computer in the world, and better ones would come along, so they wanted to make Unix portable, meaning that it could be brought to a new computer architecture without a complete rewrite. So in 1972 Dennis Ritchie invented the C programming language for that purpose. C is similar to other languages available at the time, but with one added feature: a C programmer can read or write any individual byte of the program’s memory by knowing its address, a number that distinguishes it from other bytes. (You can see that this feature is quite the opposite from high level abstraction. It is useful only to a programmer who’s thinking in detail about what’s where in the computer’s memory.) Unix was then rewritten in C.\nBecause of its portability, Unix spread quickly to many computer architectures. Researchers at Berkeley developed a version, based on the AT&T version, with virtual memory, the ability to run a program that’s only partly in the computer’s main memory, with the rest kept on a disk. This Berkeley version is an ancestor of Apple’s operating systems, macOS (since macOS 10.0) and iOS. (An Apple computer doesn’t behave anything like a Unix computer, but the differences are almost all in application-level programs, not in the kernel.) Android, Google’s operating system for cell phones and tablets, is based on Linux, a complete rewrite of Unix originally written by Linus Torvalds, who was, at the time, a computer science student in Finland.\nThe application-level programs that were part of the original Unix package have, in most systems, been replaced with rewritten programs from the Free Software Foundation’s GNU (an acronym for Gnu’s Not Unix) package."
  },
  {
    "objectID": "unit-6/lab-1/06-digital-architecture.html",
    "href": "unit-6/lab-1/06-digital-architecture.html",
    "title": "Page 6: The Digital Domain: Architecture",
    "section": "",
    "text": "MF: lightly clean up to make the text more concise\nThe software in a computer would be useless without the computer’s hardware: the actual circuitry inside the box. Just as there are layers of abstraction for software, hardware designers also think in layers of abstraction.\nEveryone talks about computers representing all data using only two values, 0 and 1. But that’s not really how electronic circuits work. Computer designers can work as if circuits were either off (0) or on (1) because of the digital abstraction, the most important abstraction in hardware. Above that level of abstraction, there are four more detailed levels, called the digital domain. Below the digital abstraction, designers work in the analog domain, in which a wire in a circuit can have any voltage value, not just two values.\nOn the next four pages, we’ll explore four levels of the digital domain."
  },
  {
    "objectID": "unit-6/lab-1/06-digital-architecture.html#the-stored-program-computer",
    "href": "unit-6/lab-1/06-digital-architecture.html#the-stored-program-computer",
    "title": "Page 6: The Digital Domain: Architecture",
    "section": "The Stored Program Computer",
    "text": "The Stored Program Computer\nAs you’ll see in Lab 2, there have been machines to carry out computations for thousands of years. But the modern, programmable computer had its roots in the work of Charles Babbage in the early 1800s.\nBabbage was mainly a mathematician, but he contributed to fields as varied as astronomy and economics. Babbage lived about 150 years ago from 1791-1871. Electricity as a source of energy was unknown. The steam engine came into widespread use around the time he was born. The most precise machinery of his time was clockwork—gears.\n\nDifference Engine\nBabbage’s first computer was the Difference Engine. He used gears to design a complex machine that would compute and print tables of numbers (like the tables of log or trig functions you may have in the back of a math textbook). But these gears needed to be so precise that each one had to be handmade. The project became so expensive that the government stopped funding it, and Babbage never finished a full-scale version.\n\n\n\n\n\n\n\n |  | The Difference Engine at the London Science Museum  | A closeup showing the gears more clearly | Image by Wikimedia user geni. Copyright 2008. License: GFDL, CC BY-SA.| Image by Carsten Ullrich. Copyright 2005. License: CC-BY-SA-2.5. |\n\n\n\nLearn more about the history of the Difference Engine.\n\nIn Babbage’s time, such numerical tables were computed by hand by human mathematicians, and they were typeset by hand for printing. Both the computation and the copying into type were error-prone, and accurate tables were needed for purposes ranging from engineering to navigation.\nBabbage built a first, small Difference Engine in 1822. This first effort proved that a Difference Engine was possible, but it didn’t have the precision (number of digits in each number) to be practical. In 1823, the British government funded Babbage to build a larger version. Unfortunately, metalsmiths in his day could not produce very precise gears in large quantities; each one had to be handmade. So he spent ten times his approved budget by the time the government canceled the project in 1842.\nIn 1991, the London Science Museum completed a Difference Engine following Babbage’s original design using gears made by modern processes but at the level of precision that was available to Babbage. This proved that, in principle, Babbage could have completed a working machine, given enough time and money.\n\n\n\nThe Analytical Engine\nThe Difference Engine could be used to compute many different functions by manually setting the starting position of various gears. But it had only one algorithm: the one built into the hardware design. In 1833, Babbage began working on the Analytical Engine, which was based on the general idea of the Difference Engine but could carry out instructions in a primitive programming language prepared on punched cards.\n\nPunched cards used to program the Analytical Engine Karoly Lorentey. Copyright 2004. License: CC-BY.\n\n\nThese days, we are surrounded by programmable computers, and having software seems obvious now. But it wasn’t obvious, and before Babbage, all algorithms were implemented directly in hardware.\nSo, 150 years ago, Babbage created plans for what is essentially a modern computer, although he didn’t have electronics available. His underlying idea for hardware was entirely mechanical, but it turned out not to be possible for him to build it with then-current technology. We didn’t get usable computers until there was an underlying technology small enough, inexpensive enough, and fast enough to support the software abstraction. You’ll learn about this technology, transistors, soon.\nLearn more about the Analytical Engine.\n\nThe Analytical Engine, like modern computers, had an arithmetic processor (called the “mill”) and a separate memory (the “store”) that would hold 1,000 numbers, each with up to 40 digits.  The mill did arithmetic in decimal (with digits 0-9 equally spaced around each gear); using just “ones and zeros” in computing came later.\nThe programming language used in the Analytical Engine included conditionals and looping, which is all you need to represent any algorithm. (It could loop because it could move forward or backward through the punched cards containing the program.)\nAlas, Babbage could build only a small part of the Analytical Engine, which would have required even more metalworking than the Difference Engine. His notes about the design weren’t complete, and so nobody has ever built a working model, although there are simulations available on the Web (see the Take It Further problem below). Sadly, in the early days of electronic computers, Babbage’s work was not widely known, and people ended up reinventing many of his ideas.\n\nLearn about Ada, Countess Lovelace’s invention of symbolic computing.\n\nAlthough his design was very versatile, Babbage was mainly interested in printing tables of numbers. It was his collaborator Augusta Ada King-Noel, Countess of Lovelace, who first recognized that the numbers in Babbage’s computer could be used not only as quantities but also as representing musical notes, text characters, and so on.\n\n\nImage by Alfred Edward Chalon, Science & Society Picture Library, Public Domain, via Wikimedia.\n\nMuch of what we know today about Babbage’s design comes from Ada Lovelace’s extensive notes on his design. Her notes included the first published program for the Analytical Engine, and so she is widely considered “the first programmer,” although it’s almost certain that Babbage himself wrote several example programs while designing the machine.\nWhether or not she was truly the first programmer, historians agree that she did something more important: she invented the idea of symbolic computation (including text, pictures, music, etc.) as opposed to numeric computation. This insight paved the way for all the ways that computers are used today, from movies on demand to voice-interactive programs such as Siri and Alexa."
  },
  {
    "objectID": "unit-6/lab-1/06-digital-architecture.html#whats-an-architecture",
    "href": "unit-6/lab-1/06-digital-architecture.html#whats-an-architecture",
    "title": "Page 6: The Digital Domain: Architecture",
    "section": "What’s an Architecture?",
    "text": "What’s an Architecture?\nThe Analytical Engine (described above) was the first programmable computer architecture. The processor in the computer you are using today understands only one language, its own machine language—not Java, not C, not Snap!, not Python, nor anything else. Programs written in those other languages must first be translated into machine language.\nThe most important part of the architecture is the machine language, the set of ultra-low-level instructions that the hardware understands. This language is like a contract between the hardware and the software: The hardware promises to understand a set of instructions, and the software compiles programs from human-friendly language into those instructions.\n\nMachine language is the lowest-level programming language; it is directly understood by the computer hardware.\nArchitecture is an abstraction, a specification of the machine language. It also tells how the processor connects to the memory. It doesn’t specify the circuitry; the same architecture can be built as circuitry in many different ways.\n\nOne important part of an architecture is the number of wires that connect the processor and memory. This is called the width of the architecture, measured in bits (number of wires). A wider computer can process more data in one instruction.\n\nWhat does machine language look like?\n\nConsider the Snap! instruction . In a lower-level language such as C or Java, the same idea would be written as:\nc = a+b;\nThat simple command might be translated into six machine language instructions (slightly simplified here):\nmovq_c, %rcx\nmovq_b, %rdx\nmovq_a, %rsi\nmovl(%rsi), %edi\naddl(%rdx), %edi\nmovl%edi, (%rcx)\nThis notation, called assembly language, is a line-by-line equivalent to the actual numeric instruction codes but is slightly more readable.\nWhat does that code mean?\n\nThe first three instructions load the addresses of the three variables into registers inside the processor. The names with percent signs, such as %rcx, refer to specific processor registers. Movq is the name of a machine language instruction. (It abbreviates “move quote,” which says to move a constant value into a register. Note that a is a variable, but the address of a is a constant value — the variable doesn’t move around in the computer’s memory.)\nThe next instruction, movl (“move long”), says to move a word from one place to another. Putting a register name in parentheses, like (%rsi), means to use the memory location whose address is in the register. In this case, since the third movq put the address of a into register %rsi, the first movl says to move the variable a from memory into a processor register. Then the addl instruction says to add the variable b into that same register. Finally, the value in register %edi is moved into the memory location containing variable c.\n\nYou wouldn’t want to have to program in this language! And you don’t have to; modern architectures are designed for compilers, not for human machine language programmers.\n\n\n::: endnote Learn about:\n\n\nPC/Mac architecture\n\n\nThis has a lot of numbers in it which make it harder to read, but more importantly it’s so abstract and doesn’t really talk about anything familiar, which given the hint title “PC/Mac” I was expecting. Needs some work. –MF, 11/8/17\n\nMost computer processors (the part that carries out instructions) in desktop or laptop computers use an architecture called “x86” that was designed at Intel, a chip manufacturer. The first processor using that architecture was called the 8086, released in 1978. (The reason for the name x86 is that the first few improved versions were called 80286, 80486, and so on.) The original 8086 was a 16-bit architecture; since then 32-bit (since 1985) and 64-bit (since 2003) versions have been developed. Even with all the refinements of the architecture, the new x86 processors are almost always backward compatible, meaning that today’s versions will still run programs that were written for the original 8086.\nWhy did the x86 architecture come to rule the world? The short answer is that IBM used it in their original PC, and all the later PC manufacturers followed their lead because they could run IBM-compatible software unmodified. But why did IBM choose the x86? There were arguably better competing architectures available, such as the Motorola 68000 and IBM’s own 801. The PC designers argued about which to use, but in the end, what made the difference was IBM’s long history of working with Intel.\nThe Apple Macintosh originally used the Motorola 68000 architecture, and in 1994 Apple designed its own PowerPC architecture in a joint project with IBM and Motorola, but in 2006 they, too, switched to the x86, because Intel keeps producing newer, faster versions of the x86 more often than other companies could keep up.\n\n\n\nsmartphone architecture\n\nEverything about smartphone architecture is determined by the tiny size of the space inside the case. The height and width of the phone are constrained by the size of people’s front pockets. (Don’t keep your phone in your back pants pocket. That’s really bad both for the phone and for your back.) The front-to-back depth of a phone could be much bigger than it is, but for some reason phone manufacturers compete on the thinness of their phones, which gives designers even less room inside.\nAs a result, many components that would be separate from the processor chip in a computer are instead part of the same chip in a phone. These components may include some or all of a cellular modem, a WiFi modem, a graphics processor (another processor that specializes in parallel arithmetic on lists of numbers), memory, a GPS receiver to find your phone’s physical location, circuitry to manage the power depletion and recharging of the battery, and more. These days, the chip is likely to include two, four, or even eight copies of the actual CPU, to make multicore systems. This collection of components is called a system on a chip, or SoC.\nIntel made an x86-based (that is, the same architecture used in PCs) low-power SoC called the Atom, which was used in a few Motorola phones and some others made by companies you’ve never heard of. It was made to support Android, Linux, and Windows phones.\nBut the vast majority of phones use the ARM architecture, which (unlike the x86) was designed from the beginning to be a low-power architecture. The acronym stands for Advanced RISC Machine. It’s available in 32-bit and 64-bit configurations.\n\nWhat’s a RISC?\n\nThe name stands for Reduced Instruction Set Computer, as opposed to the CISC (Complex Instruction Set Computer) architectures, including the x86. The instruction set of an architecture is, as you’d guess from the name, the set of instructions that the processor understands. A RISC has fewer instructions than a CISC, but it’s simpler in other ways also. For example, a CISC typically has more addressing modes in its instructions. In the x86 architecture, the add instruction can add two processor registers, or a register and a value from the computer’s memory, or a constant value built into the instruction itself. A RISC architecture’s add instruction just knows how to add two registers (perhaps putting the result into a third register), and there are separate load and store instructions that copy values from memory to register or the other way around. Also, in a RISC architecture, all instructions are the same length (say, 32 bits) whereas in a CISC architecture, instruction lengths may vary. These differences matter because a RISC can be loading the next instruction before it’s finished with the previous instruction, and a RISC never has more than one memory data reference per instruction.\nSo why don’t they use a RISC architecture in PCs? At one time Apple used a RISC processor called the PowerPC in its Macintosh computers, but the vast majority of computers sold are PCs, not Macs, and as a result Intel spends vast sums of money on building faster and faster circuits implementing the x86 architecture. The moral is about the interaction between different levels of abstraction: A better architecture can be overcome by a better circuit design or better technology to cram components into an integrated circuit.\n\n\nThe company that designed the ARM, called ARM Holdings, doesn’t actually build processors. They license either the architecture design or an actual circuit design to other companies that integrate ARM processors into SoCs. Major companies that build ARM-based processor chips include Apple, Broadcom, Qualcomm, and Samsung. Smartphone manufacturers buy chips from one of these companies.\n\n\n\nembedded architecture and the “Internet of Things”\n::: {#hint-architecture-iot .collapse} You can buy thermostats with computers in them, refrigerators with computers in them, fuzzy animal toys with computers in them—more and more things, as time goes on. Modern automobiles have several computers in them, largely for safety reasons; you wouldn’t want the brakes to fail because the DVD player has a problem. The goal, as described by researchers in computing, is “smart dust,” meaning that lots of computers could be floating around a building unnoticed. What good is an unnoticed computer? This is a classic dual use technology. The beneficial use everyone talks about is emergency response to disasters; it would be a great help to the fire department to know, from the outside, which rooms of a building have people in them. But another use for this technology would be spying.\n\n NXP Freescale SCM-i.MX6D chip\nFor embedded computing, the main design criteria are small size and low power consumption. The chip in the picture above is based on the ARM architecture, like most cell phones. That’s actually a big embedded-systems chip; the Kinetis KL02 MCU (micro controller unit) fits in a 2 millimeter square—less than 1/10 inch. That’s still too big to float in the air like dust, but imagine it in a sticky container and thrown onto the wall.\nSomeday, the spying will be even more effective (along with, we hope, treatment for diseases of the brain): ARM targets your brain with new implantable chips (Engadget, 5/17/2017).\nIntel made a button-sized x86-compatible chip in 2015, but announced in 2017 that it would be discontinued, leaving only ARM and PowerPC-based processors competing in this market. :::\n\n\nhobbyist computer architecture\n\nIn one sense, any architecture can be a hobbyist architecture. Even back in the days of million-dollar computers, there were software hobbyists who found ways to get into college computer labs, often by making themselves useful there. Today, there are much more powerful computers that are cheap enough that hobbyists are willing to take them apart. But there are a few computer architectures specifically intended for use by hobbyists.\n\nBy far the most popular computer specifically for hobbyists is the Arduino. It’s a circuit board, not just a processor. Around the edges of the board are connectors. On the short edge on the left in the picture are the power input, which can connect to a power supply plugged into the wall or to a battery pack for a mobile device such as a robot, and a USB connector used mainly to download programs from a desktop or laptop computer. On the long edges are connectors for single wires connected to remote sensors (for light, heat, being near a wall, touching another object, etc.) or actuators (stepping motors, lights, buzzers, etc.).\nOne important aspect of the Arduino design is that it’s free (“free as in freedom”). Anyone can make and even sell copies of the Arduino. This is good because it keeps the price down (the basic Arduino Uno board costs $22) and encourages innovation, but it also means that there can be incompatible Arduino-like boards. (The name “Arduino” is a trademark that can be used only by license from Arduino AG.)\nThe processor in most Arduino models is an eight-bit RISC system with memory included in the chip, called the AVR, from a company called Atmel. It was designed by two (then) students in Norway, named Alf-Egil Bogen and Vegard Wollan. Although officially “AVR” doesn’t stand for anything, it is widely believed to come from “Alf and Vegard’s RISC.” There are various versions of the AVR processor, with different speeds, memory capacities, and of course prices; there are various Arduino models using the different processors.\nUnlike most (“von Neumann architecture”) computers, the AVR (“Harvard architecture”) separates program memory from data memory. (It actually has three kinds of memory, one for the running program, one for short-term data, and one for long-term data.) Babbage’s Analytical Engine was also designed with a program memory separate from its data memory.\n\nWhy would you want more than one kind of memory?\n\nThere are actually two different design issues at work in this architecture. One is all the way down in the analog domain, having to do with the kind of physical circuitry used. There are many memory technologies, varying in cost, speed, and volatility: volatile memory loses the information stored in it when the device is powered off, while non-volatile memory retains the information. Here’s how memory is used in the AVR chips:\n\n\nEEPROM (512 Bytes–4kBytes) is non-volatile, and is used for very long term data, like a file in a computer’s disk, except that there is only a tiny amount available. Programs on the Arduino have to ask explicitly to use this memory, with an EEPROM library.\n\n\nThe name stands for Electrically Erasable Programmable Read-Only Memory, which sounds like a contradiction in terms. In the early days of transistor-based computers, there were two kinds of memory, volatile (Random Access Memory, or RAM) and nonvolatile (Read-Only Memory, or ROM). The values stored in an early ROM had to be built in by the manufacturer of the memory chip, so it was expensive to have a new one made. Then came Programmable Read-Only Memory (PROM), which was read-only once installed in a computer, but could be programmed, once only, using a machine that was only somewhat expensive. Then came EPROM, Erasable PROM, which could be erased in its entirety by shining a bright ultraviolet light on it, and then reprogrammed like a PROM. Finally there was Electrically Erasable PROM, which could be erased while installed in a computer, so essentially equivalent to RAM, except that the erasing is much slower than rewriting a word of RAM, so you use it only for values that aren’t going to change often.\n\n\n\n\nSRAM (1k–4kBytes): This memory can lose its value when the machine is turned off; in other words, it’s volatile. It is used for temporary data, like the script variables in a Snap! script.\n\n\nThe name stands for Static Random Access Memory. The “Random Access” part differentiates it from the magnetic tape storage used on very old computers, in which it took a long time to get from one end of the tape to another, so it was only practical to write or read data in sequence. Today all computer memory is random access, and the name “RAM” really means “writable,” as opposed to read-only. The “Static” part of the name means that, even though the memory requires power to retain its value, it doesn’t require periodic refreshing as regular (“Dynamic”) computer main memory does. (“Refreshing” means that every so often, the computer has to read the value of each word of memory and rewrite the same value, or else it fades away. This is a good example of computer circuitry whose job is to maintain the digital abstraction, in which a value is zero or one, and there’s no such thing as “fading” or “in-between values.”) Static RAM is faster but more expensive than dynamic RAM; that’s why DRAM is used for the very large (several gigabytes) memories of desktop or laptop computers.\n\n\n\n\nFlash memory (16k–256kBytes): This is the main memory used for programs and data. Flash memory is probably familiar to you because it’s used for the USB sticks that function as portable external file storage. It’s technically a kind of EEPROM, but with a different physical implementation that makes it much cheaper (so there can be more of it in the Arduino), but more complicated to use, requiring special control circuitry to maintain the digital abstraction.\n\n\n“More complicated” means, for example, that changing a bit value from 1 to 0 is easy, but changing it from 0 to 1 is a much slower process that involves erasing a large block of memory to all 1 bits and then rewriting the values of the bits you didn’t want to change.\n\n\n\n\nSo, that’s why there are physically different kinds of memory in the AVR chips, but none of that completely explains the Harvard architecture, in which memory is divided into program and data, regardless of how long the data must survive. The main reason to have two different memory interface circuits is that it allows the processor to read a program instruction and a data value at the same time. This can in principle make the processor twice as fast, although that much speed gain isn’t found in practice.\nTo understand the benefit of simultaneous instruction and data reading, you have to understand that processors are often designed using an idea called pipelining. The standard metaphor is about doing your laundry, when you have more than one load. You wash the first load, while your dryer does nothing; then you wash the second load while drying the first load, and so on until the last load. Similarly, the processor in a computer includes circuitry to decode an instruction, and circuitry to do arithmetic. If the processor does one thing at a time, then at any moment either the instruction decoding circuitry or the arithmetic circuitry is doing nothing. But if you can read the next instruction at the same time as carrying out the previous one, all of the processor is kept busy.\nThis was a long explanation, but it’s still vastly oversimplified. For one thing, it’s possible to use pipelining in a von Neumann architecture also. And for another, a pure Harvard architecture wouldn’t allow a computer to load programs for itself to execute. So various compromises are used in practice.\n\n\nAtmel has since introduced a line of ARM-compatible 32-bit processors, and Arduino has boards using that processor but compatible with the layout of the connectors on the edges.\nOne thing that has contributed to the popularity of the Arduino with hobbyists is the availability of shields, which are auxiliary circuit boards that plug into the side edge connectors and have the same connectors on their top side. Shields add features to the system. Examples are motor control shields, Bluetooth shields for communicating with cell phones, RFID shields to read those product tags you find inside the packaging of many products, and so on. Both the Arduino company and others sell shields.\n\nStack of Arduino shields Image by Wikimedia user Marlon J. Manrique, CC-BY-SA 2.0.\n\n\nA completely different hobbyist architecture is the Raspberry Pi. It was designed to be used like a desktop or laptop computer, but with more access to its electronics. It uses an ARM-compatible processor, like most cell phones, but instead of running phone operating system software such as Android, it runs “real” computer operating systems. It ships with Linux, but people have run Windows on it.\nThe main thing that makes it exciting is that it’s inexpensive: different models range in price from $5 to $35. That price includes just the circuit board, as in the picture, without a keyboard, display, mouse, power adapter, or a case. The main expense in kit computers is the display, so the Pi is designed to plug into your TV. You can buy kits that include a minimal case, a keyboard, and other important add-ons for around $20. You can also buy fancy cases to make it look like any other computer, with a display, for hundreds of dollars.\nBecause the Pi is intended for educational use, it comes with software, some of which is free for anyone, but some of which generally costs money for non-Pi computers. One important example is Mathematica, which costs over $200 for students (their cheapest price), but is included free on the Pi.\nLike the Arduino, the Pi supports add-on circuit boards with things like sensors and wireless communication modules.\n\nRaspberry Pi board Image by Evan Amos, via Wikimedia, public domain\n\n\n\n\n\n:::\n\nLearn more about computer architecture in general.\n\n\nThis needs some heavy edits. For example, perhaps the whole third paragraph, “One recent 64-bit x86…” could be cut. –MF, 11/8/17\n\n\nThe memory hierarchy\nFor a given cost of circuit hardware, the bigger the memory, the slower it works. For this reason, computers don’t just have one big chunk of memory. There will be a small number of registers inside the processor itself, usually between 8 and 16 of them. The “size” (number of bits) of a data register is equal to the width of the architecture.\nThe computer’s main memory, these days, is measured in GB (gigabytes, or billions of bytes). A memory of that size can’t be fast enough to keep up with a modern processor. Luckily, computer programs generally have locality of reference, which means that if the program has just made use of a particular memory location, it’s probably going to use a nearby location next. So a complete program may be very big, but over the course of a second or so only a small part of it will be needed. Therefore, modern computers are designed with one or more cache memories—much smaller and therefore faster—between the processor and the main memory. The processor makes sure that the most recently used memory is copied into the cache.\nOne recent 64-bit x86 processor has a first level (L1) cache of 64KB (thousands of bytes) inside the processor chip, a larger but slower L2 cache of 256 KB, also inside the processor, and an L3 cache of up to 2 MB (megabytes, millions of bytes) outside the processor. Each level of cache has a copy of the most recently used parts of the next level outward: the L1 cache copies part of the L2 cache, which copies part of the L3 cache, which copies part of the main memory. Data in the L1 cache can be accessed by the processor about as fast as its internal registers, and each level outward is a little slower. Hardware in the processor handles all this complexity, so that programmers can write programs as if the processor were directly connected to the main memory.\n\n\nSecond sourcing\nIntel licenses other chip manufacturers to build processors that use the same architecture as Intel’s processors. Why do they do that? Wouldn’t they make more money if people had to buy from Intel? The reason is that computer manufacturers, such as Dell, Apple, and Lenovo, won’t build their systems around an architecture that is only available from one company. They’re not worried that Intel will go out of business; the worry is that there may be a larger-than-expected demand for a particular processor, and Intel may not be able to fill orders on time. But if that processor is also available from other companies such as AMD and Cyrix, then a delay at Intel won’t turn into a delay at Dell. Those other chip manufacturers may not use the same circuitry as the Intel version, as long as they behave the same at the architecture level.\n\n\n\n\n\n\nLearning enough about the Analytical Engine to be able to write even a simple program for it is quite a large undertaking. Don’t try it until after the AP exam, but if you are interested, there are extensive online resources available here:\n\n\nThe Analytical Engine Table of Contents\n\n\nWeb Analytical Engine Emulator"
  },
  {
    "objectID": "unit-6/lab-1/07-digital-components.html",
    "href": "unit-6/lab-1/07-digital-components.html",
    "title": "Page 7: The Digital Domain: Components",
    "section": "",
    "text": "BH: I would scrap the part about external components, and focus on what’s important and on the AP exam: processor, memory, I/O.\n\n\nOn this page, you’ll explore the parts (components) of the computer hardware.\n\nFor as long as people have been teaching other people about computers, they always say “A computer consists of the processor, memory, and input/output (I/O) devices.”\nIn the early days of computers, it was easy to point out the huge racks of equipment that contained each of those three components:  \nThese are pictures of a powerful computer from the 1970s. Each of the big racks full of circuitry is about the size of a refrigerator. Today, a much more powerful computer—more speed, more memory—fits inside a cell phone.\nBecause today’s processors and memory are so small, most of what we see is the input/output (I/O) devices, like keyboard, mouse, screens. Input devices include the keyboard, mouse, and microphone. Output devices include the printer, speaker, and (for laptop or desktop computers) the display screen. On phones and tablets, touchscreens are used for both input and output. Disk drives, optical drives (for CDs and DVDs), and the Internet interface are also used for both.\n\n\n\n\nHover the mouse over the numbers to learn about each of the computer components. (Or download this Computer Components PDF.)\n\n\n\n\n\nScanner: An input device that can convert the contents of a paper document into a digital image that can be stored in the computer.\n\n\n\n\nCPU (Central Processing Unit) or the processor: The “brain” of the computer where programs are run. It is one of the most expensive parts of the hardware.  Modern CPUs can perform multiple tasks simultaneously.    Image credit: Wikipedia user Solipsist\n\n\n\n\nRAM (Random Access Memory): The computer’s high-speed, short-term memory. It temporarily stores data and instructions for programs that run on the computer.    Image credit: Wikipedia user Cyberdex\n\n\n\n\nExpansion cards: Circuit boards that can be inserted to add functionality to a computer system (for example: network, sound, or video cards).    Image credit: Wikipedia user Rackmount-guy\n\n\n\n\nPower supply: Converts electricity from the wall into the form that the other computer components use.\n\n\n\n\nOptical Drive: An input/output device that reads data from and writes data to CDs and DVDs.\n\n\n\n\nHard Drive: An input/output device that serves as the long-term storage memory of the computer. There are two primary kinds: mechanical drives that use a mechanical arm to read and write data on a rotating disk (shown below), and “solid state” drives that have no moving parts. .   Video credit: Wikipedia user Peter17\n\n\n\n\nMotherboard: A circuit board that holds and connects various components of the computer and allows their communication.   Image credit: Wikipedia user Julianprescott2604juuly.\n\n\n\n\nSpeaker: An input/output device that outputs sound from the computer.\n\n\n\n\nMonitor: An input/output device that displays information visually. Generally, monitors are output devices where the computer visually displays information. Touchscreens combine the functions of output and input. \n\n\n\n\nKeyboard: An input device on which the user can type to communicate with the computer.\n\n\n\n\nMouse: An input device that allows the user to interact with visual objects displayed on the monitor.\n\n\n\n\nExternal Hard Drive: An input/output device that serves as an extra hard drive used for additional or backup storage.\n\n\n\n\nPrinter: An output device that can transfer digital data onto paper.\n\n\n\nImage credit: Wikipedia user HereToHelp\n\n\n\n\n\nWhy is it called motherboard?\n\nIn a desktop computer, there are other boards too—the Ethernet port, “serial” ports for the keyboard and mouse, and other expansion cards—and all the other boards plug into the motherboard. In laptops, there isn’t room for many other boards, and there is no room for boards perpendicular to the motherboard, but we still use the same name.\n\n\n\n\n\n Imagine you are buying a new computer. In a group of four, have each person choose one of these reasons:\n\n\nMainly for reading email and surfing web pages (but not watching many movies).\n\n\nMainly for playing online video games.\n\n\nMainly for storing your photos and music.\n\n\nMainly for streaming online movies.\n\n\nAssume you each want the least expensive computer that does a great job for your purpose. Research what features of the computer are most important for your purpose, choose a computer, and compare notes with the rest of the group. Which computer is most expensive? Least expensive? Did you choose a laptop or a desktop, and why?\n\n\nCreate a quiz game to test a player’s knowledge of computer hardware.\n\nSprites are set to not-draggable so that the numbers don’t move. \n\n This project file contains a stage background, sprite costumes for the numbered components, and a list of components so you don’t have to type them.\n\nThings you might think about as you design your program:\n\n\nHow will the computer ask questions? Will the program choose randomly from component list?\n\n\nHow will the player answer? Will they click a number on the stage to answer?\n\n\nHow will the program treat player mistakes? Can they try again immediately? Will they move on and repeat later? Or will they have no further chance?\n\n\nDecide whether to keep score and, if so, how to do it.\n\n\nDecide whether to keep track of what’s been asked so the components don’t repeat and, if so, how to do it.\n\n\nDecide when to end the game and what to do then.\n\n\n\n\n\n\n\n\n\n\nChoose one or more of the following questions to research:\n\n\nHow does a touchscreen know where your finger is pressing?\n\n\nWhat’s a register? Why do computers have registers?\n\n\nWhat’s a cache? Why do computers have cache?"
  },
  {
    "objectID": "unit-6/lab-1/08-digital-IC.html",
    "href": "unit-6/lab-1/08-digital-IC.html",
    "title": "Page 8: The Digital Domain: Integrated Circuits",
    "section": "",
    "text": "On this page, you’ll learn about the physical electronic devices inside the computer: integrated circuits.\nIn order to have the modern computer age, in which people can carry extremely powerful computers in their pockets (their cell phones), circuits had to become much smaller and cheaper. The invention of the integrated circuit made this possible. Integrated circuits combine (“integrate”) millions or billions of very tiny electrical parts (transistors, resistors, capacitors, and others) packaged into a small plastic box.\nThe fundamental enabling technology for the computer age was the transistor. In digital circuits, transistors are used as switches. (You’ll learn more about them on an upcoming page.) At first, each transistor was in a separate plastic package. Here’s a picture of a circuit made with discrete (separate) transistors (the black, D-shaped parts) and resistors (the brown, striped, more-or-less cylindrical parts):\nEarly ICs could include only a few transistors. The circuit in the photo above could just about fit in one IC in the early 1960s, but progress was quick. Today’s computers require billions of transistors. The largest processor chip in 2017, the AMC Epyc, has more than 19 billion transistors!"
  },
  {
    "objectID": "unit-6/lab-1/08-digital-IC.html#whats-inside-an-ic-or-a-circuit-board",
    "href": "unit-6/lab-1/08-digital-IC.html#whats-inside-an-ic-or-a-circuit-board",
    "title": "Page 8: The Digital Domain: Integrated Circuits",
    "section": "What’s inside an IC or a circuit board?",
    "text": "What’s inside an IC or a circuit board?\n\nTantalum, tin, tungsten, and gold are referred to as conflict minerals. They are integral to the technology and other things we rely on every day: from laptops, phones, and tablets to cars, airplanes, lighting, and jewelry. Militias and rebel groups in eastern Congo, funded by the sale of these minerals, have killed over 5 million people since 1998.\nIn a Central African country rich with natural resources, Congolese miners often endure horrific living conditions, violence and oppression from militias whose conquests are funded by so-called conflict minerals.\nThe electronics industry is working with miners in the Democratic Republic of Congo to build a verifiable system so consumer devices can be built with conflict-free minerals.\nExcerpts from Tech Ethics: Does Conflict Free Matter?(stale link at Intel) and Intel’s Efforts Are Helping Families in the Congo See also Intel Statement on Combating Modern Slavery” Consider the source when reading these.\n\n\n\n\nDo some research on conflict minerals and some of the ways the electronics industry is working with miners to improve these conditions."
  },
  {
    "objectID": "unit-6/lab-1/09-digital-logic-gates.html",
    "href": "unit-6/lab-1/09-digital-logic-gates.html",
    "title": "Page 9: The Digital Domain: Logic Gates",
    "section": "",
    "text": "MF: lightly clean up to make the text more concise\nDo we have any interest in salvaging the logic gates/XOR project that Selim and I worked on? –MF, 3/25/19\nIn a circuit with billions of transistors, or even thousands of transistors, hardware designers can’t think about each individual transistor. Just as programmers use abstraction, hardware architects use abstractions, in which a group of transistors and other circuit elements are considered as a single thing. What kinds of things? There are basically two kinds, one for memory and one for computation."
  },
  {
    "objectID": "unit-6/lab-1/09-digital-logic-gates.html#boolean-operators",
    "href": "unit-6/lab-1/09-digital-logic-gates.html#boolean-operators",
    "title": "Page 9: The Digital Domain: Logic Gates",
    "section": "Boolean Operators",
    "text": "Boolean Operators\nThe circuits to do computation are more interesting. They compute functions, just like reporters in Snap!. Since computers do a lot of arithmetic, you might think that the basic circuit functions would be addition, subtraction, multiplication, and division, but that’s not the case. Of course there are circuits to do those things, but they’re made out of logic gates: circuits that compute Boolean functions: and, or, and not.\nThe reason that Boolean functions are considered more fundamental is that their inputs and outputs can be represented with a single wire going into or out from the circuit. That’s not true about arithmetic functions. If you consider a voltage on a wire as meaning 1, and no voltage as meaning 0, then you have to see that an adder will have three possible output values, because 1+1=2, which is neither 0 nor 1. By contrast, if you consider a voltage on a wire as meaning True, and no voltage as meaning False, then the output from a Boolean function of two inputs can still only be True or False, so only one output wire is needed.\nYou saw some examples in Unit 2 Lab 3: Making Decisions by Using Predicates: AND, OR, and NOT:        \n\nSome other ways to think about Boolean operators: It is possible to emulate Boolean operations electronically and these operations are sometimes represented as truth tables (either with true/false or ones/zeros).\n\n\nA circuit emulation and truth tables for and.\n\nThis electric circuit shows a simplified way to emulate the Boolean operator and electronically. The two switches are in series; if both of the switches are on, the current flows and the light bulb turns on.\n\nI wonder about making this simpler by including a pic of a battery in the animation. Students have a lot to manage in this endnote without this extra piece of information that isn’t critical for the learning they are supposed to be doing. –MF, 12/4/17 \n\n\nThis symbol in the circuit diagrams represents a battery.  \n\n\n\nThese two tables are identical. One just shows the same pattern with true/false and the other with ones/zeros.\n\n31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATgB3AEEAeQBBAEQAYwBBAE0AdwBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEgAUQBBAGMAZwBCADEAQQBIAFEAQQBhAEEAQQBpAEEAQwBBAEEAYwB3AEIAMQBBAEcAMABBAGIAUQBCAGgAQQBIAEkAQQBlAFEAQQA5AEEAQwBJAEEAZABBAEIAeQBBAEgAVQBBAGQAQQBCAG8AQQBDAEEAQQBkAEEAQgBoAEEARwBJAEEAYgBBAEIAbABBAEMAQQBBAFoAZwBCAHYAQQBIAEkAQQBJAEEAQgBCAEEARQA0AEEAUgBBAEEAZwBBAEgAYwBBAGEAUQBCADAAQQBHAGcAQQBJAEEAQgBtAEEARwBFAEEAYgBBAEIAegBBAEcAVQBBAEwAdwBCADAAQQBIAEkAQQBkAFEAQgBsAEEAQwBJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYQBBAEEAZwBBAEgATQBBAFkAdwBCAHYAQQBIAEEAQQBaAFEAQQA5AEEAQwBJAEEAWQB3AEIAdgBBAEcAdwBBAFoAdwBCAHkAQQBHADgAQQBkAFEAQgB3AEEAQwBJAEEASQBBAEIAagBBAEcAOABBAGIAQQBCAHoAQQBIAEEAQQBZAFEAQgB1AEEARAAwAEEASQBnAEEAeQBBAEMASQBBAFAAZwBCAHAAQQBHADQAQQBjAEEAQgAxAEEASABRAEEAYwB3AEEAOABBAEMAOABBAGQAQQBCAG8AQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYQBBAEEAZwBBAEgATQBBAFkAdwBCAHYAQQBIAEEAQQBaAFEAQQA5AEEAQwBJAEEAWQB3AEIAdgBBAEcAdwBBAEkAZwBBACsAQQBHADgAQQBkAFEAQgAwAEEASABBAEEAZABRAEIAMABBAEQAdwBBAEwAdwBCADAAQQBHAGcAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGEAQQBBAGcAQQBIAE0AQQBZAHcAQgB2AEEASABBAEEAWgBRAEEAOQBBAEMASQBBAFkAdwBCAHYAQQBHAHcAQQBJAGcAQQBnAEEASABNAEEAZABBAEIANQBBAEcAdwBBAFoAUQBBADkAQQBDAEkAQQBkAHcAQgBwAEEARwBRAEEAZABBAEIAbwBBAEQAbwBBAE0AUQBBAHcAQQBEAEEAQQBjAEEAQgA0AEEARABzAEEASQBnAEEAKwBBAEUARQBBAFAAQQBBAHYAQQBIAFEAQQBhAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAZwBBAEkAQQBCAHoAQQBHAE0AQQBiAHcAQgB3AEEARwBVAEEAUABRAEEAaQBBAEcATQBBAGIAdwBCAHMAQQBDAEkAQQBJAEEAQgB6AEEASABRAEEAZQBRAEIAcwBBAEcAVQBBAFAAUQBBAGkAQQBIAGMAQQBhAFEAQgBrAEEASABRAEEAYQBBAEEANgBBAEQARQBBAE0AQQBBAHcAQQBIAEEAQQBlAEEAQQA3AEEAQwBJAEEAUABnAEIAQwBBAEQAdwBBAEwAdwBCADAAQQBHAGcAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAbwBBAEMAQQBBAGMAdwBCAGoAQQBHADgAQQBjAEEAQgBsAEEARAAwAEEASQBnAEIAagBBAEcAOABBAGIAQQBBAGkAQQBDAEEAQQBjAHcAQgAwAEEASABrAEEAYgBBAEIAbABBAEQAMABBAEkAZwBCADMAQQBHAGsAQQBaAEEAQgAwAEEARwBnAEEATwBnAEEAeABBAEQAQQBBAE0AQQBCAHcAQQBIAGcAQQBPAHcAQQBpAEEARAA0AEEAUQBRAEEAZwBBAEQAdwBBAFkAdwBCAHYAQQBHAFEAQQBaAFEAQQArAEEARwBFAEEAYgBnAEIAawBBAEQAdwBBAEwAdwBCAGoAQQBHADgAQQBaAEEAQgBsAEEARAA0AEEASQBBAEIAQwBBAEQAdwBBAEwAdwBCADAAQQBHAGcAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBFAFkAQQBZAFEAQgBzAEEASABNAEEAWgBRAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEUAWQBBAFkAUQBCAHMAQQBIAE0AQQBaAFEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARQBZAEEAWQBRAEIAcwBBAEgATQBBAFoAUQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQgBHAEEARwBFAEEAYgBBAEIAegBBAEcAVQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBCAFUAQQBIAEkAQQBkAFEAQgBsAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEAUgBnAEIAaABBAEcAdwBBAGMAdwBCAGwAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARgBRAEEAYwBnAEIAMQBBAEcAVQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBCAEcAQQBHAEUAQQBiAEEAQgB6AEEARwBVAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEIARwBBAEcARQBBAGIAQQBCAHoAQQBHAFUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEAVgBBAEIAeQBBAEgAVQBBAFoAUQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBGAFEAQQBjAGcAQgAxAEEARwBVAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEIAVQBBAEgASQBBAGQAUQBCAGwAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEcARQBBAFkAZwBCAHMAQQBHAFUAQQBQAGcAQQA9AAoAcwB1AGYAZgBpAHgAOgA=:31b8e172-b470-440e-83d8-e6b185028602 31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATgB3AEEANABBAEQARQBBAE4AUQBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEgAUQBBAGMAZwBCADEAQQBIAFEAQQBhAEEAQQBnAEEARwBJAEEAYgB3AEIAeQBBAEcAUQBBAFoAUQBCAHkAQQBHAFUAQQBaAEEAQQBpAEEAQwBBAEEAYwB3AEIAMQBBAEcAMABBAGIAUQBCAGgAQQBIAEkAQQBlAFEAQQA5AEEAQwBJAEEAZABBAEIAeQBBAEgAVQBBAGQAQQBCAG8AQQBDAEEAQQBkAEEAQgBoAEEARwBJAEEAYgBBAEIAbABBAEMAQQBBAFoAZwBCAHYAQQBIAEkAQQBJAEEAQgBCAEEARQA0AEEAUgBBAEEAZwBBAEgAYwBBAGEAUQBCADAAQQBHAGcAQQBJAEEAQgA2AEEARwBVAEEAYwBnAEIAdgBBAEMAOABBAGIAdwBCAHUAQQBHAFUAQQBJAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBvAEEAQwBBAEEAYwB3AEIAagBBAEcAOABBAGMAQQBCAGwAQQBEADAAQQBJAGcAQgBqAEEARwA4AEEAYgBBAEIAbgBBAEgASQBBAGIAdwBCADEAQQBIAEEAQQBJAGcAQQBnAEEARwBNAEEAYgB3AEIAcwBBAEgATQBBAGMAQQBCAGgAQQBHADQAQQBQAFEAQQBpAEEARABJAEEASQBnAEEAKwBBAEcAawBBAGIAZwBCAHcAQQBIAFUAQQBkAEEAQgB6AEEARAB3AEEATAB3AEIAMABBAEcAZwBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBvAEEAQwBBAEEAYwB3AEIAagBBAEcAOABBAGMAQQBCAGwAQQBEADAAQQBJAGcAQgBqAEEARwA4AEEAYgBBAEEAaQBBAEQANABBAGIAdwBCADEAQQBIAFEAQQBjAEEAQgAxAEEASABRAEEAUABBAEEAdgBBAEgAUQBBAGEAQQBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAbwBBAEMAQQBBAGMAdwBCAGoAQQBHADgAQQBjAEEAQgBsAEEARAAwAEEASQBnAEIAagBBAEcAOABBAGIAQQBBAGkAQQBDAEEAQQBjAHcAQgAwAEEASABrAEEAYgBBAEIAbABBAEQAMABBAEkAZwBCADMAQQBHAGsAQQBaAEEAQgAwAEEARwBnAEEATwBnAEEAeABBAEQAQQBBAE0AQQBCAHcAQQBIAGcAQQBPAHcAQQBpAEEARAA0AEEAUQBRAEEAOABBAEMAOABBAGQAQQBCAG8AQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYQBBAEEAZwBBAEgATQBBAFkAdwBCAHYAQQBIAEEAQQBaAFEAQQA5AEEAQwBJAEEAWQB3AEIAdgBBAEcAdwBBAEkAZwBBAGcAQQBIAE0AQQBkAEEAQgA1AEEARwB3AEEAWgBRAEEAOQBBAEMASQBBAGQAdwBCAHAAQQBHAFEAQQBkAEEAQgBvAEEARABvAEEATQBRAEEAdwBBAEQAQQBBAGMAQQBCADQAQQBEAHMAQQBJAGcAQQArAEEARQBJAEEAUABBAEEAdgBBAEgAUQBBAGEAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBnAEEASQBBAEIAegBBAEcATQBBAGIAdwBCAHcAQQBHAFUAQQBQAFEAQQBpAEEARwBNAEEAYgB3AEIAcwBBAEMASQBBAEkAQQBCAHoAQQBIAFEAQQBlAFEAQgBzAEEARwBVAEEAUABRAEEAaQBBAEgAYwBBAGEAUQBCAGsAQQBIAFEAQQBhAEEAQQA2AEEARABFAEEATQBBAEEAdwBBAEgAQQBBAGUAQQBBADcAQQBDAEkAQQBQAGcAQgBCAEEAQwBBAEEAUABBAEIAagBBAEcAOABBAFoAQQBCAGwAQQBEADQAQQBZAFEAQgB1AEEARwBRAEEAUABBAEEAdgBBAEcATQBBAGIAdwBCAGsAQQBHAFUAQQBQAGcAQQBnAEEARQBJAEEAUABBAEEAdgBBAEgAUQBBAGEAQQBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAE0AQQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAEEAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQB3AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAQQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBAHgAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBNAEEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAeABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAE0AQQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAEEAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEATQBRAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQARQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBAHgAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEcARQBBAFkAZwBCAHMAQQBHAFUAQQBQAGcAQQA9AAoAcwB1AGYAZgBpAHgAOgA=:31b8e172-b470-440e-83d8-e6b185028602\n\n\n\nA circuit emulation and truth tables for or.\n\nThis electric circuit shows a simplified way to emulate the Boolean operator or electronically. The two switches are in parallel; if either (or both) of the switches are on, the current flows and the light bulb turns on. \n\nAs with the and tables, these two tables are identical except for whether they use true/false or ones/zeros.\nIn ordinary language, the word “or” can have two slightly different meanings. Inclusive or means “at least one of these”: If it’s raining or it’s really cold out, you need your overcoat. (If it’s both raining and cold, you’d still wear the coat.) Exclusive or means “this or that, but not both”: Eat your vegetables or you won’t get any dessert. (You’d feel cheated if you ate the vegetables and still didn’t get dessert.) In computer science (as in mathematics) the word “or” by itself always means inclusive or, as you can see in this truth table. If you mean “exclusive or,” you have to say that.\n\n31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBRAEEAdwBBAEQAVQBBAE0AUQBBADUAQQBBAD0APQAKAHAAcgBlAGYAaQB4ADoACgBzAG8AdQByAGMAZQA6AFAAQQBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEASQBBAEIAagBBAEcAdwBBAFkAUQBCAHoAQQBIAE0AQQBQAFEAQQBpAEEASABRAEEAYwBnAEIAMQBBAEgAUQBBAGEAQQBBAGcAQQBHAEkAQQBiAHcAQgB5AEEARwBRAEEAWgBRAEIAeQBBAEcAVQBBAFoAQQBBAGkAQQBDAEEAQQBjAHcAQgAxAEEARwAwAEEAYgBRAEIAaABBAEgASQBBAGUAUQBBADkAQQBDAEkAQQBkAEEAQgB5AEEASABVAEEAZABBAEIAbwBBAEMAQQBBAGQAQQBCAGgAQQBHAEkAQQBiAEEAQgBsAEEAQwBBAEEAWgBnAEIAdgBBAEgASQBBAEkAQQBCAFAAQQBGAEkAQQBJAEEAQgAzAEEARwBrAEEAZABBAEIAbwBBAEMAQQBBAFoAZwBCAGgAQQBHAHcAQQBjAHcAQgBsAEEAQwA4AEEAZABBAEIAeQBBAEgAVQBBAFoAUQBBAGkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAGcAQQBJAEEAQgB6AEEARwBNAEEAYgB3AEIAdwBBAEcAVQBBAFAAUQBBAGkAQQBHAE0AQQBiAHcAQgBzAEEARwBjAEEAYwBnAEIAdgBBAEgAVQBBAGMAQQBBAGkAQQBDAEEAQQBZAHcAQgB2AEEARwB3AEEAYwB3AEIAdwBBAEcARQBBAGIAZwBBADkAQQBDAEkAQQBNAGcAQQBpAEEARAA0AEEAYQBRAEIAdQBBAEgAQQBBAGQAUQBCADAAQQBIAE0AQQBQAEEAQQB2AEEASABRAEEAYQBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAGcAQQBJAEEAQgB6AEEARwBNAEEAYgB3AEIAdwBBAEcAVQBBAFAAUQBBAGkAQQBHAE0AQQBiAHcAQgBzAEEAQwBJAEEAUABnAEIAdgBBAEgAVQBBAGQAQQBCAHcAQQBIAFUAQQBkAEEAQQA4AEEAQwA4AEEAZABBAEIAbwBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBnAEEASQBBAEIAegBBAEcATQBBAGIAdwBCAHcAQQBHAFUAQQBQAFEAQQBpAEEARwBNAEEAYgB3AEIAcwBBAEMASQBBAEkAQQBCAHoAQQBIAFEAQQBlAFEAQgBzAEEARwBVAEEAUABRAEEAaQBBAEgAYwBBAGEAUQBCAGsAQQBIAFEAQQBhAEEAQQA2AEEARABFAEEATQBBAEEAdwBBAEgAQQBBAGUAQQBBADcAQQBDAEkAQQBQAGcAQgBCAEEARAB3AEEATAB3AEIAMABBAEcAZwBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBvAEEAQwBBAEEAYwB3AEIAagBBAEcAOABBAGMAQQBCAGwAQQBEADAAQQBJAGcAQgBqAEEARwA4AEEAYgBBAEEAaQBBAEMAQQBBAGMAdwBCADAAQQBIAGsAQQBiAEEAQgBsAEEARAAwAEEASQBnAEIAMwBBAEcAawBBAFoAQQBCADAAQQBHAGcAQQBPAGcAQQB4AEEARABBAEEATQBBAEIAdwBBAEgAZwBBAE8AdwBBAGkAQQBEADQAQQBRAGcAQQA4AEEAQwA4AEEAZABBAEIAbwBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBhAEEAQQBnAEEASABNAEEAWQB3AEIAdgBBAEgAQQBBAFoAUQBBADkAQQBDAEkAQQBZAHcAQgB2AEEARwB3AEEASQBnAEEAZwBBAEgATQBBAGQAQQBCADUAQQBHAHcAQQBaAFEAQQA5AEEAQwBJAEEAZAB3AEIAcABBAEcAUQBBAGQAQQBCAG8AQQBEAG8AQQBNAFEAQQB3AEEARABBAEEAYwBBAEIANABBAEQAcwBBAEkAZwBBACsAQQBFAEUAQQBJAEEAQQA4AEEARwBNAEEAYgB3AEIAawBBAEcAVQBBAFAAZwBCAHYAQQBIAEkAQQBQAEEAQQB2AEEARwBNAEEAYgB3AEIAawBBAEcAVQBBAFAAZwBBAGcAQQBFAEkAQQBQAEEAQQB2AEEASABRAEEAYQBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEAUgBnAEIAaABBAEcAdwBBAGMAdwBCAGwAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBSAGcAQgBoAEEARwB3AEEAYwB3AEIAbABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAFIAZwBCAGgAQQBHAHcAQQBjAHcAQgBsAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEUAWQBBAFkAUQBCAHMAQQBIAE0AQQBaAFEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARgBRAEEAYwBnAEIAMQBBAEcAVQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBCAFUAQQBIAEkAQQBkAFEAQgBsAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEYAUQBBAGMAZwBCADEAQQBHAFUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQgBHAEEARwBFAEEAYgBBAEIAegBBAEcAVQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBCAFUAQQBIAEkAQQBkAFEAQgBsAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEYAUQBBAGMAZwBCADEAQQBHAFUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQgBVAEEASABJAEEAZABRAEIAbABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAFYAQQBCAHkAQQBIAFUAQQBaAFEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAGgAQQBHAEkAQQBiAEEAQgBsAEEARAA0AEEACgBzAHUAZgBmAGkAeAA6AA==:31b8e172-b470-440e-83d8-e6b185028602 31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBRAEEAeABBAEQAQQBBAE4AZwBBADIAQQBBAD0APQAKAHAAcgBlAGYAaQB4ADoACgBzAG8AdQByAGMAZQA6AFAAQQBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEASQBBAEIAagBBAEcAdwBBAFkAUQBCAHoAQQBIAE0AQQBQAFEAQQBpAEEASABRAEEAYwBnAEIAMQBBAEgAUQBBAGEAQQBBAGcAQQBHAEkAQQBiAHcAQgB5AEEARwBRAEEAWgBRAEIAeQBBAEcAVQBBAFoAQQBBAGkAQQBDAEEAQQBjAHcAQgAxAEEARwAwAEEAYgBRAEIAaABBAEgASQBBAGUAUQBBADkAQQBDAEkAQQBkAEEAQgB5AEEASABVAEEAZABBAEIAbwBBAEMAQQBBAGQAQQBCAGgAQQBHAEkAQQBiAEEAQgBsAEEAQwBBAEEAWgBnAEIAdgBBAEgASQBBAEkAQQBCAFAAQQBGAEkAQQBJAEEAQgAzAEEARwBrAEEAZABBAEIAbwBBAEMAQQBBAGUAZwBCAGwAQQBIAEkAQQBiAHcAQQB2AEEARwA4AEEAYgBnAEIAbABBAEMASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGEAQQBBAGcAQQBIAE0AQQBZAHcAQgB2AEEASABBAEEAWgBRAEEAOQBBAEMASQBBAFkAdwBCAHYAQQBHAHcAQQBaAHcAQgB5AEEARwA4AEEAZABRAEIAdwBBAEMASQBBAEkAQQBCAGoAQQBHADgAQQBiAEEAQgB6AEEASABBAEEAWQBRAEIAdQBBAEQAMABBAEkAZwBBAHkAQQBDAEkAQQBQAGcAQgBwAEEARwA0AEEAYwBBAEIAMQBBAEgAUQBBAGMAdwBBADgAQQBDADgAQQBkAEEAQgBvAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGEAQQBBAGcAQQBIAE0AQQBZAHcAQgB2AEEASABBAEEAWgBRAEEAOQBBAEMASQBBAFkAdwBCAHYAQQBHAHcAQQBJAGcAQQArAEEARwA4AEEAZABRAEIAMABBAEgAQQBBAGQAUQBCADAAQQBEAHcAQQBMAHcAQgAwAEEARwBnAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBhAEEAQQBnAEEASABNAEEAWQB3AEIAdgBBAEgAQQBBAFoAUQBBADkAQQBDAEkAQQBZAHcAQgB2AEEARwB3AEEASQBnAEEAZwBBAEgATQBBAGQAQQBCADUAQQBHAHcAQQBaAFEAQQA5AEEAQwBJAEEAZAB3AEIAcABBAEcAUQBBAGQAQQBCAG8AQQBEAG8AQQBNAFEAQQB3AEEARABBAEEAYwBBAEIANABBAEQAcwBBAEkAZwBBACsAQQBFAEUAQQBQAEEAQQB2AEEASABRAEEAYQBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAGcAQQBJAEEAQgB6AEEARwBNAEEAYgB3AEIAdwBBAEcAVQBBAFAAUQBBAGkAQQBHAE0AQQBiAHcAQgBzAEEAQwBJAEEASQBBAEIAegBBAEgAUQBBAGUAUQBCAHMAQQBHAFUAQQBQAFEAQQBpAEEASABjAEEAYQBRAEIAawBBAEgAUQBBAGEAQQBBADYAQQBEAEUAQQBNAEEAQQB3AEEASABBAEEAZQBBAEEANwBBAEMASQBBAFAAZwBCAEMAQQBEAHcAQQBMAHcAQgAwAEEARwBnAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAG8AQQBDAEEAQQBjAHcAQgBqAEEARwA4AEEAYwBBAEIAbABBAEQAMABBAEkAZwBCAGoAQQBHADgAQQBiAEEAQQBpAEEAQwBBAEEAYwB3AEIAMABBAEgAawBBAGIAQQBCAGwAQQBEADAAQQBJAGcAQgAzAEEARwBrAEEAWgBBAEIAMABBAEcAZwBBAE8AZwBBAHgAQQBEAEEAQQBNAEEAQgB3AEEASABnAEEATwB3AEEAaQBBAEQANABBAFEAUQBBAGcAQQBEAHcAQQBZAHcAQgB2AEEARwBRAEEAWgBRAEEAKwBBAEcAOABBAGMAZwBBADgAQQBDADgAQQBZAHcAQgB2AEEARwBRAEEAWgBRAEEAKwBBAEMAQQBBAFEAZwBBADgAQQBDADgAQQBkAEEAQgBvAEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQB3AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEATQBBAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAQQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBNAEEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARABFAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAeABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAEUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQB3AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEATQBRAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBAHgAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBNAFEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARABFAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBZAFEAQgBpAEEARwB3AEEAWgBRAEEAKwBBAEEAPQA9AAoAcwB1AGYAZgBpAHgAOgA=:31b8e172-b470-440e-83d8-e6b185028602\n\n\n\nA circuit emulation and truth tables for not.\n\nThis electric circuit shows a simplified way to emulate the Boolean operator not electronically. This switch is basically a circuit breaker: if the switch is on, the current flow is broken and the light bulb turns off; if the switch is off, the current flows directly to the light bulb and the light bulb turns on. \n\nAs with the other tables, these are identical for true/false vs. ones/zeros.\n\n31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBRAEEAeQBBAEQAawBBAE0AQQBBADUAQQBBAD0APQAKAHAAcgBlAGYAaQB4ADoACgBzAG8AdQByAGMAZQA6AFAAQQBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEASQBBAEIAagBBAEcAdwBBAFkAUQBCAHoAQQBIAE0AQQBQAFEAQQBpAEEASABRAEEAYwBnAEIAMQBBAEgAUQBBAGEAQQBBAGcAQQBHAEkAQQBiAHcAQgB5AEEARwBRAEEAWgBRAEIAeQBBAEcAVQBBAFoAQQBBAGkAQQBDAEEAQQBjAHcAQgAxAEEARwAwAEEAYgBRAEIAaABBAEgASQBBAGUAUQBBADkAQQBDAEkAQQBkAEEAQgB5AEEASABVAEEAZABBAEIAbwBBAEMAQQBBAGQAQQBCAGgAQQBHAEkAQQBiAEEAQgBsAEEAQwBBAEEAWgBnAEIAdgBBAEgASQBBAEkAQQBCAE8AQQBFADgAQQBWAEEAQQBnAEEASABjAEEAYQBRAEIAMABBAEcAZwBBAEkAQQBCAG0AQQBHAEUAQQBiAEEAQgB6AEEARwBVAEEATAB3AEIAMABBAEgASQBBAGQAUQBCAGwAQQBDAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBhAEEAQQBnAEEASABNAEEAWQB3AEIAdgBBAEgAQQBBAFoAUQBBADkAQQBDAEkAQQBZAHcAQgB2AEEARwB3AEEASQBnAEEAKwBBAEcAawBBAGIAZwBCAHcAQQBIAFUAQQBkAEEAQQA4AEEAQwA4AEEAZABBAEIAbwBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBhAEEAQQBnAEEASABNAEEAWQB3AEIAdgBBAEgAQQBBAFoAUQBBADkAQQBDAEkAQQBZAHcAQgB2AEEARwB3AEEASQBnAEEAKwBBAEcAOABBAGQAUQBCADAAQQBIAEEAQQBkAFEAQgAwAEEARAB3AEEATAB3AEIAMABBAEcAZwBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYQBBAEEAZwBBAEgATQBBAFkAdwBCAHYAQQBIAEEAQQBaAFEAQQA5AEEAQwBJAEEAWQB3AEIAdgBBAEcAdwBBAEkAZwBBAGcAQQBIAE0AQQBkAEEAQgA1AEEARwB3AEEAWgBRAEEAOQBBAEMASQBBAGQAdwBCAHAAQQBHAFEAQQBkAEEAQgBvAEEARABvAEEATQBRAEEAdwBBAEQAQQBBAGMAQQBCADQAQQBEAHMAQQBJAGcAQQArAEEARQBFAEEAUABBAEEAdgBBAEgAUQBBAGEAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBnAEEASQBBAEIAegBBAEcATQBBAGIAdwBCAHcAQQBHAFUAQQBQAFEAQQBpAEEARwBNAEEAYgB3AEIAcwBBAEMASQBBAEkAQQBCAHoAQQBIAFEAQQBlAFEAQgBzAEEARwBVAEEAUABRAEEAaQBBAEgAYwBBAGEAUQBCAGsAQQBIAFEAQQBhAEEAQQA2AEEARABFAEEATQBBAEEAdwBBAEgAQQBBAGUAQQBBADcAQQBDAEkAQQBQAGcAQQA4AEEARwBNAEEAYgB3AEIAawBBAEcAVQBBAFAAZwBCAHUAQQBHADgAQQBkAEEAQQA4AEEAQwA4AEEAWQB3AEIAdgBBAEcAUQBBAFoAUQBBACsAQQBDAEEAQQBRAFEAQQA4AEEAQwA4AEEAZABBAEIAbwBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEIARwBBAEcARQBBAGIAQQBCAHoAQQBHAFUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQgBVAEEASABJAEEAZABRAEIAbABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBGAFEAQQBjAGcAQgAxAEEARwBVAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEIARwBBAEcARQBBAGIAQQBCAHoAQQBHAFUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAFkAUQBCAGkAQQBHAHcAQQBaAFEAQQArAEEAQQA9AD0ACgBzAHUAZgBmAGkAeAA6AA==:31b8e172-b470-440e-83d8-e6b185028602 31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBRAEEAegBBAEQASQBBAE4AUQBBADMAQQBBAD0APQAKAHAAcgBlAGYAaQB4ADoACgBzAG8AdQByAGMAZQA6AFAAQQBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEASQBBAEIAagBBAEcAdwBBAFkAUQBCAHoAQQBIAE0AQQBQAFEAQQBpAEEASABRAEEAYwBnAEIAMQBBAEgAUQBBAGEAQQBBAGcAQQBHAEkAQQBiAHcAQgB5AEEARwBRAEEAWgBRAEIAeQBBAEcAVQBBAFoAQQBBAGkAQQBDAEEAQQBjAHcAQgAxAEEARwAwAEEAYgBRAEIAaABBAEgASQBBAGUAUQBBADkAQQBDAEkAQQBkAEEAQgB5AEEASABVAEEAZABBAEIAbwBBAEMAQQBBAGQAQQBCAGgAQQBHAEkAQQBiAEEAQgBsAEEAQwBBAEEAWgBnAEIAdgBBAEgASQBBAEkAQQBCAE8AQQBFADgAQQBWAEEAQQBnAEEASABjAEEAYQBRAEIAMABBAEcAZwBBAEkAQQBCADYAQQBHAFUAQQBjAGcAQgB2AEEAQwA4AEEAYgB3AEIAdQBBAEcAVQBBAEkAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAG8AQQBDAEEAQQBjAHcAQgBqAEEARwA4AEEAYwBBAEIAbABBAEQAMABBAEkAZwBCAGoAQQBHADgAQQBiAEEAQQBpAEEARAA0AEEAYQBRAEIAdQBBAEgAQQBBAGQAUQBCADAAQQBEAHcAQQBMAHcAQgAwAEEARwBnAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAG8AQQBDAEEAQQBjAHcAQgBqAEEARwA4AEEAYwBBAEIAbABBAEQAMABBAEkAZwBCAGoAQQBHADgAQQBiAEEAQQBpAEEARAA0AEEAYgB3AEIAMQBBAEgAUQBBAGMAQQBCADEAQQBIAFEAQQBQAEEAQQB2AEEASABRAEEAYQBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBvAEEAQwBBAEEAYwB3AEIAagBBAEcAOABBAGMAQQBCAGwAQQBEADAAQQBJAGcAQgBqAEEARwA4AEEAYgBBAEEAaQBBAEMAQQBBAGMAdwBCADAAQQBIAGsAQQBiAEEAQgBsAEEARAAwAEEASQBnAEIAMwBBAEcAawBBAFoAQQBCADAAQQBHAGcAQQBPAGcAQQB4AEEARABBAEEATQBBAEIAdwBBAEgAZwBBAE8AdwBBAGkAQQBEADQAQQBRAFEAQQA4AEEAQwA4AEEAZABBAEIAbwBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBhAEEAQQBnAEEASABNAEEAWQB3AEIAdgBBAEgAQQBBAFoAUQBBADkAQQBDAEkAQQBZAHcAQgB2AEEARwB3AEEASQBnAEEAZwBBAEgATQBBAGQAQQBCADUAQQBHAHcAQQBaAFEAQQA5AEEAQwBJAEEAZAB3AEIAcABBAEcAUQBBAGQAQQBCAG8AQQBEAG8AQQBNAFEAQQB3AEEARABBAEEAYwBBAEIANABBAEQAcwBBAEkAZwBBACsAQQBEAHcAQQBZAHcAQgB2AEEARwBRAEEAWgBRAEEAKwBBAEcANABBAGIAdwBCADAAQQBEAHcAQQBMAHcAQgBqAEEARwA4AEEAWgBBAEIAbABBAEQANABBAEkAQQBCAEIAQQBEAHcAQQBMAHcAQgAwAEEARwBnAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARABBAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAeABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAEUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQB3AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEAUABnAEEAPQAKAHMAdQBmAGYAaQB4ADoA:31b8e172-b470-440e-83d8-e6b185028602"
  },
  {
    "objectID": "unit-6/lab-1/09-digital-logic-gates.html#logic-gates",
    "href": "unit-6/lab-1/09-digital-logic-gates.html#logic-gates",
    "title": "Page 9: The Digital Domain: Logic Gates",
    "section": "Logic Gates",
    "text": "Logic Gates\nInside a computer, Boolean operations are implemented in physical circuitry using logic gates. (A single gate implements one of the basic functions and, or, or not.) Logic circuits are often represented with drawings that help engineers see how the information will flow through a circuit. For example, the following diagram of a logic circuit with two gates represents the Boolean expression . Can you see how?\n\n\n\n\n Look at the logic circuit drawn above. For what values of A and B will the output be true?\n\n\n\n\nOn the previous page, you learned about tungsten and tin, and here we’re talking about Boolean functions. In what sense is this less abstract? From the point of view of the chip designer, logic gates are the fundamental building blocks of a digital circuit. (The actual physical chip fabrication is at an even lower level of abstraction, in the analog domain.) \n\n\n\n\n\n\n\nWhich of the following expressions will report true?\n\n\n\n\n\n\n\n\n\n\n\nI only\n\n\nEvaluate each part separately first, and then determine what the outermost block in each expression will report. In expression I: What does (true) and (false) report? What does not((true) and (false)) report? In expression II: What does (true) or (false) report? What does not((true) or (false)) report?\n\n\n\n\nII only\n\n\nCorrect!\n\n\n\n\nI and II\n\n\nTake another look at expression I. What does not((true) and (false)) (on the right) report to the outermost and block?\n\n\n\n\nNeither I nor II\n\n\nTake another look at expression II. What does (true) and (false) (on the right) report to the outermost or block?\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhich of the following logic circuits will report true? (T stands for true, and F stands for false.)\n\n\nThis problem is probably harder than something you’ll see on the exam, so if you can get this one, you are doing great!\n\n31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBRAEEANQBBAEQARQBBAE4AUQBBADUAQQBBAD0APQAKAHAAcgBlAGYAaQB4ADoACgBzAG8AdQByAGMAZQA6AFAAQQBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAZwBBAEgAYwBBAGEAUQBCAGsAQQBIAFEAQQBhAEEAQQA5AEEAQwBJAEEATQBnAEEAdwBBAEQAQQBBAEkAZwBBACsAQQBEAHcAQQBiAEEAQgBwAEEARAA0AEEAUABBAEIAcABBAEcAMABBAFoAdwBBAGcAQQBHAE0AQQBiAEEAQgBoAEEASABNAEEAYwB3AEEAOQBBAEMASQBBAGEAUQBCAHUAQQBHAHcAQQBhAFEAQgB1AEEARwBVAEEASQBBAEIAdQBBAEcAOABBAGMAdwBCAG8AQQBHAEUAQQBaAEEAQgB2AEEASABjAEEASQBnAEEAZwBBAEgATQBBAGMAZwBCAGoAQQBEADAAQQBJAGcAQQB2AEEARwBJAEEAYQBnAEIAagBBAEMAMABBAGMAZwBBAHYAQQBHAGsAQQBiAFEAQgBuAEEAQwA4AEEATgBnAEEAdABBAEcATQBBAGIAdwBCAHQAQQBIAEEAQQBkAFEAQgAwAEEARwBVAEEAYwBnAEIAegBBAEMAOABBAGIAQQBCAHYAQQBHAGMAQQBhAFEAQgBqAEEAQwAwAEEAWgB3AEIAaABBAEgAUQBBAFoAUQBCAHoAQQBDADAAQQBjAFEAQgAxAEEARwBrAEEAZQBnAEEAdABBAEcASQBBAEwAZwBCAHcAQQBHADQAQQBaAHcAQQBpAEEAQwBBAEEAWQBRAEIAcwBBAEgAUQBBAFAAUQBBAGkAQQBHAHcAQQBiAHcAQgBuAEEARwBrAEEAWQB3AEEAZwBBAEcAYwBBAFkAUQBCADAAQQBHAFUAQQBJAEEAQgBrAEEARwBrAEEAWQBRAEIAbgBBAEgASQBBAFkAUQBCAHQAQQBDAEEAQQBiAHcAQgBtAEEAQwBBAEEASwBBAEIAdQBBAEcAOABBAGQAQQBBAGcAQQBDAGcAQQBLAEEAQgBVAEEAQwBBAEEAWQBRAEIAdQBBAEcAUQBBAEkAQQBCAEcAQQBDAGsAQQBLAFEAQQBnAEEARwA4AEEAYwBnAEEAZwBBAEMAZwBBAFYAQQBBAGcAQQBHAEUAQQBiAGcAQgBrAEEAQwBBAEEAUgBnAEEAcABBAEMAawBBAEkAZwBBAGcAQQBIAFEAQQBhAFEAQgAwAEEARwB3AEEAWgBRAEEAOQBBAEMASQBBAGIAQQBCAHYAQQBHAGMAQQBhAFEAQgBqAEEAQwBBAEEAWgB3AEIAaABBAEgAUQBBAFoAUQBBAGcAQQBHAFEAQQBhAFEAQgBoAEEARwBjAEEAYwBnAEIAaABBAEcAMABBAEkAQQBCAHYAQQBHAFkAQQBJAEEAQQBvAEEARwA0AEEAYgB3AEIAMABBAEMAQQBBAEsAQQBBAG8AQQBGAFEAQQBJAEEAQgBoAEEARwA0AEEAWgBBAEEAZwBBAEUAWQBBAEsAUQBBAHAAQQBDAEEAQQBiAHcAQgB5AEEAQwBBAEEASwBBAEIAVQBBAEMAQQBBAFkAUQBCAHUAQQBHAFEAQQBJAEEAQgBHAEEAQwBrAEEASwBRAEEAaQBBAEMAQQBBAEwAdwBBACsAQQBEAHcAQQBMAHcAQgBzAEEARwBrAEEAUABnAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAdwBBAGIAQQBCAHAAQQBEADQAQQBQAEEAQgBwAEEARwAwAEEAWgB3AEEAZwBBAEcATQBBAGIAQQBCAGgAQQBIAE0AQQBjAHcAQQA5AEEAQwBJAEEAYQBRAEIAdQBBAEcAdwBBAGEAUQBCAHUAQQBHAFUAQQBJAEEAQgB1AEEARwA4AEEAYwB3AEIAbwBBAEcARQBBAFoAQQBCAHYAQQBIAGMAQQBJAGcAQQBnAEEARwBFAEEAYgBBAEIAcABBAEcAYwBBAGIAZwBBADkAQQBDAEkAQQBZAGcAQgB2AEEASABRAEEAZABBAEIAdgBBAEcAMABBAEkAZwBBAGcAQQBIAE0AQQBjAGcAQgBqAEEARAAwAEEASQBnAEEAdgBBAEcASQBBAGEAZwBCAGoAQQBDADAAQQBjAGcAQQB2AEEARwBrAEEAYgBRAEIAbgBBAEMAOABBAE4AZwBBAHQAQQBHAE0AQQBiAHcAQgB0AEEASABBAEEAZABRAEIAMABBAEcAVQBBAGMAZwBCAHoAQQBDADgAQQBiAEEAQgB2AEEARwBjAEEAYQBRAEIAagBBAEMAMABBAFoAdwBCAGgAQQBIAFEAQQBaAFEAQgB6AEEAQwAwAEEAYwBRAEIAMQBBAEcAawBBAGUAZwBBAHQAQQBHAEUAQQBMAGcAQgB3AEEARwA0AEEAWgB3AEEAaQBBAEMAQQBBAFkAUQBCAHMAQQBIAFEAQQBQAFEAQQBpAEEARwB3AEEAYgB3AEIAbgBBAEcAawBBAFkAdwBBAGcAQQBHAGMAQQBZAFEAQgAwAEEARwBVAEEASQBBAEIAawBBAEcAawBBAFkAUQBCAG4AQQBIAEkAQQBZAFEAQgB0AEEAQwBBAEEAYgB3AEIAbQBBAEMAQQBBAEsAQQBBAG8AQQBGAFEAQQBJAEEAQgB2AEEASABJAEEASQBBAEIARwBBAEMAawBBAEkAQQBCAGgAQQBHADQAQQBaAEEAQQBnAEEAQwBnAEEAYgBnAEIAdgBBAEgAUQBBAEkAQQBBAG8AQQBGAFEAQQBJAEEAQgB2AEEASABJAEEASQBBAEIARwBBAEMAawBBAEsAUQBBAHAAQQBDAEkAQQBJAEEAQgAwAEEARwBrAEEAZABBAEIAcwBBAEcAVQBBAFAAUQBBAGkAQQBHAHcAQQBiAHcAQgBuAEEARwBrAEEAWQB3AEEAZwBBAEcAYwBBAFkAUQBCADAAQQBHAFUAQQBJAEEAQgBrAEEARwBrAEEAWQBRAEIAbgBBAEgASQBBAFkAUQBCAHQAQQBDAEEAQQBiAHcAQgBtAEEAQwBBAEEASwBBAEEAbwBBAEYAUQBBAEkAQQBCAHYAQQBIAEkAQQBJAEEAQgBHAEEAQwBrAEEASQBBAEIAaABBAEcANABBAFoAQQBBAGcAQQBDAGcAQQBiAGcAQgB2AEEASABRAEEASQBBAEEAbwBBAEYAUQBBAEkAQQBCAHYAQQBIAEkAQQBJAEEAQgBHAEEAQwBrAEEASwBRAEEAcABBAEMASQBBAEkAQQBBAHYAQQBEADQAQQBQAEEAQQB2AEEARwB3AEEAYQBRAEEAKwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAFAAZwBBAD0ACgBzAHUAZgBmAGkAeAA6AA==:31b8e172-b470-440e-83d8-e6b185028602\n\n\n\n\nI only\n\n\nCorrect!\n\n\n\n\nII only\n\n\nTry building both diagrams in Snap! similarly to the images in Question 1 above.\n\n\n\n\nI and II\n\n\nTake another look at diagram II. What signal does the right side send to the AND gate?\n\n\n\n\nNeither I nor II\n\n\nTake another look at diagram I. What signal does the left side send to the OR gate?\n\n\n\n\n\n\n\n\n\n\n\n\nHow do engineers draw logic gates?\n\n Engineers typically draw logic gates horizontally and use special shapes that represent each gate:     For example, engineers would draw the logic circuit shown at right like this:   Do an image search for “logic gate diagrams” to see more examples."
  },
  {
    "objectID": "unit-6/lab-1/10-analog.html",
    "href": "unit-6/lab-1/10-analog.html",
    "title": "Page 10: The Analog Domain: Transistors",
    "section": "",
    "text": "MF: lightly clean up to cut down on the boxes\n\n\nOn this page, you’ll learn about the transistors that implement logic gates.\n\n\nThe transistor is the fundamental building block of electronic circuits, where they are used as on/off switches.\n Image by sv.Wikipedia user DaRy \n\nYou’ve learned that a wire can either have a voltage or not have a voltage on it. The reality is more complicated. The on-or-off picture of a wire, a transistor, or a logic gate output is a simplification—an abstraction.\n\nThis is a rough graph of the actual input-output behavior of a transistor. Don’t worry about the details; just notice the two blue flat parts of the graph.  Within the “cutoff” region, small changes to the input voltage do not change the output voltage at all; the output is always zero volts. Likewise within the “saturation” region, small input changes hardly impact output voltage; the output is interpreted as a one. This is how transistors are used as switches in a computer.\nTransistors are versatile devices. When used in the middle, linear (pink) part of the graph, they’re amplifiers; a small variation in input voltage produces a large variation in output voltage. That’s how they’re used to play music in a stereo.\n\n\nWhy are they called “cutoff,” “linear,” and “saturation”?\n\nThe lower region of the curve is called “cutoff” because the transistor’s output is cut off (the output is zero) for any input in that region. The upper region is called “saturation” because, like a sponge that can’t get any wetter, the transistor can’t give more output no matter how big the input. The central region is called “linear” because it behaves like a linear (straight) function.\n\n\n\nThe transistor was invented in 1947 by John Bardeen, Walter Brattain, and William Shockley at Bell Laboratories, also the home of Unix. The inventors were awarded the 1956 Nobel Prize in Physics for this work.\n\n\nThe digital domain is not a law of nature; circuit designers have to work at ensuring that each wire in a circuit is always either fully on or fully off. The digital domain is an abstraction.\n\n\nLearn more about what’s below the digital abstraction and how it’s applied.\n\nThe flatness of the output at the two extremes is important because there will be small changes in the input. Electrical circuits have “noise,” undesired changes in voltages, for reasons from the transistors getting hot to loose connections on the circuit board to cosmic rays. This is why computers use zeros and ones: a transistor has two flat regions in its input-output curve.\nBut the flatness of the saturated region is only approximate, and it depends on how the transistor is connected to the rest of the circuit. One example of a potential problem is fanout, the number of transistor inputs to which one transistor’s output is connected. Beyond a certain number (it depends on the particular transistor type, but certainly ten inputs would be too many), the output voltage is reduced to the point that those inputs might not be sure whether they’re getting a zero or a one.\nThe way a transistor really works depends on quantum physics. (We’re not talking about quantum computers; plain old computer circuits are based on quantum effects also.) To learn more about analog-domain circuit design and what’s inside a transistor, take an Electrical Engineering course.\n\n\n\n\n\n\nResearch how transistors are used to implement logic gates."
  },
  {
    "objectID": "unit-6/lab-2/1-timeline.html",
    "href": "unit-6/lab-2/1-timeline.html",
    "title": "Page 1: A Brief History of Computers",
    "section": "",
    "text": "On this page, you will explore the long history of devices used for computation.\n\nWhen was the first computer built? That depends on where you draw the line between computers and non-computers.\n\nQuestion 1: Answer this on the Google Form\n\n\nExplore the timeline below, which shows selected events in the history of computing starting 20,000 years ago. Decide what you think makes sense to call the first real computer. Why?\n\n\n\n\n\n\nTally Sticks - First known computing aid.\n\n\nTally Sticks (c. 18,000 BCE)\n20,000 years ago people cut patterns of notches into animal bones. Some experts believe that tally sticks were used to perform arithmetic computations.\n\n\n\n\nAbacus - Ancient calculator, still in use.\n\n\nThe Abacus (c. 2,000 BCE)\nThe abacus is a computing device invented about 4,000 years ago. People who are well-trained to use it can perform calculations remarkably quickly, including square roots and cube roots on multi-digit numbers. In some countries, the abacus is still widely used today.\n\nImage by Wikimedia user HB, Public Domain.\n\n  The computation algorithms are executed by the user, not the device.\n\n\n\n\nOrrery - Mechanical device that computes planets’ orbits.\n\n\nThe Orrery (c. 100 BCE)\nSince antiquity, many special-purpose computing devices have been invented. For example this orrery displayed the positions of the planets in the Solar System. The first known device of this kind dated from about 2100 years ago. People at that time generally believed that the sun and other planets all revolved around the Earth, making the positions very complicated to work out, so the mechanism was much harder to design and build than it would be today.\n\nNo machine-readable image author provided. Marsyas assumed (based on copyright claims). GFDL, CC-BY-SA-3.0, or CC BY 2.5, via Wikimedia Commons.\n\n\nHere is a modern example of an orrery.\n\nImage by flickr userKaptain Kobold, licensed under the Creative Commons Attribution 2.0\n\n\n\n\n\n\nDifference Engine - Charles Babbage: Mechanical single-purpose computer.\n\n\nThe Difference Engine (c. 1822)\nIn 1822, Charles Babbage designed a device he called a “Difference Engine.” Made of precisely milled metal gears, it would compute and print tables of numbers, like log or trig functions. See more on the digital architecture page.\n\n\n\n\nAnalytical Engine - Babbage: First stored-program computer.\n\n\nThe Analytical Engine (c. 1833)\nThe Difference Engine could compute various functions by manually setting the starting position of its gears, but it had only one algorithm, built into the hardware design. In 1833, Babbage began a more ambitious project, the Analytical Engine. It was based on the general idea of the Difference Engine, but with a crucial difference: It could carry out instructions in a primitive programming language, prepared on punched cards. See more on the digital architecture page.\n\n\n\n\nFirst Programmer - Ada Lovelace: First to understand the potential of programs for non-numeric data.\n\n\nThe First Programmer (c. 1842)\nBabbage’s design was very versatile, but his interest was still mainly in printing tables of numbers. It was his collaborator Ada, Countess Lovelace, who first recognized that the numbers in Babbage’s computer could be used not only as quantities but also as representing musical notes, text characters, and so on. See more on the digital architecture page.\n\n\nImage by Alfred Edward Chalon, Science & Society Picture Library, Public Domain, via Wikimedia.\n\n\n\n\n\nAlan Turing wins World War II - Alan Turing leads a team that breaks the Enigma code using a very early electronic programmable computer.\n\n\nAlan Turing Wins World War II (1940s)\nWell, we’re exaggerating. Many people contributed to the Nazi defeat. But they weren’t all soldiers; some were mathematicians. Turing, who went on to develop the beginning ideas of computer science and to prove the Halting Theorem, which you saw in Unit 5, Lab 4: An Undecidable Problem, was the leader of a British team of mathematicians who made a breakthrough in decrypting messages encrypted with the German Enigma machine.\n\nCryptanalysis of the Enigma enabled western Allies in World War II to read substantial amounts of secret Morse-coded radio communications of the Axis powers. The western Supreme Allied Commander Dwight D. Eisenhower considered the military intelligence from this and other decrypted Axis radio and teleprinter transmissions “decisive” to the Allied victory…\n\n\nAlan Turing, a Cambridge University mathematician and logician, provided much of the original thinking and designed the device. Engineer Harold “Doc” Keen turned Turing’s ideas into a working machine. (adapted from Cryptanalysis of the Enigma, Wikipedia CC-BY-SA)\n\n\n\n\n\nFirst Mouse, Window System, etc. - Douglas Engelbart: An amazing number of firsts, including first hypertext, first collaborative editing, first video calling, much more.\n\n\n“The mother of all demos” (1960s)\nThe first public demonstration in 1968 of a mouse, colleagues separated by miles working on the same screen, and many other technologies we now take for granted was so astonishing to the audience that it became known as “the mother of all demos.” (Just search that name on Wikipedia or YouTube.)\nThe inventor of this system, Douglas Engelbart, had a lifelong interest in using technology to augment human intelligence, in particular to support collaboration among people physically distant. He studied people doing intellectual work and noted that when they’re not using a computer they don’t sit rigidly in front of their desks; they wheel their chairs around the room as they grab books or just think. So he designed an office chair attachment of a lapboard containing a keyboard and a mouse—the first mouse. He also invented a way for people to collaborate on the same page at the same time, seeing each others’ mouse cursors. Documents created in the system had hyperlinks to other documents, long before the Web was invented and used this idea. There were lots of smaller firsts, too, such as a picture-in-picture display of the other person’s face camera, long before Skype. People remember Engelbart mostly because of the mouse, but he pioneered many features of the modern graphical user interface (GUI).\n\n\n\n\nSketchpad - Ivan Sutherland: First object-oriented programming system, early interactive display graphics.\n\n\nSketchpad (1963)\nIvan Sutherland’s 1963 Ph.D. thesis project, a program to help in drawing blueprints from points, line segments and arcs of circles, pioneered both object oriented programming and the ability to draw on a screen (using a light pen; the mouse hadn’t been invented yet). It was one of the first programs with an interactive graphical user interface, so people who weren’t computer programmers could use it easily.\nSearch for “Sketchpad” on YouTube to see a demonstration of this software.\n\n\n\n\nARPANET - The first version of what became the Internet.\n\n\nARPANET (1969)\nThe Advanced Research Projects Agency\n(ARPA) of the US Defense Department was and is still the main funder of computer science research in the United States. In the late 1960s through the early 1980s they supported the development of a network connecting mainly universities with ARPA-funded projects, along with a few military bases. The initial network in 1969 consisted of four computers, three in California and one in Utah. At its peak, around 1981, there were about 200 computers on the net. With such a small number of computers, each of them knew the name and “host number” of all the others. Special gateway computers called IMPs (Interface Message Processors) were used to connect the host computers to the network, like a router today.\nOnly organizations with ARPA research grants could be on the net. This meant almost all the network sites were universities, along with a small number of technology companies doing work for ARPA. Everyone knew everyone, and so the network was built around trust. People were encouraged to use other sites’ resources; there was a yearly published directory of all the network computers, including, for most of them, information on how to log in as a guest user. It was a much friendlier spirit than today’s Internet, with millions of computers and millions of users who don’t know or trust each other. But the friendly spirit was possible only because access to the ARPANET was strongly restricted.\nThe architects of the ARPANET knew that a system requiring every computer to know the address of every other computer wasn’t going to work for a network accessible to everyone. Their plan was to build a network of networks—the Internet. The TCP/IP protocol stack was designed and tested on the ARPANET.\n\n\n\n\nThe Internet - First network of networks, based on TCP/IP.\n\n\nInternet (1986)\nGradually the ARPANET was divided into pieces. The first big pieces were MILNET for military bases and NSFnet, established in 1986 by the National Science Foundation, for research sites. This split was the beginning of the Internet. Smaller regional networks were created. Communication companies such as AT&T created commercial networks that anyone could join. Network access spread worldwide through satellite radio and through undersea cables. In 1995 the NSFnet was abolished, and everyone connected to the net through commercial Internet Service Providers.\n\n\n\n\nThe World Wide Web - Tim Berners-Lee: First widely available hypertext (clickable links) system.\n\n\nWorld Wide Web (1989-90)\nIn the early days of the net, the main application-level protocols were Telnet, which allowed a user to log in remotely to another computer, and FTP (File Transfer Protocol), for copying files from one computer to another. FTP is great if you already know what you’re looking for, and exactly where it is in the other computer’s file system.\nSeveral people had the idea of a system that would allow users to embed links to files into a conversation, so you could say “I think this document might help you.” In 1945, Vannevar Bush described a hypothetical device with the ability to embed links in files. In 1963, Ted Nelson made up the word “hypertext” as the name for this feature, but the first actual implementation was Douglas Engelbart’s system NLS, developed starting in 1963 and demonstrated in 1968.\nIn 1989, physicist Tim Berners-Lee implemented a hypertext system and named it the World Wide Web. At first it was used only by physicists, to share data and ideas. But by then the Internet was running, so his timing was right, and the name was much more appealing than the technical-sounding “hypertext” (although, as you saw in Unit 4, Lab 1: What Is the Internet?.\nBerners-Lee’s vision was of a Web in which everyone would be both a creator and a consumer of information. But the Web quickly became a largely one-way communication, with a few commercial websites getting most of the traffic. Today, most Web traffic goes to Google, Facebook, CNN, Amazon, and a few others. But some degree of democracy came back to the Web with the invention of the blog (short for “web log”) in which ordinary people can post their opinions and hope that other people will notice them.\n\n\n\n\nFirst Smartphones - First portable devices combining cell phone with pocket computer.\n\n\nSmartphones (1990s)\nThe first device that could be thought of as a smartphone was demonstrated in 1992 and available for sale in 1994. But through the 1990s, people who wanted portable digital devices could get a cell phone without apps, and a “personal digital assistant” (PDA) that did run apps but couldn’t make phone calls. Around 1999, a few companies developed devices with the phone and the PDA in one housing, sharing the screen but essentially two separate computers in one box. The Kyocera 6035, in the photo, was a telephone with the flap closed, but was a Palm Pilot PDA with the flap open.\n\nKyocera 6035  image by KeithTyler, Public Domain\n\n\nIt was in the late 2000s that the two functions of a smartphone were combined in a single processor, with the telephone dialer as just one application-level program.\n\n\n\n\nChess program beats world champion - Deep Fritz program beats Vladimir Kramnik.\n\n\nChess program beats world champion (2006)\nProgrammers have been trying to design and build chess programs since at least 1941 (Konrad Zuse). Over the following decade, several of the leading computer science researchers (including Alan Turing, in 1951) published ideas for chess algorithms, but the first actual running programs came in 1957. In 1978, a chess program won a game against a human chess master, David Levy, but Levy won the six-game match 4½–1½. (The half points mean that one game was a tie.)\nThere are only finitely many possible chess positions, so in principle a program could work through all possible games and produce a complete dictionary of the best possible move for each player from each position. But there are about 1043 board positions, and in 1950, Claude Shannon estimated that there are about 10120 possible games, far beyond the capacity of even the latest, fastest computers. Chess programs, just like human players, can only work out all possible outcomes of the next few moves, and must then make informed guesses about which possible outcome is the best.\nA turning point in computer chess came in 1981, when the program Cray Blitz was the first to win a tournament, beat a human chess master, and earn a chess master rating for itself. The following year, the program Belle became the second computer program with a chess master rating. In 1988 two chess programs, HiTech and Deep Thought, beat human chess grandmasters.\nIn 1997, Deep Blue, an IBM-built special-purpose computer just to play chess, with 30 processors plus 480 special-purpose ICs to evaluate positions, beat world chess champion Garry Kasparov in a six-game match, 3½–2½. Its special hardware allowed Deep Blue to evaluate 200 million board positions per second.\nIn 2006, world chess champion Vladimir Kramnik was defeated 4-2 in a six-game match by Deep Fritz, a chess program running on an ordinary computer. Although the score looks overwhelming, one of the games Deep Fritz won was almost a win for Kramnik, who failed to see a winning move for himself and instead set up the computer for a one-move checkmate. Without this blunder, the match would have been tied 3–3.\nChess programs continue to improve. In 2009, the program Pocket Fritz 4, running on a cell phone, won a tournament and reached grandmaster rating. The program, in contrast to Deep Blue, could evaluate only 20,000 positions per second, so this win shows an improvement in strategy, not just an improvement in brute force computer speed.\n\n\n\n\nSiri - Apple’s personal assistant for the iPhone.\n\n\nSiri (2011)\nSiri is Apple’s personal assistant software. It was first released as a third-party app in the App Store in 2010; Apple then bought the company that made it, and included Siri as part of iOS in 2011.\nSiri was not the first program to understand speech. Dragon Dictate, a speech-to-text program was released in 1990. Research laboratory efforts started much earlier than that; in 1952, a program developed at Bell Labs was able to understand spoken digits. As time went on, the number of words understood by the programs increased. In 2002, Microsoft introduced a version of its Office programs (including Word) that would take spoken dictation.\nIn 2006, the National Security Administration (NSA) started using software to recognize keywords in the telephone calls it spies on.\nThe first cell phone app using speech recognition was Google’s Voice Search in 2008, but it just entered the words it heard in a search bar without trying to understand them. What was new in Siri wasn’t speech recognition, but its ability to understand the sentences spoken by its users as commands to do something: “Call Fred,” “Make an appointment with Sarah for 3pm tomorrow,” and so on.\nReviews of Siri’s performance in 2011 weren’t all good. It had trouble understanding Southern US or Scottish accents. It had a lot of trouble with grammatically ambiguous sentences. Its knowledge of local landmarks was spotty. Nevertheless, it prompted a new surge of buyers of Apple telephones.\nMore recently, Microsoft (Cortana), Amazon (Alexa), and Google (Assistant) have introduced competing speech-based personal assistant programs.\n\n\n\n\nPokémon Go - First widely used augmented reality game.\n\n\nPokémon Go (2016)\nAugmented reality is a technique in which the user sees the real world, but with additional pictures or text superimposed on it. Although it had been used earlier, the first major public exposure to augmented reality was in the game Pokémon Go. Players walk around while looking at their phone screens, which show what the camera is seeing, but with the occasional addition of a cartoon character for the player to catch. Every player looking at the same place sees the same character, because the game uses the phone’s GPS to locate the player.\nThe programming of the game was impressive, but even more impressive was the effort the developers put into placing the cartoon characters at locations around the world that are accessible, open to the public, and not offensive. (Niantic, the company that developed the game, had to remove some locations from their list because of complaints, including cemeteries and Holocaust museums.)\nThe game was downloaded over 500 million times in 2016, and, unusually for a video game, was enthusiastically supported by many players’ parents, because the game gets players out of the house, and getting exercise from walking around. Also, because players congregate at the locations of Pokémon, the game encouraged real-life friendships among players. On the other hand, there were safety concerns, partly because players would cross streets staring into their phones instead of watching for traffic, and partly because certain Pokémon were placed in front of fire stations, or in locations that encouraged players to cross railroad tracks.\n\n\n\n\nIBM Quantum Experience - A 16-qubit quantum computer available for free use on the Internet.\n\n\nIBM Quantum Experience (QX) (2017)\nIBM first put a five-qubit (quantum bit) quantum computer on the Internet in 2016 (see Quantum Computing - IBM Q - US), but the following year they added a much more powerful 16-qubit computer. (The qubit is the equivalent for quantum computers of a bit in ordinary computers.) Anyone can use it, free of charge, although there is always a waiting list for appointments.\nThe usual oversimplified description of quantum computing is that a qubit (pronounced “Q bit”) is “both zero and one at the same time.” It’s closer to say that a qubit is either zero or one, but we don’t know which until it is examined at the end of a computation, at which point it becomes an ordinary bit with a fixed value. This means that a quantum computer with 16 qubits isn’t quite as powerful as 216\nseparate computers trying every possible combination of bit values in parallel. We know that certain exponential-time algorithms can be solved in polynomial time by quantum computers, and we know that certain others can’t, but there is still a big middle ground of exponential-time algorithms for which we don’t know how fast quantum computers can be.\nThe IBM QX has been used for a wide variety of quantum computations, ranging from academic research to a multiplayer Quantum Battleship game.\n\n\n\n\n\n\nKeep in mind this timeline is outdated…  But look at the timeline. The year markers at the bottom are equally spaced, but the number of years between them is not the same. The number of years does change in a regular way from marker to marker: right to left it goes up by a multiple of ten. We call such a scale logarithmic.\n\n\n\nQuestion 2: Answer this on the Google Form\n\n\nDiscussion:\n\n\nDoes a device have to be programmable to be a computer?\n\n\nDoes it have to operate by itself?\n\n\n\n\n\n\nHere are two key ideas:\n\n\nSoftware, in the form of a program stored in the computer’s memory, is, itself, a kind of abstraction. It is what makes a computer usable for more than one purpose.\n\n\nWe didn’t get usable computers until there was an underlying technology (the transistor) small enough, inexpensive enough, and fast enough to support the program abstraction."
  },
  {
    "objectID": "unit-6/lab-2/2-moore.html",
    "href": "unit-6/lab-2/2-moore.html",
    "title": "Page 2: Moore’s Law",
    "section": "",
    "text": "On this page, you’ll learn that computer processor speed and memory size have approximately doubled every year or two, for over 50 years.\nIt turns out that other important measurements have also shown roughly the same doubling behavior, such as processor speed and the amount of memory that fits in a computer. Doubling hardware speed improves the size of problems that you can efficiently handle. The importance of Moore’s Law isn’t just that computers get bigger and faster over time; it’s that engineers can predict how much bigger and faster, which helps them plan the software and hardware development projects to start today, for use five years from now."
  },
  {
    "objectID": "unit-6/lab-2/2-moore.html#limitations-to-moores-law",
    "href": "unit-6/lab-2/2-moore.html#limitations-to-moores-law",
    "title": "Page 2: Moore’s Law",
    "section": "Limitations to Moore’s Law",
    "text": "Limitations to Moore’s Law\n For transistor counts to keep growing, the size of a transistor must keep getting smaller. But chip density and processor speed have run up against an important limit: denser chips and faster signal processing both generate increased heat. Current technology is right at the edge of generating enough heat to melt the chips, destroying the computer. This is why processor chips are surrounded by metal heat sinks (one shown right), which conduct heat away from the chip and into the air.\n\n\n\nHeat sinks aren’t solid blocks of metal; they have spikes and zigzags. Figure out or look up why.\n\n\n\nBecause of the heat problem, chip manufacturers have, at least temporarily, given up on making processors faster. Instead, they are putting more than one processor on a chip. If a computation can carry out the same algorithm on different parts of the data at the same time (in parallel—sort of like sprite clones all running the same script at the same time), then these multicore chips can have an effective speed much greater than the speed of a single processor. A computer you buy today is likely to have two or four processors on one chip. But using multicore efficiently requires that the software be written with multicore in mind.\n\nLearn about limitations to Moore’s Law.\n\nSome time in the next decade, the size of a transistor will approach the size of an atom, but at the atomic scale, transistors won’t work for various reasons. There is a more fundamental limit to the density of transistors on a chip than just heat issues. And similarly, there are fundamental limitations that affect the speed of a processor, such as the speed of electrons through a wire. Moore’s Law optimists argue that technologies other than transistors will become usable before manufacturers hit a fundamental limit. One such approach would involve using an individual electron to represent one bit. Electrons are smaller than atoms, so this technology would allow further dramatic increases in density. Another approach would use light beams rather than electric current to hold bits. But these developments are still far away.\n\n\n\n\n\n\n\n\nAs Gordon Moore observed in 1965, data show that computer processing speeds roughly double every two years. Technology companies use this observation, now known as “Moore’s Law,’ in their planning. From the following, identify which one best describes how technology companies can use Moore’s Law in planning.\n\n\n\nThey can expect to double their profits every two years.\n\n\nNo such thing is possible to predict using Moore’s Law.\n\n\n\n\nThey can anticipate the precise dates when the latest computing advancements will be available and therefore accurately plan their products in advance.\n\n\nNo such thing is possible to predict using Moore’s Law.\n\n\n\n\nThey can base their R&D (Research and Development) targets on expected future processing speeds.\n\n\nCorrect.\n\n\n\n\nThey can expect their costs to double with each increase in processor speed.\n\n\nNo such thing is possible to predict using Moore’s Law."
  },
  {
    "objectID": "unit-6/project/project.html",
    "href": "unit-6/project/project.html",
    "title": "Unit 6 Project: History of Computers Game",
    "section": "",
    "text": "In this project, you’ll create a game that teaches the history of computers, based off what you learned in this unit and self-research.\n\nRecall that from Unit 6, we touched on the history of computers in Lab 2. Now it’s time for you to create a game that can teach someone about the history of computers.\n\n\nBEFORE YOU DO YOUR ACTUAL CODING, Create a write-up detailing your ideas for how to code the project for each event/interaction and outline for the game.\n\n\nRequirements:\nReference specific blocks and solutions for your code (e.g. Will you use a list? What blocks will you create and what will they do? Which built-in blocks will you think can help you create a specific portion of the project?)\nWritten in a logical order.\nAt least 1000 words.\nDue on Friday, 5/19/2023.\nA template for this write-up is in your Google Classroom assignment.\n\n\nCreate a game (the design is up to you!) where the user is either asked computer history trivia questions, or interesting facts about computer history are presented as the game is played. The game cannot be just a quiz game like we did in U2L2. There must be some sort of sprite movement and either dexterity, accuracy, and/or problem-solving challenge apart from answering questions.\n\n\nThe requirements for this game will be to:\nHave creative and artistic value by having relevant sprite costumes involved in the project.\nFrom the various events listed on Unit 6, Lab 2, Page 1, use at least 5 of the events.\nIn addition, find and research two other events that are not listed on Unit 6, Lab 2, Page 1 to add to your project. Do your own research on what you think was a “ground-breaking” or important development.\nAt least one of these must be a development from the last 3 years.\nDue halfway through the finals period (Wednesday 5/31 for Period 4 and Thursday 6/1 for Periods 5 and 6. The second half of the finals period will be to showcase your projects and/or party time.\n\n\nThis final project is worth 50 points on your project/assessment grade."
  }
]