---
title: "Page 3: Representing Whole Numbers"
subtitle: "Unit 4, Lab 4, Page 3"
order: 3
---

::: todo
<p>BH: Keep... But with my original wording in TIF A.</p>

<p>MF: lightly clean up to make the text more concise; do we really need
to teach width and word??</p>
:::

::: learn
<p><strong>On this page,</strong> you'll learn how computers store
nonnegative integers.</p>
:::

<p>As you know, numbers show up everywhere in computer algorithms---even
if numbers aren't the topic. For example, the user may be interested in
a picture, but that picture is an abstraction over numbers. Numbers are
also used to find a specific item in a list. Over the next several
pages, you'll look more closely at numbers inside the computer.</p>

::: {#first .forYouToDo}
<ol>

<li>

::: todo
They have now built factorial in 2.4.1, so this page should either give
them a project with ONLY big nums and ask them to import `!`
or it should ask them to open their U2 Math project and then download
and import bignums. --MF, 6/13/19
:::

::: sidenote
If you look at the code, you'll see that it's a recursive reporter. How
does it work? You first saw recursion on
<a href="/unit-3/lab-1/2-fractal-art.html" title="Unit 3 Lab 1 Page 2: Fractal Art">Unit
3 Lab 1 Page 2: Fractal Art</a>.
:::

<strong></strong> The <em>factorial</em> of a positive integer $n$ (written "$n!$") is the product of all the integers from 1
to $n$. For example:

$$5! = 1 \times 2 \times 3 \times 4 \times 5 = 120$$

<a class="run" href="/prog/4-internet/U4L4-BigNumbers.xml" target="_blank"><img src="/img/icons/load-save.png" title="Click here to load this file. Then save it to your Snap! account." alt="Click here to load this file. Then save it to your Snap! account." class="inline"/></a>
Try out these inputs:<br />

::: sidenote
You might see different results depending on your computer's processor.
:::

<ol>

<li><img src="/img/4-internet/bang5.png" title="(5)! reporting 120" alt="(5)! reporting 120"/></li>

<li><img src="/img/4-internet/bang10.png" title="(10)! reporting 3628800" alt="(10)! reporting 3628800"/></li>

<li><img src="/img/4-internet/bang20.png" title="(20)! reporting 2432902008176640000" alt="(20)! reporting 2432902008176640000"/></li>

<li><img src="/img/4-internet/bang30.png" title="(30)! reporting 2.6525285981219103e+32" alt="(30)! reporting 2.6525285981219103e+32"/></li>

::: todo
This yellowbox had been a stray single line of white text after the FYTD
and before the next heading. I think this is better. --MF, 5/31/20
:::

::: endnote
The `e+` means "times ten to the power of" so this notation means
$2.6525285981219103 \times 10^{32}$ 
$= 265,252,859,812,191,030,000,000,000,000,000$.
:::

</ol>

</li>

</ol>
:::

<h3>Fixed Width Computer Hardware</h3>

::: vocabBig
<p><strong>width</strong>: the number of bits that a CPU processes at a
time</p>

<p><strong>word</strong>: a binary sequence of that many bits</p>
:::

<p>So why did Snap<em>!</em> display 20! in ordinary whole number
representation but 30! in scientific notation? Every computer model is
designed with a certain<strong> width</strong>, the number of bits that
the processor reads from memory or writes into memory at a time. That
number of bits is called a <strong>word</strong>. As of 2016, most new
computers are 64 bits wide. The first microcomputer, sold in 1971, was
four bits wide!</p>

::: endnote
If you got an answer in scientific notation for 20!, you're using a
32-bit computer.
:::

::: ap-standard
DAT-1.B.1
:::

<p>A 64-bit word represents 2<sup>64</sup> different values. We use half
for negative numbers, one for zero, and the rest for positives. Half of
2<sup>64</sup> (which is 2<sup>63</sup> = 9,223,372,036,854,775,808) is
about 9 Ã— 10<sup>18</sup>. That means that the 19 digits of 20! just
barely fit in a 64-bit word. But the 33 digits of 30! don't. So the
computer hardware reports an <em>overflow</em> error, and Snap<em>!</em>
computes an approximation.</p>

::: endnote
<a href="#hint-power-2" data-bs-toggle="collapse" title="Are processor widths always powers of two?">Are
processor widths always powers of two?</a>

::: {#hint-power-2 .collapse}
Processor widths don't have to be a power of two. Some old
computers---the kind you see in old movies that filled a large
room---used 12-bit, 36-bit, and 60-bit words. But modern personal
computers started at 8 bits and the widths have been doubling with each
new generation.
:::
:::

::: forYouToDo
<ol start="2">

<li>Experiment in Snap<em>!</em>. What's the <em>first</em> integer
whose factorial doesn't fit in a word?</li>

</ol>
:::

<h3>Bignums</h3>

::: sidenote
A multiple-word integer is called a <strong>bignum</strong>.
:::

::: ap-standard
DAT-1.B.2
:::

<p>Why can't programming languages just use more than one word to
represent an integer? They can. It's just that a single machine language
instruction can only add one-word numbers. A programming language must
work a little harder to make addition work with multiple-word values.
Not all languages do this, but the highest-level languages do.</p>

::: takeItFurther
<img src="/img/icons/tough-stuff-mini.png" title="Tough Stuff" alt="Tough Stuff" class="float-end"/>

<ol type="A">

<li>A great example of a high-level programming language is
<a href="http://groups.csail.mit.edu/mac/projects/scheme/index.html" title="MIT: Scheme" target="_blank">Scheme</a>.
You can learn it from the free, online book
<a href="https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html" title="Structure and Interpretation of Computer Programs" target="_blank">Structure
and Interpretation of Computer Programs</a>.</li>

</ol>
:::

::: takeNote
The design of a programming language isn't just a question of taste; it
can be a matter of life and death. Between 1985 and 1987, a therapeutic
X-ray machine killed four patients and seriously injured two more
because of several bugs in its software; one of the bugs was that a
counter that was kept in an eight-bit-wide variable would reach its
maximum value of 127 and then <em>overflow</em> to zero instead of 128.
When the variable was zero, an important safety check was not performed.
This would not have happened if the software had been written in a
better programming language.
:::

::: forYouToDo
<ol start="3">

::: sidenoteBig
You can use bignums in any Snap<em>!</em> project by importing the
"Bignums, exact rationals, complex #s" library.

::: todo
<p>You learned to import libraries on the
<a href="/unit-6/lab-1/04-software-libraries.html" title="The Software Domain: Libraries">Libraries</a>
page.</p>

They did not. --MF, 6/13/19
:::
:::

<li>Click on this block in the scripting area:<br />
<img src="/img/4-internet/bignums-true.png" title="USE BIGNUMS (true)" alt="USE BIGNUMS (true)" class="ms-4"/></li>

<li>

Now try `30!` again.<br />
<img src="/img/4-internet/bang30-bignum.png" title="30! reporting 265252859812191058636308480000000" alt="30! reporting 265252859812191058636308480000000" class="ms-4"/>

::: endnote
This (exactly correct) value is different from the (rounded off)
<strong>floating point</strong> value above. (More about floating point
in a moment.)
:::

</li>

<li>

Try `200!`. The reported result won't fit on your screen, but
you can see it this way:

<ol type="a">

<li>Hold down the control key and click the
<img src="/img/4-internet/200-factorial.png" title="() !" alt="() !" class="inline"/>
block.</li>

<li>In the menu that appears, choose "result pic."</li>

<li>An image will download onto your computer or open in a new tab. You
should be able to zoom in on it to read the digits.</li>

</ol>

::: todo
Please remind me again why this is worth doing. It feels clunky after a
whole page of super abstract and ungrounded (i.e., "I can forget this as
soon as the test is over") stuff that I only need to learn "because the
teacher said so." --MF, 5/31/20<br />It's much less clunky now. And the
point is to demonstrate that there's no good excuse for any programming
language to give approximate results to integer computations. -bh
:::

</li>

<li>How many digits are there in `200!`? (Don't count by
hand; you have a computer.)</li>

</ol>
:::
