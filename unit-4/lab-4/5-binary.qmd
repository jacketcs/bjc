---
title: "Page 5: Binary Representation"
subtitle: "Unit 4, Lab 4, Page 5"
order: 5
---

<p>We've looked at how the number of bits used to represent an integer
affects how big it can be. Now we turn to the specific way a single-word
integer is encoded as bits.</p>

::: vocab
: <strong>Bit</strong>

::: ap-standard
DAT-1.A.3
:::

<p>The word "bit" is an abbreviation for <em><strong>bi</strong>nary
digi<strong>t</strong>.</em></p>
:::

::: ap-standard
DAT-1.C.1
:::

<p>People generally use base ten (decimal) digits to write numbers.
Computers use base two (binary).</p>

::: ap-standard
DAT-1.C.3
:::

<p>In <strong>base 10</strong>, there are ten digits (0-9), and each
place is worth <em>ten</em> times as much as the place to its right.
<br />
<img src="/img/4-internet/decimal-places.jpg" title="place values in decimal 3761: 3 1000&apos;s 7 100&apos;s 6 10&apos;s 1 1&apos;s" alt="place values in decimal 3761: 3 1000&apos;s 7 100&apos;s 6 10&apos;s 1 1&apos;s" class="ms-4 noshadow"/></p>

::: ap-standard
DAT-1.C.2
:::

<p>In <strong>binary, base 2</strong>, there are only two digits (0 and
1), and each place is worth <em>two</em> times the place to its
right.<br />
<img src="/img/4-internet/binary-places.jpg" title="place values in binary 1101: 1 8&apos;s 1 4&apos;s 0 2&apos;s 1 1&apos;s" alt="place values in binary 1101: 1 8&apos;s 1 4&apos;s 0 2&apos;s 1 1&apos;s" class="ms-4 noshadow"/></p>

::: endnote
The subscript 2 on 1101<sub>2</sub> means the 1101 is in base 2. Numbers
are normally written in base 10, so a subscript 10 is only used when
needed for clarity.
:::

<h3>Reading Binary</h3>

::: ap-standard
DAT-1.C.5
:::

<p>In <strong>base 10</strong> notation, each place value represents a
<strong>power of ten</strong>: the units place (10<sup>0</sup> = 1), the
tens place (10<sup>1</sup> = 10), the hundreds place (10<sup>2</sup> =
100), the thousands place (10<sup>3</sup> = 1000), etc. So, for
example:</p>

<p>

9827   =   9 × 10<sup>3</sup>  +  8 × 10<sup>2</sup>  +  2 ×
10<sup>1</sup>  +  7 × 10<sup>0</sup>

</p>

::: ap-standard
DAT-1.C.4
:::

<p><img src="/img/4-internet/binary-places(18).jpg" title="place values in binary 10010: 1 16&apos;s 0 8&apos;s 0 4&apos;s 1 2&apos;s 0 1&apos;s" alt="place values in binary 10010: 1 16&apos;s 0 8&apos;s 0 4&apos;s 1 2&apos;s 0 1&apos;s" class="float-end"/>
<strong>Base 2</strong> uses the same idea but with <strong>powers of
two</strong> instead of powers of ten. Binary place values represent the
units place (2<sup>0</sup> = 1), the twos place (2<sup>1</sup> = 2), the
fours place (2<sup>2</sup> = 4), the eights place (2<sup>3</sup> = 8),
the sixteens place (2<sup>4</sup> = 16), etc. So, for example:</p>

<p align="center">

10010<sub>2</sub>   =   <strong>1 × 2<sup>4</sup></strong>  +  0 ×
2<sup>3</sup>  +  0 × 2<sup>2</sup>  +  <strong>1 ×
2<sup>1</sup></strong>  +  0 × 2<sup>0</sup>   =   16  +  2   =  
18<sub>10</sub>

</p>

::: takeNote
<p>To translate from binary (for example, 101101<sub>2</sub>) to base
10, <strong>first, write the number out on paper. Then write out the
binary place values</strong> by <em>doubling left from the units
place</em>:</p>

::: sidenoteBig
101101<sub>2</sub> has only six digits, so we don't need powers of two
to the left of that.
:::



31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQB3AEEAMgBBAEQAVQBBAE0AZwBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEcASQBBAGUAUQBCADAAQQBHAFUAQQBJAEEAQgBwAEEARwA0AEEAWgBBAEIAbABBAEcANABBAGQAQQBBAGkAQQBDAEEAQQBjAHcAQgAxAEEARwAwAEEAYgBRAEIAaABBAEgASQBBAGUAUQBBADkAQQBDAEkAQQBkAEEAQgB5AEEARwBFAEEAYgBnAEIAegBBAEcAdwBBAFkAUQBCADAAQQBHAGsAQQBiAHcAQgB1AEEAQwBBAEEAYwBBAEIAeQBBAEcAOABBAFkAdwBCAGwAQQBIAE0AQQBjAHcAQQBnAEEARwBZAEEAYwBnAEIAdgBBAEcAMABBAEkAQQBCAGkAQQBHAGsAQQBiAGcAQgBoAEEASABJAEEAZQBRAEEAZwBBAEgAUQBBAGIAdwBBAGcAQQBHAEkAQQBZAFEAQgB6AEEARwBVAEEASQBBAEEAeABBAEQAQQBBAEkAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAG8AQQBDAEEAQQBjAHcAQgBqAEEARwA4AEEAYwBBAEIAbABBAEQAMABBAEkAZwBCAGoAQQBHADgAQQBiAEEAQQBpAEEARAA0AEEATQBRAEEAOABBAEMAOABBAGQAQQBCAG8AQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYQBBAEEAZwBBAEgATQBBAFkAdwBCAHYAQQBIAEEAQQBaAFEAQQA5AEEAQwBJAEEAWQB3AEIAdgBBAEcAdwBBAEkAZwBBAGcAQQBIAE0AQQBkAEEAQgA1AEEARwB3AEEAWgBRAEEAOQBBAEMASQBBAFoAZwBCAHYAQQBHADQAQQBkAEEAQQB0AEEASABjAEEAWgBRAEIAcABBAEcAYwBBAGEAQQBCADAAQQBEAG8AQQBiAGcAQgB2AEEASABJAEEAYgBRAEIAaABBAEcAdwBBAE8AdwBBAGkAQQBEADQAQQBNAEEAQQA4AEEAQwA4AEEAZABBAEIAbwBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBhAEEAQQBnAEEASABNAEEAWQB3AEIAdgBBAEgAQQBBAFoAUQBBADkAQQBDAEkAQQBZAHcAQgB2AEEARwB3AEEASQBnAEEAKwBBAEQARQBBAFAAQQBBAHYAQQBIAFEAQQBhAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAZwBBAEkAQQBCAHoAQQBHAE0AQQBiAHcAQgB3AEEARwBVAEEAUABRAEEAaQBBAEcATQBBAGIAdwBCAHMAQQBDAEkAQQBQAGcAQQB4AEEARAB3AEEATAB3AEIAMABBAEcAZwBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBvAEEAQwBBAEEAYwB3AEIAagBBAEcAOABBAGMAQQBCAGwAQQBEADAAQQBJAGcAQgBqAEEARwA4AEEAYgBBAEEAaQBBAEMAQQBBAGMAdwBCADAAQQBIAGsAQQBiAEEAQgBsAEEARAAwAEEASQBnAEIAbQBBAEcAOABBAGIAZwBCADAAQQBDADAAQQBkAHcAQgBsAEEARwBrAEEAWgB3AEIAbwBBAEgAUQBBAE8AZwBCAHUAQQBHADgAQQBjAGcAQgB0AEEARwBFAEEAYgBBAEEANwBBAEMASQBBAFAAZwBBAHcAQQBEAHcAQQBMAHcAQgAwAEEARwBnAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAG8AQQBDAEEAQQBjAHcAQgBqAEEARwA4AEEAYwBBAEIAbABBAEQAMABBAEkAZwBCAGoAQQBHADgAQQBiAEEAQQBpAEEARAA0AEEATQBRAEEAOABBAEMAOABBAGQAQQBCAG8AQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBADgAQQBIAE0AQQBkAEEAQgB5AEEARwA4AEEAYgBnAEIAbgBBAEQANABBAE0AdwBBAHkAQQBEAHcAQQBMAHcAQgB6AEEASABRAEEAYwBnAEIAdgBBAEcANABBAFoAdwBBACsAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBNAFEAQQAyAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEAUABBAEIAegBBAEgAUQBBAGMAZwBCAHYAQQBHADQAQQBaAHcAQQArAEEARABnAEEAUABBAEEAdgBBAEgATQBBAGQAQQBCAHkAQQBHADgAQQBiAGcAQgBuAEEARAA0AEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAOABBAEgATQBBAGQAQQBCAHkAQQBHADgAQQBiAGcAQgBuAEEARAA0AEEATgBBAEEAOABBAEMAOABBAGMAdwBCADAAQQBIAEkAQQBiAHcAQgB1AEEARwBjAEEAUABnAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQASQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBADgAQQBIAE0AQQBkAEEAQgB5AEEARwA4AEEAYgBnAEIAbgBBAEQANABBAE0AUQBBADgAQQBDADgAQQBjAHcAQgAwAEEASABJAEEAYgB3AEIAdQBBAEcAYwBBAFAAZwBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBJAEEAQgBqAEEARwB3AEEAWQBRAEIAegBBAEgATQBBAFAAUQBBAGkAQQBHADQAQQBiAHcAQgBpAEEARwA4AEEAYwBnAEIAawBBAEcAVQBBAGMAZwBBAGkAQQBDAEEAQQBZAHcAQgB2AEEARwB3AEEAYwB3AEIAdwBBAEcARQBBAGIAZwBBADkAQQBDAEkAQQBOAGcAQQBpAEEARAA0AEEAQwBnAEEAOABBAEcAawBBAGIAUQBCAG4AQQBDAEEAQQBZAHcAQgBzAEEARwBFAEEAYwB3AEIAegBBAEQAMABBAEkAZwBCAHAAQQBHADQAQQBaAEEAQgBsAEEARwA0AEEAZABBAEEAZwBBAEcANABBAGIAdwBCAHoAQQBHAGcAQQBZAFEAQgBrAEEARwA4AEEAZAB3AEEAaQBBAEMAQQBBAGMAdwBCAHkAQQBHAE0AQQBQAFEAQQBpAEEAQwA4AEEAWQBnAEIAcQBBAEcATQBBAEwAUQBCAHkAQQBDADgAQQBhAFEAQgB0AEEARwBjAEEATAB3AEEANABBAEMAMABBAGMAZwBCAGwAQQBHAE0AQQBkAFEAQgB5AEEASABNAEEAYQBRAEIAMgBBAEcAVQBBAEwAUQBCAHkAQQBHAFUAQQBjAEEAQgB2AEEASABJAEEAZABBAEIAbABBAEgASQBBAGMAdwBBAHYAQQBIAEkAQQBMAFEAQgAwAEEARwA4AEEATABRAEIAcwBBAEMANABBAGMAQQBCAHUAQQBHAGMAQQBJAGcAQQBnAEEARwBFAEEAYgBBAEIAMABBAEQAMABBAEkAZwBCAHkAQQBHAGsAQQBaAHcAQgBvAEEASABRAEEATABRAEIAMABBAEcAOABBAEwAUQBCAHMAQQBHAFUAQQBaAGcAQgAwAEEAQwBBAEEAWQBRAEIAeQBBAEgASQBBAGIAdwBCADMAQQBDAEkAQQBJAEEAQgAwAEEARwBrAEEAZABBAEIAcwBBAEcAVQBBAFAAUQBBAGkAQQBIAEkAQQBhAFEAQgBuAEEARwBnAEEAZABBAEEAdABBAEgAUQBBAGIAdwBBAHQAQQBHAHcAQQBaAFEAQgBtAEEASABRAEEASQBBAEIAaABBAEgASQBBAGMAZwBCAHYAQQBIAGMAQQBJAGcAQQBnAEEAQwA4AEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAFAAZwBBAD0ACgBzAHUAZgBmAGkAeAA6AA==:31b8e172-b470-440e-83d8-e6b185028602

<p>This means that this number is, in base 10, 32 + 8 + 4 + 1 = 45. So,
101101<sub>2</sub> = 45<sub>10</sub>.</p>
:::

::: forYouToDo
<ol start="1">

::: ap-standard
DAT-1.C part a
:::

<li>

Translate these binary representations into base 10 notation:

<ol>

<li>101<sub>2</sub></li>

<li>111<sub>2</sub></li>

<li>1010011<sub>2</sub></li>

<li>1000000000<sub>2</sub></li>

</ol>

</li>

</ol>
:::

<h3>Writing Binary</h3>

::: takeNote
<p>To translate from base 10 (like 89<sub>10</sub>) to base 2,
<strong>first write out the binary place values</strong> by <em>doubling
left from the units place</em> until you get to a value larger than your
number (128 for this example). <strong>Then think</strong>, "I can take
out a 64, so I write a 1 there, and there's 25 left (89 − 64). I have 0
thirty-twos, because I only have 25. But I can take out 16, and there's
9 left. So, 8 and 1 are the last nonzero bits.</p>

<!--  <div class="sidenoteBig">Either way you are converting (and between any bases), always write the place values right-to-left (just as with units, tens, hundreds, etc.), and always write the number itself left-to-right.</div>  -->

```{=html}
<table class="ms-4" summary="translation process from binary to base 10">
<tbody><tr>
<th scope="col">1</th>
<th scope="col" style="font-weight:normal;">0</th>
<th scope="col">1</th>
<th scope="col">1</th>
<th scope="col" style="font-weight:normal;">0</th>
<th scope="col">1</th>
</tr>
<tr>
<td><strong>32</strong></td>
<td>16</td>
<td><strong>8</strong></td>
<td><strong>4</strong></td>
<td>2</td>
<td><strong>1</strong></td>
</tr>
<tr>
<td class="noborder" colspan="6">
<img class="ms-4 noshadow" src="/img/8-recursive-reporters/r-to-l.png" alt="right-to-left arrow" title="right-to-left arrow">
</td>
</tr>
</tbody></table>
```

::: todo
I'm confused about why the arrow is going from right to left. Will that
confuse students? Most of the work happens going left to right. Maybe
there should be another arrow below the table that goes the other way...
--MF, 2/12/18 It may be left over from when we were using the correct
algorithm, which does go right to left. -bh
:::

<p>Now, read the number off: 1011001<sub>2</sub> = 89<sub>10</sub>.</p>
:::

<p>

Here's a more precise description of this <em>algorithm</em> to find the
base 2 representation of any positive integer:

<ol type="a">

<li>First, find the largest power of two that is less than the
number.</li>

<li>Then, subtract that power of 2 from the number, keep the new number,
and record a 1 in the place for that power of 2.</li>

<!--<div class="sidenote">You could <a href="/unit-6/lab-1/5-binary-counter.html">create a program</a> based on an algorithm like this.</div>   -->



<li>

Then, determine if the next largest power of 2 that is less than the new
number, and:

<ul>

<li>If it does, subtract that power of 2 from the number, keep the new
number, and record a 1 in the place for that power of 2.</li>

<li>If it doesn't, keep the same number, and record a 0 for that power
of 2.</li>

</ul>

Repeat this whole step with the next largest power of 2 until you have a
bit (1 or 0) for all the remaining places down to and including the ones
place (by which point you should have nothing left of the original
number).

</li>

</ol>

</p>

<p>The string of ones and zeros you have recorded is the binary
representation of your original number.</p>

::: forYouToDo
<ol start="2">

::: ap-standard
DAT-1.C part a
:::

<li>

Represent these base 10 numerals in binary (base 2):

<ol>

<li>63</li>

<li>64</li>

<li>65</li>

<li>129</li>

<li>128</li>

<li>127</li>

</ol>

</li>

<li>

::: ap-standard
DAT-1.C part b
:::

Put these numbers in ascending order without converting them to decimal
notation:

<ul>

<li>1011001<sub>2</sub></li>

<li>11001<sub>2</sub></li>

<li>100001<sub>2</sub></li>

<li>101011<sub>2</sub></li>

</ul>

</li>

<li><img src="/img/icons/talk-with-your-partner.png" title="Talk with Your Partner" alt="Talk with Your Partner" class="inline"/>What
was your algorithm for comparing these numbers?</li>

<li>

This question is similar to those you will see on the AP CSP exam.
<!-- Question 1 -->

::: {.assessment-data type="multiplechoice" identifier="Which explains the 0?" hasinlinefeedback="true" maxchoices="1" responseidentifier="ri1" shuffle="false"}
::: prompt
A particular program uses 4 bits to represent whole numbers. When that
program adds the numbers 9 and 7, the result is given as 0. Identify the
best explanation of the result.
:::

::: {.choice identifier="c1"}
::: text
Data was corrupted during the operation due to a technical glitch.
:::

::: feedback
While data corruption is possible, it is not a likely explanation for
the recurrence of the result as one can demonstrate with repeated
attempts to add 9 and 7.
:::
:::

::: {.choice identifier="c2"}
::: text
The result was due to a round-off error.
:::

::: feedback
There is no rounding done here.
:::
:::

::: {.choice identifier="c3"}
::: text
The result was due to an overflow error.
:::

::: feedback
Correct. 9+7=16, which is beyond the capacity of 4 bits to express.
0=(0000)<sub>2</sub> is the first and 15=(1111)<sub>2</sub> is the last
integer expressible in a 4-bit system. 16=(10000)<sub>2</sub> leads to
an overflow.
:::
:::

::: {.choice identifier="c4"}
::: text
A floating-point representation was used to approximate the result.
:::

::: feedback
0 is not an approximation of 16.
:::
:::

::: {.responseDeclaration identifier="ri1"}
::: {.correctResponse identifier="c3"}
:::
:::
:::

</li>

</ol>
:::
