---
title: "Page 2: Creating a Computer Player"
subtitle: "Unit 5, Lab 6, Page 2"
order: 2
---

::: todo
MF: Project still needs to be wrapped up and updated online
:::

::: learn
**On this page**, you'll make the computer play against
the human player.
:::

The game currently allows two human players to take turns playing.
But you don't really need a computer to keep track of moves for two
human players. We want the human player to take turns with a computer
player that will move automatically. To simplify the project, we'll
assume that the human player will always move first (playing X) and that
the computer is playing O.

<h3>Have the Computer Move Randomly</h3>

For now, you'll create a computer player that moves to
<em>random</em> positions on the board. (It won't be a very good player,
but you'll fix that once the structure of the code for the computer's
move is in place.) Once the program decides where it wants to move,
you'll use `broadcast` to send a message to tell the clone
with the matching <var>position number</var> to record a move. (For the
human player, `when I am clicked` serves this purpose, but
the computer's moves aren't prompted by the user clicking a square.)

::: endnote
Recall that clones are temporary copies of a sprite. You learned about
them in
<a href="/unit-3/lab-1/5-building-tic-tac-toe.html" title="Unit 3 Lab 1 Page 5: Building a Tic-Tac-Toe Board">Unit
3 Lab 1 Page 5: Building a Tic-Tac-Toe Board</a>.
:::

<img src="/img/blocks/broadcast.png" title="broadcast" alt="broadcast" class="ms-4"/>
<img src="/img/blocks/when-i-receive.png" title="when I receive" alt="when I receive" class="ms-4"/>

::: sidenote
You first saw `broadcast` and `when I receive` on
<a href="/unit-1/lab-2/2-gossip.html" title="Unit 1 Lab 2 Page 2: Making Programs Talk">Unit
1 Lab 2 Page 2: Making Programs Talk</a>.
:::

`Broadcast` sends out a message to all the sprites in the
project. Any scripts that start with `when I receive` and
have a matching message in the input slot will run.

If you select "any message" from the `when I receive`
dropdown menu and you click the right-pointing triangle, you can use the
`data` variable to access the message.<br />
<img src="/img/blocks/when-i-receive-any-message.png" title="when I receive (any message) (data)" alt="when I receive (any message) (data)" class="ms-4"/>

::: {#first .forYouToDo}
<ol>

<li>If it isn't open already, open your U5L6-TicTacToe project.</li>

<li>Find the script that starts `when I am clicked`. That
script handles a move by the human player. Now start a new script next
to it:<br />
<img src="/img/5-algorithms/when-receive.png" title="when I receive (any message) : if (message) = (square number) [nothing in script slot yet]" alt="when I receive (any message) : if (message) = (square number) [nothing in script slot yet]" class="ms-4"/></li>

<li>Create an abstraction to contain everything inside the
`if` statement from the `when I am (clicked)`
script and use it in both scripts.<br />
<img src="/img/5-algorithms/when-clicked.png" title="when I am (clicked) {
if ((costume #) = 1) {
move in this square
}
}" alt="when I am (clicked) {
if ((costume #) = 1) {
move in this square
}
}" class="ms-4"/>   
<img src="/img/5-algorithms/when-receive-move.png" title="when I am (clicked) {
if ((message) = (square number)) {
move in this square
}
}" alt="when I am (clicked) {
if ((message) = (square number)) {
move in this square
}
}" class="ms-4"/></li>

<li>

::: sidenoteBig
<a href="#hint-how-vacant" data-bs-toggle="collapse" title="How do I know which squares are vacant?">How
do I know which squares are vacant?</a>

::: {#hint-how-vacant .collapse}
Look in <var>board</var>.
:::
:::

In order to debug the `when I receive` script, edit the
`move in this square` block. After your code for Player X's
turn, <em>temporarily</em> pick a random vacant square and use
`broadcast` with that square number as the message. (If your
`when I receive` script is working, the computer will move in
the corresponding square.)

</li>

<li>Take turns with your partner playing Tic-Tac-Toe against the
computer. Fix any bugs you find.</li>

</ol>
:::

<h3>Give the Computer a Simple Strategy</h3>

Instead of having the computer move at random, you will start to give
the computer some strategy. Unlike people, all squares on the
tic-tac-toe board are <em>not</em> created equal. Playing in the center
(position 5) or on a corner (positions 1, 3, 7, or 9) is better than
playing on an edge (positions 2, 4, 6, or 8).<br />
<img src="/img/5-algorithms/position-ranking.png" title="Tic-tac-toe grid showing happy faces in the corners and center and sad faces on the four edges" alt="Tic-tac-toe grid showing happy faces in the corners and center and sad faces on the four edges" class="ms-4 noshadow"/>

::: forYouToDo
<ol start="6">

<li><img src="/img/icons/talk-with-another-pair.png" title="Talk with Another Pair" alt="Talk with Another Pair" class="float-end"/>
Why is playing in the center or a corner better than an edge? Compare
your explanation with that of other students.<br></li>

<li>

Create a
<img src="/img/5-algorithms/best-empty-square.png" title="best empty square" alt="best empty square" class="inline"/>
block that reports the best position on the board that is not yet
filled. Use it as input to your `broadcast` instruction in
place of `random`.

::: endnote
<a href="#hint-empty" data-bs-toggle="collapse" title="Click for a hint about best empty square.">Click
for a hint about `best empty square`.</a>

::: {#hint-empty .collapse}
<img src="/img/5-algorithms/empties.png" title="list (5, 1, 3, 7, 9, 2, 4, 6, 8)" alt="list (5, 1, 3, 7, 9, 2, 4, 6, 8)" class="ms-4"/>
:::
:::

</li>

<li>Take turns playing games against the computer. Make sure the
computer player only chooses an edge if all of the corners and the
center are already filled.</li>

<img src="/img/icons/save-now.png" title="Save your work" alt="Save your work" class="inline"/>

</ol>
:::
