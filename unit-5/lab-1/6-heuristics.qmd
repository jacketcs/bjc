---
title: "Page 6: Heuristic Solutions"
subtitle: "Unit 5, Lab 1, Page 6"
order: 6
---

::: todo
<h3>TG and solutions need to be checked. --MF, 12/19/18</h3>
:::

::: learn
**On this page,** you'll learn that even for
unreasonable time problems, there can still be reasonable time "close
enough" solutions.
:::

::: ap-standard
AAP-4.A.6, AAP-4.A.8, AAP-4.A.9
:::

If a problem can be solved in exponential time, there might be a
different algorithm that can do it in polynomial time (that is, more
quickly), but some problems can't possibly be answered in polynomial
time. It's important to recognize that an exponential time algorithm
**still solves a problem correctly**; it just takes a
unreasonably long time (perhaps even hundreds of years for some inputs,
for example).

Exponential time algorithms can sometimes be replaced by
<em>heuristics</em>, which are polynomial-time algorithms that don't
solve the problem exactly, but give a good enough approximation. But
heuristics are useful only for certain kinds of
problems.<!--Heuristics are useful when a problem has has a solution, and although we can't compute the solution in a practical amount a time, we can still find "pretty good" solutions.-->

::: vocabFullWidth
::: ap-standard
AAP-4.A.2
:::

<ul>

<li>A **decision problem** is a problem with a true/false
answer (for example, "is 5,825,496,221 a prime number?").</li>

<li>An **optimization problem** is one with the goal of
finding the <em>best</em> solution among many (for example, "what's the
best school schedule to place every student into as many of their
requested classes as possible?").</li>

</ul>
:::

::: forYouToDo

(@) For which kind of problems (optimization problems or decision
problems) is a heuristic solution likely to be useful?

:::



An example of a problem for which a heuristic solution is useful is the
**traveling salesperson problem**: For a group of cities,
<em>what is the shortest route</em> for a salesperson to visit every
city and return to their home city? This is good case for heuristics
because:

<ol>

<li>It's clear that there must actually be a shortest route.</li>

<li>There is no known polynomial time algorithm for this problem. (Most
computer scientists think that it's not possible to write one.)</li>

<li>There <em>is</em> a possible heuristic: pick a path at random, then
try to improve it by swapping two cities repeatedly until you can't make
the path better with such small changes.</li>

</ol>

::: endnote
This heuristic is called "hill climbing" because you'll find the best
<em>nearby</em> path (the top of a hill), but there might be a higher
hill (a better path) further away.
:::


<h3>Can All Decision Problems Be Solved?</h3>

As it turns out, not all decision problems (true/false questions) can
be solved with an algorithm.

::: vocabFullWidth
::: ap-standard
AAP-4.B.1, AAP-4.B.2, AAP-4.B.3
:::

A **decidable** problem a decision problem for which
it's possible to write an algorithm that will give a correct output for
all inputs.

An **undecidable** problem is the opposite. It's
<em>not</em> possible to write an algorithm that will give a correct
output for all inputs---even though it might be possible for some of
them.
:::

::: endnote
The question "Is the integer even?" is an example of a <em>decidable
problem</em> because it's possible to write an algorithm that will
determine whether <em>any</em> integer is even.

The question "Will this computer program that takes an input always
eventually report a result?" is an <em>undecidable problem</em>. It's
possible to write such a checking algorithm that would be able to say
for <em>some</em> programs with <em>some</em> inputs whether they will
report a result or get stuck in an infinite loop and never report. But
it turns out that it's not possible write a checking algorithm that will
work for <em>any</em> program with <em>any</em> input. (You can see a
proof that no such checking algorithm---for a computer or a person---can
be written in
<a href="/unit-5/lab-4/1-logical-inconsistency.html" title="Unit 5 Lab 4">Lab
4</a>.)
:::

::: forYouToDo

(@) <img src="/img/icons/talk-with-your-partner.png" title="Talk with Your Partner" alt="Talk with Your Partner" class="inline"/>
What does it mean for a problem to be undecidable?

(@) {{< checkpoint id='1FAIpQLSdeYszCcwbsQTZ2e1Q6ozUbE9qGb-T3QG5eCCSiD7_ecL92zw' >}}

:::
