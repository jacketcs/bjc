---
title: "Page 4: Exactly How Much Faster Is Binary Search?"
subtitle: "Unit 5, Lab 1, Page 4"
order: 4
---

::: todo
<h3>TG and solutions need to be checked. --MF, 12/19/18</h3>
:::

::: learn
**On this page**, you will compare the time required for
binary search and for linear search.

::: todo
TG: Students compare these two algorithms in two ways: empirically (with
clock time) and by counting operations (steps).
:::
:::

::: {#first .forYouToDo}
<ol>

<li>

::: ap-standard
AAP-2.P.3
:::

Locate the
<img src="/img/5-algorithms/linear-search.png" title="linear search for () in &apos;list input slot&apos;" alt="linear search for () in &apos;list input slot&apos;" class="inline"/>
block included in your project, and look inside it. Compare it to the
algorithm you used to count the number of five- or seven-letter words.
This block does the same computation as the `binary search`
block, but it uses the linear algorithm.

</li>

<li>Use
<img src="/img/5-algorithms/computation-time-of.png" title="computation time of &apos;grey ring input slot&apos;" alt="computation time of &apos;grey ring input slot&apos;" class="inline"/>
to test how much time `linear search` takes to find the word
"zebra" in each length list.
31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBRAEEAegBBAEQATQBBAE0AdwBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEcASQBBAGIAdwBCAHkAQQBHAFEAQQBaAFEAQgB5AEEARwBVAEEAWgBBAEEAZwBBAEcATQBBAFoAUQBCAHUAQQBIAFEAQQBaAFEAQgB5AEEAQwBBAEEAYwB3AEIAMABBAEcARQBBAGIAZwBCAGsAQQBHAEUAQQBjAGcAQgBrAEEAQwBJAEEASQBBAEIAegBBAEgAVQBBAGIAUQBCAHQAQQBHAEUAQQBjAGcAQgA1AEEARAAwAEEASQBnAEIAdwBBAEcARQBBAGMAZwBCADAAQQBHAGsAQQBZAFEAQgBzAEEARwB3AEEAZQBRAEEAZwBBAEcASQBBAGIAQQBCAGgAQQBHADQAQQBhAHcAQQBnAEEASABRAEEAWQBRAEIAaQBBAEcAdwBBAFoAUQBBAGcAQQBIAE0AQQBhAEEAQgB2AEEASABjAEEAYQBRAEIAdQBBAEcAYwBBAEkAQQBCADAAQQBHAGcAQQBaAFEAQQBnAEEASABRAEEAYQBRAEIAdABBAEcAVQBBAEkAQQBCADAAQQBHADgAQQBJAEEAQgB5AEEASABVAEEAYgBnAEEAZwBBAEUAdwBBAFMAUQBCAE8AQQBFAFUAQQBRAFEAQgBTAEEAQwBBAEEAVQB3AEIARgBBAEUARQBBAFUAZwBCAEQAQQBFAGcAQQBJAEEAQgBtAEEARwA4AEEAYwBnAEEAZwBBAEcAdwBBAGEAUQBCAHoAQQBIAFEAQQBjAHcAQQBnAEEARwA4AEEAWgBnAEEAZwBBAEcAUQBBAGEAUQBCAG0AQQBHAFkAQQBaAFEAQgB5AEEARwBVAEEAYgBnAEIAMABBAEMAQQBBAGIAQQBCAGwAQQBHADQAQQBaAHcAQgAwAEEARwBnAEEAYwB3AEEAaQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAZwBBAEkAQQBCAHoAQQBHAE0AQQBiAHcAQgB3AEEARwBVAEEAUABRAEEAaQBBAEcATQBBAGIAdwBCAHMAQQBDAEkAQQBQAGcAQgBNAEEARwBVAEEAYgBnAEIAbgBBAEgAUQBBAGEAQQBBAGcAQQBHADgAQQBaAGcAQQBnAEEARQB3AEEAYQBRAEIAegBBAEgAUQBBAFAAQQBBAHYAQQBIAFEAQQBhAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAZwBBAEkAQQBCAHoAQQBHAE0AQQBiAHcAQgB3AEEARwBVAEEAUABRAEEAaQBBAEcATQBBAGIAdwBCAHMAQQBDAEkAQQBQAGcAQQA4AEEARwBNAEEAYgB3AEIAawBBAEcAVQBBAFAAZwBCAE0AQQBHAGsAQQBiAGcAQgBsAEEARwBFAEEAYwBnAEEAZwBBAEYATQBBAFoAUQBCAGgAQQBIAEkAQQBZAHcAQgBvAEEARAB3AEEATAB3AEIAagBBAEcAOABBAFoAQQBCAGwAQQBEADQAQQBJAEEAQgBVAEEARwBrAEEAYgBRAEIAbABBAEQAdwBBAEwAdwBCADAAQQBHAGcAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAEUAQQBNAEEAQQB3AEEARABBAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBAHgAQQBEAEEAQQBMAEEAQQB3AEEARABBAEEATQBBAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAEUAQQBNAEEAQQB3AEEAQwB3AEEATQBBAEEAdwBBAEQAQQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAaABBAEcASQBBAGIAQQBCAGwAQQBEADQAQQAKAHMAdQBmAGYAaQB4ADoA:31b8e172-b470-440e-83d8-e6b185028602</li>

<li><img src="/img/icons/talk-with-your-partner.png" title="Talk with Your Partner" alt="Talk with Your Partner" class="inline"/>
Look at the table. How would you describe what happens to the time as
the input gets bigger?</li>

</ol>
:::

The actual amount of physical time that it takes to solve a problem
depends not only on your algorithm but also on how fast your computer is
and what other programs you have running, etc. Therefore, computer
scientists who want to measure the speed of an algorithm do it in terms
of the number of <em>steps</em>. For example, what we really want to
know about the efficiency of the `linear search` algorithm is
how many times <var>current item</var> is compared to <var>value</var>
(that is, how many times
<img src="/img/5-algorithms/current-item=value.png" title="(current item) = (value)" alt="(current item) = (value)" class="inline py-0"/>
is called).

::: forYouToDo
<ol start="4">

<li>

::: ap-standard
AAP-2.P.3
:::

Add another column to your table. Assuming "zebra" is the <em>last
word</em> in each word list, how many comparisons are made by the
`linear search` algorithm for each length list?
31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBnAEEANQBBAEQARQBBAE0AdwBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEcASQBBAGIAdwBCAHkAQQBHAFEAQQBaAFEAQgB5AEEARwBVAEEAWgBBAEEAZwBBAEcATQBBAFoAUQBCAHUAQQBIAFEAQQBaAFEAQgB5AEEAQwBBAEEAYwB3AEIAMABBAEcARQBBAGIAZwBCAGsAQQBHAEUAQQBjAGcAQgBrAEEAQwBJAEEASQBBAEIAegBBAEgAVQBBAGIAUQBCAHQAQQBHAEUAQQBjAGcAQgA1AEEARAAwAEEASQBnAEIAdwBBAEcARQBBAGMAZwBCADAAQQBHAGsAQQBZAFEAQgBzAEEARwB3AEEAZQBRAEEAZwBBAEcASQBBAGIAQQBCAGgAQQBHADQAQQBhAHcAQQBnAEEASABRAEEAWQBRAEIAaQBBAEcAdwBBAFoAUQBBAGcAQQBIAE0AQQBhAEEAQgB2AEEASABjAEEAYQBRAEIAdQBBAEcAYwBBAEkAQQBCADAAQQBHAGcAQQBaAFEAQQBnAEEASABRAEEAYQBRAEIAdABBAEcAVQBBAEkAQQBCAGgAQQBHADQAQQBaAEEAQQBnAEEARwA0AEEAYgB3AEIAMwBBAEMAQQBBAFkAUQBCAHMAQQBIAE0AQQBiAHcAQQBnAEEASABNAEEAZABBAEIAbABBAEgAQQBBAGMAdwBBAGcAQQBIAFEAQQBiAHcAQQBnAEEASABJAEEAZABRAEIAdQBBAEMAQQBBAFQAQQBCAEoAQQBFADQAQQBSAFEAQgBCAEEARgBJAEEASQBBAEIAVABBAEUAVQBBAFEAUQBCAFMAQQBFAE0AQQBTAEEAQQBnAEEARwBZAEEAYgB3AEIAeQBBAEMAQQBBAGIAQQBCAHAAQQBIAE0AQQBkAEEAQgB6AEEAQwBBAEEAYgB3AEIAbQBBAEMAQQBBAFoAQQBCAHAAQQBHAFkAQQBaAGcAQgBsAEEASABJAEEAWgBRAEIAdQBBAEgAUQBBAEkAQQBCAHMAQQBHAFUAQQBiAGcAQgBuAEEASABRAEEAYQBBAEIAegBBAEMASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGEAQQBBAGcAQQBIAE0AQQBZAHcAQgB2AEEASABBAEEAWgBRAEEAOQBBAEMASQBBAFkAdwBCAHYAQQBHAHcAQQBJAGcAQQBnAEEASABNAEEAZABBAEIANQBBAEcAdwBBAFoAUQBBADkAQQBDAEkAQQBkAHcAQgBvAEEARwBrAEEAZABBAEIAbABBAEMAMABBAGMAdwBCAHcAQQBHAEUAQQBZAHcAQgBsAEEARABvAEEASQBBAEIAdQBBAEcAOABBAGQAdwBCAHkAQQBHAEUAQQBjAEEAQQA3AEEAQwBJAEEAUABnAEIATQBBAEcAVQBBAGIAZwBCAG4AQQBIAFEAQQBhAEEAQQBnAEEARwA4AEEAWgBnAEEAZwBBAEUAdwBBAGEAUQBCAHoAQQBIAFEAQQBQAEEAQQB2AEEASABRAEEAYQBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAGcAQQBJAEEAQgB6AEEARwBNAEEAYgB3AEIAdwBBAEcAVQBBAFAAUQBBAGkAQQBHAE0AQQBiAHcAQgBzAEEAQwBJAEEAUABnAEEAOABBAEcATQBBAGIAdwBCAGsAQQBHAFUAQQBQAGcAQgBNAEEARwBrAEEAYgBnAEIAbABBAEcARQBBAGMAZwBBAGcAQQBGAE0AQQBaAFEAQgBoAEEASABJAEEAWQB3AEIAbwBBAEQAdwBBAEwAdwBCAGoAQQBHADgAQQBaAEEAQgBsAEEARAA0AEEASQBBAEIAVQBBAEcAawBBAGIAUQBCAGwAQQBEAHcAQQBMAHcAQgAwAEEARwBnAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAG8AQQBDAEEAQQBjAHcAQgBqAEEARwA4AEEAYwBBAEIAbABBAEQAMABBAEkAZwBCAGoAQQBHADgAQQBiAEEAQQBpAEEAQwBBAEEAYwB3AEIAMABBAEgAawBBAGIAQQBCAGwAQQBEADAAQQBJAGcAQgAzAEEARwBnAEEAYQBRAEIAMABBAEcAVQBBAEwAUQBCAHoAQQBIAEEAQQBZAFEAQgBqAEEARwBVAEEATwBnAEEAZwBBAEcANABBAGIAdwBCADMAQQBIAEkAQQBZAFEAQgB3AEEARABzAEEASQBnAEEAKwBBAEQAdwBBAFkAdwBCAHYAQQBHAFEAQQBaAFEAQQArAEEARQB3AEEAYQBRAEIAdQBBAEcAVQBBAFkAUQBCAHkAQQBDAEEAQQBVAHcAQgBsAEEARwBFAEEAYwBnAEIAagBBAEcAZwBBAFAAQQBBAHYAQQBHAE0AQQBiAHcAQgBrAEEARwBVAEEAUABnAEEAZwBBAEYATQBBAGQAQQBCAGwAQQBIAEEAQQBjAHcAQQA4AEEAQwA4AEEAZABBAEIAbwBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAeABBAEQAQQBBAE0AQQBBAHcAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAeABBAEQAQQBBAEwAQQBBAHcAQQBEAEEAQQBNAEEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAE0AUQBBAHcAQQBEAEEAQQBMAEEAQQB3AEEARABBAEEATQBBAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAWQBRAEIAaQBBAEcAdwBBAFoAUQBBACsAQQBBAD0APQAKAHMAdQBmAGYAaQB4ADoA:31b8e172-b470-440e-83d8-e6b185028602

</li>

<li><img src="/img/icons/talk-with-your-partner.png" title="Talk with Your Partner" alt="Talk with Your Partner" class="float-end"/>
How would you describe what happens to the number of <em>steps</em> as
the input list gets bigger? Write your hypothesis about the
pattern.</li>

<li>Does what happens with steps match what happens with time? That is,
can you count steps as a measure of time?</li>

</ol>
:::

::: vocabFullWidth
::: ap-standard
AAP-4.A.3
:::

The relationship between the input size and the number of steps
required to solve a problem is the **efficiency** of the
algorithm used to solve the problem.
:::

::: ap-standard
AAP-4.A.4, AAP-4.A.5
:::

Counting the number of steps, as you just did, is an
<em>informal</em>, but perfectly good way to determine the efficiency of
an algorithm. The <em>formal</em> measurement of an algorithm requires a
mathematical proof.

::: takeNote
In this course, you are mostly working with small problems, so it
doesn't matter how efficient the algorithm is. But in the real world,
programmers deal with lists of billions of items, so the efficiency of
an algorithm can make a huge difference.
:::

::: forYouToDo
<ol start="7">

<li>

::: ap-standard
AAP-2.P part a
:::

::: ap-standard
AAP-2.P.3
:::

Now, test how much time `binary search` takes to find the
word "zebra" in the <em>sorted</em> lists, and determine how many
comparisons are made by the algorithm if "zebra" is the last word in
each length list.
31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATgBRAEEAdwBBAEQASQBBAE4AZwBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEcASQBBAGIAdwBCAHkAQQBHAFEAQQBaAFEAQgB5AEEARwBVAEEAWgBBAEEAZwBBAEcATQBBAFoAUQBCAHUAQQBIAFEAQQBaAFEAQgB5AEEAQwBBAEEAYwB3AEIAMABBAEcARQBBAGIAZwBCAGsAQQBHAEUAQQBjAGcAQgBrAEEAQwBJAEEASQBBAEIAegBBAEgAVQBBAGIAUQBCAHQAQQBHAEUAQQBjAGcAQgA1AEEARAAwAEEASQBnAEIAdwBBAEcARQBBAGMAZwBCADAAQQBHAGsAQQBZAFEAQgBzAEEARwB3AEEAZQBRAEEAZwBBAEcASQBBAGIAQQBCAGgAQQBHADQAQQBhAHcAQQBnAEEASABRAEEAWQBRAEIAaQBBAEcAdwBBAFoAUQBBAGcAQQBIAE0AQQBhAEEAQgB2AEEASABjAEEAYQBRAEIAdQBBAEcAYwBBAEkAQQBCADAAQQBHAGcAQQBaAFEAQQBnAEEASABRAEEAYQBRAEIAdABBAEcAVQBBAEkAQQBCAGgAQQBHADQAQQBaAEEAQQBnAEEARwA0AEEAYgB3AEIAMwBBAEMAQQBBAFkAUQBCAHMAQQBIAE0AQQBiAHcAQQBnAEEASABNAEEAZABBAEIAbABBAEgAQQBBAGMAdwBBAGcAQQBIAFEAQQBiAHcAQQBnAEEASABJAEEAZABRAEIAdQBBAEMAQQBBAFQAQQBCAEoAQQBFADQAQQBSAFEAQgBCAEEARgBJAEEASQBBAEIAVABBAEUAVQBBAFEAUQBCAFMAQQBFAE0AQQBTAEEAQQBnAEEARwBZAEEAYgB3AEIAeQBBAEMAQQBBAGIAQQBCAHAAQQBIAE0AQQBkAEEAQgB6AEEAQwBBAEEAYgB3AEIAbQBBAEMAQQBBAFoAQQBCAHAAQQBHAFkAQQBaAGcAQgBsAEEASABJAEEAWgBRAEIAdQBBAEgAUQBBAEkAQQBCAHMAQQBHAFUAQQBiAGcAQgBuAEEASABRAEEAYQBBAEIAegBBAEMASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGEAQQBBAGcAQQBIAE0AQQBZAHcAQgB2AEEASABBAEEAWgBRAEEAOQBBAEMASQBBAFkAdwBCAHYAQQBHAHcAQQBJAGcAQQArAEEARQB3AEEAWgBRAEIAdQBBAEcAYwBBAGQAQQBCAG8AQQBDAEEAQQBiAHcAQgBtAEEAQwBBAEEAVABBAEIAcABBAEgATQBBAGQAQQBBADgAQQBDADgAQQBkAEEAQgBvAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGEAQQBBAGcAQQBIAE0AQQBZAHcAQgB2AEEASABBAEEAWgBRAEEAOQBBAEMASQBBAFkAdwBCAHYAQQBHAHcAQQBJAGcAQQArAEEARAB3AEEAWQB3AEIAdgBBAEcAUQBBAFoAUQBBACsAQQBFAEkAQQBhAFEAQgB1AEEARwBFAEEAYwBnAEIANQBBAEMAQQBBAFUAdwBCAGwAQQBHAEUAQQBjAGcAQgBqAEEARwBnAEEAUABBAEEAdgBBAEcATQBBAGIAdwBCAGsAQQBHAFUAQQBQAGcAQQBnAEEARgBRAEEAYQBRAEIAdABBAEcAVQBBAFAAQQBBAHYAQQBIAFEAQQBhAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAZwBBAEkAQQBCAHoAQQBHAE0AQQBiAHcAQgB3AEEARwBVAEEAUABRAEEAaQBBAEcATQBBAGIAdwBCAHMAQQBDAEkAQQBQAGcAQQA4AEEARwBNAEEAYgB3AEIAawBBAEcAVQBBAFAAZwBCAEMAQQBHAGsAQQBiAGcAQgBoAEEASABJAEEAZQBRAEEAZwBBAEYATQBBAFoAUQBCAGgAQQBIAEkAQQBZAHcAQgBvAEEARAB3AEEATAB3AEIAagBBAEcAOABBAFoAQQBCAGwAQQBEADQAQQBJAEEAQgBUAEEASABRAEEAWgBRAEIAdwBBAEgATQBBAFAAQQBBAHYAQQBIAFEAQQBhAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBNAFEAQQB3AEEARABBAEEATQBBAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBNAFEAQQB3AEEAQwB3AEEATQBBAEEAdwBBAEQAQQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARABFAEEATQBBAEEAdwBBAEMAdwBBAE0AQQBBAHcAQQBEAEEAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEAUABnAEEAPQAKAHMAdQBmAGYAaQB4ADoA:31b8e172-b470-440e-83d8-e6b185028602

</li>

<li><img src="/img/icons/talk-with-your-partner.png" title="Talk with Your Partner" alt="Talk with Your Partner" class="inline"/>
Describe what happens to the time and the number of steps as the input
list gets bigger. Write down your hypothesis.</li>

<li>

::: ap-standard
AAP-2.P.3, AAP-4.A.6
:::

Look back at your tables for the `linear search` and the
`binary search` algorithm, and compare the two search
algorithms:

<ol>

<li>Which has more blocks in its code?</li>

<li>Which runs faster for large inputs?</li>

<li>Which algorithm is more efficient?</li>

</ol>

</li>

<li>

::: ap-standard
AAP-2.P part b
:::

<img src="/img/icons/write-out-thoughts.png" title="Write Out Your Thoughts" alt="Write Out Your Thoughts" class="inline"/>
What are the two requirements to use a binary search?

</li>

</ol>
:::
