---
title: "Page 8: Parallelism"
subtitle: "Unit 5, Lab 1, Page 8"
order: 8
---

::: learn
<p><strong>On this page,</strong> you will learn how running multiple
scripts in parallel can reduce the total time it takes to run an
algorithm.</p>
:::

<p>In Snap<em>!</em>, you are accustomed to seeing a bunch of scripts
that all run independently, which may or may not be associated with
different sprites. This is kind of like <em>parallel computing</em>. So,
if we had a different computer for each sprite, that would be true
parallelism. As it is, there is only one computer, and it divides its
attention among the processes by running a little bit of one and then
running a little bit of the next one. Specifically, it switches at the
bottom of loops (`forever`, `repeat`, etc.).</p>

::: vocabFullWidth
: <strong>Sequential</strong> and <strong>Parallel Computing</strong>

::: ap-standard
CSN-2.A.1, CSN-2.A.2
:::

<p>

This section covers two computational models:

<ul>

<li>In <strong>sequential computing</strong>, operations are performed
in order one at a time.</li>

<li>In <strong>parallel computing</strong>, the program is broken into
smaller steps, some of which are performed at the same time. Modern
computers have multiple processors (2, 4, or 8) in a single computer, so
you can do small-scale parallel processing on the machine on your
desk.</li>

</ul>

</p>
:::

::: ap-standard
CSN-2.A.4
:::

<p>You can compare the efficiency of two different algorithmic solutions
to a problem by comparing the time it takes them to perform the same
task.</p>

::: {#first .forYouToDo}
<ol>

<li>

<!-- Question 1 -->

::: {.assessment-data type="multiplechoice" identifier="How long will this sequential script take to run?" hasinlinefeedback="true" maxchoices="1" responseidentifier="ri1" shuffle="true"}
::: prompt
::: ap-standard
CSN-2.A part b, CSN-2.A.5
:::

How long will this <em>sequential</em> program take to run?<br />
<img src="/img/5-algorithms/quizlet-sequential.png" title="wait (6), wait (4), wait (8)" alt="wait (6), wait (4), wait (8)" class="ms-4"/>
:::

::: {.choice identifier="c1"}
::: text
18
:::

::: feedback
Correct!
:::
:::

::: {.choice identifier="c2"}
::: text
8
:::

::: feedback
A sequential solution takes as long as the sum of the run times of all
of its steps.
:::
:::

::: {.choice identifier="c3"}
::: text
4
:::

::: feedback
A sequential solution takes as long as the sum of the run times of all
of its steps.
:::
:::

::: {.choice identifier="c4"}
::: text
6
:::

::: feedback
A sequential solution takes as long as the sum of the run times of all
of its steps.
:::
:::

::: {.responseDeclaration identifier="ri1"}
::: {.correctResponse identifier="c1"}
:::
:::
:::

</li>

</ol>
:::

::: ap-standard
CSN-2.A.5
:::

<p>The run time of a sequential algorithm is the sum of the run times of
all its steps.</p>

::: forYouToDo
<ol start="2">

<li>

<!-- Question 2 -->

::: {.assessment-data type="multiplechoice" identifier="How long will this parallel script take to run?" hasinlinefeedback="true" maxchoices="1" responseidentifier="ri2" shuffle="true"}
::: prompt
::: ap-standard
CSN-2.A part b, CSN-2.A.6
:::

How long will this <em>parallel</em> program take to run?<br />
<img src="/img/5-algorithms/quizlet-parallel-1.png" title="broadcast (go) and wait, wait (6) secs" alt="broadcast (go) and wait, wait (6) secs" class="ms-4"/>
<img src="/img/5-algorithms/quizlet-parallel-2.png" title="when I receive (go): wait (4) secs" alt="when I receive (go): wait (4) secs" class="ms-4"/>
<img src="/img/5-algorithms/quizlet-parallel-3.png" title="when I receive (go): wait (8) secs" alt="when I receive (go): wait (8) secs" class="ms-4"/>
:::

::: {.choice identifier="c1"}
::: text
18
:::

::: feedback
The two `when I receive` tasks happen in parallel, not one
after the other.
:::
:::

::: {.choice identifier="c2"}
::: text
8
:::

::: feedback
The longest parallel time does matter, but it's not the only thing that
contributes to the total time.
:::
:::

::: {.choice identifier="c3"}
::: text
6
:::

::: feedback
`Broadcast and wait` waits until all the tasks that it
started have finished.
:::
:::

::: {.choice identifier="c4"}
::: text
14
:::

::: feedback
Correct!
:::
:::

::: {.responseDeclaration identifier="ri2"}
::: {.correctResponse identifier="c4"}
:::
:::
:::

</li>

</ol>
:::

::: ap-standard
CSN-2.B.1, CSN-2.B.2, CSN-2.B.3, CSN-2.B.4
:::

::: vocabBig
::: ap-standard
CSN-2.A.3
:::

<p><strong>Distributed computing</strong> is a form of parallel
computing that uses multiple computers (perhaps even spread out around
the world).</p>
:::

<p>Writing a program that does nothing but wait is, of course,
unrealistic, but what <em>is</em> realistic is that in most problems,
there isn't a solution that's purely parallel. Some part of the
computation has to be done sequentially. In the previous question, the
sequential part is modeled by `wait 6 secs`. Parallelization
with this silly example feels trivial, but imagine you work for Google.
Millions of search queries and web page edits have happened today, and
it's your job to have to process them. If they didn't have huge server
farms with thousands of computers in each building, they couldn't keep
up at all. Distributed computing lets you <em>scale</em> to very large
problems.</p>

::: ap-standard
CSN-2.A.6
:::

<p><img src="/img/5-algorithms/sequential-parallel-parts.png" title="diagram of algorithm for finding the average word length in list of 100,000 words: the first two steps (Divide up the wordlist, Send tasks to each other computer) are labeled &apos;sequential&apos;; then arrows indicate branching off into multiple tasks (Count all the &apos;A&apos; words, Count all the &apos;B&apos; words, ..., Count all the &apos;Z&apos; words) that are labeled &apos;parallel&apos;; finally, arrows indicate rejoining these results back into a single thread of three steps (Add the 26 partial results, Divide that sum by the total number of words, Report that average) labeled &apos;sequential&apos;" alt="diagram of algorithm for finding the average word length in list of 100,000 words: the first two steps (Divide up the wordlist, Send tasks to each other computer) are labeled &apos;sequential&apos;; then arrows indicate branching off into multiple tasks (Count all the &apos;A&apos; words, Count all the &apos;B&apos; words, ..., Count all the &apos;Z&apos; words) that are labeled &apos;parallel&apos;; finally, arrows indicate rejoining these results back into a single thread of three steps (Add the 26 partial results, Divide that sum by the total number of words, Report that average) labeled &apos;sequential&apos;" class="noshadow float-end" style="background: white;"/>
As a more specific example, suppose you want to know the average word
length in list of 100,000 words. You can divide the task among several
computers (one for each starting letter). Each computer adds the lengths
of all the words assigned to it (all the "A" words, all the "B" words,
etc). Then one computer has to add the 26 partial results and divide by
the total number of words to find the average. To calculate the run time
of this parallel solution, you would add the run time of the longest
parallel portion (the run time for the letter with the most words) to
the run time of the sequential portion (adding the 26 partial results
and dividing the sum by the total number of words).</p>

::: {.forYouToDo style="clear: right;"}
<p>Because every computation includes a sequential portion, there is a
limit to how much you can speed up a task by adding
<em>processors</em>.</p>

::: vocab
<p>A <strong>processor</strong> is a piece of circuitry inside a
computer that processes the instructions from computer programs.</p>

<p>

<img src="/img/6-computers/Hardware_img/CPU_small.jpg" title="CPU" alt="CPU"/>

</p>

<p><small>Image credit: Wikipedia user Solipsist</small></p>
:::

<ol start="3">

::: ap-standard
CSN-2.A parts a and b, CSN-2.A.4, CSN-2.B.5
:::

<li>Suppose a task includes one minute of sequential steps and a
parallelizable portion that would take an hour if done sequentially.
Fill in this table:
31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATwBBAEEAMgBBAEQAVQBBAE0AUQBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEcASQBBAGIAdwBCAHkAQQBHAFEAQQBaAFEAQgB5AEEARwBVAEEAWgBBAEEAZwBBAEgATQBBAGQAQQBCAGgAQQBHADQAQQBaAEEAQgBoAEEASABJAEEAWgBBAEEAZwBBAEcANABBAGIAdwBCADMAQQBIAEkAQQBZAFEAQgB3AEEAQwBBAEEAWQB3AEIAbABBAEcANABBAGQAQQBCAGwAQQBIAEkAQQBJAGcAQQBnAEEASABNAEEAZABRAEIAdABBAEcAMABBAFkAUQBCAHkAQQBIAGsAQQBQAFEAQQBpAEEARgBRAEEAWQBRAEIAaQBBAEcAdwBBAFoAUQBBAGcAQQBHADgAQQBaAGcAQQBnAEEARwA0AEEAZABRAEIAdABBAEcASQBBAFoAUQBCAHkAQQBDAEEAQQBiAHcAQgBtAEEAQwBBAEEAYwBBAEIAeQBBAEcAOABBAFkAdwBCAGwAQQBIAE0AQQBjAHcAQgB2AEEASABJAEEAYwB3AEEAZwBBAEgAWQBBAGMAdwBBAHUAQQBDAEEAQQBkAEEAQgB2AEEASABRAEEAWQBRAEIAcwBBAEMAQQBBAGMAQQBCAHkAQQBHADgAQQBaAHcAQgB5AEEARwBFAEEAYgBRAEEAZwBBAEgASQBBAGQAUQBCAHUAQQBHADQAQQBhAFEAQgB1AEEARwBjAEEASQBBAEIAMABBAEcAawBBAGIAUQBCAGwAQQBDAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBhAEEAQQBnAEEASABNAEEAWQB3AEIAdgBBAEgAQQBBAFoAUQBBADkAQQBDAEkAQQBZAHcAQgB2AEEARwB3AEEASQBnAEEAKwBBAEUANABBAGQAUQBCAHQAQQBHAEkAQQBaAFEAQgB5AEEAQwBBAEEAYgB3AEIAbQBBAEMAQQBBAFUAQQBCAHkAQQBHADgAQQBZAHcAQgBsAEEASABNAEEAYwB3AEIAdgBBAEgASQBBAGMAdwBBADgAQQBDADgAQQBkAEEAQgBvAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGEAQQBBAGcAQQBIAE0AQQBZAHcAQgB2AEEASABBAEEAWgBRAEEAOQBBAEMASQBBAFkAdwBCAHYAQQBHAHcAQQBJAGcAQQArAEEARgBRAEEAYgB3AEIAMABBAEcARQBBAGIAQQBBAGcAQQBGAFEAQQBhAFEAQgB0AEEARwBVAEEASQBBAEIAUwBBAEcAVQBBAGMAUQBCADEAQQBHAGsAQQBjAGcAQgBsAEEARwBRAEEAUABBAEEAdgBBAEgAUQBBAGEAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBnAEEASQBBAEIAegBBAEcATQBBAGIAdwBCAHcAQQBHAFUAQQBQAFEAQQBpAEEARwBNAEEAYgB3AEIAcwBBAEMASQBBAFAAZwBCAFQAQQBHADgAQQBiAEEAQgAxAEEASABRAEEAYQBRAEIAdgBBAEcANABBAEkAQQBCAFUAQQBIAGsAQQBjAEEAQgBsAEEARAB3AEEATAB3AEIAMABBAEcAZwBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQARQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBADIAQQBEAEUAQQBJAEEAQgB0AEEARwBrAEEAYgBnAEIAMQBBAEgAUQBBAFoAUQBCAHoAQQBDAEEAQQBLAEEAQQB4AEEAQwBBAEEAYQBBAEIAeQBBAEMAQQBBAEsAdwBBAGcAQQBEAEUAQQBJAEEAQgB0AEEARwBrAEEAYgBnAEEAcABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAGMAdwBCAGwAQQBIAEUAQQBkAFEAQgBsAEEARwA0AEEAZABBAEIAcABBAEcARQBBAGIAQQBBAGcAQQBIAE0AQQBiAHcAQgBzAEEASABVAEEAZABBAEIAcABBAEcAOABBAGIAZwBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQB5AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEATQB3AEEAeABBAEMAQQBBAGIAUQBCAHAAQQBHADQAQQBkAFEAQgAwAEEARwBVAEEAYwB3AEEAZwBBAEMAZwBBAE0AdwBBAHcAQQBDAEEAQQBiAFEAQgBwAEEARwA0AEEASQBBAEEAcgBBAEMAQQBBAE0AUQBBAGcAQQBHADAAQQBhAFEAQgB1AEEAQwBrAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEASQBBAEIAeQBBAEcAOABBAGQAdwBCAHoAQQBIAEEAQQBZAFEAQgB1AEEARAAwAEEASQBnAEEAeABBAEQAQQBBAEkAZwBBACsAQQBIAEEAQQBZAFEAQgB5AEEARwBFAEEAYgBBAEIAcwBBAEcAVQBBAGIAQQBBAGcAQQBIAE0AQQBiAHcAQgBzAEEASABVAEEAZABBAEIAcABBAEcAOABBAGIAZwBCAHoAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARABNAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBADAAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEATQBRAEEAdwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBNAGcAQQB3AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAE0AdwBBAHcAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEATgBnAEEAdwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBNAFEAQQB5AEEARABBAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBAHkAQQBEAFEAQQBNAEEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAUQBBAE8AQQBBAHcAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAFkAUQBCAGkAQQBHAHcAQQBaAFEAQQArAEEAQQA9AD0ACgBzAHUAZgBmAGkAeAA6AA==:31b8e172-b470-440e-83d8-e6b185028602</li>

::: ap-standard
CSN-2.B.5
:::

<li>

Consider the law of diminishing returns:

<ol>

<li>If you have one processor and you add one more, how much time do you
save?</li>

<li>If you have 240 processors and you add 240 more, how much time do
you save?</li>

<li><img src="/img/icons/talk-with-your-partner.png" title="Talk with Your Partner" alt="Talk with Your Partner" class="inline"/>
How many processors do you think are worth having for this problem?</li>

</ol>

</li>

::: endnote
<a href="#hint-diminishing" data-bs-toggle="collapse" title="What is the law of diminishing returns?">What
is the law of diminishing returns?</a>

::: {#hint-diminishing .collapse}
The law of diminishing returns is an idea from economics that basically
says that after a certain point, more is not better. For example, if you
got five birthday presents, you might be happier than if you got only
one, but getting more presents isn't necessarily better. Imagine you
received a hundred presents. You'd get bored opening them and probably
feel overwhelmed. And getting a thousand or a million presents wouldn't
make your birthday any happier. The same rule applies to birthday cake!
:::
:::

</ol>
:::

::: vocabFullWidth
::: ap-standard
CSN-2.A.7
:::

Programmers refer to the <strong>speedup</strong> of parallel
solution to describe how many times as fast the parallel solution is
compared to the sequential solution:
$$\text{speedup} = \frac{\text{sequential time}}{\text{parallel time}}$$

:::

<p>Computer hardware is very reliable; it's rare for the hardware to
break down while you're running a program. But in distributed computing
with tens of thousands of computers working on the same problem, it's
<em>likely</em> that one of them will fail. (If the probability of one
computer failing during a program run is 0.0001, and you use 10,000
computers, then the probability of one of them failing is about
0.368---about a third of the time!) So software has to compensate by
checking that the machines are running and reassigning the tasks of a
failed computer to a working one.</p>

<p>

Also, when you are doing things in parallel, the parallel processes can
interfere with each other.

::: endnote
<a href="#hint-banking" data-bs-toggle="collapse" title="An example of interfering processes with banking...">An
example of interfering processes with banking...</a>

::: {#hint-banking .collapse}
<p>If one person withdraws money from an ATM at the same time as someone
at a different ATM withdraws money from the same account, you could run
into a situation like this:
31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBRAEEAeQBBAEQAQQBBAE4AdwBBADMAQQBBAD0APQAKAHAAcgBlAGYAaQB4ADoACgBzAG8AdQByAGMAZQA6AFAAQQBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEASQBBAEIAagBBAEcAdwBBAFkAUQBCAHoAQQBIAE0AQQBQAFEAQQBpAEEARwBJAEEAYgB3AEIAeQBBAEcAUQBBAFoAUQBCAHkAQQBHAFUAQQBaAEEAQQBnAEEASABNAEEAZABBAEIAaABBAEcANABBAFoAQQBCAGgAQQBIAEkAQQBaAEEAQQBnAEEARwA0AEEAYgB3AEIAMwBBAEgASQBBAFkAUQBCAHcAQQBDAEEAQQBZAHcAQgBsAEEARwA0AEEAZABBAEIAbABBAEgASQBBAEkAZwBBAGcAQQBIAE0AQQBkAFEAQgB0AEEARwAwAEEAWQBRAEIAeQBBAEgAawBBAFAAUQBBAGkAQQBGAEEAQQBiAHcAQgB6AEEASABNAEEAYQBRAEIAaQBBAEcAdwBBAFoAUQBBAGcAQQBIAE0AQQBaAFEAQgB4AEEASABVAEEAWgBRAEIAdQBBAEcATQBBAFoAUQBBAGcAQQBHADgAQQBaAGcAQQBnAEEARwBVAEEAZABnAEIAbABBAEcANABBAGQAQQBCAHoAQQBDAEEAQQBkAHcAQgBvAEEARwBVAEEAYgBnAEEAZwBBAEgAUQBBAGQAdwBCAHYAQQBDAEEAQQBRAFEAQgBVAEEARQAwAEEASQBBAEIAMABBAEgASQBBAFkAUQBCAHUAQQBIAE0AQQBZAFEAQgBqAEEASABRAEEAYQBRAEIAdgBBAEcANABBAGMAdwBBAGcAQQBHAGcAQQBZAFEAQgB3AEEASABBAEEAWgBRAEIAdQBBAEMAQQBBAGEAUQBCAHUAQQBDAEEAQQBjAEEAQgBoAEEASABJAEEAWQBRAEIAcwBBAEcAdwBBAFoAUQBCAHMAQQBDAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQBnAEEASABJAEEAYgB3AEIAMwBBAEgATQBBAGMAQQBCAGgAQQBHADQAQQBQAFEAQQBpAEEARABrAEEASQBnAEEAZwBBAEgATQBBAGQAQQBCADUAQQBHAHcAQQBaAFEAQQA5AEEAQwBJAEEAZABnAEIAbABBAEgASQBBAGQAQQBCAHAAQQBHAE0AQQBZAFEAQgBzAEEAQwAwAEEAWQBRAEIAcwBBAEcAawBBAFoAdwBCAHUAQQBEAG8AQQBJAEEAQgB0AEEARwBrAEEAWgBBAEIAawBBAEcAdwBBAFoAUQBBADcAQQBDAEEAQQBZAGcAQgB2AEEASABJAEEAWgBBAEIAbABBAEgASQBBAEwAUQBCAHMAQQBHAFUAQQBaAGcAQgAwAEEARABvAEEASQBBAEEAdwBBAEQAcwBBAEkAQQBCAGkAQQBHADgAQQBjAGcAQgBrAEEARwBVAEEAYwBnAEEAdABBAEgAUQBBAGIAdwBCAHcAQQBEAG8AQQBJAEEAQQB3AEEARABzAEEASQBBAEIAaQBBAEcAOABBAGMAZwBCAGsAQQBHAFUAQQBjAGcAQQB0AEEARwBJAEEAYgB3AEIAMABBAEgAUQBBAGIAdwBCAHQAQQBEAG8AQQBJAEEAQQB3AEEARABzAEEASQBnAEEAKwBBAEQAdwBBAGEAUQBCAHQAQQBHAGMAQQBJAEEAQgBqAEEARwB3AEEAWQBRAEIAegBBAEgATQBBAFAAUQBBAGkAQQBHAGsAQQBiAGcAQgBzAEEARwBrAEEAYgBnAEIAbABBAEMAQQBBAGIAZwBCAHYAQQBIAE0AQQBhAEEAQgBoAEEARwBRAEEAYgB3AEIAMwBBAEMASQBBAEkAQQBCAHoAQQBIAEkAQQBZAHcAQQA5AEEAQwBJAEEATAB3AEIAaQBBAEcAbwBBAFkAdwBBAHQAQQBIAEkAQQBMAHcAQgBwAEEARwAwAEEAWgB3AEEAdgBBAEQAVQBBAEwAUQBCAGgAQQBHAHcAQQBaAHcAQgB2AEEASABJAEEAYQBRAEIAMABBAEcAZwBBAGIAUQBCAHoAQQBDADgAQQBkAEEAQgBwAEEARwAwAEEAWgBRAEEAdABBAEcARQBBAGMAZwBCAHkAQQBHADgAQQBkAHcAQQB1AEEASABBAEEAYgBnAEIAbgBBAEMASQBBAEkAQQBCAGgAQQBHAHcAQQBkAEEAQQA5AEEAQwBJAEEAWgBBAEIAdgBBAEgAYwBBAGIAZwBCADMAQQBHAEUAQQBjAGcAQgBrAEEAQwBBAEEAYwBBAEIAdgBBAEcAawBBAGIAZwBCADAAQQBHAGsAQQBiAGcAQgBuAEEAQwBBAEEAWQBRAEIAeQBBAEgASQBBAGIAdwBCADMAQQBDAEEAQQBiAEEAQgBoAEEARwBJAEEAWgBRAEIAcwBBAEcAVQBBAFoAQQBBAGcAQQBDAGMAQQBkAEEAQgBwAEEARwAwAEEAWgBRAEEAbgBBAEMASQBBAEkAQQBCADAAQQBHAGsAQQBkAEEAQgBzAEEARwBVAEEAUABRAEEAaQBBAEcAUQBBAGIAdwBCADMAQQBHADQAQQBkAHcAQgBoAEEASABJAEEAWgBBAEEAZwBBAEgAQQBBAGIAdwBCAHAAQQBHADQAQQBkAEEAQgBwAEEARwA0AEEAWgB3AEEAZwBBAEcARQBBAGMAZwBCAHkAQQBHADgAQQBkAHcAQQBnAEEARwB3AEEAWQBRAEIAaQBBAEcAVQBBAGIAQQBCAGwAQQBHAFEAQQBJAEEAQQBuAEEASABRAEEAYQBRAEIAdABBAEcAVQBBAEoAdwBBAGkAQQBDAEEAQQBMAHcAQQArAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBvAEEAQwBBAEEAYwB3AEIAagBBAEcAOABBAGMAQQBCAGwAQQBEADAAQQBJAGcAQgBqAEEARwA4AEEAYgBBAEEAaQBBAEQANABBAFEAUQBCAFUAQQBFADAAQQBJAEEAQQB4AEEARAB3AEEATAB3AEIAMABBAEcAZwBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBvAEEAQwBBAEEAYwB3AEIAagBBAEcAOABBAGMAQQBCAGwAQQBEADAAQQBJAGcAQgBqAEEARwA4AEEAYgBBAEEAaQBBAEQANABBAFEAUQBCAFUAQQBFADAAQQBJAEEAQQB5AEEARAB3AEEATAB3AEIAMABBAEcAZwBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEcAdwBBAGIAdwBCAHYAQQBHAHMAQQBjAHcAQQBnAEEASABVAEEAYwBBAEEAZwBBAEgAUQBBAGEAQQBCAGwAQQBDAEEAQQBZAGcAQgBoAEEARwB3AEEAWQBRAEIAdQBBAEcATQBBAFoAUQBBAGcAQQBDAGcAQQBKAEEAQQB4AEEARABBAEEATQBBAEEAcABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQgBzAEEARwA4AEEAYgB3AEIAcgBBAEgATQBBAEkAQQBCADEAQQBIAEEAQQBJAEEAQgAwAEEARwBnAEEAWgBRAEEAZwBBAEcASQBBAFkAUQBCAHMAQQBHAEUAQQBiAGcAQgBqAEEARwBVAEEASQBBAEEAbwBBAEMAUQBBAE0AUQBBAHcAQQBEAEEAQQBLAFEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEcATQBBAGEAQQBCAGwAQQBHAE0AQQBhAHcAQgB6AEEAQwBBAEEAYQBRAEIAbQBBAEMAQQBBAGQAQQBCAG8AQQBHAFUAQQBJAEEAQgBoAEEARwAwAEEAYgB3AEIAMQBBAEcANABBAGQAQQBBAGcAQQBIAEkAQQBaAFEAQgB4AEEASABVAEEAWgBRAEIAegBBAEgAUQBBAFoAUQBCAGsAQQBDAEEAQQBLAEEAQQBrAEEARABRAEEATQBBAEEAcABBAEMAQQBBAGEAUQBCAHoAQQBDAEEAQQBZAFEAQgAyAEEARwBFAEEAYQBRAEIAcwBBAEcARQBBAFkAZwBCAHMAQQBHAFUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEIAaABBAEcAUQBBAGEAZwBCADEAQQBIAE0AQQBkAEEAQgB6AEEAQwBBAEEAZABBAEIAbwBBAEcAVQBBAEkAQQBCAGkAQQBHAEUAQQBiAEEAQgBoAEEARwA0AEEAWQB3AEIAbABBAEMAQQBBAEsAQQBBAGsAQQBEAFkAQQBNAEEAQQBwAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAFoAQQBCAHAAQQBIAE0AQQBjAEEAQgBsAEEARwA0AEEAYwB3AEIAbABBAEgATQBBAEkAQQBCADAAQQBHAGcAQQBaAFEAQQBnAEEARwAwAEEAYgB3AEIAdQBBAEcAVQBBAGUAUQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQgBqAEEARwBnAEEAWgBRAEIAagBBAEcAcwBBAEkAQQBCAHAAQQBHAFkAQQBJAEEAQgAwAEEARwBnAEEAWgBRAEEAZwBBAEcARQBBAGIAUQBCAHYAQQBIAFUAQQBiAGcAQgAwAEEAQwBBAEEAYwBnAEIAbABBAEgARQBBAGQAUQBCAGwAQQBIAE0AQQBkAEEAQgBsAEEARwBRAEEASQBBAEEAbwBBAEMAUQBBAE0AZwBBAHcAQQBDAGsAQQBJAEEAQgBwAEEASABNAEEASQBBAEIAaABBAEgAWQBBAFkAUQBCAHAAQQBHAHcAQQBZAFEAQgBpAEEARwB3AEEAWgBRAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBHAEUAQQBaAEEAQgBxAEEASABVAEEAYwB3AEIAMABBAEgATQBBAEkAQQBCADAAQQBHAGcAQQBaAFEAQQBnAEEARwBJAEEAWQBRAEIAcwBBAEcARQBBAGIAZwBCAGoAQQBHAFUAQQBJAEEAQQBvAEEAQwBRAEEATwBBAEEAdwBBAEMAawBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQgBrAEEARwBrAEEAYwB3AEIAdwBBAEcAVQBBAGIAZwBCAHoAQQBHAFUAQQBjAHcAQQBnAEEASABRAEEAYQBBAEIAbABBAEMAQQBBAGIAUQBCAHYAQQBHADQAQQBaAFEAQgA1AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBZAFEAQgBpAEEARwB3AEEAWgBRAEEAKwBBAEEAPQA9AAoAcwB1AGYAZgBpAHgAOgA=:31b8e172-b470-440e-83d8-e6b185028602</p>

<p>Because ATM 2 changed the account balance after ATM 1 looked up the
balance, ATM 1 didn't know that the balance had been changed. The bank
account ended up a balance of \$80 even though it started at \$100 and a
total of \$60 was withdrawn.</p>
:::
:::

</p>

<p>For these reasons and others, a parallel program is harder to write
and debug than a sequential program.</p>

::: forYouToDo
<ol start="5">

::: ap-standard
CSN-2.B
:::

<li><img src="/img/icons/talk-with-your-partner.png" title="Talk with Your Partner" alt="Talk with Your Partner" class="inline"/>
Identify some benefits and potential challenges of parallel and
distributed computing.
<img src="/img/icons/write-out-thoughts.png" title="Write Out Your Thoughts" alt="Write Out Your Thoughts" class="inline"/></li>

</ol>
:::

::: ifTime
<ol start="6">

<li>

<!-- Question 3 -->

::: {.assessment-data type="multiplechoice" identifier="What is the speedup for this parallel solution when compared to the sequential solution?" hasinlinefeedback="true" maxchoices="1" responseidentifier="ri3" shuffle="true"}
::: prompt
What is the <em>speedup</em> for this parallel solution when compared to
the sequential solution?<br />

<ul>

<li>Sequential solution:
<img src="/img/5-algorithms/quizlet-sequential.png" title="wait (6), wait (4), wait (8)" alt="wait (6), wait (4), wait (8)" class="inline"/></li>

<li>Parallel solution:
<img src="/img/5-algorithms/quizlet-parallel-1.png" title="broadcast (go) and wait, wait (6) secs" alt="broadcast (go) and wait, wait (6) secs" class="inline"/>
<img src="/img/5-algorithms/quizlet-parallel-2.png" title="when I receive (go): wait (4) secs" alt="when I receive (go): wait (4) secs" class="inline"/>
<img src="/img/5-algorithms/quizlet-parallel-3.png" title="when I receive (go): wait (8) secs" alt="when I receive (go): wait (8) secs" class="inline"/></li>

</ul>
:::

::: {.choice identifier="c1"}
::: text
$\frac{18}{14}$
:::

::: feedback
Correct!
:::
:::

::: {.choice identifier="c2"}
::: text
$\frac{14}{18}$
:::

::: feedback
Speedup is calculated by dividing the sequential time by the parallel
time.
:::
:::

::: {.choice identifier="c3"}
::: text
$\frac{18}{6}$
:::

::: feedback
`Broadcast and wait` waits until all the tasks that it
started have finished.
:::
:::

::: {.choice identifier="c4"}
::: text
$\frac{18}{8}$
:::

::: feedback
The longest parallel time does matter, but it's not the only thing that
contributes to the total parallel time.
:::
:::

::: {.responseDeclaration identifier="ri3"}
::: {.correctResponse identifier="c1"}
:::
:::
:::

</li>

</ol>
:::
