---
title: "Page 4: Analyzing Data"
subtitle: "Unit 5, Lab 3, Page 4"
order: 4
---

::: learn
**On this page**, you will ask and answer more demanding
questions about your dataset and learn new tools.
:::



::: ap-standard
DAT-2.D.4
:::

You can ask questions about a specific subset of your data by
<em>filtering</em> the data using `keep`. Filtering is a
powerful technique for finding information and recognizing patterns in
data. For example, filtering can help you answer questions like "What is
the average city MPG <em>for just the Subarus</em> in this
dataset?"<br />
<img src="/img/5-algorithms/average-mpg-of-subarus-reporting.png" title="average of (column (9) of table (keep items (field (14) of record &apos;empty list input slot&apos; = Subaru) from (data of table (cars))) reporting 19.704..." alt="average of (column (9) of table (keep items (field (14) of record &apos;empty list input slot&apos; = Subaru) from (data of table (cars))) reporting 19.704..." class="ms-4"/><br />
Column 14 is the "Make" of the vehicle, so we `keep` all the
records from <var>cars</var> for which the 14<sup>th</sup> field is
"Subaru." Then, we take column 9 of those records (the "City MPG") and
find their average.



::: endnote
Notice that there are many digits in the answer above. How many
digits are given in the table for each car's MPG? An important rule in
data science is not to claim more precision in a result than is
warranted by the given data, so this answer should be rounded to 19.



You might find expressions with many nested function calls easier to
build by using the `pipe` function.
<a href="#hint-pipe" data-bs-toggle="collapse" title="What would this look like using pipe?">What
would this look like using `pipe`?</a>

::: {#hint-pipe .collapse}
You can use the `pipe` function from the "Bar Charts"
library to work through your data analysis one function at at
time:<br />
<img src="/img/5-algorithms/pipe-cars-reporting.png" title="pipe (data of table (cars)) → (keep items (field (14) of record &apos;list input slot&apos; = Subaru) from &apos;list input slot&apos;) (column (9) of table ()) (average of ()) reporting 19.49..." alt="pipe (data of table (cars)) → (keep items (field (14) of record &apos;list input slot&apos; = Subaru) from &apos;list input slot&apos;) (column (9) of table ()) (average of ()) reporting 19.49..." class="ms-4"/><br />
The `pipe` function sends the `data from table
(`<var>cars</var>`)` through `keep` to
filter it for just the Subarus, through `column (9) of table`
to get just the "City MPG" for those Subarus, and finally through
`average` to get the average of those Subaru MPG values.

Recall that the empty input slots in each function are filled by the
output of the previous function (or the starting dataset in the case of
the first function): the empty slots in the `keep` function
are both filled by `data from table
(`<var>cars</var>`)`; the empty slot in `column
(9) of table` is filled by the output of `keep`; and
the empty slot in `average` is filled by the output of
`column (9) of table`. It's like a pipe of made of pieces
connected together; the data goes in one end and works through each
function, computing a new value at each step.
:::


:::

::: forYouToDo
<ol>

<li>Open your U5L3-Data-Processing project if it isn't open
already.</li>

<li>

::: sidenote
You learned about loading libraries and exporting/importing blocks on
<a href="/unit-2/lab-4/2-math-predicates.html" title="Unit 2 Lab 4 Page 2: Making a Mathematical Library">Unit
2 Lab 4 Page 2: Making a Mathematical Library</a>.
:::

Add the tools you will need for this project:

<ol>

<li>Load the "Bar Charts" library from the "Libraries..." option in the
Snap<em>!</em> File menu
(<img src="/img/1-introduction/file_button.png" title="File button" alt="File button" style="height:1.6em;"/>).</li>

<li>Import the `maximum of list`, `minimum of
list`, `sum of list`, and `average of list`
blocks from your U2L4-MathTools project.</li>

</ol>

</li>

::: ap-standard
DAT-2.D
:::

<li><img src="/img/icons/talk-with-your-partner-mini.png" title="Talk with Your Partner" alt="Talk with Your Partner" class="inline"/>
Determine one question you can answer by **looking at a single
column of a <em>portion</em> ** of your data set, and then build
code to answer that question. You can nest your function or use
`pipe`. (Or try both!)</li>

::: endnote
<a href="#hint-portion" data-bs-toggle="collapse" title="Click for example questions to ask about a portion of a single column.">Click
for example questions to ask about a portion of a single column.</a>

::: {#hint-portion .collapse}
<ul>

<li>What's the average MPG that <em>Volvos</em> in this database get in
the city? (You'd need `average`.)</li>

<li>What's the year of the oldest <em>Honda</em> in this dataset? (You'd
need `minimum`.)</li>

<li>How many <em>2009</em> cars in this dataset have manual
transmission?</li>

</ul>

Notice that the column you use to filter the data (such as year)
doesn't have to be the column you are asking about (such as
transmission).

```{=html}
<!--NOT NEEDED IF WE KEEP IMPORTING IN #2 ABOVE
You built `average` on <a href="/unit-2/lab-4/3-other-math-reporters.html" title="Unit 2 Lab 4 Page 3: Other Mathematical Reporters">Unit 2 Lab 4 Page 3: Other Mathematical Reporters</a>.-->
```
:::
:::

</ol>
:::

Sometimes, you want to keep a subset of your data (such as "Which
cars were made in 2010?"), but other times, you just want one item that
matches your requirement, often because what you really want to know is
whether <em>any</em> items match, and as soon as you find one, the
answer is "yes" (such as "Were any electric cars made in 2010?").
Snap<em>!</em> has a higher order function
<img src="/img/blocks/find-first.png" title="find first item () in &apos;list input slot&apos;" alt="find first item () in &apos;list input slot&apos;" class="inline py-0"/>
that works similarly to `keep`, but it reports only the first
item that's found, so it can be faster.

::: endnote
`Find first` is equivalent to `item (1) of
(keep)`. It is a higher order function like `keep`,
`map`, and `combine` because it takes a function
(a predicate) as input.

::: todo
Images need alt/title text. --MF, 6/27/19 and new column numbers -bh
:::



<a href="#hint-findfirst" data-bs-toggle="collapse" title="Click for an example of keep vs. find first.">Click
for an example of `keep` vs. `find first`.</a>

::: {#hint-findfirst .collapse}
<img src="/img/5-algorithms/keep-cars-2010.png" class="inline"/>
<img src="/img/5-algorithms/find-first-car-2010.png" class="inline"/>
:::


:::

::: ap-standard
DAT-2.D.6
:::



You can access or change data to create new information by using:

<ul>

<li>`Map` to transform every element of a data set (such as
doubling every element in a list, or extracting the parent's email from
every student record)</li>

<li>`Keep` or `find first` to filter a data set
(such as keeping only the positive numbers from a list, or keeping only
students who signed up for band from a database of all students)</li>

<li>`Combine` to combine or compare data in some way (such as
adding up a list of numbers, or finding the student who has the highest
GPA)</li>

<li>Visualization tools to present the data set in a chart, graph, or
other visual representation (such as by using `bar chart`,
which you will learn on the next page)</li>

</ul>



::: forYouToDo
<ol start="4">

::: ap-standard
DAT-2.D
:::

<li><img src="/img/icons/talk-with-your-partner-mini.png" title="Talk with Your Partner" alt="Talk with Your Partner" class="inline"/>
Ask and answer a question that you can answer by looking at a single
column of a portion of your data set and **examining just the
first matching item**. Build code to answer your question.</li>

<img src="/img/icons/save-now.png" title="Save your work" alt="Save your work" class="float-end"/>

<li><img src="/img/icons/write-out-thoughts-mini.png" alt="Write out your thoughts."/>Pick
a computing innovation that uses a lot of data. Write about what kinds
of data it uses, where those data come from, and how the application
transforms the data to extract information.</li>

</ol>
:::
