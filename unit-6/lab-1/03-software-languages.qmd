---
title: "The Software Domain: Programming Languages"
subtitle: "Unit 6, Lab 1, Page 3"
order: 3
---

::: todo
KEEP SUCH THAT needs to be fixed. --MF, 6/22/20
:::

::: todo
<p>This page is getting long. After we finish going through the
standards, we should consider how much of this is really needed. --MF,
1/29/19</p>

<p>Also, is this a page where we might want to make any of the "not a
baby language" argument? --MF, 1/29/19</p>

<p>MF: lightly clean up to make the text more concise</p>
:::

::: learn
<strong>On this page</strong>, you will consider why there are different
programming languages and look at some of the ways that languages
differ.
:::

<p>JavaScript, Python, Snap<em>!</em>, C++, Java, Scheme, Prolog... Why
are there so many programming languages? Why don't we just pick the best
one, or design a new best one, and stick with that?</p>

<p>Some languages have very narrow purposes; these are called
<em>special-purpose</em> languages. For example, Microsoft Word has a
programming language built into it called "Word macros" that's just for
generating data and formatting in a document. Likewise, HTML (Hypertext
Markup Language) is just for structuring web pages.</p>

<p><em>General-purpose</em> languages don't have a narrow purpose in
mind. In a sense, these languages are all the same: if an algorithm can
be expressed in one language, it can be expressed in all of them.
Several basic features are included in nearly all languages including
arithmetic operators (<code>+</code>, <code>-</code>, <code>×</code>,
<code>÷</code>) and Boolean operators (<code>and</code>,
<code>or</code>, <code>not</code>). The differences among languages are
mostly about <em>levels of abstraction.</em></p>

## High-Level and Low-Level Languages

<img src="/img/6-computers/language-continuum.png" title="diagram of common programming languages listed in order of abstraction level; there is a vertical double-headed arrow on the right indicating that the first row of languages (Snap!, Scheme, Prolog, Ruby, Lisp) are &apos;high level languages,&apos; the second row (JavaScript, Python, Java, Alice, Scratch) falls between, and the third row (C, C++) are &apos;low level languages&apos;" alt="diagram of common programming languages listed in order of abstraction level; there is a vertical double-headed arrow on the right indicating that the first row of languages (Snap!, Scheme, Prolog, Ruby, Lisp) are &apos;high level languages,&apos; the second row (JavaScript, Python, Java, Alice, Scratch) falls between, and the third row (C, C++) are &apos;low level languages&apos;" class="imageRight noshadow" width="400"/>

<p>A <em>high-level language</em> (like Snap<em>!</em> or Scheme)
includes many built-in abstractions that make it easier to focus on the
problem you want to solve rather than on how computer hardware works. A
<em>low-level language</em> (like C) has fewer abstractions, requiring
you to know a lot about your computer's architecture to write a
program.</p>

#### <strong>Why do programmers use high-level languages?</strong>

<p>High-level languages can produce <em>safer</em> programs---ones that
are less likely to have bugs---because the abstractions manage messy
details that can trip up programmers.</p>

::: endnote
<p>High-level languages reduce bugs in memory use. Older, low-level
languages required the programmer to manage the use of the computer's
memory with instructions saying "get me a block of memory big enough to
hold 100 numbers" and other instructions saying "okay, I'm finished
using this block of memory; it can be allocated for some other
purpose."</p>

<p>This is a nuisance to have to think about, and human programmers are
bad at it. In low level languages, a very common bug is for one part of
a program to say "I'm done with this block of memory" while another part
of the program is still using it. High-level languages take care of this
for us by using a technique called <em>garbage collection</em> that puts
the computer in charge of knowing when a block of memory is no longer in
use.</p>
:::

<p>High-level languages can also make programming much more convenient
because they offer more abstractions. One example is <em>higher-order
functions</em> (like <code>map</code>, <code>keep</code>,
<code>combine</code>, and <code>for each</code>), which allow the
programmer to write shorter, cleaner code.</p>

::: {#first .forYouToDo}
<ol>

<li>

<!-- Question 1 -->

::: {.assessment-data type="multiplechoice" identifier="Identify this higher-order function." hasinlinefeedback="true" maxchoices="1" responseidentifier="ri1" shuffle="false"}
::: prompt
This code is similar to a higher-order procedure that you have learned.
<img src="/img/icons/talk-with-your-partner.png" title="Talk with Your Partner" alt="Talk with Your Partner" class="inline"/>
Identify the procedure that this code imitates:<br />
<img src="/img/6-computers/hard-way.png" title="script variables (result) (index); set result to (list); set index to (0); repeat (length of (words)){ change index by (1); add (join (item (index) of (words)) s) to (result)}; report (result)" alt="script variables (result) (index); set result to (list); set index to (0); repeat (length of (words)){ change index by (1); add (join (item (index) of (words)) s) to (result)}; report (result)" class="indent"/>

::: endnote
<ul>

<li>You learned about <code>for each</code> in
<a href="/unit-2/lab-2/3-traversing-list.html" title="Unit 2 Lab 2: Checking Each Quiz Answer">Unit
2 Lab 2: Checking Each Quiz Answer</a>.</li>

<li>You learned about <code>keep</code> in
<a href="/unit-2/lab-3/5-keeping-list-items.html" title="Keeping Items from a List">Unit
2 Lab 3: <code>Keep</code>ing Items from a List</a>.</li>

<li>You learned about <code>map</code> in
<a href="/unit-3/lab-2/5-mapping-over-list.html" title="Transforming Every List Item">Unit
3 Lab 2: Transforming Every List Item</a>.</li>

<li>You learned about <code>combine</code> in
<a href="/unit-2/lab-4/3-other-math-reporters.html" title="Unit 2 Lab 4: Other Mathematical Reporters">Unit
2 Lab 4: Other Mathematical Reporters</a>.</li>

</ul>
:::
:::

::: {.choice identifier="c1"}
::: text
<img src="/img/6-computers/for-each-s.png" title="for each (word) of (words) {report ((join (word) (s)))}" alt="for each (word) of (words) {report ((join (word) (s)))}"/>
:::

::: feedback
Does the original script report a list of words or does it report each
word separately? Which would this do?
:::
:::

::: {.choice identifier="c2"}
::: text
<img src="/img/6-computers/keep-s.png" title="report (keep items such that (join () (s)) from (words))" alt="report (keep items such that (join () (s)) from (words))"/>
:::

::: feedback
<code>Keep</code> takes a predicate (a question) as input and reports a
list of the items that make that predicate true.
:::
:::

::: {.choice identifier="c3"}
::: text
<img src="/img/6-computers/map-s.png" title="report (map (join () (s)) over (words))" alt="report (map (join () (s)) over (words))"/>
:::

::: feedback
Correct!
:::
:::

::: {.choice identifier="c4"}
::: text
<img src="/img/6-computers/combine-s.png" title="report (combine with (join () (s)) items of (words))" alt="report (combine with (join () (s)) items of (words))"/>
:::

::: feedback
<code>Combine</code> takes a predicate with two blanks (like
<img src="/img/3-lists/plus.png" title="() + ()" alt="() + ()" class="inline"/>
or
<img src="/img/3-lists/join.png" title="join () ()" alt="join () ()" class="inline"/>)
as input and reports the result of combining all the list items using
that function (for example, adding them all together or joining them all
into one text string).
:::
:::

::: {.responseDeclaration identifier="ri1"}
::: {.correctResponse identifier="c4"}
:::
:::
:::

</li>

</ol>
:::

<p>In C, you can do this the long way:<br />
<img src="/img/6-computers/hard-way.png" title="script variables (result) (index); set result to (list); set index to (0); repeat (length of (words)){ change index by (1); add (join (item (index) of (words)) s) to (result)}; report (result)" alt="script variables (result) (index); set result to (list); set index to (0); repeat (length of (words)){ change index by (1); add (join (item (index) of (words)) s) to (result)}; report (result)" class="indent"/><br />
but C doesn't let you take an expression (like
<img src="/img/6-computers/join-with-s.png" title="join () (s)" alt="join () (s)" class="inline"/>
or
<img src="/img/6-computers/5-times-blank-plus-7.png" title="((5) × ( )) + (7)" alt="((5) × ( )) + (7)" class="inline"/>)
and stick it into a higher-order function like <code>map</code>:<br />
<img src="/img/6-computers/map-s.png" title="report (map (join () (s)) over (words))" alt="report (map (join () (s)) over (words))" class="indent"/></p>

#### <strong>Why do programmers use low-level languages?</strong>

<p>The best reason to use low-level languages is to write operating
systems (like Windows, Mac OS X, Android, or iOS). You'll learn more
about Operating systems on the
<a href="/unit-6/lab-1/05-software-OS.html" title="The Software Domain: Operating Systems">The
Software Domain: Operating Systems</a> page.</p>

::: endnote
<a href="#hint-low-level-lang" data-bs-toggle="collapse" title="Why else would a programmer use a low-level language?">Why
else would a programmer use a low-level language?</a>

::: {#hint-low-level-lang .collapse}
::: todo
I still think this is too long and needs wordsmithing the next time
around. --MF, 11/16/17
:::

<p>Application programmers don't often decide "I'm going to write this
program in a low level language." They may simply not realize that
higher levels of abstraction are possible. For example, a computer's
hardware limits the size of numbers that its arithmetic unit can add in
a single step. Four billion---about ten digits---is a common size limit
for integers. Programmers who use Java, JavaScript, Python, C or C++ may
think that this limit is unavoidable. But programmers who use really
high level languages, such as Scheme or Common Lisp, know that they can
do arithmetic on numbers with millions or billions of digits, limited
only by the size of the computer's memory. As you will see later, Snap!
has a library that lets it do this, too.</p>

<p>People often say that different programming languages are good for
different kinds of programs, but except for 3-D video processing (next
paragraph), it's hard to imagine an application that would be harmed by
things like garbage collection or higher-order functions. There are just
a few cases in which people deliberately design languages with features
that might not be wanted for some applications. Here's one such example:
In Snap!, a text string of only digits is considered to be a number; you
can do arithmetic on it. In a language for learners, requiring explicit
conversion between data types just makes it harder to get started
programming. But most languages that aren't meant for beginners keep the
two data types separate.</p>

<p><em>Programmers may think that abstraction is too slow.</em> This
used to be true, and programmers of 3-D video games still need all the
speed they can get because their programs strain the speed of modern
computers. So they often write part of their programs, the part that
actually puts pictures on the screen, in machine language, just for
speed. But most programmers write applications that don't strain
computers at all. When you send an email or text message, the limiting
factor is how fast you can type, not how fast your computer can run
programs.</p>

::: todo
<strong>From Michael:</strong><br /> Somewhere the was a comment about
the speed of abstraction. IMO, we shouldn't have this in the curriculum
-- but probably in the teachers guide. "Abstraction slows things down"
is an argument students won't hear if they're just learning CS from BJC.
By trying to address the argument before it happens, we just introduced
to students who I think would have no reason to believe otherwise.

<ul>

<li>Brian thinks that Michael would not have this concern if the link
was still, "There are also less-good reasons." However, Mary and Paul
find that text problematic. Brian and Mary agreed to record and ignore
this issue for now. --MF, 11/21/17</li>

</ul>
:::

<p><em>Legacy code.</em> Programmers in industry hardly ever get to
write a program from the beginning. Much more often, they're maintaining
a program that somebody wrote years ago, and that person might not even
work for that company anymore. In the long run, it might be better to
rewrite the program in a more modern language, but in the short run,
there's no time to do that so they end up modifying the existing code in
the existing programming language.</p>
:::
:::

#### <strong>What is machine language?</strong>

<p>Both high- and low-level languages are used by <em>people</em> to
write computer programs. Computer hardware understands a sort of
ultra-low-level language, called <em>machine language.</em> Special
programs called <em>compilers</em> and <em>interpreters</em> are used to
translate human programming languages into machine language to be run by
the computer.</p>

::: endnote
<a href="#hint-compilers" data-bs-toggle="collapse" title="Read more about compilers and interpreters">Read
more about compilers and interpreters.</a>

::: {#hint-compilers .collapse}
<p>A <em>compiler</em> is a program that takes a high- or low-level
language program (the <em>source code</em>) as input and produces a
machine language program (the <em>object code</em>) as its output. Once
produced, the machine language program can be run repeatedly without
needing to be compiled again.</p>

<p>An <em>interpreter</em> is a program that takes a high- or low-level
program as input and carries out machine language instructions as needed
to run the program. It does not produce a stand-alone machine language
program as output and will have to repeat the process again next
time.</p>

<p>

<a href="#hint-compilers-better" data-bs-toggle="collapse" title="Does that mean compilers are better?">Does
that mean compilers are better?</a>

::: {#hint-compilers-better .collapse}
<p>It <em>would</em> mean that, except that the process of writing a
program includes <em>debugging.</em> During the debugging, an
interpreter can help by providing information about the progress of the
program, like the visual stepping feature in Snap<em>!</em>, and
allowing small changes in the source program without having to run a
compiler repeatedly. For example, in Snap<em>!</em> you can drag a block
into a script while it's running, and a compiler couldn't allow
that.</p>

<p>For professional programmers, the best arrangement is to have
<em>both</em> an interpreter and a compiler for the same language. The
programmer writes and debugs the program using an interpreter, and once
they're sure it works, they compile it. Then, the compiler can run
slowly, putting a lot of effort into <em>optimizing</em> the machine
language code, so they get the fastest possible compiled program.</p>
:::

</p>
:::
:::

::: forYouToDo
<ol start="2">

<li>

These questions are similar to those you will see on the AP CSP exam.
<!-- Question 1 -->

::: {.assessment-data type="multiplechoice" identifier="Which is TRUE about a low-level language?" hasinlinefeedback="true" maxchoices="1" responseidentifier="ri1" shuffle="false"}
::: prompt
Which of the following statements are correct about a low-level
programming language compared with a high-level programming language?

<ol style="list-style:upper-roman;">

<li>Low-level language programs are generally harder for people to
understand than programs written in a high-level language.</li>

<li>A low-level language provides programmers with more abstractions
than a high-level language.</li>

<li>Low-level language programs are generally harder to debug than
programs written in a high-level language.</li>

</ol>
:::

::: {.choice identifier="c1"}
::: text
I only.
:::

::: feedback
I is true but is it the only true statement?
:::
:::

::: {.choice identifier="c2"}
::: text
I and III only.
:::

::: feedback
Correct. Both statements are correct and opposite of II is true as
high-level languages are more expressive and able in creating
abstractions.
:::
:::

::: {.choice identifier="c3"}
::: text
II and III only.
:::

::: feedback
Opposite of II is true as high-level languages are more expressive and
able in creating abstractions.
:::
:::

::: {.choice identifier="c4"}
::: text
I, II, and III.
:::

::: feedback
Opposite of II is true as high-level languages are more expressive and
able in creating abstractions.
:::
:::

::: {.responseDeclaration identifier="ri1"}
::: {.correctResponse identifier="c2"}
:::
:::
:::

<!-- Question 2 -->

::: {.assessment-data type="multiplechoice" identifier="Which is TRUE about a program written in a high-level programming language?" hasinlinefeedback="true" maxchoices="1" responseidentifier="ri2" shuffle="false"}
::: prompt
A program is written in a high-level programming language. Identify the
correct statement about the program?
:::

::: {.choice identifier="c1"}
::: text
The program can also be written in machine language using binary code,
but then it will be less easily understood by people.
:::

::: feedback
Correct. Binary code is very hard to read for humans.
:::
:::

::: {.choice identifier="c2"}
::: text
The program can also be written in machine language using binary code,
which will decrease the possibility of mistakes.
:::

::: feedback
Mistakes will likely increase as it is harder for humans to make sense
of binary code.
:::
:::

::: {.choice identifier="c3"}
::: text
The program cannot be written in binary code as only data can be
represented by using binary notation.
:::

::: feedback
Entire program can be converted to binary code. Such a code is actually
the only code a machine can understand.
:::
:::

::: {.choice identifier="c4"}
::: text
Simple parts of the program can be written in binary code, but control
elements such as conditionals, loops must be expressed in a high-level
programming language.
:::

::: feedback
Entire program can be converted to binary code. Such a code is actually
the only code a machine can understand.
:::
:::

::: {.responseDeclaration identifier="ri2"}
::: {.correctResponse identifier="c1"}
:::
:::
:::

</li>

</ol>
:::

## Code Readability

<p>

One of the features that Snap<em>!</em> gives you is that you can put
title text in the middle of a block.<br />

::: sidenote
You built <code>polygon</code> in
<a href="/unit-1/lab-3/5-remix-your-pinwheel.html" title="Graphics and Art">Unit
1: Graphics and Art</a>.
:::

<img src="/img/6-computers/polygon-30-15.png" title="polygon, sides: (30) side length: (15)" alt="polygon, sides: (30) side length: (15)" class="indent"/><br />
Compared to some other languages where the function has one name at the
beginning and then all the inputs, this increases clarity and
readability of your function.<br />

<p class="indent">

<code>polygon(30, 15)</code>

</p>

</p>

::: pseudop
Also, in a text-based language, when you see something like 3 × 5 + 4,
you need to have memorized that multiplication comes before addition (so
the answer is 19). If you want it the other way, you have to use
parentheses: 3 × (5 + 4) to get 27. In a blocks-based language, the
blocks show you what was intended:
<img src="/img/6-computers/3-times(5+4).png" title="3 × (5 + 4)" alt="3 × (5 + 4)" class="inline nopadtb"/>.
You've learned order of operations for +, --, ×, and ÷ in math class,
but you probably haven't learned order of operations for an expression
like this:

```{=html}
<pre class="inline">x &amp;&amp; y &lt;&lt; z</pre>
```
. How you know which comes first

```{=html}
<pre class="inline">&amp;&amp;</pre>
```
or

```{=html}
<pre class="inline">&lt;&lt;</pre>
```
?
:::

::: endnote
<a href="#hint-ooo" data-bs-toggle="collapse" title="">How <em>do</em> you
know?</a>

::: {#hint-ooo .collapse}
<p>See for example,
<a href="https://en.cppreference.com/w/c/language/operator_precedence" title="C Operator Precedence" target="_blank">C
Operator Precedence</a>.</p>
:::
:::

## Parallelism

::: commentBig
5.2.1H A process may execute on one or several CPUs.
:::

<p>One reason to create new programming languages is to make it easier
to write <em>parallel</em> programs---programs that can use more than
one processor at the same time. Today in 2017, computers and smartphones
have <em>multicore</em> processor chips that may include 2, 4, or 8
processors all running code at the same time. (The number of processors
will increase even further over time.) Big companies such as Google use
parallelism even more; they have clusters of thousands of computers, all
working on the same program.</p>

::: commentBig
4.1.2D Different languages are better suited for expressing different
algorithms.<br />4.1.2E Some programming languages are designed for
specific domains and are better for expressing algorithms in those
domains.
:::

<p><em>Functional</em> programming languages (languages in which
programmers never change the value of a variable) are particularly well
suited to parallelism because there's no danger of one processor
changing the value of a variable that another processor is using. We've
introduced you to functional programming techniques wherever possible
throughout this course, including writing reporters and using
higher-order functions (<code>map</code>, <code>keep</code>, and
<code>combine</code>).</p>

::: endnote
Snap<em>!</em> isn't a functional programming language, but it would be
if the Snap<em>!</em> developers removed just a few procedures,
including <code>set</code> (instead, you'd use input variables of
recursive functions) and these four list commands: <code>add</code>,
<code>delete</code>, <code>insert</code>, and <code>replace</code>
(instead, you'd use <code>in front of</code>, <code>item 1 of</code>,
and <code>all but first of</code> to report a new list with different
values instead of changing the old list).
:::

</body>
