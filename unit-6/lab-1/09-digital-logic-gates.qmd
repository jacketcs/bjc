---
title: "Page 9: The Digital Domain: Logic Gates"
subtitle: "Unit 6, Lab 1, Page 9"
order: 9
---

::: todo
<p>MF: lightly clean up to make the text more concise</p>

<p>Do we have any interest in salvaging the logic gates/XOR project that
Selim and I worked on? --MF, 3/25/19</p>
:::

::: learn
<strong>On this page,</strong> you review three Boolean operators
(`and`, `or`, and `not`) and learn how
they relate to electronic circuitry.
:::

<p>In a circuit with billions of transistors, or even thousands of
transistors, hardware designers can't think about each individual
transistor. Just as programmers use abstraction, hardware architects use
abstractions, in which a group of transistors and other circuit elements
are considered as a single thing. What kinds of things? There are
basically two kinds, one for memory and one for computation.</p>

::: endnote
<a href="#hint-memory" data-bs-toggle="collapse" title="Learn more about memory">Learn
more about memory.</a>

::: {#hint-memory .collapse}
<p>Memory is made out of <em>flip-flops.</em> A flip-flop is a circuit
that has two stable states, on and off. An input signal can tell it to
turn on, turn off, or change whatever it's state is. Once that happens,
the flip-flop stays in the new state until it gets another signal. It
has an output that reflects its state: on if the flip-flop is on, off if
it's off.</p>
:::
:::

## Boolean Operators

<p>The circuits to do computation are more interesting. They compute
<em>functions,</em> just like reporters in Snap<em>!</em>. Since
computers do a lot of arithmetic, you might think that the basic circuit
functions would be addition, subtraction, multiplication, and division,
but that's not the case. Of course there <em>are</em> circuits to do
those things, but they're made out of <em>logic gates:</em> circuits
that compute <strong>Boolean functions</strong>: `and`,
`or`, and `not`.</p>

<p>The reason that Boolean functions are considered more fundamental is
that their inputs and outputs can be represented with a single wire
going into or out from the circuit. That's not true about arithmetic
functions. If you consider a voltage on a wire as meaning 1, and no
voltage as meaning 0, then you have to see that an adder will have
<em>three</em> possible output values, because 1+1=2, which is neither 0
nor 1. By contrast, if you consider a voltage on a wire as meaning True,
and no voltage as meaning False, then the output from a Boolean function
of two inputs can still only be True or False, so only one output wire
is needed.</p>

<p>You saw some examples in
<a href="/unit-2/lab-3/1-what-is-predicate.html" title="What's a Predicate?">Unit
2 Lab 3: Making Decisions by Using Predicates</a>: `AND`,
`OR`, and `NOT`:<br />
<img src="/img/6-computers/logical-operators/and-TT-reporting.png" title="(true) AND (true) reporting true" alt="(true) AND (true) reporting true" class="ms-4"/>
<img src="/img/6-computers/logical-operators/and-TF-reporting.png" title="(true) AND (false) reporting false" alt="(true) AND (false) reporting false" class="ms-4"/>
<img src="/img/6-computers/logical-operators/and-FF-reporting.png" title="(false) AND (false) reporting false" alt="(false) AND (false) reporting false" class="ms-4"/>
<img src="/img/6-computers/logical-operators/or-TT-reporting.png" title="(true) OR (true) reporting true" alt="(true) OR (true) reporting true" class="ms-4"/>
<img src="/img/6-computers/logical-operators/or-TF-reporting.png" title="(true) OR (false) reporting true" alt="(true) OR (false) reporting true" class="ms-4"/>
<img src="/img/6-computers/logical-operators/or-FF-reporting.png" title="(false) OR (false) reporting false" alt="(false) OR (false) reporting false" class="ms-4"/>
<img src="/img/6-computers/logical-operators/not-T-reporting.png" title="NOT (true) reporting false" alt="NOT (true) reporting false" class="ms-4"/>
<img src="/img/6-computers/logical-operators/not-F-reporting.png" title="NOT (false) reporting true" alt="NOT (false) reporting true" class="ms-4"/></p>

::: endnote
<strong>Some other ways to think about Boolean operators:</strong> It is
possible to emulate Boolean operations electronically and these
operations are sometimes represented as truth tables (either with
true/false or ones/zeros).

<ul>

<li>

<a href="#hint-truth-tables-and" data-bs-toggle="collapse" title="A circuit emulation and  truth tables for and">A
circuit emulation and truth tables for `and`.</a>

::: {#hint-truth-tables-and .collapse}
<p>This electric circuit shows a simplified way to emulate the Boolean
operator `and` electronically. The two switches are in
<em>series</em>; if both of the switches are on, the current flows and
the light bulb turns on.</p>

::: todo
<p>I wonder about making this simpler by including a pic of a battery in
the animation. Students have a lot to manage in this endnote
<em>without</em> this extra piece of information that isn't critical for
the learning they are supposed to be doing. --MF, 12/4/17<br />
<img title="Electric circuit for AND: The animation shows a single loop of wire connecting a light bulb, a battery, and two switches in series (one after the other). When either or both switch is open, the light is off, and when both switches are closed, the light turns on." alt="Electric circuit for AND: The animation shows a single loop of wire connecting a light bulb, a battery, and two switches in series (one after the other). When either or both switch is open, the light is off, and when both switches are closed, the light turns on." class="ms-4" data-gifffer="/img/6-computers/LogicGates_img/Animations/gif/AND_Animation_MF.gif"/></p>
:::

::: sidenote
This symbol in the circuit diagrams represents a battery.<br />
<img src="/img/6-computers/LogicGates_img/Circuits/BatterySymbol.png" title="Battery symbol in a circuit" alt="Battery symbol in a circuit" height="75"/>
<img src="/img/6-computers/LogicGates_img/Circuits/Battery.png" title="Battery" alt="Battery" height="75"/>
:::

<img title="Electric circuit for AND: The animation shows a single loop of wire connecting a light bulb, a battery, and two switches in series (one after the other). When either or both switch is open, the light is off, and when both switches are closed, the light turns on." alt="Electric circuit for AND: The animation shows a single loop of wire connecting a light bulb, a battery, and two switches in series (one after the other). When either or both switch is open, the light is off, and when both switches are closed, the light turns on." class="ms-4" data-gifffer="/img/6-computers/LogicGates_img/Animations/gif/AND_Animation.gif" width="333" height="250"/>

::: sidenote
These two tables are identical. One just shows the same pattern with
true/false and the other with ones/zeros.
:::

31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATgB3AEEAeQBBAEQAYwBBAE0AdwBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEgAUQBBAGMAZwBCADEAQQBIAFEAQQBhAEEAQQBpAEEAQwBBAEEAYwB3AEIAMQBBAEcAMABBAGIAUQBCAGgAQQBIAEkAQQBlAFEAQQA5AEEAQwBJAEEAZABBAEIAeQBBAEgAVQBBAGQAQQBCAG8AQQBDAEEAQQBkAEEAQgBoAEEARwBJAEEAYgBBAEIAbABBAEMAQQBBAFoAZwBCAHYAQQBIAEkAQQBJAEEAQgBCAEEARQA0AEEAUgBBAEEAZwBBAEgAYwBBAGEAUQBCADAAQQBHAGcAQQBJAEEAQgBtAEEARwBFAEEAYgBBAEIAegBBAEcAVQBBAEwAdwBCADAAQQBIAEkAQQBkAFEAQgBsAEEAQwBJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYQBBAEEAZwBBAEgATQBBAFkAdwBCAHYAQQBIAEEAQQBaAFEAQQA5AEEAQwBJAEEAWQB3AEIAdgBBAEcAdwBBAFoAdwBCAHkAQQBHADgAQQBkAFEAQgB3AEEAQwBJAEEASQBBAEIAagBBAEcAOABBAGIAQQBCAHoAQQBIAEEAQQBZAFEAQgB1AEEARAAwAEEASQBnAEEAeQBBAEMASQBBAFAAZwBCAHAAQQBHADQAQQBjAEEAQgAxAEEASABRAEEAYwB3AEEAOABBAEMAOABBAGQAQQBCAG8AQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYQBBAEEAZwBBAEgATQBBAFkAdwBCAHYAQQBIAEEAQQBaAFEAQQA5AEEAQwBJAEEAWQB3AEIAdgBBAEcAdwBBAEkAZwBBACsAQQBHADgAQQBkAFEAQgAwAEEASABBAEEAZABRAEIAMABBAEQAdwBBAEwAdwBCADAAQQBHAGcAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGEAQQBBAGcAQQBIAE0AQQBZAHcAQgB2AEEASABBAEEAWgBRAEEAOQBBAEMASQBBAFkAdwBCAHYAQQBHAHcAQQBJAGcAQQBnAEEASABNAEEAZABBAEIANQBBAEcAdwBBAFoAUQBBADkAQQBDAEkAQQBkAHcAQgBwAEEARwBRAEEAZABBAEIAbwBBAEQAbwBBAE0AUQBBAHcAQQBEAEEAQQBjAEEAQgA0AEEARABzAEEASQBnAEEAKwBBAEUARQBBAFAAQQBBAHYAQQBIAFEAQQBhAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAZwBBAEkAQQBCAHoAQQBHAE0AQQBiAHcAQgB3AEEARwBVAEEAUABRAEEAaQBBAEcATQBBAGIAdwBCAHMAQQBDAEkAQQBJAEEAQgB6AEEASABRAEEAZQBRAEIAcwBBAEcAVQBBAFAAUQBBAGkAQQBIAGMAQQBhAFEAQgBrAEEASABRAEEAYQBBAEEANgBBAEQARQBBAE0AQQBBAHcAQQBIAEEAQQBlAEEAQQA3AEEAQwBJAEEAUABnAEIAQwBBAEQAdwBBAEwAdwBCADAAQQBHAGcAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAbwBBAEMAQQBBAGMAdwBCAGoAQQBHADgAQQBjAEEAQgBsAEEARAAwAEEASQBnAEIAagBBAEcAOABBAGIAQQBBAGkAQQBDAEEAQQBjAHcAQgAwAEEASABrAEEAYgBBAEIAbABBAEQAMABBAEkAZwBCADMAQQBHAGsAQQBaAEEAQgAwAEEARwBnAEEATwBnAEEAeABBAEQAQQBBAE0AQQBCAHcAQQBIAGcAQQBPAHcAQQBpAEEARAA0AEEAUQBRAEEAZwBBAEQAdwBBAFkAdwBCAHYAQQBHAFEAQQBaAFEAQQArAEEARwBFAEEAYgBnAEIAawBBAEQAdwBBAEwAdwBCAGoAQQBHADgAQQBaAEEAQgBsAEEARAA0AEEASQBBAEIAQwBBAEQAdwBBAEwAdwBCADAAQQBHAGcAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBFAFkAQQBZAFEAQgBzAEEASABNAEEAWgBRAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEUAWQBBAFkAUQBCAHMAQQBIAE0AQQBaAFEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARQBZAEEAWQBRAEIAcwBBAEgATQBBAFoAUQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQgBHAEEARwBFAEEAYgBBAEIAegBBAEcAVQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBCAFUAQQBIAEkAQQBkAFEAQgBsAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEAUgBnAEIAaABBAEcAdwBBAGMAdwBCAGwAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARgBRAEEAYwBnAEIAMQBBAEcAVQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBCAEcAQQBHAEUAQQBiAEEAQgB6AEEARwBVAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEIARwBBAEcARQBBAGIAQQBCAHoAQQBHAFUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEAVgBBAEIAeQBBAEgAVQBBAFoAUQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBGAFEAQQBjAGcAQgAxAEEARwBVAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEIAVQBBAEgASQBBAGQAUQBCAGwAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEcARQBBAFkAZwBCAHMAQQBHAFUAQQBQAGcAQQA9AAoAcwB1AGYAZgBpAHgAOgA=:31b8e172-b470-440e-83d8-e6b185028602
31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATgB3AEEANABBAEQARQBBAE4AUQBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEgAUQBBAGMAZwBCADEAQQBIAFEAQQBhAEEAQQBnAEEARwBJAEEAYgB3AEIAeQBBAEcAUQBBAFoAUQBCAHkAQQBHAFUAQQBaAEEAQQBpAEEAQwBBAEEAYwB3AEIAMQBBAEcAMABBAGIAUQBCAGgAQQBIAEkAQQBlAFEAQQA5AEEAQwBJAEEAZABBAEIAeQBBAEgAVQBBAGQAQQBCAG8AQQBDAEEAQQBkAEEAQgBoAEEARwBJAEEAYgBBAEIAbABBAEMAQQBBAFoAZwBCAHYAQQBIAEkAQQBJAEEAQgBCAEEARQA0AEEAUgBBAEEAZwBBAEgAYwBBAGEAUQBCADAAQQBHAGcAQQBJAEEAQgA2AEEARwBVAEEAYwBnAEIAdgBBAEMAOABBAGIAdwBCAHUAQQBHAFUAQQBJAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBvAEEAQwBBAEEAYwB3AEIAagBBAEcAOABBAGMAQQBCAGwAQQBEADAAQQBJAGcAQgBqAEEARwA4AEEAYgBBAEIAbgBBAEgASQBBAGIAdwBCADEAQQBIAEEAQQBJAGcAQQBnAEEARwBNAEEAYgB3AEIAcwBBAEgATQBBAGMAQQBCAGgAQQBHADQAQQBQAFEAQQBpAEEARABJAEEASQBnAEEAKwBBAEcAawBBAGIAZwBCAHcAQQBIAFUAQQBkAEEAQgB6AEEARAB3AEEATAB3AEIAMABBAEcAZwBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBvAEEAQwBBAEEAYwB3AEIAagBBAEcAOABBAGMAQQBCAGwAQQBEADAAQQBJAGcAQgBqAEEARwA4AEEAYgBBAEEAaQBBAEQANABBAGIAdwBCADEAQQBIAFEAQQBjAEEAQgAxAEEASABRAEEAUABBAEEAdgBBAEgAUQBBAGEAQQBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAbwBBAEMAQQBBAGMAdwBCAGoAQQBHADgAQQBjAEEAQgBsAEEARAAwAEEASQBnAEIAagBBAEcAOABBAGIAQQBBAGkAQQBDAEEAQQBjAHcAQgAwAEEASABrAEEAYgBBAEIAbABBAEQAMABBAEkAZwBCADMAQQBHAGsAQQBaAEEAQgAwAEEARwBnAEEATwBnAEEAeABBAEQAQQBBAE0AQQBCAHcAQQBIAGcAQQBPAHcAQQBpAEEARAA0AEEAUQBRAEEAOABBAEMAOABBAGQAQQBCAG8AQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYQBBAEEAZwBBAEgATQBBAFkAdwBCAHYAQQBIAEEAQQBaAFEAQQA5AEEAQwBJAEEAWQB3AEIAdgBBAEcAdwBBAEkAZwBBAGcAQQBIAE0AQQBkAEEAQgA1AEEARwB3AEEAWgBRAEEAOQBBAEMASQBBAGQAdwBCAHAAQQBHAFEAQQBkAEEAQgBvAEEARABvAEEATQBRAEEAdwBBAEQAQQBBAGMAQQBCADQAQQBEAHMAQQBJAGcAQQArAEEARQBJAEEAUABBAEEAdgBBAEgAUQBBAGEAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBnAEEASQBBAEIAegBBAEcATQBBAGIAdwBCAHcAQQBHAFUAQQBQAFEAQQBpAEEARwBNAEEAYgB3AEIAcwBBAEMASQBBAEkAQQBCAHoAQQBIAFEAQQBlAFEAQgBzAEEARwBVAEEAUABRAEEAaQBBAEgAYwBBAGEAUQBCAGsAQQBIAFEAQQBhAEEAQQA2AEEARABFAEEATQBBAEEAdwBBAEgAQQBBAGUAQQBBADcAQQBDAEkAQQBQAGcAQgBCAEEAQwBBAEEAUABBAEIAagBBAEcAOABBAFoAQQBCAGwAQQBEADQAQQBZAFEAQgB1AEEARwBRAEEAUABBAEEAdgBBAEcATQBBAGIAdwBCAGsAQQBHAFUAQQBQAGcAQQBnAEEARQBJAEEAUABBAEEAdgBBAEgAUQBBAGEAQQBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAE0AQQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAEEAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQB3AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAQQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBAHgAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBNAEEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAeABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAE0AQQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAEEAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEATQBRAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQARQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBAHgAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEcARQBBAFkAZwBCAHMAQQBHAFUAQQBQAGcAQQA9AAoAcwB1AGYAZgBpAHgAOgA=:31b8e172-b470-440e-83d8-e6b185028602
:::

</li>

<li>

<a href="#hint-truth-tables-or" data-bs-toggle="collapse" title="A circuit emulation and  truth tables for or">A
circuit emulation and truth tables for `or`.</a>

::: {#hint-truth-tables-or .collapse}
<p>This electric circuit shows a simplified way to emulate the Boolean
operator `or` electronically. The two switches are in
<em>parallel</em>; if either (or both) of the switches are on, the
current flows and the light bulb turns on.<br />
<img title="Electric circuit for OR: The animation shows a battery connecting to two switches in parallel (one above the other) via the forking of an electrical wire and then the wire un-forking and connecting to a light bulb before returning to the battery. When either or both switches are closed, the light is on, and when both switches are open, the light turns off." alt="Electric circuit for OR: The animation shows a battery connecting to two switches in parallel (one above the other) via the forking of an electrical wire and then the wire un-forking and connecting to a light bulb before returning to the battery. When either or both switches are closed, the light is on, and when both switches are open, the light turns off." class="ms-4" data-gifffer="/img/6-computers/LogicGates_img/Animations/gif/OR_Animation.gif" width="335" height="250"/></p>

::: sidenoteBig
<p>As with the `and` tables, these two tables are identical
except for whether they use true/false or ones/zeros.</p>

<p>In ordinary language, the word "or" can have two slightly different
meanings. <em>Inclusive or</em> means "at least one of these": If it's
raining <em>or</em> it's really cold out, you need your overcoat. (If
it's both raining and cold, you'd still wear the coat.) <em>Exclusive
or</em> means "this or that, but not both": Eat your vegetables
<em>or</em> you won't get any dessert. (You'd feel cheated if you ate
the vegetables and still didn't get dessert.) In computer science (as in
mathematics) the word "or" by itself always means inclusive or, as you
can see in this truth table. If you mean "exclusive or," you have to say
that.</p>
:::

31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBRAEEAdwBBAEQAVQBBAE0AUQBBADUAQQBBAD0APQAKAHAAcgBlAGYAaQB4ADoACgBzAG8AdQByAGMAZQA6AFAAQQBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEASQBBAEIAagBBAEcAdwBBAFkAUQBCAHoAQQBIAE0AQQBQAFEAQQBpAEEASABRAEEAYwBnAEIAMQBBAEgAUQBBAGEAQQBBAGcAQQBHAEkAQQBiAHcAQgB5AEEARwBRAEEAWgBRAEIAeQBBAEcAVQBBAFoAQQBBAGkAQQBDAEEAQQBjAHcAQgAxAEEARwAwAEEAYgBRAEIAaABBAEgASQBBAGUAUQBBADkAQQBDAEkAQQBkAEEAQgB5AEEASABVAEEAZABBAEIAbwBBAEMAQQBBAGQAQQBCAGgAQQBHAEkAQQBiAEEAQgBsAEEAQwBBAEEAWgBnAEIAdgBBAEgASQBBAEkAQQBCAFAAQQBGAEkAQQBJAEEAQgAzAEEARwBrAEEAZABBAEIAbwBBAEMAQQBBAFoAZwBCAGgAQQBHAHcAQQBjAHcAQgBsAEEAQwA4AEEAZABBAEIAeQBBAEgAVQBBAFoAUQBBAGkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAGcAQQBJAEEAQgB6AEEARwBNAEEAYgB3AEIAdwBBAEcAVQBBAFAAUQBBAGkAQQBHAE0AQQBiAHcAQgBzAEEARwBjAEEAYwBnAEIAdgBBAEgAVQBBAGMAQQBBAGkAQQBDAEEAQQBZAHcAQgB2AEEARwB3AEEAYwB3AEIAdwBBAEcARQBBAGIAZwBBADkAQQBDAEkAQQBNAGcAQQBpAEEARAA0AEEAYQBRAEIAdQBBAEgAQQBBAGQAUQBCADAAQQBIAE0AQQBQAEEAQQB2AEEASABRAEEAYQBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAGcAQQBJAEEAQgB6AEEARwBNAEEAYgB3AEIAdwBBAEcAVQBBAFAAUQBBAGkAQQBHAE0AQQBiAHcAQgBzAEEAQwBJAEEAUABnAEIAdgBBAEgAVQBBAGQAQQBCAHcAQQBIAFUAQQBkAEEAQQA4AEEAQwA4AEEAZABBAEIAbwBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBnAEEASQBBAEIAegBBAEcATQBBAGIAdwBCAHcAQQBHAFUAQQBQAFEAQQBpAEEARwBNAEEAYgB3AEIAcwBBAEMASQBBAEkAQQBCAHoAQQBIAFEAQQBlAFEAQgBzAEEARwBVAEEAUABRAEEAaQBBAEgAYwBBAGEAUQBCAGsAQQBIAFEAQQBhAEEAQQA2AEEARABFAEEATQBBAEEAdwBBAEgAQQBBAGUAQQBBADcAQQBDAEkAQQBQAGcAQgBCAEEARAB3AEEATAB3AEIAMABBAEcAZwBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBvAEEAQwBBAEEAYwB3AEIAagBBAEcAOABBAGMAQQBCAGwAQQBEADAAQQBJAGcAQgBqAEEARwA4AEEAYgBBAEEAaQBBAEMAQQBBAGMAdwBCADAAQQBIAGsAQQBiAEEAQgBsAEEARAAwAEEASQBnAEIAMwBBAEcAawBBAFoAQQBCADAAQQBHAGcAQQBPAGcAQQB4AEEARABBAEEATQBBAEIAdwBBAEgAZwBBAE8AdwBBAGkAQQBEADQAQQBRAGcAQQA4AEEAQwA4AEEAZABBAEIAbwBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBhAEEAQQBnAEEASABNAEEAWQB3AEIAdgBBAEgAQQBBAFoAUQBBADkAQQBDAEkAQQBZAHcAQgB2AEEARwB3AEEASQBnAEEAZwBBAEgATQBBAGQAQQBCADUAQQBHAHcAQQBaAFEAQQA5AEEAQwBJAEEAZAB3AEIAcABBAEcAUQBBAGQAQQBCAG8AQQBEAG8AQQBNAFEAQQB3AEEARABBAEEAYwBBAEIANABBAEQAcwBBAEkAZwBBACsAQQBFAEUAQQBJAEEAQQA4AEEARwBNAEEAYgB3AEIAawBBAEcAVQBBAFAAZwBCAHYAQQBIAEkAQQBQAEEAQQB2AEEARwBNAEEAYgB3AEIAawBBAEcAVQBBAFAAZwBBAGcAQQBFAEkAQQBQAEEAQQB2AEEASABRAEEAYQBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEAUgBnAEIAaABBAEcAdwBBAGMAdwBCAGwAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBSAGcAQgBoAEEARwB3AEEAYwB3AEIAbABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAFIAZwBCAGgAQQBHAHcAQQBjAHcAQgBsAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEUAWQBBAFkAUQBCAHMAQQBIAE0AQQBaAFEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARgBRAEEAYwBnAEIAMQBBAEcAVQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBCAFUAQQBIAEkAQQBkAFEAQgBsAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEYAUQBBAGMAZwBCADEAQQBHAFUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQgBHAEEARwBFAEEAYgBBAEIAegBBAEcAVQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBCAFUAQQBIAEkAQQBkAFEAQgBsAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEYAUQBBAGMAZwBCADEAQQBHAFUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQgBVAEEASABJAEEAZABRAEIAbABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAFYAQQBCAHkAQQBIAFUAQQBaAFEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAGgAQQBHAEkAQQBiAEEAQgBsAEEARAA0AEEACgBzAHUAZgBmAGkAeAA6AA==:31b8e172-b470-440e-83d8-e6b185028602
31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBRAEEAeABBAEQAQQBBAE4AZwBBADIAQQBBAD0APQAKAHAAcgBlAGYAaQB4ADoACgBzAG8AdQByAGMAZQA6AFAAQQBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEASQBBAEIAagBBAEcAdwBBAFkAUQBCAHoAQQBIAE0AQQBQAFEAQQBpAEEASABRAEEAYwBnAEIAMQBBAEgAUQBBAGEAQQBBAGcAQQBHAEkAQQBiAHcAQgB5AEEARwBRAEEAWgBRAEIAeQBBAEcAVQBBAFoAQQBBAGkAQQBDAEEAQQBjAHcAQgAxAEEARwAwAEEAYgBRAEIAaABBAEgASQBBAGUAUQBBADkAQQBDAEkAQQBkAEEAQgB5AEEASABVAEEAZABBAEIAbwBBAEMAQQBBAGQAQQBCAGgAQQBHAEkAQQBiAEEAQgBsAEEAQwBBAEEAWgBnAEIAdgBBAEgASQBBAEkAQQBCAFAAQQBGAEkAQQBJAEEAQgAzAEEARwBrAEEAZABBAEIAbwBBAEMAQQBBAGUAZwBCAGwAQQBIAEkAQQBiAHcAQQB2AEEARwA4AEEAYgBnAEIAbABBAEMASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGEAQQBBAGcAQQBIAE0AQQBZAHcAQgB2AEEASABBAEEAWgBRAEEAOQBBAEMASQBBAFkAdwBCAHYAQQBHAHcAQQBaAHcAQgB5AEEARwA4AEEAZABRAEIAdwBBAEMASQBBAEkAQQBCAGoAQQBHADgAQQBiAEEAQgB6AEEASABBAEEAWQBRAEIAdQBBAEQAMABBAEkAZwBBAHkAQQBDAEkAQQBQAGcAQgBwAEEARwA0AEEAYwBBAEIAMQBBAEgAUQBBAGMAdwBBADgAQQBDADgAQQBkAEEAQgBvAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGEAQQBBAGcAQQBIAE0AQQBZAHcAQgB2AEEASABBAEEAWgBRAEEAOQBBAEMASQBBAFkAdwBCAHYAQQBHAHcAQQBJAGcAQQArAEEARwA4AEEAZABRAEIAMABBAEgAQQBBAGQAUQBCADAAQQBEAHcAQQBMAHcAQgAwAEEARwBnAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBhAEEAQQBnAEEASABNAEEAWQB3AEIAdgBBAEgAQQBBAFoAUQBBADkAQQBDAEkAQQBZAHcAQgB2AEEARwB3AEEASQBnAEEAZwBBAEgATQBBAGQAQQBCADUAQQBHAHcAQQBaAFEAQQA5AEEAQwBJAEEAZAB3AEIAcABBAEcAUQBBAGQAQQBCAG8AQQBEAG8AQQBNAFEAQQB3AEEARABBAEEAYwBBAEIANABBAEQAcwBBAEkAZwBBACsAQQBFAEUAQQBQAEEAQQB2AEEASABRAEEAYQBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAGcAQQBJAEEAQgB6AEEARwBNAEEAYgB3AEIAdwBBAEcAVQBBAFAAUQBBAGkAQQBHAE0AQQBiAHcAQgBzAEEAQwBJAEEASQBBAEIAegBBAEgAUQBBAGUAUQBCAHMAQQBHAFUAQQBQAFEAQQBpAEEASABjAEEAYQBRAEIAawBBAEgAUQBBAGEAQQBBADYAQQBEAEUAQQBNAEEAQQB3AEEASABBAEEAZQBBAEEANwBBAEMASQBBAFAAZwBCAEMAQQBEAHcAQQBMAHcAQgAwAEEARwBnAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAG8AQQBDAEEAQQBjAHcAQgBqAEEARwA4AEEAYwBBAEIAbABBAEQAMABBAEkAZwBCAGoAQQBHADgAQQBiAEEAQQBpAEEAQwBBAEEAYwB3AEIAMABBAEgAawBBAGIAQQBCAGwAQQBEADAAQQBJAGcAQgAzAEEARwBrAEEAWgBBAEIAMABBAEcAZwBBAE8AZwBBAHgAQQBEAEEAQQBNAEEAQgB3AEEASABnAEEATwB3AEEAaQBBAEQANABBAFEAUQBBAGcAQQBEAHcAQQBZAHcAQgB2AEEARwBRAEEAWgBRAEEAKwBBAEcAOABBAGMAZwBBADgAQQBDADgAQQBZAHcAQgB2AEEARwBRAEEAWgBRAEEAKwBBAEMAQQBBAFEAZwBBADgAQQBDADgAQQBkAEEAQgBvAEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQB3AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEATQBBAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAQQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBNAEEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARABFAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAeABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAEUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQB3AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEATQBRAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBAHgAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBNAFEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARABFAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBZAFEAQgBpAEEARwB3AEEAWgBRAEEAKwBBAEEAPQA9AAoAcwB1AGYAZgBpAHgAOgA=:31b8e172-b470-440e-83d8-e6b185028602
:::

</li>

<li>

<a href="#hint-truth-tables-not" data-bs-toggle="collapse" title="A circuit emulation and  truth tables for not">A
circuit emulation and truth tables for `not`.</a>

::: {#hint-truth-tables-not .collapse}
<p>This electric circuit shows a simplified way to emulate the Boolean
operator `not` electronically. This switch is basically a
<em>circuit breaker</em>: if the switch is <em>on</em>, the current flow
is broken and the light bulb turns off; if the switch is off, the
current flows directly to the light bulb and the light bulb turns
on.<br />
<img title="Electric circuit for NOT: The animation shows a a single loop of wire connecting a battery to a circuit breaker and a light bulb. When the circut breaker is open, the light is on, and when the circuit breaker is closed, the light turns off." alt="Electric circuit for NOT: The animation shows a a single loop of wire connecting a battery to a circuit breaker and a light bulb. When the circuit breaker is open, the light is on, and when the circuit breaker is closed, the light turns off." class="ms-4" data-gifffer="/img/6-computers/LogicGates_img/Animations/gif/NOT_Animation2.gif" width="335" height="250"/></p>

::: sidenote
As with the other tables, these are identical for true/false vs.
ones/zeros.
:::

31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBRAEEAeQBBAEQAawBBAE0AQQBBADUAQQBBAD0APQAKAHAAcgBlAGYAaQB4ADoACgBzAG8AdQByAGMAZQA6AFAAQQBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEASQBBAEIAagBBAEcAdwBBAFkAUQBCAHoAQQBIAE0AQQBQAFEAQQBpAEEASABRAEEAYwBnAEIAMQBBAEgAUQBBAGEAQQBBAGcAQQBHAEkAQQBiAHcAQgB5AEEARwBRAEEAWgBRAEIAeQBBAEcAVQBBAFoAQQBBAGkAQQBDAEEAQQBjAHcAQgAxAEEARwAwAEEAYgBRAEIAaABBAEgASQBBAGUAUQBBADkAQQBDAEkAQQBkAEEAQgB5AEEASABVAEEAZABBAEIAbwBBAEMAQQBBAGQAQQBCAGgAQQBHAEkAQQBiAEEAQgBsAEEAQwBBAEEAWgBnAEIAdgBBAEgASQBBAEkAQQBCAE8AQQBFADgAQQBWAEEAQQBnAEEASABjAEEAYQBRAEIAMABBAEcAZwBBAEkAQQBCAG0AQQBHAEUAQQBiAEEAQgB6AEEARwBVAEEATAB3AEIAMABBAEgASQBBAGQAUQBCAGwAQQBDAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBhAEEAQQBnAEEASABNAEEAWQB3AEIAdgBBAEgAQQBBAFoAUQBBADkAQQBDAEkAQQBZAHcAQgB2AEEARwB3AEEASQBnAEEAKwBBAEcAawBBAGIAZwBCAHcAQQBIAFUAQQBkAEEAQQA4AEEAQwA4AEEAZABBAEIAbwBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBhAEEAQQBnAEEASABNAEEAWQB3AEIAdgBBAEgAQQBBAFoAUQBBADkAQQBDAEkAQQBZAHcAQgB2AEEARwB3AEEASQBnAEEAKwBBAEcAOABBAGQAUQBCADAAQQBIAEEAQQBkAFEAQgAwAEEARAB3AEEATAB3AEIAMABBAEcAZwBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYQBBAEEAZwBBAEgATQBBAFkAdwBCAHYAQQBIAEEAQQBaAFEAQQA5AEEAQwBJAEEAWQB3AEIAdgBBAEcAdwBBAEkAZwBBAGcAQQBIAE0AQQBkAEEAQgA1AEEARwB3AEEAWgBRAEEAOQBBAEMASQBBAGQAdwBCAHAAQQBHAFEAQQBkAEEAQgBvAEEARABvAEEATQBRAEEAdwBBAEQAQQBBAGMAQQBCADQAQQBEAHMAQQBJAGcAQQArAEEARQBFAEEAUABBAEEAdgBBAEgAUQBBAGEAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBnAEEASQBBAEIAegBBAEcATQBBAGIAdwBCAHcAQQBHAFUAQQBQAFEAQQBpAEEARwBNAEEAYgB3AEIAcwBBAEMASQBBAEkAQQBCAHoAQQBIAFEAQQBlAFEAQgBzAEEARwBVAEEAUABRAEEAaQBBAEgAYwBBAGEAUQBCAGsAQQBIAFEAQQBhAEEAQQA2AEEARABFAEEATQBBAEEAdwBBAEgAQQBBAGUAQQBBADcAQQBDAEkAQQBQAGcAQQA4AEEARwBNAEEAYgB3AEIAawBBAEcAVQBBAFAAZwBCAHUAQQBHADgAQQBkAEEAQQA4AEEAQwA4AEEAWQB3AEIAdgBBAEcAUQBBAFoAUQBBACsAQQBDAEEAQQBRAFEAQQA4AEEAQwA4AEEAZABBAEIAbwBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEIARwBBAEcARQBBAGIAQQBCAHoAQQBHAFUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQgBVAEEASABJAEEAZABRAEIAbABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBGAFEAQQBjAGcAQgAxAEEARwBVAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEIARwBBAEcARQBBAGIAQQBCAHoAQQBHAFUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAFkAUQBCAGkAQQBHAHcAQQBaAFEAQQArAEEAQQA9AD0ACgBzAHUAZgBmAGkAeAA6AA==:31b8e172-b470-440e-83d8-e6b185028602
31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBRAEEAegBBAEQASQBBAE4AUQBBADMAQQBBAD0APQAKAHAAcgBlAGYAaQB4ADoACgBzAG8AdQByAGMAZQA6AFAAQQBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEASQBBAEIAagBBAEcAdwBBAFkAUQBCAHoAQQBIAE0AQQBQAFEAQQBpAEEASABRAEEAYwBnAEIAMQBBAEgAUQBBAGEAQQBBAGcAQQBHAEkAQQBiAHcAQgB5AEEARwBRAEEAWgBRAEIAeQBBAEcAVQBBAFoAQQBBAGkAQQBDAEEAQQBjAHcAQgAxAEEARwAwAEEAYgBRAEIAaABBAEgASQBBAGUAUQBBADkAQQBDAEkAQQBkAEEAQgB5AEEASABVAEEAZABBAEIAbwBBAEMAQQBBAGQAQQBCAGgAQQBHAEkAQQBiAEEAQgBsAEEAQwBBAEEAWgBnAEIAdgBBAEgASQBBAEkAQQBCAE8AQQBFADgAQQBWAEEAQQBnAEEASABjAEEAYQBRAEIAMABBAEcAZwBBAEkAQQBCADYAQQBHAFUAQQBjAGcAQgB2AEEAQwA4AEEAYgB3AEIAdQBBAEcAVQBBAEkAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAG8AQQBDAEEAQQBjAHcAQgBqAEEARwA4AEEAYwBBAEIAbABBAEQAMABBAEkAZwBCAGoAQQBHADgAQQBiAEEAQQBpAEEARAA0AEEAYQBRAEIAdQBBAEgAQQBBAGQAUQBCADAAQQBEAHcAQQBMAHcAQgAwAEEARwBnAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAG8AQQBDAEEAQQBjAHcAQgBqAEEARwA4AEEAYwBBAEIAbABBAEQAMABBAEkAZwBCAGoAQQBHADgAQQBiAEEAQQBpAEEARAA0AEEAYgB3AEIAMQBBAEgAUQBBAGMAQQBCADEAQQBIAFEAQQBQAEEAQQB2AEEASABRAEEAYQBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBvAEEAQwBBAEEAYwB3AEIAagBBAEcAOABBAGMAQQBCAGwAQQBEADAAQQBJAGcAQgBqAEEARwA4AEEAYgBBAEEAaQBBAEMAQQBBAGMAdwBCADAAQQBIAGsAQQBiAEEAQgBsAEEARAAwAEEASQBnAEIAMwBBAEcAawBBAFoAQQBCADAAQQBHAGcAQQBPAGcAQQB4AEEARABBAEEATQBBAEIAdwBBAEgAZwBBAE8AdwBBAGkAQQBEADQAQQBRAFEAQQA4AEEAQwA4AEEAZABBAEIAbwBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBhAEEAQQBnAEEASABNAEEAWQB3AEIAdgBBAEgAQQBBAFoAUQBBADkAQQBDAEkAQQBZAHcAQgB2AEEARwB3AEEASQBnAEEAZwBBAEgATQBBAGQAQQBCADUAQQBHAHcAQQBaAFEAQQA5AEEAQwBJAEEAZAB3AEIAcABBAEcAUQBBAGQAQQBCAG8AQQBEAG8AQQBNAFEAQQB3AEEARABBAEEAYwBBAEIANABBAEQAcwBBAEkAZwBBACsAQQBEAHcAQQBZAHcAQgB2AEEARwBRAEEAWgBRAEEAKwBBAEcANABBAGIAdwBCADAAQQBEAHcAQQBMAHcAQgBqAEEARwA4AEEAWgBBAEIAbABBAEQANABBAEkAQQBCAEIAQQBEAHcAQQBMAHcAQgAwAEEARwBnAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARABBAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAeABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAEUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQB3AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEAUABnAEEAPQAKAHMAdQBmAGYAaQB4ADoA:31b8e172-b470-440e-83d8-e6b185028602
:::

</li>

</ul>
:::

## Logic Gates

<p>Inside a computer, Boolean operations are implemented in physical
circuitry using logic gates. (A single gate implements one of the basic
functions `and`, `or`, or `not`.) Logic
circuits are often represented with drawings that help engineers see how
the information will flow through a circuit. For example, the following
diagram of a logic circuit with two gates represents the Boolean
expression
<img src="/img/6-computers/(a)or((a)and(b))-booleans.png" title="A or (A and B)" alt="A or (A and B)" class="inline"/>.
Can you see how?</p>

<img src="/img/6-computers/(a)or((a)and(b))-gate.png" title="logic gate diagram of (A or (A and B))" alt="logic gate diagram of (A or (A and B))" class="ms-4 noshadow"/>

::: {#first .forYouToDo}
<ol>

<li><img src="/img/icons/talk-with-your-partner-mini.png" title="Talk with Your Partner" alt="Talk with Your Partner" class="inline"/>
Look at the logic circuit drawn above. For what values of A and B will
the output be `true`?</li>

</ol>
:::

::: takeNote
On the previous page, you learned about tungsten and tin, and here we're
talking about Boolean functions. In what sense is this less abstract?
<strong>From the point of view of the chip designer, logic gates are the
fundamental building blocks of a digital circuit.</strong> (The actual
physical chip fabrication is at an even lower level of abstraction, in
the analog domain.)
<img src="/img/6-computers/hardware-abstraction.png" title="diagram of computer abstraction hierarchy showing three levels of decreasing abstraction: software domain (including applications, programming languages, libraries, and operating systems), digital domain (including architecture, components, integrated circuits, and logic gates), and analog domain (including transistors); there is a dividing line between the software and digital domains labeled &apos;program abstraction barrier&apos; and a dividing line between the digital and analog domains labeled &apos;digital abstraction barrier;&apos; there is a vertical double-headed arrow on the right indicating that the items listed first on the list (and their sub-lists) have a &apos;high level of abstraction&apos; and those lower on the list have a &apos;low level of abstraction&apos;" alt="diagram of computer abstraction hierarchy showing three levels of decreasing abstraction: software domain (including applications, programming languages, libraries, and operating systems), digital domain (including architecture, components, integrated circuits, and logic gates), and analog domain (including transistors); there is a dividing line between the software and digital domains labeled &apos;program abstraction barrier&apos; and a dividing line between the digital and analog domains labeled &apos;digital abstraction barrier;&apos; there is a vertical double-headed arrow on the right indicating that the items listed first on the list (and their sub-lists) have a &apos;high level of abstraction&apos; and those lower on the list have a &apos;low level of abstraction&apos;" class="ms-4 noshadow"/>
:::

::: forYouToDo
<ol start="2">

<li>

<!-- Question 1 -->

::: {.assessment-data type="multiplechoice" identifier="Which expression will report TRUE?" hasinlinefeedback="true" maxchoices="1" responseidentifier="ri1" shuffle="false"}
::: prompt
Which of the following expressions will report `true`?

<ol style="list-style:upper-roman;">

<li><img src="/img/6-computers/boolean-quiz-a.png" title="(T and F) and (not (T and F))" alt="(T and F) and (not (T and F))" class="inline"/></li>

<li><img src="/img/6-computers/boolean-quiz-b.png" title="(not (T or F)) or (T or F)" alt="(not (T or F)) or (T or F)" class="inline"/></li>

</ol>
:::

::: {.choice identifier="c1"}
::: text
I only
:::

::: feedback
Evaluate each part separately first, and then determine what the
outermost block in each expression will report. In expression I: What
does `(true) and (false)` report? What does `not((true)
and (false))` report? In expression II: What does `(true) or
(false)` report? What does `not((true) or (false))`
report?
:::
:::

::: {.choice identifier="c2"}
::: text
II only
:::

::: feedback
Correct!
:::
:::

::: {.choice identifier="c3"}
::: text
I and II
:::

::: feedback
Take another look at expression I. What does `not((true) and
(false))` (on the right) report to the outermost `and`
block?
:::
:::

::: {.choice identifier="c4"}
::: text
Neither I nor II
:::

::: feedback
Take another look at expression II. What does `(true) and
(false)` (on the right) report to the outermost `or`
block?
:::
:::

::: {.responseDeclaration identifier="ri1"}
::: {.correctResponse identifier="c2"}
:::
:::
:::

</li>

<li>

<!-- Question 2 -->

::: {.assessment-data type="multiplechoice" identifier="Which logic gate will report TRUE?" hasinlinefeedback="true" maxchoices="1" responseidentifier="ri2" shuffle="false"}
::: prompt
Which of the following logic circuits will report `true`? (T
stands for `true`, and F stands for `false`.)

<ol style="list-style:upper-roman;">

::: sidenote
This problem is probably <em>harder</em> than something you'll see on
the exam, so if you can get this one, you are doing great!
:::

31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBRAEEANQBBAEQARQBBAE4AUQBBADUAQQBBAD0APQAKAHAAcgBlAGYAaQB4ADoACgBzAG8AdQByAGMAZQA6AFAAQQBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAZwBBAEgAYwBBAGEAUQBCAGsAQQBIAFEAQQBhAEEAQQA5AEEAQwBJAEEATQBnAEEAdwBBAEQAQQBBAEkAZwBBACsAQQBEAHcAQQBiAEEAQgBwAEEARAA0AEEAUABBAEIAcABBAEcAMABBAFoAdwBBAGcAQQBHAE0AQQBiAEEAQgBoAEEASABNAEEAYwB3AEEAOQBBAEMASQBBAGEAUQBCAHUAQQBHAHcAQQBhAFEAQgB1AEEARwBVAEEASQBBAEIAdQBBAEcAOABBAGMAdwBCAG8AQQBHAEUAQQBaAEEAQgB2AEEASABjAEEASQBnAEEAZwBBAEgATQBBAGMAZwBCAGoAQQBEADAAQQBJAGcAQQB2AEEARwBJAEEAYQBnAEIAagBBAEMAMABBAGMAZwBBAHYAQQBHAGsAQQBiAFEAQgBuAEEAQwA4AEEATgBnAEEAdABBAEcATQBBAGIAdwBCAHQAQQBIAEEAQQBkAFEAQgAwAEEARwBVAEEAYwBnAEIAegBBAEMAOABBAGIAQQBCAHYAQQBHAGMAQQBhAFEAQgBqAEEAQwAwAEEAWgB3AEIAaABBAEgAUQBBAFoAUQBCAHoAQQBDADAAQQBjAFEAQgAxAEEARwBrAEEAZQBnAEEAdABBAEcASQBBAEwAZwBCAHcAQQBHADQAQQBaAHcAQQBpAEEAQwBBAEEAWQBRAEIAcwBBAEgAUQBBAFAAUQBBAGkAQQBHAHcAQQBiAHcAQgBuAEEARwBrAEEAWQB3AEEAZwBBAEcAYwBBAFkAUQBCADAAQQBHAFUAQQBJAEEAQgBrAEEARwBrAEEAWQBRAEIAbgBBAEgASQBBAFkAUQBCAHQAQQBDAEEAQQBiAHcAQgBtAEEAQwBBAEEASwBBAEIAdQBBAEcAOABBAGQAQQBBAGcAQQBDAGcAQQBLAEEAQgBVAEEAQwBBAEEAWQBRAEIAdQBBAEcAUQBBAEkAQQBCAEcAQQBDAGsAQQBLAFEAQQBnAEEARwA4AEEAYwBnAEEAZwBBAEMAZwBBAFYAQQBBAGcAQQBHAEUAQQBiAGcAQgBrAEEAQwBBAEEAUgBnAEEAcABBAEMAawBBAEkAZwBBAGcAQQBIAFEAQQBhAFEAQgAwAEEARwB3AEEAWgBRAEEAOQBBAEMASQBBAGIAQQBCAHYAQQBHAGMAQQBhAFEAQgBqAEEAQwBBAEEAWgB3AEIAaABBAEgAUQBBAFoAUQBBAGcAQQBHAFEAQQBhAFEAQgBoAEEARwBjAEEAYwBnAEIAaABBAEcAMABBAEkAQQBCAHYAQQBHAFkAQQBJAEEAQQBvAEEARwA0AEEAYgB3AEIAMABBAEMAQQBBAEsAQQBBAG8AQQBGAFEAQQBJAEEAQgBoAEEARwA0AEEAWgBBAEEAZwBBAEUAWQBBAEsAUQBBAHAAQQBDAEEAQQBiAHcAQgB5AEEAQwBBAEEASwBBAEIAVQBBAEMAQQBBAFkAUQBCAHUAQQBHAFEAQQBJAEEAQgBHAEEAQwBrAEEASwBRAEEAaQBBAEMAQQBBAEwAdwBBACsAQQBEAHcAQQBMAHcAQgBzAEEARwBrAEEAUABnAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAdwBBAGIAQQBCAHAAQQBEADQAQQBQAEEAQgBwAEEARwAwAEEAWgB3AEEAZwBBAEcATQBBAGIAQQBCAGgAQQBIAE0AQQBjAHcAQQA5AEEAQwBJAEEAYQBRAEIAdQBBAEcAdwBBAGEAUQBCAHUAQQBHAFUAQQBJAEEAQgB1AEEARwA4AEEAYwB3AEIAbwBBAEcARQBBAFoAQQBCAHYAQQBIAGMAQQBJAGcAQQBnAEEARwBFAEEAYgBBAEIAcABBAEcAYwBBAGIAZwBBADkAQQBDAEkAQQBZAGcAQgB2AEEASABRAEEAZABBAEIAdgBBAEcAMABBAEkAZwBBAGcAQQBIAE0AQQBjAGcAQgBqAEEARAAwAEEASQBnAEEAdgBBAEcASQBBAGEAZwBCAGoAQQBDADAAQQBjAGcAQQB2AEEARwBrAEEAYgBRAEIAbgBBAEMAOABBAE4AZwBBAHQAQQBHAE0AQQBiAHcAQgB0AEEASABBAEEAZABRAEIAMABBAEcAVQBBAGMAZwBCAHoAQQBDADgAQQBiAEEAQgB2AEEARwBjAEEAYQBRAEIAagBBAEMAMABBAFoAdwBCAGgAQQBIAFEAQQBaAFEAQgB6AEEAQwAwAEEAYwBRAEIAMQBBAEcAawBBAGUAZwBBAHQAQQBHAEUAQQBMAGcAQgB3AEEARwA0AEEAWgB3AEEAaQBBAEMAQQBBAFkAUQBCAHMAQQBIAFEAQQBQAFEAQQBpAEEARwB3AEEAYgB3AEIAbgBBAEcAawBBAFkAdwBBAGcAQQBHAGMAQQBZAFEAQgAwAEEARwBVAEEASQBBAEIAawBBAEcAawBBAFkAUQBCAG4AQQBIAEkAQQBZAFEAQgB0AEEAQwBBAEEAYgB3AEIAbQBBAEMAQQBBAEsAQQBBAG8AQQBGAFEAQQBJAEEAQgB2AEEASABJAEEASQBBAEIARwBBAEMAawBBAEkAQQBCAGgAQQBHADQAQQBaAEEAQQBnAEEAQwBnAEEAYgBnAEIAdgBBAEgAUQBBAEkAQQBBAG8AQQBGAFEAQQBJAEEAQgB2AEEASABJAEEASQBBAEIARwBBAEMAawBBAEsAUQBBAHAAQQBDAEkAQQBJAEEAQgAwAEEARwBrAEEAZABBAEIAcwBBAEcAVQBBAFAAUQBBAGkAQQBHAHcAQQBiAHcAQgBuAEEARwBrAEEAWQB3AEEAZwBBAEcAYwBBAFkAUQBCADAAQQBHAFUAQQBJAEEAQgBrAEEARwBrAEEAWQBRAEIAbgBBAEgASQBBAFkAUQBCAHQAQQBDAEEAQQBiAHcAQgBtAEEAQwBBAEEASwBBAEEAbwBBAEYAUQBBAEkAQQBCAHYAQQBIAEkAQQBJAEEAQgBHAEEAQwBrAEEASQBBAEIAaABBAEcANABBAFoAQQBBAGcAQQBDAGcAQQBiAGcAQgB2AEEASABRAEEASQBBAEEAbwBBAEYAUQBBAEkAQQBCAHYAQQBIAEkAQQBJAEEAQgBHAEEAQwBrAEEASwBRAEEAcABBAEMASQBBAEkAQQBBAHYAQQBEADQAQQBQAEEAQQB2AEEARwB3AEEAYQBRAEEAKwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAFAAZwBBAD0ACgBzAHUAZgBmAGkAeAA6AA==:31b8e172-b470-440e-83d8-e6b185028602

</ol>
:::

::: {.choice identifier="c1"}
::: text
I only
:::

::: feedback
Correct!
:::
:::

::: {.choice identifier="c2"}
::: text
II only
:::

::: feedback
Try building both diagrams in Snap<em>!</em> similarly to the images in
Question 1 above.
:::
:::

::: {.choice identifier="c3"}
::: text
I and II
:::

::: feedback
Take another look at diagram II. What signal does the right side send to
the AND gate?
:::
:::

::: {.choice identifier="c4"}
::: text
Neither I nor II
:::

::: feedback
Take another look at diagram I. What signal does the left side send to
the OR gate?
:::
:::

::: {.responseDeclaration identifier="ri2"}
::: {.correctResponse identifier="c1"}
:::
:::
:::

</li>

</ol>
:::

::: endnote
<p><a href="#hint-target" data-bs-toggle="collapse" title="How do engineers draw logic gates?">How
do engineers draw logic gates?</a></p>

::: {#hint-target .collapse}
<img src="/img/6-computers/logic-gates-example-circuit.png" title="logic gate diagram of (not and) and (or)" alt="logic gate diagram of (not and) and (or)" class="float-end"/>
Engineers typically draw logic gates horizontally and use special shapes
that represent each gate: <br />
<img src="/img/6-computers/LogicGates_img/Gates/AND.png" title="AND-gate" alt="AND-gate" class="ms-4" width="151" height="80"/>
<img src="/img/6-computers/LogicGates_img/Gates/OR.png" title="OR-gate" alt="OR-gate" class="ms-4" width="156" height="81"/>
<img src="/img/6-computers/LogicGates_img/Gates/NOT.png" title="NOT-gate" alt="NOT-gate" class="ms-4" width="126" height="69"/><br />
For example, engineers would draw the logic circuit shown at right like
this: <br />
<img src="/img/6-computers/LogicGates_img/Circuits/notandandor.png" title="Engineer&apos;s version a logic gate with (not and) and (or)" alt="Engineer&apos;s version a logic gate with (not and) and (or)" class="ms-4" height="250"/><br />
Do an
<a href="https://www.duckduckgo.com/?q=logic+gate+diagrams&ia=images&iax=imageslogic+gate+diagrams&ia=images&iax=images" target="_blank" title="Image Search for: logic gate diagrams">image
search for "logic gate diagrams"</a> to see more examples.
:::
:::
