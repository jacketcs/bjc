---
title: "Page 5: Transforming Every List Item"
subtitle: "Unit 3, Lab 2, Page 5"
order: 5
---

::: learn
<p><strong>On this page,</strong> you will use the <code>map</code>
block to create an <code>initials from name</code> block and then use
<code>map</code> together with <code>initials from name</code> to find
the initials of all of your contacts.</p>
:::

::: dialogue
::: stagedir
Alphie, Betsy, and Gamal are building an <code>initials from name</code>
block that accepts one contact as input and reports that person's
initials.<br />
<img src="/img/3-lists/initials-reporting.png" title="initials from name (name from contact( (item (1) of (contact list)) reporting &apos;BA&apos;" alt="initials from name (name from contact( (item (1) of (contact list)) reporting &apos;BA&apos;" class="ms-4"/>
:::

<div>

Betsy: I used the
<img src="/img/blocks/split-by.png" title="split () by (&apos;pink dot indicating a space character&apos;)" alt="split () by (&apos;pink dot indicating a space character&apos;)" class="inline"/>
block to break up the contact's full name into a list of their names,
and then I joined the first letter of each name:<br />
<img src="/img/3-lists/initials-definition.png" title="initials from contact: (contact) {
script variables (list of names)
set (list of names) to (split (name from contact (contact)) by (word))
report (join (letter (1) of (item (1) of (list of names))) (letter (1) of (item (2) of (list of names))) )
}" alt="initials from contact: (contact) {
script variables (list of names)
set (list of names) to (split (name from contact (contact)) by (word))
report (join (letter (1) of (item (1) of (list of names))) (letter (1) of (item (2) of (list of names))) )
}" class="ms-4"/>

</div>

::: endnote
<a href="#hint-splitting" data-bs-toggle="collapse" title="What's the difference between splitting by spaces and spltting by words?">What's
the difference between splitting by spaces and splitting by words?</a>

::: {#hint-splitting .collapse}
<p>Try it! (Each brown dot represents a space.)<br />
<img src="/img/3-lists/split-space.png" title="split &quot;hello␠␠␠␠␠␠␠world&quot; by (␠)" alt="split &quot;hello␠␠␠␠␠␠␠world&quot; by (␠)" class="ms-4"/>
<img src="/img/3-lists/split-word.png" title="split &quot;hello␠␠␠␠␠␠␠world&quot; by word" alt="split &quot;hello␠␠␠␠␠␠␠world&quot; by word" class="ms-4"/></p>

<p>In one case, <code>split</code> is focusing on the exact characters
in the string. In the other case, it's giving you what you really want:
the words in the contact's name. At a low level of abstraction, text is
made of characters and you look through each of the characters. But at a
higher level of abstraction (such as when you are reading), text is made
up of words. Snap<em>!</em> lets you think at this higher level of
abstraction.</p>
:::
:::

<div>

Alphie: But what about someone who goes by three names like Martin
Luther King? It would just report "ML" for him.

</div>

<div>

Gamal: Oh, that's because the block only takes the first letter of items
1 and 2. We have to add in <code>letter (1) of (item (3) of (list of
names))</code>.

</div>

<div>

Betsy: But what if someone has more names than that? In my aunt's family
they each have five or six names...

</div>

<div>

Gamal: Well, then we need to take <code>letter (1) of</code>
<em>each</em> item in the <var>list of names</var>. That sounds as if
what we need is a <em>higher-order function</em>. Higher-order functions
are good at doing things with individual items in a list.

</div>

::: vocabFullWidth
<p>A <strong>higher-order function</strong> is a function that takes a
function as input (or reports a function as output).</p>
:::
:::

::: forYouToDo
<ol start="1">

<li>Build and experiment with these examples of the <code>map</code>
function.<br />
<img src="/img/3-lists/map-join-s.png" title="map (join( )(s)) over (list{block, script, Boolean})" alt="map (join( )(s)) over (list{block, script, Boolean})" class="ms-4"/><br />
<img src="/img/3-lists/map-3x.png" title="map ((3) * ( )) over (list{7, 8, 1})" alt="map ((3) * ( )) over (list{7, 8, 1})" class="ms-4"/><br />
<img src="/img/3-lists/map-letter-1.png" title="map (letter (1) of ( )) over (list{bounce, join, clear})" alt="map (letter (1) of ( )) over (list{bounce, join, clear})" class="ms-4"/></li>

<li><img src="/img/icons/talk-with-your-partner.png" title="Talk with Your Partner" alt="Talk with Your Partner" class="inline"/>
Discuss and then explain in writing what these expressions are
doing.</li>

</ol>
:::

<p>The
<img src="/img/blocks/map.png" title="map &apos;reporter input slot&apos; over &apos;list input slot&apos;" alt="map &apos;reporter input slot&apos; over &apos;list input slot&apos;" class="inline"/>
block takes two inputs: a function (a reporter with a blank input slot)
and a list, and it reports a new list in which each item is the result
of calling the function with an item from the original list as input.
For example:<br />
<img src="/img/3-lists/map-example-2.png" title="map (join( )(s)) over (list {cat, dog, bird}) reporting {cats, dogs, birds}" alt="map (join( )(s)) over (list {cat, dog, bird}) reporting {cats, dogs, birds}" class="ms-4"/><br />
<img src="/img/3-lists/map-example-3.png" title="map (round ( )) over (list{3.14159, 87, 5.4}) reporting {3, 87, 5}" alt="map (round ( )) over (list{3.14159, 87, 5.4}) reporting {3, 87, 5}" class="ms-4"/></p>

::: takeNote
<p><strong>You choose the function that describes the result for one
input item, and <code>map</code> applies that function to each item in
the input list and then reports the list of result values.</strong> If
your function has <code>item 1 of</code> or <code>item 2 of</code> in
it, you're probably trying to do <code>map</code>'s part of the
job.<a name="HOFreview"> </a></p>

<p><code>Map</code> is a higher-order function just like
<code>keep</code> and <code>combine</code>. The function mapped over the
list always has a blank input slot. This is where the list item goes
each time the function is performed.</p>

::: endnote
<p>

This picture shows how the three higher-order functions could be
used:<br />
<img src="/img/3-lists/hof-chart.png" title="picture of map transforming each item, keep blocking some input items so they don&apos;t appear in the result, and combine superimposing them into one icon" alt="picture of map transforming each item, keep blocking some input items so they don&apos;t appear in the result, and combine superimposing them into one icon" class="ms-4" height="157px"/><br />
<a href="#hint-shapes" data-bs-toggle="collapse" title="See the higher-order function expressions with these (imaginary) shape procedures.">See
the higher-order function expressions with these (imaginary) shape
procedures.</a>

::: {#hint-shapes .collapse}
<img src="/img/3-lists/map-list-figures.png" title="map (shade figure ()) over (list of figures)" alt="map (shade figure ()) over (list of figures)" class="ms-4"/>
<img src="/img/3-lists/keep-list-figures.png" title="keep items (is () a polygon?) over (list of figures)" alt="keep items (is () a polygon?) over (list of figures)" class="ms-4"/>
<img src="/img/3-lists/combine-list-figures.png" title="combine (list of figures) using (overlay ())" alt="combine (list of figures) using (overlay ())" class="ms-4"/>
:::

</p>

<p>

<a href="#hint-hofs-review" data-bs-toggle="collapse" title="Here is a quick review of higher-order functions.">Here
is a quick review of the higher-order functions <code>map</code>,
<code>keep</code>, <code>combine</code>.</a>

::: {#hint-hofs-review .collapse}
<ul>

<li><code>Map</code> performs a function on every item of a list and
reports the list of changed items.<br />
<img src="/img/3-lists/map-example-1.png" title="map (( )-(1)) over (list (96) (-100) (4.7)) reporting" alt="map (( )-(1)) over (list (96) (-100) (4.7)) reporting" class="ms-4"/></li>

<li><code>Keep</code> uses a predicate function (a true/false question)
to check every item in a list and reports the items that make the
predicate true. (You learned about <code>keep</code> on
<a href="/unit-2/lab-3/5-keeping-list-items.html" title="Unit 2 Lab 3 Page 5: Keeping Items from a List">Unit
2 Lab 3 Page 5: <code>Keep</code>ing Items from a List</a>.)<br />
<img src="/img/3-lists/keep-items-(last-letter-h)-reporting.png" alt="keep-items-such-that-(last-letter-of-(input)-equals-h)-from-test-list" class="ms-4"/><br /></li>

<li><code>Combine</code> uses a combining function (a function with two
inputs) to report the results of combining all the items in a list using
that function. (You learned about <code>combine</code> on
<a href="/unit-2/lab-4/3-other-math-reporters.html" title="Unit 2 Lab 4 Page 3: More Mathematical Reporters">Unit
2 Lab 4 Page 3: More Mathematical Reporters</a>.)<br />
<img src="/img/3-lists/combine-simple-example.png" title="combine (list {0, 1, 2}) with (()+()) reporting 3" alt="combine (list {0, 1, 2}) with (()+()) reporting 3" class="ms-4"/></li>

</ul>
:::

</p>
:::
:::

::: forYouToDo
<ol start="3">

<li>If it isn't open already, open your U3L2-ContactList project.</li>

<li>Use <code>map</code> and <code>combine</code> together to build an
<code>initials from name</code> reporter that takes a name as input and
reports that person's initials.<br />
<img src="/img/3-lists/initials-reporting.png" title="initials from name (name from contact( (item (1) of (contact list)) reporting &apos;BA&apos;" alt="initials from name (name from contact( (item (1) of (contact list)) reporting &apos;BA&apos;" class="ms-4"/>
<img src="/img/3-lists/initials-reporting-mlk.png" title="initials from name (Martin Luther King) reporting &apos;MLK&apos;" alt="initials from name (Martin Luther King) reporting &apos;MLK&apos;" class="ms-4"/></li>

<li>Test and debug your <code>initials from name</code> block.</li>

<li>

Create an expression to report a list of the initials of all your
contacts.<br />

::: endnote
<a href="#hint-list-names" data-bs-toggle="collapse" title="Need a hint about reporting the initials of everyone in your contact list?">Need
a hint?</a>

::: {#hint-list-names .collapse}
<p>First, create an expression to report a list of the names of all your
contacts.<br />
<img src="/img/3-lists/contact-list-list-view.png" title="contact list watcher in list view" alt="contact list watcher in list view" class="ms-4"/>
[→]{style="padding-right: 1em; padding-left: 1em; font-size: 36px;"}
<img src="/img/3-lists/names.png" title="list in list view containing three items: Betsy Anderson, Alphie Preston, Gamal Abdel" alt="list in list view containing three items: Betsy Anderson, Alphie Preston, Gamal Abdel"/></p>
:::
:::

<img src="/img/3-lists/contact-list-list-view.png" title="contact list watcher in list view" alt="contact list watcher in list view" class="ms-4"/>
[→]{style="padding-right: 1em; padding-left: 1em; font-size: 36px;"}
<img src="/img/3-lists/initials.png" title="list in list view containing three items: BA, AP, GA" alt="list in list view containing three items: BA, AP, GA"/>

</li>

<li>

<!-- question 1 -->

::: {.assessment-data type="multiplechoice" identifier="mapLetterVsItem" hasinlinefeedback="true" maxchoices="1" responseidentifier="resp1" shuffle="false"}
::: prompt
Which of the following statements are true about this list?<br />
<img src="/img/3-lists/words_numbers.png" title="set (words and numbers) to {rabbit, 5, benefit, is, 34, kite, 2, 305, the, 61}" alt="set (words and numbers) to {rabbit, 5, benefit, is, 34, kite, 2, 305, the, 61}" class="ms-4"/><br />
:::

::: {.choice identifier="c1"}
::: text
<img src="/img/3-lists/check2mapc1.png" title="map (letter (1) of ()) over (words and numbers)" alt="map (letter (1) of ()) over (words and numbers)" border="0"/>
reports the list {r, 5, b, i, 3, k, 2, 3, t, 6}.
:::

::: feedback
Correct.
:::
:::

::: {.choice identifier="c2"}
::: text
<img src="/img/3-lists/check2mapc2.png" title="map (item (1) of ()) over (words and numbers)" alt="map (item (1) of ()) over (words and numbers)" border="0"/>
reports the list {rabbit}.
:::

::: feedback
The blank space in <code>item of</code> expects a list as its input, but
<code>map</code> puts a single item from <var>words and numbers</var>
into that slot.
:::
:::

::: {.choice identifier="c3"}
::: text
Both of the above.
:::

::: feedback
The input list (<var>words and numbers</var>) contains text strings (not
lists) so the blank space in the input function should expect a text
string (not a list).
:::
:::

::: {.choice identifier="c4"}
::: text
None of the above.
:::

::: feedback
<code>Map</code> performs the input function over each item in the input
list.
:::
:::

::: {.responseDeclaration identifier="resp1"}
::: {.correctResponse identifier="c1"}
:::
:::
:::

</li>

<li>

<!-- question 2 -->

::: {.assessment-data type="multiplechoice" identifier="mapLetterVsItem" hasinlinefeedback="true" maxchoices="5" responseidentifier="resp2" shuffle="false"}
::: prompt
Which of the following statements are true about this list?<br />
<img src="/img/3-lists/check1capitals.png" title="set (capitals) to {{Augusta, Maine}, {Boise, Idaho}, {Columbia, South Carolina}, {Des Moines, Iowa}}" alt="set (capitals) to {{Augusta, Maine}, {Boise, Idaho}, {Columbia, South Carolina}, {Des Moines, Iowa}}" class="ms-4"/><br />
Choose <strong>all</strong> that apply.

::: endnote
<a href="#hint-capital-adt" data-bs-toggle="collapse" title="Why not use an ADT?">Why
not use an ADT?</a>

::: {#hint-capital-adt .collapse}
<p>The list inside a list shown above makes it clearest to you now as
you answer this self-check item what the structure is, but you're right,
in an actual program it would be better to use an abstract data
type:<br />
<img src="/img/3-lists/capitals-adt-reporting.png" title="state: (Augusta) capital: (Maine)" alt="state: (Augusta) capital: (Maine)" class="ms-4"/></p>
:::
:::
:::

::: {.choice identifier="c1"}
::: text
<img src="/img/3-lists/check2mapc3.png" title="map (item (1) of ()) over (capitals)" alt="map (item (1) of ()) over (capitals)" border="0"/>
reports the list {Augusta, Boise, Columbia, Des Moines}.
:::

::: feedback
Correct.
:::
:::

::: {.choice identifier="c2"}
::: text
<img src="/img/3-lists/check2mapc3.png" title="map (item (1) of ()) over (capitals)" alt="map (item (1) of ()) over (capitals)" border="0"/>
reports the list {Augusta, Maine}.
:::

::: feedback
No. <code>Map</code> performs the input function on <em>each item of the
list</em>---not on the whole list. The expression <code>item (1) of
(capitals)</code> (without using <code>map</code> at all) would report
the list {Augusta, Maine}.
:::
:::

::: {.choice identifier="c3"}
::: text
<img src="/img/3-lists/check2mapc4.png" title="map (letter (1) of ()) over (capitals)" alt="map (letter (1) of ()) over (capitals)" border="0"/>
reports the list {A, B, C, D}.
:::

::: feedback
No. You can find the first letter of a word, but not the first letter of
a list. The expression <code>map (letter (1) of (item (1) of ( ))) over
(capitals)</code> would report the list {A, B, C, D}.
:::
:::

::: {.choice identifier="c4"}
::: text
<img src="/img/3-lists/check2mapc5.png" title="map (all but first of ()) over (capitals)" alt="map (all but first of ()) over (capitals)" border="0"/>
reports the list {Maine, Idaho, South Carolina, Iowa}.
:::

::: feedback
No. This is a tricky one. What gets reported is actually a list of
one-item lists: {{Maine}, {Idaho}, {South Carolina}, {Iowa}}. You might
want to try it in Snap<em>!</em>. The expression <code>map (item (2) of
()) over (capitals)</code> would report the list {Maine, Idaho, South
Carolina, Iowa}.
:::
:::

::: {.choice identifier="c5"}
::: text
<img src="/img/3-lists/check2mapc5.png" title="map (all but first of ()) over (capitals)" alt="map (all but first of ()) over (capitals)" border="0"/>
reports the list {{Boise, Idaho}, {Columbia, South Carolina}, {Des
Moines, Iowa}}.
:::

::: feedback
No. <code>Map</code> performs the input function on <em>each item of the
list</em>---not on the whole list. The expression <code>all but first of
(capitals)</code> (without using <code>map</code> at all) would report
the list of lists {{Boise, Idaho}, {Columbia, South Carolina}, {Des
Moines, Iowa}}.
:::
:::

::: {.responseDeclaration identifier="resp2"}
::: {.correctResponse identifier="c1"}
:::
:::
:::

</li>

<li>Read the two scripts below; they do the same thing.
<img src="/img/icons/write-out-thoughts.png" title="Write Out Your Thoughts" alt="Write Out Your Thoughts" class="inline"/>
Give two reasons why the use of abstraction in the second example is
preferred.<br />
<img src="/img/3-lists/abstraction-example-for-each.png" title="script variables (names of contacts)
set (names of contacts) to (list)
for each (contact) of (contact list) {
add (name from contact: (contact)) to (names of contacts)
}
report (names of contacts)" alt="script variables (names of contacts)
set (names of contacts) to (list)
for each (contact) of (contact list) {
add (name from contact: (contact)) to (names of contacts)
}
report (names of contacts)" class="ms-4"/>
<img src="/img/3-lists/abstraction-example-map.png" title="map (name from contact: ()) over (contacts list)" alt="map (name from contact: ()) over (contacts list)" class="ms-4"/></li>

<li>

::: todo
This new multiple-choice quizlet misbehaves if you only select some of
the correct responses. Need to fix. --MF, 1/13/21
:::

::: {.assessment-data type="multiplechoice" identifier="squares_mapkeepcombine" hasinlinefeedback="true" maxchoices="8" responseidentifier="resp1" shuffle="true"}
::: prompt
<p>Consider this list of squares: <br />
<img src="/img/3-lists/squares.png" title="set (squares) to {1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225}" alt="set (squares) to {1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225}" class="ms-4"/><br />
Which of the following expressions will report a list? Choose all that
apply.</p>
:::

::: {.choice identifier="c1"}
::: text
<img src="/img/3-lists/check2squares1c1.png" title="map (sqrt of()) over (squares)" alt="map (sqrt of()) over (squares)" border="0"/>
:::

::: feedback
Correct.
:::
:::

::: {.choice identifier="c1"}
::: text
<img src="/img/3-lists/check2squares1c2.png" title="keep items (()mod(2)=0) from (squares)" alt="keep items (()mod(2)=0) from (squares)" border="0"/>
:::

::: feedback
Correct.
:::
:::

::: {.choice identifier="c2"}
::: text
<img src="/img/3-lists/check2squares1c3.png" title="combine (squares) using (()+())" alt="combine (squares) using (()+())" border="0"/>
:::

::: feedback
No, + reports a number, so in this case <code>combine</code> will report
a number.
:::
:::

::: {.choice identifier="c1"}
::: text
<img src="/img/3-lists/check2squares1c4.png" title="keep items (letter (length of ()) of () = 1) from (squares)" alt="keep items (letter (length of ()) of () = 1) from (squares)" border="0"/>
:::

::: feedback
Correct.
:::
:::

::: {.choice identifier="c3"}
::: text
<img src="/img/3-lists/check2squares1c6.png" title="combine using (join ()()) items of (squares)" alt="combine (squares) using (join ()()) items of" border="0"/>
:::

::: feedback
No. <code>join</code>(1,4) will report 14.
:::
:::

::: {.choice identifier="c1"}
::: text
<img src="/img/3-lists/check2squares1c7.png" title="map ((0)-()) over (squares)" alt="map ((0)-()) over (squares)" border="0"/>
:::

::: feedback
Correct.
:::
:::

::: {.responseDeclaration identifier="resp1"}
::: {.correctResponse identifier="c1"}
:::
:::
:::

</li>

</ol>
:::

::: takeItFurther
<ol type="A">

<li>

Click the picture to load this database project:<br />

::: sidenote
Data from <em>Structure and Interpretation of Computer Programs</em> by
Abelson and Sussman. Creative Commons licensed.
:::

<a class="run" href="/prog/3-lists/U3L2-Employee-Database.xml"><img src="/img/3-lists/microshaft-database.png" title="list block containing nine instances of the constructor &apos;employee, name: () job title: () salary: ()&apos; each with various inputs" alt="list block containing nine instances of the constructor &apos;employee, name: () job title: () salary: ()&apos; each with various inputs" class="ms-4"/></a><br />
This is the list of employees of a small company. Each of the smaller
lists contains a person's name, job title, and yearly salary.

<p>"This company spends more money on the big bosses than on the people
who do the work," says Alyssa one day. Is she right? Write an expression
to compute the total salaries of everyone paid less than \$100,000 per
year. Then find the total for everyone paid more than \$100,000 per
year.</p>

</li>

<li>Ben suggests that the results will be more convincing in the form of
a list containing that total and all the names of the people in that
category (paid less than \$100,000, for example). So, if there are five
people in that category, your list will have six items: first the total
of the salaries, and then the names of the people. Try this both for
less than \$100,000 and for more than \$100,000.</li>

<li>Find the <em>average</em> salary of people paid less than \$100,000
per year.</li>

</ol>
:::
