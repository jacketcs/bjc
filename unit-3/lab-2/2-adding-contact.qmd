---
title: "Page 2: Adding Contact Data"
subtitle: "Unit 3, Lab 2, Page 2"
order: 2
---

::: learn
<p><strong>On this page,</strong> you will develop code for "Add
Contact" and "Clear List" buttons in your contact list program.
<!--develop:
<ul>
<li>An <strong>"Add Contact" button</strong> for adding each new contact using the <code>contact</code> constructor</li>
<li>A <strong>"Clear List" button</strong> for emptying the <var>contact list</var> while debugging</li>
</ul>--></p>
:::

::: {#first .forYouToDo}
<ol>

<li>If it isn't open already, open your U3L2-ContactList project.</li>

<li>

Develop the "Add Contact" button for the user.

<ol>

::: ap-standard
CRD-2.C
:::

<li>Looking at the previous page, write down the questions your program
is going to ask the user. The answers to these questions will be the
program <em>input</em>.</li>

::: vocabFullWidth
<strong>: Input</strong> and <strong>Output</strong>

::: ap-standard
CRD-2.C.1, CRD-2.C.4, CRD-2.C.6, CRD-2.D.1, CRD-2.D.2
:::

<p>We use "input" loosely to mean the empty boxes in a block that get
filled with values. But <strong>input</strong> also means information
entered into a program by the user, as in the <code>ask and wait</code>
block. Program input can also come from data tables, sounds, pictures,
video, or other programs.</p>

<p>Similarly, program <strong>output</strong> means any data sent from
your program to the user or to any device. Typically, the output depends
on the input.</p>
:::

<li>Make the script ask the user for contact data and then add that data
to the <var>contact list</var> using the <code>contact</code>
constructor.</li>

::: narrower
<h4><strong>Collecting Data from the User</strong></h4>

<p>

You'll want to ask the user for each piece of data (contact name,
address, and phone number) separately.

<ul>

<li><strong>You <em>could</em> use several <code>ask</code> and
<code>answer</code> blocks together with script variables</strong> to
request and then store each piece of user input until you are ready to
report them all together using <code>contact</code>.<br />
<img src="/img/3-lists/contact-constructor-with-variables.png" title="contact with name: (name) address: (address) phone: (phone)" alt="contact with name: (name) address: (address) phone: (phone)" class="indent"/></li>

<li><strong><em>Another way</em> that makes for cleaner code is to use
<em>abstraction</em>: create helper blocks</strong> (such as
<img src="/img/3-lists/ask-name.png" title="ask name" alt="ask name"/>
and
<img src="/img/3-lists/ask-phone.png" title="ask phone" alt="ask phone"/>)
that each ask the user for one piece of data and report their answer to
the <code>contact</code> constructor.<br />
<img src="/img/3-lists/contact-constructor-with-helpers.png" title="contact with name: (ask name) address: (ask address) phone: (ask phone)" alt="contact with name: (ask name) address: (ask address) phone: (ask phone)" class="indent"/><br />
Each of these helper blocks will <code>ask</code> the user a specific
question (like, "What is the contact's address?") and then report the
user's <code>answer</code>.</li>

</ul>

::: endnote
<p>You could first build a more general
<img src="/img/3-lists/answer-to-prompt.png" title="answer to prompt ()" alt="answer to prompt ()"/>
helper block (yet another abstraction) to use in the other helper blocks
instead of rewriting the <code>ask</code> and <code>answer</code> script
every time. <!--<br />
<a href="#hint-1" data-bs-toggle="collapse" class="collapsed">Click here for a hint.</a>--></p>

```{=html}
<!--<div id="hint-1" class="collapse">
<img class="indent" src="/img/3-lists/ask-name-definition.png" alt="ask name block definition" title="ask name block definition" />
</div>-->
```
:::

</p>
:::

<li><strong>Test and debug. </strong>Add a few made-up people to your
<var>contact list</var>. Make sure everything works.</li>

</ol>

</li>

::: endnote
<p>You can use these examples or make up your own:
31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATgBBAEEAeABBAEQARQBBAE8AQQBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEcASQBBAGIAdwBCAHkAQQBHAFEAQQBaAFEAQgB5AEEARwBVAEEAWgBBAEEAaQBBAEMAQQBBAGMAdwBCADEAQQBHADAAQQBiAFEAQgBoAEEASABJAEEAZQBRAEEAOQBBAEMASQBBAGQAQQBCAG8AQQBIAEkAQQBaAFEAQgBsAEEAQwBBAEEAWgBRAEIANABBAEcARQBBAGIAUQBCAHcAQQBHAHcAQQBaAFEAQQBnAEEARwBNAEEAYgB3AEIAdQBBAEgAUQBBAFkAUQBCAGoAQQBIAFEAQQBjAHcAQQBpAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBnAEEASQBBAEIAegBBAEcATQBBAGIAdwBCAHcAQQBHAFUAQQBQAFEAQQBpAEEARwBNAEEAYgB3AEIAcwBBAEMASQBBAFAAZwBCAHUAQQBHAEUAQQBiAFEAQgBsAEEARAB3AEEATAB3AEIAMABBAEcAZwBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBvAEEAQwBBAEEAYwB3AEIAagBBAEcAOABBAGMAQQBCAGwAQQBEADAAQQBJAGcAQgBqAEEARwA4AEEAYgBBAEEAaQBBAEQANABBAFkAUQBCAGsAQQBHAFEAQQBjAGcAQgBsAEEASABNAEEAYwB3AEEAOABBAEMAOABBAGQAQQBCAG8AQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYQBBAEEAZwBBAEgATQBBAFkAdwBCAHYAQQBIAEEAQQBaAFEAQQA5AEEAQwBJAEEAWQB3AEIAdgBBAEcAdwBBAEkAZwBBACsAQQBIAEEAQQBhAEEAQgB2AEEARwA0AEEAWgBRAEEAOABBAEMAOABBAGQAQQBCAG8AQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAEkAQQBCAHoAQQBIAFEAQQBlAFEAQgBzAEEARwBVAEEAUABRAEEAaQBBAEgAYwBBAGEAQQBCAHAAQQBIAFEAQQBaAFEAQQB0AEEASABNAEEAYwBBAEIAaABBAEcATQBBAFoAUQBBADYAQQBDAEEAQQBiAGcAQgB2AEEASABjAEEAYwBnAEIAaABBAEgAQQBBAE8AdwBBAGkAQQBEADQAQQBRAGcAQgBsAEEASABRAEEAYwB3AEIANQBBAEMAQQBBAFEAUQBCAHUAQQBHAFEAQQBaAFEAQgB5AEEASABNAEEAYgB3AEIAdQBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEMAQQBBAGMAdwBCADAAQQBIAGsAQQBiAEEAQgBsAEEARAAwAEEASQBnAEIAMwBBAEcAZwBBAGEAUQBCADAAQQBHAFUAQQBMAFEAQgB6AEEASABBAEEAWQBRAEIAagBBAEcAVQBBAE8AZwBBAGcAQQBHADQAQQBiAHcAQgAzAEEASABJAEEAWQBRAEIAdwBBAEQAcwBBAEkAZwBBACsAQQBEAEUAQQBNAGcAQQB6AEEAQwBBAEEAVABRAEIAaABBAEcAawBBAGIAZwBBAGcAQQBGAE0AQQBkAEEAQQB1AEEAQwBBAEEASQB3AEEAMABBAEMAdwBBAEkAQQBCAE8AQQBHAFUAQQBkAHcAQQBnAEEARgBrAEEAYgB3AEIAeQBBAEcAcwBBAEwAQQBBAGcAQQBFADQAQQBXAFEAQQBnAEEARABFAEEATQBBAEEAdwBBAEQAQQBBAE0AUQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBAGcAQQBIAE0AQQBkAEEAQgA1AEEARwB3AEEAWgBRAEEAOQBBAEMASQBBAGQAdwBCAG8AQQBHAGsAQQBkAEEAQgBsAEEAQwAwAEEAYwB3AEIAdwBBAEcARQBBAFkAdwBCAGwAQQBEAG8AQQBJAEEAQgB1AEEARwA4AEEAZAB3AEIAeQBBAEcARQBBAGMAQQBBADcAQQBDAEkAQQBQAGcAQQB5AEEARABFAEEATQBnAEEAdABBAEQAVQBBAE4AUQBBADEAQQBDADAAQQBNAFEAQQB5AEEARABNAEEATgBBAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAEkAQQBCAHoAQQBIAFEAQQBlAFEAQgBzAEEARwBVAEEAUABRAEEAaQBBAEgAYwBBAGEAQQBCAHAAQQBIAFEAQQBaAFEAQQB0AEEASABNAEEAYwBBAEIAaABBAEcATQBBAFoAUQBBADYAQQBDAEEAQQBiAGcAQgB2AEEASABjAEEAYwBnAEIAaABBAEgAQQBBAE8AdwBBAGkAQQBEADQAQQBRAFEAQgBzAEEASABBAEEAYQBBAEIAcABBAEcAVQBBAEkAQQBCAFEAQQBIAEkAQQBaAFEAQgB6AEEASABRAEEAYgB3AEIAdQBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEMAQQBBAGMAdwBCADAAQQBIAGsAQQBiAEEAQgBsAEEARAAwAEEASQBnAEIAMwBBAEcAZwBBAGEAUQBCADAAQQBHAFUAQQBMAFEAQgB6AEEASABBAEEAWQBRAEIAagBBAEcAVQBBAE8AZwBBAGcAQQBHADQAQQBiAHcAQgAzAEEASABJAEEAWQBRAEIAdwBBAEQAcwBBAEkAZwBBACsAQQBEAEUAQQBOAEEAQQA1AEEAQwBBAEEAUgBRAEEAdQBBAEMAQQBBAE0AUQBBADIAQQBIAFEAQQBhAEEAQQBnAEEARQBFAEEAZABnAEIAbABBAEMANABBAEwAQQBBAGcAQQBGAE0AQQBkAFEAQgB1AEEARwA0AEEAZQBRAEIAMgBBAEcARQBBAGIAQQBCAGwAQQBDAHcAQQBJAEEAQgBEAEEARQBFAEEASQBBAEEANQBBAEQAUQBBAE0AQQBBADQAQQBEAGsAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBJAEEAQgB6AEEASABRAEEAZQBRAEIAcwBBAEcAVQBBAFAAUQBBAGkAQQBIAGMAQQBhAEEAQgBwAEEASABRAEEAWgBRAEEAdABBAEgATQBBAGMAQQBCAGgAQQBHAE0AQQBaAFEAQQA2AEEAQwBBAEEAYgBnAEIAdgBBAEgAYwBBAGMAZwBCAGgAQQBIAEEAQQBPAHcAQQBpAEEARAA0AEEATgBBAEEAdwBBAEQAZwBBAEwAUQBBADEAQQBEAFUAQQBOAFEAQQB0AEEARABZAEEATgB3AEEANABBAEQAawBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBDAEEAQQBjAHcAQgAwAEEASABrAEEAYgBBAEIAbABBAEQAMABBAEkAZwBCADMAQQBHAGcAQQBhAFEAQgAwAEEARwBVAEEATABRAEIAegBBAEgAQQBBAFkAUQBCAGoAQQBHAFUAQQBPAGcAQQBnAEEARwA0AEEAYgB3AEIAMwBBAEgASQBBAFkAUQBCAHcAQQBEAHMAQQBJAGcAQQArAEEARQBjAEEAWQBRAEIAdABBAEcARQBBAGIAQQBBAGcAQQBFAEUAQQBZAGcAQgBrAEEARwBVAEEAYgBBAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAZwBBAEgATQBBAGQAQQBCADUAQQBHAHcAQQBaAFEAQQA5AEEAQwBJAEEAZAB3AEIAbwBBAEcAawBBAGQAQQBCAGwAQQBDADAAQQBjAHcAQgB3AEEARwBFAEEAWQB3AEIAbABBAEQAbwBBAEkAQQBCAHUAQQBHADgAQQBkAHcAQgB5AEEARwBFAEEAYwBBAEEANwBBAEMASQBBAFAAZwBBAHoAQQBEAFkAQQBPAFEAQQBnAEEARQBNAEEAWgBRAEIAdQBBAEgAUQBBAFoAUQBCAHkAQQBDAEEAQQBVAHcAQgAwAEEAQwA0AEEATABBAEEAZwBBAEUASQBBAGIAdwBCAHoAQQBIAFEAQQBiAHcAQgB1AEEAQwB3AEEASQBBAEIATgBBAEUARQBBAEkAQQBBAHcAQQBEAEkAQQBNAFEAQQB6AEEARABBAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEASQBBAEIAegBBAEgAUQBBAGUAUQBCAHMAQQBHAFUAQQBQAFEAQQBpAEEASABjAEEAYQBBAEIAcABBAEgAUQBBAFoAUQBBAHQAQQBIAE0AQQBjAEEAQgBoAEEARwBNAEEAWgBRAEEANgBBAEMAQQBBAGIAZwBCAHYAQQBIAGMAQQBjAGcAQgBoAEEASABBAEEATwB3AEEAaQBBAEQANABBAE4AZwBBAHgAQQBEAGMAQQBMAFEAQQAxAEEARABVAEEATgBRAEEAdABBAEQARQBBAE0AQQBBADUAQQBEAGcAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAFkAUQBCAGkAQQBHAHcAQQBaAFEAQQArAEEAQQA9AD0ACgBzAHUAZgBmAGkAeAA6AA==:31b8e172-b470-440e-83d8-e6b185028602</p>
:::

<li>

Develop a "Clear List" button that resets the <var>contact list</var> to
an empty list, which is essential while programming whenever you change
the structure of the ADT.

<ol>

<li>

Make the script ask the user for confirmation (so the user won't
accidentally delete their list).

::: endnote
For example, clicking, "Clear List" might <code>ask</code> the user,
"Enter c to clear the list, or enter anything else to cancel."
:::

</li>

<li><strong>Debug.</strong> Make sure this feature behaves as expected
for either user choice.</li>

</ol>

</li>

<img src="/img/icons/save-now.png" title="Save your work" alt="Save your work" class="imageRight"/>

</ol>
:::

::: takeNote
Most of the programs you've written have one script that's in charge,
using loop blocks to keep running either forever or just for a long
time. This project is different: Nothing happens until you click a
button (recall from Unit 1 that this is called an <em>event</em>), which
starts a script that just runs briefly, to do whatever action the button
requires. This kind of program structure is called
<strong>event-driven</strong> programming.
:::

::: ifTime
<ol start="4">

<li>The sprites' questions might be covered up by the <var>contact
list</var> watcher on the stage. Use <code>hide variable</code> and
<code>show variable</code> to hide the <var>contact list</var> watcher
until the end of each sprite's script.</li>

</ol>
:::

::: takeItFurther
<p>

In this activity, you're going to refine the handling of people's names.
When you look up a particular person, you want to see their name as
you've been seeing it on this page, first name first: "Alphie Preston."
But suppose you want to <em>sort</em> your contacts. Typically that's
done by <em>last</em> name, so the list would look something like

<ul>

<li>Abdel, Gamal</li>

<li>Anderson, Betsy</li>

<li>Preston, Alphie</li>

</ul>

So you need to be able to show a name first name first for ordinary
display, but last name first for sorting.

</p>

<p><strong>Before you begin,</strong> save your project again, under the
name U3L2-TIF. This will keep your work on these problems separate from
the regular problems.</p>

<ol type="A">

<li>The first step is to <strong>create an abstract data type</strong>
for names. You'll need a constructor that takes first name and last name
as inputs, and reports a list of them to represent the name part of a
contact.</li>

<li><strong>Reading a name:</strong> The next step is to modify the
program you wrote above so that it asks separately for the first name
and the last name, constructs a name (that is, a list) using the
constructor you just wrote, and uses that list as the name input to the
<code>contact with name</code> block. This is an abstract data type
(name) inside another abstract data type (contact).</li>

<li><strong>Writing a name:</strong> Your <code>name from contact</code>
block will now report a list, as it should. But some other parts of the
program, such as the part that displays a contact to the user, want to
display the name as a text string: "Betsy Anderson." The part that sorts
the contact list also wants a string: "Anderson, Betsy." Write two
blocks
<img src="/img/3-lists/name-display-form-from-contact.png" title="name, display form, from contact &apos;list input slot" alt="name, display form, from contact &apos;list input slot" class="inline"/>
and
<img src="/img/3-lists/name-sort-form-from-contact.png" title="name, sort form, from contact &apos;list input slot" alt="name, sort form, from contact &apos;list input slot" class="inline"/>
that join the two parts of the name with a space and/or a comma as
needed.</li>

</ol>

::: takeNote
This three-step process (create an ADT, use it to read values of that
type, use it to write values of that type) is very common in
programming. You'll follow the same three steps again in the Take It
Further on page 4.
:::

<p><strong>Save your work.</strong> On page 4 you're going to find a
contact by letting the user enter any part of the name, and display the
entire contact. Use the name abstraction you've just created when you do
that.</p>
:::
