---
title: "Page 4: Selecting Specific Data"
subtitle: "Unit 3, Lab 2, Page 4"
order: 4
---

::: todo
<strong>Purpose (do/learn; why this/here):</strong> Create a "Find
Contact" button that uses a `find contacts` block to
<em>select</em> items from the <var>contact list</var> based on the
contact's name. Students get practice with list processing, navigating
abstract data types, and using the higher-order function,
`keep`.
:::

::: todo
<p>BH: Ditto. (I still want given and family names! We can make it
doable.)</p>

<ul>

<li>Mary and Brian agreed to do this as a TIF. BH will write it onto
this page in a TIF, and Mary will review/edit. --MF, 4/9/19</li>

</ul>
:::

::: learn
<p><strong>On this page,</strong> you will develop code for a "Find
Contact" button to locate contacts in the
list<!--develop An "Find Contact" button for accessing specific contacts in your <var>contact list</var>-->.<br />
<img src="/img/3-lists/find-contacts-with-name-Alphie-reporting.png" title="find contacts with name: (Alphie) reporting" alt="find contacts with name: (Alphie) reporting" class="ms-4"/></p>
:::

::: sidenote
You learned about
<a href="/unit-2/lab-3/5-keeping-list-items.html" title="Keeping Items from a List">`keep`
in Unit 2</a>.
:::

::: ap-standard
DAT-2.D.3
:::

<p>As you add more contacts to your list, it will become less and less
realistic to find the one you want by reading through the whole list. So
building a search feature will become essential for finding the desired
information efficiently. Lists, adding and removing items from lists,
and searching lists are common features in many programs.</p>

::: atworkFullWidth
::: float-end
<img src="/img/atwork/Farida_Bedwei.jpeg" title="photo of Farida Bedwei" alt="photo of Farida Bedwei" class="noshadow" height="200px"/>
:::

<p>Farida Bedwei (born in 1979) is a software engineer and the
co-founder/Chief Technology Officer of Logiciel, a financial technology
company based in Ghana. Due to difficulties in muscle control as a
result of cerebral palsy, she began using a typewriter as an alternative
to writing at an early age. Badwei attributes her future interest in
computers to this early reliance on technology. In addition to being
named as one of the most successful women in finance technology in
Africa, Bedwei is a powerful advocate and role model for girls in STEM
and for people with disabilities.</p>

<p><a href="https://edition.cnn.com/2015/02/13/africa/farida-bedwei-ghanaian-software-genius/index.html" title="Article: The inspirational tech guru whoâ€™s owning cerebral palsy like a boss" target="_blank">Article:
The inspirational tech guru who's owning cerebral palsy like a
boss</a></p>
:::

::: todo
BH and Mary want to use this again and mention tables and include images
of both in snap and discuss how to change back and forth between the two
views. --MF, 4/9/19

<p>Each new contact is a list (item 1 is a name and item 2 should be a
phone number), so the list of contacts is a <em>list of lists</em>.</p>
:::

::: {#first .forYouToDo}
<ol>

<li>If it isn't open already, open your U3L2-ContactList project.</li>

<li>

Write a
<img src="/img/3-lists/find-contacts-with-name.png" title="find contacts with name: ()" alt="find contacts with name: ()"/>
block that takes a text string as input and reports either a list of the
contacts whose name includes that string or an empty list if no such
name is in <var>contact list</var>.

::: narrower
<strong>Use these blocks:</strong>

<ol type="a">

<li><img src="/img/3-lists/string-contains.png" title="string () contains () ?" alt="string () contains () ?" class="inline"/>,
which reports `true` if the first string (for example, a
contact's name in the list) contains the second string (for example, a
name or part of a name)</li>

<li><img src="/img/blocks/keep.png" title="keep items &apos;predicate input slot&apos; from &apos;list input slot&apos;" alt="keep items &apos;predicate input slot&apos; from &apos;list input slot&apos;" class="inline"/>,
which reports only the items that make the function true</li>

<li><img src="/img/blocks/empty.png" title="is &apos;list input slot&apos; empty?" alt="is &apos;list input slot&apos; empty?" class="inline"/>,
which returns `true` if the list is empty and
`false` otherwise</li>

<li>Selector
<img src="/img/3-lists/name-selector.png" title="name from contact: ()" alt="name from contact: ()" class="inline"/></li>

</ol>
:::

</li>

<li>

Develop a "Find Contact" button.

<ol>

<li>Make the script ask the user whose contact to search for and have
the sprite `say` each of the matching contacts.</li>

<li>If the contact is not in the list, make the sprite say "not
found."</li>

</ol>

</li>

<li><strong>Debug.</strong> Make sure everything works the way you want
it to before going on.</li>

::: ap-standard
CRD-2.D
:::

<img src="/img/icons/save-now.png" title="Save your work" alt="Save your work" class="float-end"/>

<li><img src="/img/icons/write-in-journal-mini.png" title="Write In Your Journal" alt="Write In Your Journal" class="inline"/>What
is the output of this program?</li>

</ol>
:::

::: vocabFullWidth
::: ap-standard
AAP-3.B.2, AAP-3.B.3
:::

<p><strong>Modularity</strong> is the process of breaking a programming
project up into separate sub-problems. For example on page 2 of this
lab, you built code to add a contact to your app, and on this page, you
built code to find contacts.</p>
:::

::: ifTime
<ol start="6">

<li>

Develop a "Delete Contact" button.

<ol>

<li>Move the "Delete Contact" button onto the stage.</li>

<li>Make the script ask the user to "Enter the name of the contact(s)
you wish to delete."</li>

<li>Then, use your `find contacts` block to find all the
matching contacts.</li>

<li>Give the user the list of matching contacts and ask them for
confirmation to delete (so the user won't accidentally delete their
contact).</li>

<li>If the user confirms that they want to delete these contacts,
replace the <var>contact list</var> with a list of all contacts whose
name does <em>not</em> match the input name.</li>

</ol>

</li>

<li>

Modify your "Delete Contact" script so that it lets the user choose
which contact they want to delete when `find` reports more
than one.

<ol>

<li>Write a helper block `delete contact` that takes a
contact as input and removes that contact from <var>contact
list</var>.</li>

<li>Modify "Delete Contact" so that, if more than one contact matches
the user's name input, it displays a list of the matching names and asks
the user to select one by number. (The item numbers are automatically
displayed in the name list, so you don't have to worry about that part.)
Give the user a way to cancel the request instead of choosing a
name.</li>

<li>If <em>exactly one</em> contact matches, instead of displaying the
one-item list of names, just ask the user to confirm or cancel deleting
it. (Optional.)</li>

</ol>

</li>

</ol>
:::

::: takeItFurther
<p>This set of exercises requires that you've already done the Take It
Further exercises on page 2. <strong>Open your project
U3L2-TIF.</strong></p>

<ol type="A">

<li>Write a predicate function that takes two contacts as inputs. It
should return True if the first contact belongs before the second one in
a sorted contact list. That is, you'll have to extract the names (in
sorted form) from the two contacts, and then use `\<` to
compare them. Respect the data abstractions.</li>

<li>Make a block to sort the contact list. To do the actual sorting, you
can load the "List utilities" library. It has a block
<img src="/img/blocks/sort-block.png" title="sort &apos;list input slot&apos; ordering with &apos;predicate input slot&apos;" alt="sort &apos;list input slot&apos; ordering with &apos;predicate input slot&apos;" width="242"/>.
Use the contact list as the first input. The second input should be the
predicate function you just wrote. (Leave its two input slots empty.)
The `sort` block will report a new, sorted contact list.</li>

<li>Test what you've done so far.</li>

<li>

<img src="/img/icons/tough-stuff.png" title="Tough Stuff" alt="Tough Stuff" class="inline"/>
We've been sloppy so far in talking about name formats. Most people in
the United States say their given name (the one their parents chose for
them) first, and their family name last. But in China, for example, the
family name comes first. So "Sun Yat-sen" is a member of the Sun family.

<ul>

<li>How should the name "Sun Yat-sen" be displayed to the user?</li>

<li>How should "Sun Yat-sen" look in order to sort contacts by family
name?</li>

<li>What about someone with a middle name, such as Martin Luther King?
Is the middle name a family name or a given name?</li>

</ul>

</li>

<li>

<img src="/img/icons/tough-stuff-mini.png" title="Tough Stuff" alt="Tough Stuff" class="inline"/>
Here's the tricky part: To make this all work correctly, a name (as
defined by the `name` ADT) has to know whether it's a
given-first name such as Betsy Anderson or a family-first name such as
Sun Yat-Sen. <strong>Redefine your Name ADT</strong> to make it a list
of <em>three</em> items. The first will be either the text 'given-first'
or 'family-first'. This first item is called a <em>type tag.</em> The
second item will be the given name (or names), and the third will be the
family name (or names).

::: endnote
You've been using type tags all along without knowing it. Many
programming languages, including Snap<i>!</i>, attach type tags to every
value, saying "I am a list" or "I am a number" and so on. The user
(i.e., you) doesn't see the type tags, unless you provide a bad input to
a primitive block, and you see a message like "Expecting list but
getting text."
:::

</li>

<li><img src="/img/icons/tough-stuff-mini.png" title="Tough Stuff" alt="Tough Stuff" class="inline"/>
<strong>Reading a name:</strong> Find where you ask the user for first
and last name, and change the code to ask for given name(s) and family
name. Also ask which comes first. You might want to have two name
constructors,
<img src="/img/3-lists/given-first-constructor.png" title="contact name, given-first, from given: () family: ()" alt="contact name, given-first, from given: () family: ()" class="inline"/>
and
<img src="/img/3-lists/family-first-constructor.png" title="contact name, family-first, from given: () family: ()" alt="contact name, family-first, from given: () family: ()" class="inline"/>.</li>

<li><img src="/img/icons/tough-stuff-mini.png" title="Tough Stuff" alt="Tough Stuff" class="inline"/><strong>Writing
a name:</strong> Modify your
<img src="/img/3-lists/name-display-form-from-contact.png" title="name, display form, from contact &apos;list input slot" alt="name, display form, from contact &apos;list input slot" class="inline"/>
and
<img src="/img/3-lists/name-sort-form-from-contact.png" title="name, sort form, from contact &apos;list input slot&apos;" alt="name, sort form, from contact &apos;list input slot&apos;" class="inline"/>
so that they check the type tag of the name (the first item) when
necessary. Be careful about when to add a comma.</li>

<li><img src="/img/icons/tough-stuff-mini.png" title="Tough Stuff" alt="Tough Stuff" class="inline"/>
Make sure your `find contacts` block and your sorting of the
contact list still work with a contact list containing both kinds of
names.</li>

</ol>
:::
