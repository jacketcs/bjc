---
title: "Page 1: Creating the Contact ADT"
subtitle: "Unit 3, Lab 2, Page 1"
order: 1
---

::: learn

**This page is for reference.**

Review the steps on this page and page two. This has already been completed for you at the start of [Page 3](/unit-3/lab-2/3-modifying-adt.qmd).

**On this page,** you will develop an **Abstract
Data Type** to store and access <em>contact data</em> (name,
address, phone number, etc.).
:::

::: takeNote
<h4>**Preserve Privacy**</h4>

Snap<em>!</em> projects are not secure. Do not use your or your
classmates' personal information.
:::

<h3>Setting Up the Contact List</h3>

::: {#first .forYouToDo}
<ol>

<li><a class="run" href="/prog/3-lists/U3L2-ContactList.xml"><img src="/img/icons/load-save.png" title="Click here to load this file. Then save it to your Snap! account." alt="Click here to load this file. Then save it to your Snap! account." class="inline"/></a></li>

<li>Create a global <var>contact list</var> variable.</li>

<li>Initialize <var>contact list</var> as an empty list.</li>

</ol>
:::

::: takeNote
<h4>**Why global?**</h4>

**Multiple scripts** across the project **will use
this variable**, so it shouldn't be attached to just one script
like a local, script variable.
:::

<h3>Creating the ADT</h3>

::: dialogue
::: stagedir
Betsy and Gamal are planning to build a Contact List in Snap<em>!</em>.
:::

<div>

Betsy: We need a way to add a contact to our <var>contact list</var>.

</div>

<div>

Gamal: Each contact will be a list that with the a person's name, phone
number, address, email, or whatever we write.

</div>

<div>

Betsy:
<a href="/unit-2/lab-2/2-quizzes.html" title="In Unit 2, we created a quiz item abstract data type">In
Unit 2, we created a `quiz item` abstract data type</a> to
store the questions and answers in a list of quiz items. Here, we can
make a `contact` abstract data type to store the data for
each contact in our list of contacts.

</div>

<div>

Gamal: Yeah. In this project, we'll need a `contact`
constructor and then selectors to access the `name`,
`address`, and `phone number` for any given
contact.

</div>
:::

::: forYouToDo
<ol start="4">

<li>

:::: sidenoteBig
**Shortcut:** You could paste the following text into the
"Make a block" window to build the block more quickly.

<p style="margin-left:25px;">`contact with name: %name address: %address phone: %phone`</p>

The percent (%) signs make those words become input variables.
::::

Create a `contact` <em>constructor</em> that accepts three
pieces of data as input: the contact's <var>name</var>, <var>phone
number</var>, and <var>address</var>. <br />
<img src="/img/3-lists/contact-constructor-untyped.png" title="contact with name: () address: () phone: ()" alt="contact with name: () address: () phone: ()" class="ms-4"/><br />
It should report one whole contact (a list of the three items):<br />
<img src="/img/3-lists/contact-constructor-reporting.png" title="contact with name: (Betsy Anderson) address: (123 Main St. #4, New York, NY 10001) phone: (212-555-1234) reporting {Betsy Anderson; 123 Main St. #4, New York, NY 10001; 212-555-1234}" alt="contact with name: (Betsy) address: (123 Main St. #4, New York, NY 10001) phone: (212-555-1234) reporting {Betsy Anderson; 123 Main St. #4, New York, NY 10001; 212-555-1234}" class="ms-4"/><br />

</li>

<li>

Write the <em>selector</em> blocks to retrieve the `name from
contact`, `address from contact`, or `phone from
contact`.
<img src="/img/3-lists/contact-constructor-in-name-selector.png" title="contact name (contact block with inputs) reporting " alt="contact name (contact block with inputs) reporting " class="ms-4"/><br />
<img src="/img/3-lists/contact-constructor-in-address-selector.png" title="contact address (contact block with inputs) reporting " alt="contact address (contact block with inputs) reporting " class="ms-4"/><br />
<img src="/img/3-lists/contact-constructor-in-phone-selector.png" title="contact phone (contact block with inputs) reporting " alt="contact phone (contact block with inputs) reporting " class="ms-4"/>

::: takeNote
::: sidenote
You learned about input types and output types (domain and range) on
<a href="/unit-2/lab-3/1-what-is-predicate.html" title="Unit 2 Lab 3 Page 1: What's a Predicate?">Unit
2 Lab 3 Page 1: What's a Predicate?</a>.
:::

It's important to make sure that your inputs to a function match the
expected input type. For example, the input type of `address from
contact` matches the output type of `contact`; they are
both of type "contact."

If you call `address from contact` with an input that
doesn't match, such as a <em>list</em> of contacts (for example, the
<var>contact list</var> variable or the result of running
`keep` and having a subset of that list), it's not going to
work. That may sound obvious, but in fact, beginning programmers make
mistakes like that all the time; you have to teach yourself to think
about the input and output types of your functions every time you write
or use one.

That's also true about the inputs to the `contact`
constructor; you can't put something that isn't a name in the name input
for `contact`.
:::

::: endnote
It's somewhat artificial to use the constructor as the input to a
selector; these images are just examples to show what the selectors
should be able to do when given a contact as input. In <em>your</em>
program, the selectors will take an item from the contact list as input
and output the correct piece of that contact, like this:<br />
<img src="/img/3-lists/address-from-contact-item-1-of-contact-list-reporting.png" title="address from contact (item (1) of (contact list)) reporting &apos;123 Main St. #4, New York, NY 10001&apos;" alt="address from contact (item (1) of (contact list)) reporting &apos;123 Main St. #4, New York, NY 10001&apos;" class="ms-4"/>
:::

</li>

<li>

Declare input types for each selector to make it obvious that they
expect a list (one whole contact) as input.<br />
<img src="/img/3-lists/name-selector.png" title="name from contact: ()" alt="name from contact: ()" class="ms-4"/>
<img src="/img/3-lists/address-selector.png" title="address from contact: ()" alt="address from contact: ()" class="ms-4"/>
<img src="/img/3-lists/phone-selector.png" title="phone from contact: ()" alt="phone from contact: ()" class="ms-4"/>

::: endnote
You learned about Specifying an Input Type on
<a href="/unit-2/lab-2/2-quizzes.html" title="Unit 2 Lab 2 Page 2: Planning a Quiz App">Unit
2 Lab 2 Page 2: Planning a Quiz App</a>.
:::

</li>

<li>

Test your blocks together, and debug any problems.

<ol>

<li>First, put the constructor (with input values) inside each selector
(as shown above) to test that they each report the correct piece of
data.</li>

<li>

Then, use the `contact` constructor to `add` a few
contacts to your contact list.

::: endnote
You can use these examples or make up your own:

| name           | address                               | phone        |
|----------------|---------------------------------------|--------------|
| Betsy Anderson | 123 Main St. #4, New York, NY 10001   | 212-555-1234 |
| Alphie Preston | 149 E. 16th Ave., Sunnyvale, CA 94089 | 408-555-6789 |
| Gamal Abdel    | 369 Center St., Boston, MA 02130      | 617-555-1098 |

:::

</li>

<li>Notice how your contacts appear in the list.</li>

::: endnote
If you don't remember about table view and list view, revisit
<a href="/unit-2/lab-2/2-quizzes.html#two-views">page
2.2.2</a>.
:::

<li>Try selecting the `name`, `address`, or
`phone` from a contact in your list<br />
<img src="/img/3-lists/name-from-contact-random-reporting.png" title="name from contact: (item (random) of (contact list)) reporting Alphie Preston" alt="name from contact: (item (random) of (contact list)) reporting Alphie Preston" class="ms-4"/></li>

<img src="/img/icons/save-mini.png" title="Save Your Work" alt="Save Your Work" class="float-end"/>

<li>**Debug** any problems.</li>

</ol>

</li>

::: ap-standard
AAP-1.D part b
:::

<li><img src="/img/icons/write-out-thoughts.png" title="Write Out Your Thoughts" alt="Write Out Your Thoughts" class="inline"/>
Write down how the use of an abstract data type helps manage complexity
in your program.</li>

</ol>
:::
