---
title: "Page 4: Brick Wall"
subtitle: "Unit 3, Lab 1, Page 4"
order: 4
---

::: learn
<img src="/img/2-complexity/humpty-dumpty-tenniel.png" title="Humpty Dumpty on brick wall" alt="Humpty Dumpty on brick wall" class="float-end"/>

<p><strong>In this project,</strong> you will use abstraction to draw a
brick wall.</p>

<img src="/img/abstraction/new-brickwall/wall.png" title="Sample image of brick wall" alt="Sample image of brick wall" class="ms-4" border="0"/>
:::

<h3>Drawing One Brick</h3>

<p>

A picture of a brick is just a rectangle with a brick red color.
However, there's no <code>draw rectangle</code> block in [snap]{.snap}.
One way to draw one is by thinking of a rectangle as a very thick line.
Here's the idea:<br />

::: sidenoteBig
Any good programming language might have many tools for drawing and
moving, but it wouldn't make sense to have special tools for drawing
bricks because most programs don't involve bricks. That's the sort of
tool you make yourself when you need it.
:::

<img src="/img/2-complexity/U2ImageVideoAddendum_img/simpleBrickCode.png" title="draw brick, length:(length) width:(width){set pen size to(width); move(length) steps}" alt="draw brick, length:(length) width:(width){set pen size to(width); move(length) steps}" class="ms-4"/>

</p>

::: {#first .forYouToDo}
<ol>

<li><img src="/img/icons/talk-with-your-partner.png" title="Talk with Your Partner" alt="Talk with Your Partner" class="inline"/>
The code below has more details than the picture above. Review it, and
determine what it will do.<br />
<img src="/img/3-lists/drawBrickCode.png" title="draw brick, length:(length#) width:(width#){set pen color to (red); set flat line ends to (true); set pen size to (width); pen down; move(length) steps; pen up}" alt="draw brick, length:(length#) width:(width#){set pen color to (red); set flat line ends to (true); set pen size to (width); pen down; move(length) steps; pen up}" class="ms-4"/><br />
<a class="run" href="/prog/3-lists/U3L1-brickwall.xml"><img src="/img/icons/load-save.png" title="Click here to load this file. Then save it to your Snap! account." alt="Click here to load this file. Then save it to your Snap! account." class="inline" width="550"/></a>
Run the code. Does it do what you expected?</li>

::: endnote
<p>Ordinarily, Snap<em>!</em> draws rounded ends on thick lines:
<img src="/img/2-complexity/U2ImageVideoAddendum_img/round-ends.png" title="line with round ends" alt="line with round ends" class="py-0"/>.
That's often the best choice, and you can see why below. But for bricks,
we want <em>flat</em> line ends:
<img src="/img/2-complexity/U2ImageVideoAddendum_img/flat-ends.png" title="flat line ends" alt="flat line ends" class="py-0"/>,
and so we'll use
<img src="/img/blocks/set-flat-line-ends.png" title="set (flat line ends) to &apos;predicate input slot&apos;" alt="set (flat line ends) to &apos;predicate input slot&apos;"/>
to turn on flat line ends.</p>

:::: {.grid}
::: g-col-6
<img src="/img/2-complexity/flat-line-ends-why.jpg" title="Square with flat line ends versus square with round line ends" alt="Square with flat line ends versus square with round line ends"/><br /><strong>flat</strong>
vs. <strong>rounded</strong> line ends
:::

::: g-col-6
<img src="/img/blocks/set-video-with-menu.png" title="set [video capture] to &apos;predicate input slot&apos; with menu open showing: turbo mode, flat line ends, video capture, mirror video" alt="set [video capture] to &apos;predicate input slot&apos; with menu open showing: turbo mode, flat line ends, video capture, mirror video" class="inline"/>
:::
::::

:::

</ol>
:::

::: vocabFullWidth
: <strong>Abstraction</strong>

::: ap-standard
AAP-3.B.1, AAP-3.B.5
:::

<p>As you learned in
<a href="/unit-1/lab-2/2-gossip.html" title="Unit 1 Lab 2 Page 2: Making Programs Talk">Unit
1 Lab 2 Page 2: Making Programs Talk</a>, <strong>procedural
abstraction</strong> is the process of developing a program by breaking
up a large problem into smaller sub-problems.</p>

<p>Creating a <code>draw brick</code> block lets you think in terms of a
procedure with a name related to the problem you are solving. This makes
your code easier to read, and once you've coded and debugged the block,
you don't need to think about how it works each time you use it. That's
the beauty of procedural abstraction.</p>
:::

<h3>Using Modularity</h3>

<p>You'd like the "top level" block to be something like this:<br />
<img src="/img/2-complexity/U2ImageVideoAddendum_img/draw-brick-wall-7.png" title="draw brick wall, rows: (7)" alt="draw brick wall, rows: (7)" class="ms-4"/><br />
Getting there involves <em>modularity</em>.</p>

::: vocabFullWidth
::: ap-standard
AAP-3.B.2, AAP-3.B.3
:::

<p><strong>Modularity</strong> is the process of breaking a problem into
smaller pieces. Modularity is a form of procedural abstraction.</p>
:::

<p>

There are two kinds of rows, so you'll make blocks that specialize in
each:

<ul>

<li><strong>Row A</strong>:
<img src="/img/abstraction/new-brickwall/row-a.png" title="Row A" alt="Row A" class="noshadow" border="0"/></li>

<li><strong>Row B</strong>:
<img src="/img/abstraction/new-brickwall/row-b.png" title="Row B" alt="Row B" class="noshadow" border="0"/></li>

</ul>

</p>

::: {#second .forYouToDo}
<ol start="2">

::: ap-standard
AAP-3.C
:::

<li>Use <code>draw brick</code> to make blocks
<img src="/img/2-complexity/U2ImageVideoAddendum_img/draw-row-A.png" title="draw row A" alt="draw row A"/>
and
<img src="/img/2-complexity/U2ImageVideoAddendum_img/draw-row-B.png" title="draw row B" alt="draw row B"/>.</li>

::: endnote
<img src="/img/icons/read-more-mini.png" title="Read More" alt="Read More" class="inline"/>
<a href="#hint-too-much" data-bs-toggle="collapse" title="Too much abstraction?">Too
much abstraction?</a>

::: {#hint-too-much .collapse}
<p>It's possible to go overboard on abstraction and build so many blocks
that your program is just as cluttered as it would be without the custom
blocks. But it <em>can</em> be useful to make a custom block even when
its definition is just one built-in block. For example, to draw the
mortar between blocks (the white gaps), you can just use <code>move (4)
steps</code>, but it might make sense to define a <code>draw
mortar</code> block that uses <code>move</code> inside it.</p>

<p>Why? You might later decide that four steps is the wrong thickness
for mortar and you'd rather have five. Or you might want the mortar to
be mortar-colored, slightly gray. With many <code>move (4) steps</code>
instructions scattered through your program, you would have to find and
change each one. To make matters worse, your complete project might have
<code>move</code> blocks that <em>aren't</em> about mortar. But with a
<code>draw mortar</code> block, you can change just its definition, and
all the mortar in your picture will be changed.</p>
:::
:::

<li>

The two kinds of rows should be exactly the same length. Your first try
at drawing Row B is probably a little too long. <strong>If so, debug
it.</strong>

::: endnote
<p>Debug by thinking about what you are trying to accomplish, not about
your code.
<a href="#hint-debug" data-bs-toggle="collapse" title="Debug by thinking about what you are trying to accomplish, not about your code. For example...">For
example...</a></p>

::: {#hint-debug .collapse}
<ul>

<li>Should Row B have different-size bricks, different-size gaps, or
just different-size bricks on the end?</li>

<li>If you're not sure, try all the possibilities and see which looks
right in the finished wall.</li>

<li>Or think "What would <em>make the most sense</em> in a <em>real</em>
brick wall?"</li>

</ul>
:::
:::

</li>

<li>

Write and test the
<img src="/img/2-complexity/U2ImageVideoAddendum_img/draw-brick-wall-7.png" title="draw brick wall, rows: (7)" alt="draw brick wall, rows: (7)" class="py-0"/>
block.

::: endnote
You might want to use the <code>odd?</code> predicate from your
U2L4-MathLibrary. You learned about exporting and importing blocks on
<a href="/unit-2/lab-3/1-what-is-predicate.html" title="What's a Predicate?">Unit
2 Lab 3 Page 1: What's a Predicate?</a>
:::

</li>

<img src="/img/icons/save-now.png" title="Save your work" alt="Save your work" class="float-end"/>

::: ap-standard
AAP-3.B
:::

<li><img src="/img/icons/talk-with-another-pair.png" title="Talk with Another Pair" alt="Talk with Another Pair" class="inline"/>
How do you think procedural abstraction manages the complexity of a
program?</li>

</ol>
:::

::: ifTime
<ol start="6">

<li>

Add more inputs to <code>draw brick wall</code> (and as needed to
<code>draw row A</code> and <code>draw row B</code>) for:<br />

<ol style="list-style:lower-roman;">

<li>Number of <var>bricks per row</var></li>

<li><var>length</var> and <var>width</var> of a brick</li>

<li>Gap <var>thickness</var></li>

</ol>

<img src="/img/2-complexity/U2ImageVideoAddendum_img/draw-brick-wall-TIF.png" title="draw brick wall, rows: (21) bricks per row: (11) brick length: (30) width: (10) gap thickness: (5)" alt="draw brick wall, rows: (21) bricks per row: (11) brick length: (30) width: (10) gap thickness: (5)" class="ms-4"/><br />

::: endnote
Add these extra inputs one at a time, not all at once! When you modify
the length of a brick, that should also change the length of an end
brick for row B. When you modify the gap thickness, that should also
change the distance between the rows.
:::

</li>

</ol>
:::
