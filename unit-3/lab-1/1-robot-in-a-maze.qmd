---
title: "Page 1: Robot in a Maze"
subtitle: "Unit 3, Lab 1, Page 1"
order: 1
editor: 
  markdown: 
    wrap: 72
---

::: learn
<strong>In this project,</strong> you will create algorithms to escape
from a maze.
:::

<p>

Imagine you're a robot trapped in a maze. You don't have a bird's-eye
view so you can see all the possibilities (shown below left). Instead,
you're inside it, and the walls are taller than you are (shown below
right).<br />

::: sidenote
<small>Images by
<a href="https://en.scratch-wiki.info/wiki/File:Snip20150724_4.png" title="Image by Scratch user Legolover8888" target="_blank">Scratch
user Legolover8888</a> and
<a href="https://commons.wikimedia.org/wiki/File:Inside_the_maze,_Bridge_End_Garden_-_geograph.org.uk_-_819539.jpg" title="Image by Wikimedia user Oxyman"  target="_blank">Wikimedia
user Oxyman</a></small>
:::

<img src="img/2-complexity/maze-above.png" title="drawing of maze seen from above" alt="drawing of maze seen from above" class="ms-4"/>
<img src="img/2-complexity/maze-inside.jpg" title="photograph of maze of hedges with tall walls seen from the inside" alt="photograph of maze of hedges with tall walls seen from the inside" class="ms-4" width="240"/>

</p>

::: forYouToDo
<ol>

<li><img src="img/icons/talk-with-another-pair.png" title="Talk with Another Pair" alt="Talk with Another Pair" class="inline"/>Come
up with an algorithm to escape from any maze. Write it down on
paper.</li>

::: ap-standard
AAP-2.A, AAP-2.G, AAP-2.J
:::

<li>

Looking at your algorithm, find examples of:

<ul>

<li><em>sequence</em> (several steps done one after another)</li>

<li><em>selection</em> (a place where the algorithm does one of two
things depending on some condition)</li>

<li><em>repetition</em> (the algorithm does the same thing over and
over)</li>

</ul>

</li>

<li>Without using Snap<em>!</em>, consider: Does your algorithm work on
the maze in the first picture on this page? Start at the orange circle,
facing north (in the direction of the arrow). Your goal is to reach the
red X.</li>

<li>If your algorithm didn't work, debug it.</li>

</ol>
:::

::: ap-standard
AAP-2.M.2 bullet 4
:::

<p>One well-known maze algorithm is called "Follow the left wall." The
idea is to keep your left hand touching a wall. If suddenly your left
hand isn't touching a wall, there's a corridor to the left, and in order
to keep your hand on the left wall, you turn left and go down the
corridor. If instead you bump into a wall in front of you, then in order
to keep your hand on the left wall you'll have to turn right. (Draw a
sketch if that doesn't make sense to you.) For many mazes, this simple
algorithm will eventually get you to the exit.</p>

::: forYouToDo
<ol start="5">

<li>Does the left wall algorithm work for the maze in the first picture?
If not, can you debug it?</li>

</ol>
:::

::: examFullWidth
<p>

There are problems about a robot in a grid with special procedures that
don't exist in Snap<em>!</em>:

<ul>

<li>

The

```{=html}
<pre class="inline">MOVE_FORWARD ()</pre>
```
moves the sprite forward one grid square. (You need to call it
repeatedly to move more than one grid square.)

</li>

<li>

The

```{=html}
<pre class="inline">ROTATE_LEFT ()</pre>
```
or

```{=html}
<pre class="inline">ROTATE_RIGHT ()</pre>
```
blocks always turn exactly 90 degrees. (They are used only to move a
robot in a grid.)

</li>

<li>

The

```{=html}
<pre class="inline">CAN_MOVE (direction)</pre>
```
block returns true or false depending on whether or not the robot can
move in the input direction without running into a wall or walking off
of the maze.

</li>

</ul>

You can read more about these AP language procedures on the
<a href="cur/snap-cheat-sheet.html?course=bjc4nyc.html&novideo&noassignment" title="Snap! Cheat Sheet" target="_blank">Snap<em>!</em>
Cheat Sheet</a> in the Robot section at the bottom.

</p>
:::

::: forYouToDo
<ol start="6">

<li>Imagine a robot (the sprite) is sitting in the middle of a 5×5 grid
facing upwards. On a paper copy of this grid, shade all the squares that
the robot <em>can't possibly</em> get to, when the given code is
executed.<br />
<img src="img/3-lists/robot-question-1.png" title="set (turns) to (pick random (2) to (3))
repeat (turns) {
rotate right
}
set (steps) to (pick random (1) to (2))
repeat (steps) {
move forward
}" alt="set (turns) to (pick random (2) to (3))
repeat (turns) {
rotate right
}
set (steps) to (pick random (1) to (2))
repeat (steps) {
move forward
}" class="ms-4"/>
<img src="img/3-lists/robot-question-1-grid.png" title="5×5 grid of squares with an upward-facing sprite in the center square" alt="5×5 grid of squares with an upward-facing sprite in the center square" class="ms-4 noshadow"/></li>

</ol>
:::

::: takeItFurther
<ol type="A">

<li>See if you can invent a maze for which the left wall algorithm
doesn't work.</li>

</ol>
:::
