---
title: "Page 3: Using Abstraction to Nest Triangles"
subtitle: "Unit 3, Lab 1, Page 3"
order: 3
gifffer: true
---

::: learn
<p><strong>On this page,</strong> you will use abstraction to nest your
triangle script inside itself as you learn about <em>recursion</em>.</p>
:::

<p>Does all that copying and pasting of triangle scripts feel awkward to
you? You know a better way: <em>abstraction</em>. In Unit 1, you used a
`pinwheel` block to implement the similar programs
`asterisk` and `polygon` rather than copying the
code. Here, you can use a block to manage the abstraction too. But in
this case, we want the similar code (a smaller triangle) <em>nested
inside</em>, so we will actually use the same block inside itself, a
process called <em>recursion</em>.</p>

::: forYouToDo
<ol start="1">

<li>If it isn't open already, open your U3L1-FractalArt project.</li>

<li>

Create a` `block called `nested triangle` that
takes one input, <var>size</var>, and, for now, only draws one triangle,
but only if <var>size</var> \> 9. (Leave out the code about changing
colors.)
<br /><img src="/img/2-complexity/nested-tri-no-color-proto.png" title="nested triangle, size: (size)" alt="nested triangle, size: (size)" class="ms-4"/>

::: endnote
<p><a href="#hint-purple" data-bs-toggle="collapse" title="Shouldn't it be blue?">Shouldn't
it be blue?</a></p>

::: {#hint-purple .collapse}
<p>When you're building a new block, you can use any color you want.
This block is purple so that it will stand out when you use it in a
script later.</p>
:::

<p><a href="#hint-nested" data-bs-toggle="collapse" title="Click for hints about building a nested triangle block.">Click
for hints about building a `nested triangle` block.</a></p>

::: {#hint-nested .collapse}
<ol type="a">

<li>Use your first triangle script from the previous page as a model.
But add one condition: draw the triangle only if it's big enough:<br />
<img src="/img/2-complexity/triangle.png" title="if(size&gt;9){repeat(3){move 100 steps; turn clockwise 120 degrees}}" alt="if(size&gt;9){repeat(3){move 100 steps; turn clockwise 120 degrees}}" class="ms-4"/></li>

<li>Click the "Apply" button in the Block Editor so that the block
appears in the palette on the left.</li>

</ol>
:::
:::

</li>

<li>Try out your block giving at least the inputs 9, 18, 20 and 100 to
make sure it works as you expect.</li>

</ol>
:::

<p>So far, this is just a triangle procedure, but next you'll make it
recursive.</p>

::: vocabFullWidth
<p>Calling a procedure from inside itself is called
<strong>recursion</strong>.</p>
:::

<p>On the previous page, you dragged a copy of the triangle script in
between the `move` and `turn` blocks. You can do a
similar thing with your `nested triangle` block.</p>

::: forYouToDo
<ol start="4">

<li>From the palette, drag `nested triangle` into the
definition of `nested triangle` between the `move`
and `turn` blocks. Make its <var>size</var> input half the
current value of <var>size</var>.<br />
<img src="/img/2-complexity/nested-tri-recur-no-color.png" title="nested triangle, size: (size/2)" alt="nested triangle, size: (size/2)" class="ms-4"/></li>

<li>

Again try out your block with at least the inputs 9, 18, 20 and 100 to
make sure it works as you expect.\

::: endnote
You are using `nested triangle` in its own definition; this
makes it a recursive procedure. Recursion is one of the most powerful
techniques in computer science and you will learn more about it in later
projects.
:::

</li>

<img src="/img/icons/save-now.png" title="Save your work" alt="Save your work" class="inline"/>

</ol>
:::

::: ifTime
<ol start="6">

<li>Use `nested triangle` as a model to define a recursive
`nested square` block.</li>

<li>In order to draw the parent triangle, the sprite must turn 120°
between sides. For the fractal you just created, that turning happens
<em>after</em> drawing the child, but you could turn <em>before</em> the
recursive call, or split the turn, with part before and part after the
recursive call. Try some modifications like these:<br />
<img src="/img/2-complexity/triangle-fractal-variation01.png" title="repeat(3){move(size) steps; turn clockwise (120) degrees; nested triangle, size:(size/2)}" alt="repeat(3){move(size) steps; turn clockwise (120) degrees; triangle fractal level:(level-1) size:(size*0.5)}" class="ms-4"/><br />
<img src="/img/2-complexity/triangle-fractal-variation02.png" title="repeat(3){move(size) steps; turn clockwise (60) degrees; nested triangle, size:(size/2); turn clockwise(60) degrees}" alt="repeat(3){move(size) steps; turn clockwise (60) degrees; triangle fractal level:(level-1) size:(size*0.5); turn clockwise(60) degrees}" class="ms-4"/><br />
<img src="/img/2-complexity/triangle-fractal-variation03.png" title="repeat(3){move(size) steps; turn counter-clockwise (30) degrees; triangle fractal level:(level-1) size:(size*0.5); turn clockwise(150) degrees}" alt="repeat(3){move(size) steps; turn counter-clockwise (30) degrees; nested triangle, size:(size/2); turn clockwise(150) degrees}" class="ms-4"/></li>

</ol>
:::

::: takeItFurther
<ol type="A">

<li>Experiment with the scale factor for the <var>size</var> of the
recursive calls. A couple of interesting values are $\frac{1}{3}$ and $\frac{1}{\sqrt{3}}$.</li>

<li>Use `for` to make an animation that cycles through
different turning angle arrangements (that is, 0° and 120°, then 1° and
119°, then 2° and 118°, etc.).<br />
<img src="/img/2-complexity/U2ImageVideoAddendum_img/RecursiveTriangleAnimation.gif" title="Recursive Triangle Animation" alt="Recursive Triangle Animation" height="300"/>
<img src="/img/2-complexity/U2ImageVideoAddendum_img/RecursiveSquareAnimation.gif" title="Recursive Square Animation" alt="Recursive Square Animation" height="300"/></li>

</ol>
:::
