---
title: "Page 3: Checking for Ties"
subtitle: "Unit 3, Lab 3, Page 3"
order: 3
---

::: learn
**On this page,** you'll check for a tie game, that is,
whether there are no more empty squares but neither player has won.
:::

::: forYouToDo
<ol start="1">

<li>

Develop a way to determine if the game has tied, and if so, make the
program notify the players.

::: endnote
Snap<em>!</em> has a higher-order function
<img src="/img/blocks/find-first.png" title="find first item () in &apos;list input slot&apos;" alt="find first item () in &apos;list input slot&apos;" class="inline py-0"/>
that works similarly to `keep`, but it reports only the first
item that's found, so it can be faster. `Find first` is
equivalent to `item (1) of (keep)`.

`Find first` is a higher-order function like
`keep`, `map`, and `combine` because it
takes a function (a predicate) as input.

<a href="#hint-tie-contains" data-bs-toggle="collapse" title="Click for a hint about using find first to check for ties.">Click
for a hint about using `find first` to check for
ties.</a>

::: {#hint-tie-contains .collapse}
<img src="/img/3-lists/any-numbers.png" title="find first item (is () a number?) in ()" alt="find first item (is () a number?) in ()" class="ms-4"/>
:::
:::

</li>

<li>Play a couple of games to test the tie-checking feature, and fix any
bugs.</li>

::: sidenoteBig
You can work on this project more in
<a href="/unit-5/lab-6/1-review.html" title="Unit 5 Lab 6: Tic-Tac-Toe with a Computer Player">Unit
5 Lab 6: Tic-Tac-Toe with a Computer Player</a>.
:::

<li>Why does the order of the tests (for wins vs. for ties) matter?
<img src="/img/icons/talk-with-your-partner-mini.png" title="Talk with Your Partner" alt="Talk with Your Partner"/></li>

<li><img src="/img/icons/save-use-later.png" title="Save. You will use this later." alt="Save. You will use this later." class="inline"/></li>

<li>{{< checkpoint id='1FAIpQLSd9KvKupqJa2gPnhaeiUiHnAQZtBKKGbotIjNt7aUmphSGUtg' >}} </li>

</ol>
:::

::: ifTime
<ol start="5">

<li>There are many small improvements you could make. For one thing,
when a player wins, you might want to prevent any further moves. What
else might you want to change or improve?</li>

</ol>
:::

::: takeItFurther
<img src="/img/icons/tough-stuff-mini.png" title="Tough Stuff" alt="Tough Stuff" class="float-end"/>

<ol type="A">

<li>Your program can be smarter about detecting ties. If there is only
one empty square on the board, and filling that square with the player
whose turn is next wouldn't cause a win, then the game is already tied.
The challenge here is that you'll have to test for a win on a board that
isn't the current <var>board</var>.</li>

<li>Instead of just having the sprite say something like "X wins," it
would be more satisfying to the players if you draw a thick line through
the three squares that generate a win. This is a little tricky because
by the time you know there's a win, you no longer know which triple
triggered it. Make sure your code stays readable to another
programmer.</li>



</ol>
:::
