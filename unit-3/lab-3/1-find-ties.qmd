---
title: "Page 1: Remembering the Moves and Possible Wins"
subtitle: "Unit 3, Lab 3, Page 1"
order: 1
---

::: learn
**On this page**, you'll prepare by allowing the program
to record the moves that are made, and teach it the winning groups of
three squares.
:::



When you first wrote Tic Tac Toe, it was easy to detect illegal moves
(moving to a square that's already wearing an X or O costume) because
each sprite could test for that without knowing about the rest of the
game board. But to detect wins and ties, the program needs a way to test
the state of the <em>whole game board</em>, not just one individual
piece. So, you'll use a <em>global variable</em>,
<img src="/img/5-algorithms/board.png" title="board" alt="board"/>,
to keep track of whether the square in each position is empty or filled
with an X or an O.<br />

::: sidenote
You learned about **global variables** on
<a href="/unit-2/lab-1/4-keeping-score.html" title="Unit 2 Lab 1 Page 4: Keeping Score with Global Variables">Unit
2 Lab 1 Page 4: Keeping Score with Global Variables</a>.
:::

<img src="/img/3-lists/ttt-board-var.png" title="picture of: watcher of board variable showing {O, O, X, 4, X, 6, X, 8, 9}; and Tic Tac Toe game with X, X, O in top row; empty, X, empty in middle row; and X, empty, empty in bottom row" alt="picture of: watcher of board variable showing {O, O, X, 4, X, 6, X, 8, 9}; and Tic Tac Toe game with X, X, O in top row; empty, X, empty in middle row; and X, empty, empty in bottom row" class="ms-4 noshadow"/>



::: {#first .forYouToDo}
<ol>

<li>Open your **U3L1-TicTacToe** project, and save it as
**U3L3-TicTacToe** so you'll still have your old version
when you edit the new one.</li>

<li>Make a global variable called <var>board</var> that, at the
beginning of the game, contains a list with the numbers from 1 to
9.<br /></li>

</ol>
:::

Each sprite needs to know its own position on the board so that you
can use the `replace item () of (list) with ()` block to replace that position with an
X or an O. So, you'll create a <em>sprite variable</em>,
<img src="/img/3-lists/position-number.png" title="position number" alt="position number" class="inline py-0"/>,
and each clone will have its <em>own version</em> of this variable.

::: vocabFullWidth
: **Sprite Variable**

A **sprite variable** is like a global variable in that
it <em>doesn't</em> belong to a particular <em>script</em>, but it does
belong to a particular <em>sprite.</em>
:::

::: forYouToDo
<ol start="3">

<li>

::: sidenote
You learned about **initializing variables** on
<a href="/unit-2/lab-1/1-number-guessing-game.html" title="Unit 2 Lab 1 Page 1: Developing a Number Guessing Game with Script Variables">Unit
2 Lab 1 Page 1: Developing a Number Guessing Game with Script
Variables</a>.
:::

Create a sprite variable <var>position number</var>.

::: narrower


You make a sprite variable similarly to how you make global variables:

<ul>

<li>Click
<img src="/img/1-introduction/make-a-variable.png" title="make a variable button" alt="make a variable button" class="inline py-0 noshadow"/>
in the Variables palette.</li>

<li>Then, as you are typing the variable's name, select "for this sprite
only" to make it a sprite variable.</li>

</ul>



<img src="/img/3-lists/square-number-var.png" title="variable name dialog box with &apos;for this sprite only&apos; selected" alt="variable name dialog box with &apos;for this sprite only&apos; selected" class="ms-4"/><br />
:::

</li>

<li>

As you create the clones, set each one's <var>position number</var> to
the appropriate value (1-9).<br />

::: endnote
<a href="#hint-1" data-bs-toggle="collapse" class="collapsed" title="Hint">Click
for a hint on setting the <var>position number</var>.</a>

::: {#hint-1 .collapse}
In the loop that makes the clones, increase the parent sprite's variable
by one for each new clone so that each clone will have a unique value.
:::
:::

::: takeNote
Make sure that the parent's <var>position number</var> doesn't end up
being a number 1-9 so that it doesn't conflict with a clone.
:::

</li>

<li>When a square is clicked, replace that square's entry in the
<var>board</var> list with X or O as appropriate.</li>

<li>Watch the values stored in the <var>board</var> variable as you play
a game of Tic Tac Toe. Make sure that it updates as you expect it to,
and fix any bugs.</li>

</ol>
:::

<h3>Storing All the Ways to Win</h3>

To program a way to detect a win, you need to determine what counts
as a win. You'll store each possible winning triple as a list of three
position numbers (a <em>triple</em>). For example, this winning triple
could be represented as
<img src="/img/3-lists/{3,5,7}.png" title="list{3, 5, 7}" alt="list{3, 5, 7}"/>
because the win is in the 3<sup>rd</sup>, 5<sup>th</sup>, and
7<sup>th</sup> positions:<br />
<img src="/img/3-lists/winning-combo-357.png" title="diagonal win bottom left to top right" alt="diagonal win bottom left to top right" class="ms-4 noshadow"/><br />

::: forYouToDo
<ol start="7">

<li>

<img src="/img/icons/talk-with-your-partner.png" title="Talk with Your Partner" alt="Talk with Your Partner" class="inline"/>

<ol>

<li>How many winning triples are possible?</li>

<li>Write down each of the possible winning triples.</li>

</ol>

</li>

</ol>
:::

You <em>could</em> check for each possible win separately:<br />
<img src="/img/3-lists/silly-check-win.png" title="is there a win? (Comment: Don&apos;t build this!! Just read it.) : if (is there a win at (1) (2) (3) ?) report (true); if (is there a win at (4) (5) (6) ?) report (true); ...; if (is there a win at (3) (5) (7) ?) report (true); report (false)" alt="is there a win? (Comment: Don&apos;t build this!! Just read it.) : if (is there a win at (1) (2) (3) ?) report (true); if (is there a win at (4) (5) (6) ?) report (true); ...; if (is there a win at (3) (5) (7) ?) report (true); report (false)" class="ms-4"/>

But that's way too much code, especially because you'll have to do
something very similar again, later on, when the computer actually plays
against you. Instead, you'll create a list to store all of the possible
winning triples so you can check it against the current state of the
game stored by <var>board</var>.

::: forYouToDo
<ol start="8">

<img src="/img/icons/save-mini.png" title="Save Your Work" alt="Save Your Work" class="float-end"/>

<li>Create a reporter that outputs a list of all possible winning
triples. It will look something like this:<br />
<img src="/img/3-lists/winning-triples.png" title="winning triples partial block definition showing a list with at least two lists inside it: {1,2,3} and {2,5,8}" alt="winning triples partial block definition showing a list with at least two lists inside it: {1,2,3} and {2,5,8}" class="ms-4"/></li>

<li><img src="/img/icons/save-use-later.png" title="Save. You will use this later." alt="Save. You will use this later." class="inline"/></li>

<li>{{< checkpoint id='1FAIpQLScEDKzkmOIWfDQR1ccTUf16Ncfr3PEXOq2YjnpUnrHtEdPbjQ' >}} </li>

</ol>
:::
