---
title: "Op Art"
subtitle: "Unit , Lab , Page 3"
order: 3
---

::: todo
<p>BH: Only the last TIF is TIFfy, and I really think it should be a
regular FYTD. Coloring the picture by hand is weird.</p>

<p>MF: BH has reviewing to do (see TG)</p>
:::

::: learn
In this project, you will create tools to explore op art---a form of
visual art using optical illusions.<br />

::: comment
I find the little circle confusing amidst all the shapes. Anyone else?
--MF, 9/10/18
:::

<img title="Animation of the user drawing a collection of overlapping rectangles and then coloring each region black and white in such a way that no two adjacent regions have the same color." alt="Animation of the user drawing a collection of overlapping rectangles and then coloring each region black and white in such a way that no two adjacent regions have the same color." class="indent" data-gifffer="/img/3-lists/OpArt_img/OpArtAnimation.gif" height="300"/>
:::

<p>Initially, the mouse is used to draw rectangles. Then when the user
presses the space bar, the drawing phase ends and the mouse click
becomes a paint bucket that fills bounded regions with paint. Here are
two examples of phase 1 (drawing rectangles) and phase 2 (filling
regions):</p>

<p class="indent">

Example 1:
<img src="/img/3-lists/OpArt_img/OpArt2Phase1.png" title="Op Art 1 Phase 1" alt="Op Art 1 Phase 1" height="175"/>
<img src="/img/3-lists/OpArt_img/OpArt2Phase2.png" title="Op Art 1 Phase 2" alt="Op Art 1 Phase 2" height="175"/>

</p>

<p class="indent">

Example 2:
<img src="/img/3-lists/OpArt_img/OpArt3Phase1.png" title="Op Art 2 Phase 1" alt="Op Art 2 Phase 1" height="175"/>
<img src="/img/3-lists/OpArt_img/OpArt3Phase2.png" title="Op Art 2 Phase 2" alt="Op Art 2 Phase 2" height="175"/>

</p>

::: forYouToDo
<ol>

<li>

::: newProject
["U3-OpArt"]{.text}<img src="/img/icons/new-project-called.png" title="Create a new project called U3-OpArt" alt="Create a new project called U3-OpArt"/>
:::

</li>

<li>

In the drawing phase (phase 1), you will be drawing many rectangles by
clicking and dragging from corner to opposite corner, so it will be
helpful to have an abstract data type (ADT) to manage the corner
points.<br />

::: comment
<h3>POINT is being optionalized in U2.</h3>

The <code>corner</code> ADT will work just like the <code>point</code>
ADT that you created in
<a href="/2-complexity/optional-projects/future/2-data-types.html" title="Unit 2 Lab 2: Making Art by Using Data Structures, Page 2">Unit
2</a>.
:::

<img src="/img/3-lists/OpArt_img/corner12.png" title="Opposite corners of a rectangle" alt="Opposite corners of a rectangle" class="indent" height="150"/><br />

<ol>

<li>Create a constructor <code>corner</code> that will report a list of
<em>x</em> and <em>y</em> coordinates of one corner.<br />
<img src="/img/3-lists/corner-reporting.png" title="corner x:(mouse x) y:(mouse y) reporting {-239, 38}" alt="corner x:(mouse x) y:(mouse y) reporting {-239, 38}" class="indent"/></li>

<li>Create two selectors <code>x of corner</code> and <code>y of
corner</code> that will report either the <em>x</em> or <em>y</em>
values for an input <var>corner</var>.<br />
<img src="/img/3-lists/x-of-corner-reporting.png" title="x of corner: (corner) reporting -239" alt="x of corner: (corner) reporting -239" class="indent"/>
<img src="/img/3-lists/y-of-corner-reporting.png" title="y of corner: (corner) reporting 38" alt="y of corner: (corner) reporting 38" class="indent"/></li>

</ol>

</li>

<li>

Create two global variables to temporarily store the two points of each
rectangle as it is drawn:

<ul>

<li><var>current corner 1</var>: to store the coordinates where the
mouse is first clicked</li>

<li><var>current corner 2</var>: to store the coordinates where the
mouse is moved as the rectangle is drawn (when the mouse is released,
this value will be the final position of the second corner)</li>

</ul>

</li>

<li>Now create a <code>rectangle</code> ADT for storing the two opposite
corners of a single rectangle.<br />
<img src="/img/3-lists/rectangle-reporting.png" title="rectangle, corner1:(corner1) corner2:(corner2){report(list(corner1)(corner2)}" alt="rectangle, corner 1: (current corner 1) corner 2: (current corner 2) reporting {{-239, 38}, {41, -7}}" class="indent"/><br />
<img src="/img/3-lists/corner-1-of-rectangle-reporting.png" title="corner 1 of rectangle reporting {-239, 38}" alt="corner 1 of rectangle reporting {-239, 38}" class="indent"/>
<img src="/img/3-lists/corner-2-of-rectangle-reporting.png" title="corner 2 of rectangle reporting {41, -7}" alt="corner 2 of rectangle reporting {41, -7}" class="indent"/></li>

</ol>
:::

<p>Like in the Animation Studio project on the previous page, the stage
will have to be cleared and redrawn many times so that the user can see
each new rectangle changing in size as it drawn. The program needs a way
to store all of the rectangles that have already been drawn so that they
can be redrawn along with the current rectangle after each stage
clear.</p>

::: forYouToDo
<ol start="5">

<li>Create a global variable <var>rectangle list</var> to store the all
the rectangles that have been drawn.</li>

<li>Your program needs a way to know whether the user is finished
drawing. Create a global variable <var>drawing done?</var> that will
store a Boolean value (either <code>true</code> or <code>false</code>)
to keep track of the phase of the program (drawing or painting).</li>

::: todo
I don't think we need this. --MF, 9/10/18<br />It is initially
<code>false</code> but when the space bar is pressed---which concludes
the drawing phase---it is set to <code>true</code>.
:::

<li>The program also needs a way to draw a rectangle given its two
defining corners. Create a <code>draw rectangle</code> block, and test
that it correctly draws a rectangle with the input corners.<br />
<img src="/img/3-lists/draw-rectangle-with-stage.jpg" title="stage showing a rectangle drawn and scripting area showing the script: clear, draw rectangle corner 1: (corner, x:(-139) y:(38)) corner 2: (corner, x:(41) y:(-7))" alt="stage showing a rectangle drawn and scripting area showing the script: clear, draw rectangle corner 1: (corner, x:(-139) y:(38)) corner 2: (corner, x:(41) y:(-7))" class="indent"/></li>

<li>

Use the seven blocks and four variables you have created to create a
program that:

<ul>

<li>

repeatedly collects rectangles until the user is finished phase 1
(drawing) by:

<ul>

<li>collecting the coordinates of the first corner when the user starts
to draw a rectangle</li>

<li>repeatedly collecting the coordinates of the second corner and
redrawing that rectangle and all previous rectangles until the user
releases the mouse to finish the rectangle</li>

<li>storing the final coordinates for each rectangle so they can be
drawn again</li>

</ul>

</li>

<li>uses a keystroke (like space) to tell the computer to switch to
phase 2 (painting) and then fills the clicked areas</li>

</ul>

::: endnote
<a href="#hint-main" data-bs-toggle="collapse" title="Click for hints on creating this program.">Click
for hints on creating this program.</a>

::: {#hint-main .collapse}
<img src="/img/icons/talk-with-your-partner.png" title="Talk with Your Partner" alt="Talk with Your Partner" class="imageRight"/>

<ul style="list-style-type: square">

<li>Which variables need to be initialized? Why?</li>

<li>How can you detect the state of the mouse? How can you location the
state of the mouse?</li>

::: comment
<strong>Brian</strong>, how do you like this characterization of warp. I
think it's only been in TIFs so far in the course. --MF, 9/10/18
:::

<li>You might want to use
<img src="/img/blocks/warp.png" title="warp block" alt="warp block" class="inline"/>
and
<img src="/img/blocks/hide.png" title="hide block" alt="hide block" class="inline"/>
to improve the efficiency and appearance of your program. The
<code>warp</code> block allows the drawing to happen quickly, and
<code>hide</code> hides the sprite.</li>

</ul>
:::
:::

::: todo
I thought about keeping some version of this, but I think it is not
needed given the above. --MF, 9/9/18

<p>It is recommended that you first write down the algorithm detailing
the sequence of events in the program and what should happen at each
case before you build the actual code.</p>
:::

</li>

</ol>
:::

::: takeItFurther
<ol type="A">

<li>Create a version of your Op Art program that uses polygons.<br />
<img src="/img/3-lists/OpArt_img/PolyOpArt1.png" title="Polygonal Op Art example 1" alt="Polygonal Op Art example 1" height="200"/>
<img src="/img/3-lists/OpArt_img/PolyOpArt2.png" title="Polygonal Op Art example 2" alt="Polygonal Op Art example 2" height="200"/>
<img src="/img/3-lists/OpArt_img/PolyOpArt3.png" title="Polygonal Op Art example 3" alt="Polygonal Op Art example 3" height="200"/></li>

<li>Create a version of your Op Art program that uses circles.<br />
<img src="/img/3-lists/OpArt_img/CircleOpArt2.png" title="Circle Op Art example 1" alt="Circle Op Art example 1" height="200"/>
<img src="/img/3-lists/OpArt_img/CircleOpArt.png" title="Circle Op Art example 2" alt="Circle Op Art example 2" height="200"/>
<img src="/img/3-lists/OpArt_img/CircleOpArt3.png" title="Circle Op Art example 3" alt="Circle Op Art example 3" height="200"/></li>

<li>Study the works of legendary Op Artists such as
<a href="https://www.google.com/search?q=Victor+Vasarely&tbm=isch" title="Victor Vasarely" target="_blank">Victor
Vasarely</a> and
<a href="https://www.google.com/search?q=Bridget+Riley&tbm=isch" title="Bridget Riley" target="_blank">Bridget
Riley</a> to get a feel for what is possible in this art form.<br />
<img src="/img/3-lists/OpArt_img/Vasarely1.png" title="Vasarely Op Art #1" alt="Vasarely Op Art #1" height="150"/>
<img src="/img/3-lists/OpArt_img/Vasarely2.png" title="Vasarely Op Art #2" alt="Vasarely Op Art #2" height="150"/>
<img src="/img/3-lists/OpArt_img/Riley1.jpeg" title="Riley Op Art #1" alt="Riley Op Art #1" height="150"/>
<img src="/img/3-lists/OpArt_img/Riley2.png" title="Riley Op Art #2" alt="Riley Op Art #2" height="150"/>
<img src="/img/3-lists/OpArt_img/Riley3.jpg" title="Riley Op Art #3" alt="Riley Op Art #3" height="150"/></li>

<li>

It is possible to fully automate the painting phase by using the
following algorithm:

<ul>

<li>for every pixel on the screen find out inside how many rectangles it
is inside</li>

<li>color each pixel black if the number is odd and white if the number
is even (or vice versa)</li>

</ul>

To understand why this algorithm works, use paper and pencil to apply it
to simple cases with few overlapping rectangles.<br />
<img src="/img/3-lists/OpArt_img/autoOpArt1.png" title="Overlapping rectangles" alt="Overlapping rectangles" height="200"/><img src="/img/3-lists/OpArt_img/autoOpArt2.png" title="Overlapping counted" alt="Overlapping counted" height="200"/><img src="/img/3-lists/OpArt_img/autoOpArt3.png" title="Overlapping regions colored" alt="Overlapping regions colored" height="200"/>

</li>

</ol>
:::
