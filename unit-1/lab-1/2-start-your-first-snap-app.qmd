---
title: "Page 2: Programming a Game"
subtitle: "Unit 1, Lab 1, Page 2"
order: 2
gifffer: true
---

::: learn

**On this page,** you'll build a simple game in which the player tries to click a character that's jumping around.

:::

<!-- ::: takeNote
<img src="/img/icons/work-with-a-partner.png" title="Work with a Partner" alt="Work with a Partner" class="inline"/> If you're doing this in class, you should be working with a partner. It's not just for students; professional programmers work with partners too.

If each of you is in front of a computer, one of you should keep Snap<em>!</em> open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.
::: -->

## Making a Character Move

:::: forYouToDo
1. Make sure either you or your partner is logged in to Snap<em>!</em> so you can save your work.

2. <a href="/prog/1-introduction/U1L1-ClickAlonzo.xml" class="run"><img src="/img/icons/load-save.png" title="Click here to load this file. Then save it to your Snap! account." alt="Click here to load this file. Then save it to your Snap! account." class="inline"/></a>

::: narrower
### **Saving a Snap<em>!</em> Project**

Choose "Save" from the Snap<em>!</em> File menu, <img src="/img/1-introduction/file_button.png" title="File menu button" alt="File menu button"/>.
:::

::::

::: clearfix

<img src="/img/1-introduction/alonzo.png" title="Alonzo character" alt="Alonzo character" class="float-start"/> This is <em>Alonzo</em>, the mascot of our programming language, <em>Snap!</em>. You should see him on the <em>stage,</em> the white area in the top right corner of the Snap<em>!</em> window.

:::

<img src="/img/1-introduction/alonzo-on-stage.png" title="picture of Snap! window with white rectangle at right labeled &apos;Stage&apos; and yellow character on that stage labeled &apos;Sprite named Alonzo&apos;" alt="picture of Snap! window with white rectangle at right labeled &apos;Stage&apos; and yellow character on that stage labeled &apos;Sprite named Alonzo&apos;" class="ms-4"/>

You're going to program a game in which the goal is to click on Alonzo as he's moving around.

::: forYouToDo
3. As a first step, make Alonzo jump someplace else on the stage when he's clicked. Drag these two blocks into the scripting area (the center area of the window):<br />

::: sidenoteBig
<img src="/img/1-introduction/motion-palette-categories.jpg" title="Palette categories: Motion, Looks, Sound, Pen, Control, Sensing, Operators, and Variables" alt="Palette categories: Motion, Looks, Sound, Pen, Control, Sensing, Operators, and Variables" class="float-end"/>

You can find blocks in <em>palettes</em> with their matching color. Drag one block underneath another to snap them together.
:::

<img src="/img/1-introduction/when-clicked-jump.png" alt="when I am clicked, go to [random position]" class="ms-4" width="199" height="87"/> <img src="/img/1-introduction/go-to-menu-open.png" title="go to () block with menu open showing &apos;random position&apos;, &apos;mouse pointer&apos;, and &apos;center&apos;. The mouse pointer is hovering over &apos;random position&apos;." alt="go to () block with menu open showing &apos;random position&apos;, &apos;mouse pointer&apos;, and &apos;center&apos;. The mouse pointer is hovering over &apos;random position&apos;."/>

This is a computer program, also known as <em>software</em>. It's a very short one, but it'll get more interesting soon.

4. Test your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.

::: endnote
If your program doesn't work, look back at the picture of the code and make sure yours matches exactly.

- Make sure the two blocks are attached to each other by moving the `when I am clicked` block and checking that the `go to` block moves with it.
- Make sure that the first block says `when I am (clicked)` and not something else, and make sure that the second block says `go to (random position)` and not something else.

:::

:::

::: takeNote
Orange boxes contain the ideas you should still remember three years from now.

<img src="/img/blocks/when-i-am-clicked.png" title="when i am (clicked)" alt="when i am (clicked)" class="ms-4"/> <img src="/img/blocks/when-green-flag-clicked-full-size.png" title="when &apos;green flag&apos; clicked" alt="when &apos;green flag&apos; clicked" class="ms-4"/> <img src="/img/blocks/when-space-key-pressed.png" title="when (space) key pressed" alt="when (space) key pressed" class="ms-4"/>

Blocks that look like this can be used to detect an **event** such as clicking on the sprite, pressing a key, or clicking the green flag button (<img src="/img/1-introduction/green-flag_button.png" title="green-flag button" alt="green-flag button" class="button"/>). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap<em>!</em> programmers call them "hat blocks." Using events to control a program is called <em>**event-driven programming**</em>.

Not every script needs a hat block; you can also run a script by clicking on it.
:::

::: forYouToDo
5. Find `when I am (clicked)` and `when (space) key pressed` in the yellow Control palette, and see what other choices are in their drop-down menus.
:::

It's a good idea to <em>save</em> your project every so often.

::: forYouToDo
6. Choose "Save" from the Snap<em>!</em> File menu, <img src="/img/1-introduction/file_button.png" title="File menu button" alt="File menu button"/>.
:::

## Making the Game Challenging

The game isn't much fun if Alonzo just sits there waiting to be clicked. Once you've clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says "do this `forever`." And there is a block that does it:<br /> <img src="/img/1-introduction/forever.png" title="forever" alt="forever" class="ms-4"/>

::::: forYouToDo

:::: sidenoteBig
A bunch of blocks clicked together is called a <em>script</em>.
::::

7. Attach this to the bottom of your Alonzo script:<br /> <img src="/img/1-introduction/forever-jump.png" title="forever {go to (random position)}" alt="forever {go to (random position)}" class="ms-4"/>

:::: narrower
The sequence of blocks <em>inside</em> the `forever` block will repeat until you **click the red stop sign**, <img src="/img/1-introduction/stop_button.png" title="red stop button" alt="red stop button"/>, or stop the script in some other way.
::::

:::: endnote
<a href="#hint-snapping" data-bs-toggle="collapse" title="Click for an animation of snapping these two blocks together.">Click for an animation of snapping these two blocks together.</a>

::: {#hint-snapping .collapse}

<img title="animation showing the block go to (position) being snapped inside a forever block" alt="animation showing the block go to (position) being snapped inside a forever block" class="ms-4" data-gifffer="/img/1-introduction/snap-blocks.gif"/>

:::
::::

8. Alonzo moves too fast. Use the <img src="/img/blocks/wait-1-secs.png" title="wait 1 secs" alt="wait 1 secs"/> block to slow him down. Try your program, and increase or reduce the wait time if you like.

::: endnote
Where the `wait` block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?
:::



9. <img src="/img/icons/save-now.png" title="Save your work" alt="Save your work" class="inline"/>



10. {{< checkpoint  id="1FAIpQLSeIjgiBz_nh0d4dN9nLuU7sUkVTF-gdmqFlrEuSqTfJiwikXg" >}}

:::::
