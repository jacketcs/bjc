---
title: "Page 5: Using <code>Pinwheel</code> to Make <code>Polygon</code>"
subtitle: "Unit 1, Lab 3, Page 5"
order: 5
gifffer: true
---

::: learn
<strong>On this page,</strong> you will use your existing <code>pinwheel</code> block to make <code>asterisk</code> and <code>polygon</code> blocks.<br /> <img src="/img/1-introduction/Blockswith-Inputs_img/asteriskpolygonCycle.gif" title="Animation cycle from Asterisk to Polygon" alt="Animation cycle from Asterisk to Polygon" class="indent" height="250"/>
:::

<p>You can use your <em>general</em>-purpose pinwheel procedure to create other, simpler <em>special</em>-purpose procedures that each do a particular job.</p>

::: forYouToDo
<img src="/img/1-introduction/asterisk-new.png" title="Asterisk with 12 branches" alt="Asterisk with 12 branches" class="float-end" height="250"/>

<ol>

<li>If it isn't open already, open your U1L3-Pinwheel project from the previous page.</li>

<li>

Use your <code>pinwheel</code> block to create a more specialized <code>asterisk</code> block.

<ol>

<li>First, make a new block called <code>asterisk</code> with two inputs: one for the <var>number of branches</var> and one for the <var>length</var> of each branch. You may wish to review how to make a new block at <a href="/unit-1/lab-2/4-making-a-new-block.html" title="Unit 1 Lab 2 Page 4: Making Your Own Block">Unit 1 Lab 2 Page 4: Making Your Own Block</a>.</li>

<img src="/img/1-introduction/asterisk-using-pinwheel.png" title="asterisk, branches:(branches) branch length:(length){pinwheel, branches: ( ) size:( ) backup:( )}" alt="asterisk, branches:(branches) branch length:(length){pinwheel, branches: ( ) size:( ) backup:( )}" width="507" height="106"/>

<li>Now fill in the three inputs to <code>pinwheel</code> so that it correctly draws an asterisk.</li>

</ol>

</li>

<img src="/img/icons/pair-programming-swap.png" title="Pair Programming Swap" alt="Pair Programming Swap" class="inline"/>

<li>Similarly, write a <code>polygon</code> block that uses <code>pinwheel</code> with appropriate inputs to draw a polygon with a given number of sides and side length.<br /></li>

</ol>

::: takeNote
### <strong>Debugging with <img src="/img/2-complexity/Debugging/pause-all-block.png" title="pause all" alt="pause all" height="42"/></strong>

<p>You can use <code>pause all</code> to place breaks in your code so you can see what's happening along the way. When you run code with <code>pause all</code> in it, you can click the yellow Run/Pause button next to the Green Flag (<img src="/img/sys/play-button.png" title="play button" alt="play button"/>/<img src="/img/1-introduction/pause_button.png" title="pause button" alt="pause button"/>) to move through the code up until a <code>pause all</code> block is reached again. The <code>pause all</code> block will pause <em>every</em> script that is running until the yellow Run/Pause button is clicked.</p>
:::
:::

::: takeNote
::: sidenoteBig
<p>On page <a href="/unit-1/lab-2/2-gossip.html" title="Unit 1 Lab 2 Page 2: Making Programs Talk">Unit 1 Lab 2 Page 2: Making Programs Talk</a>, you learned about <em>procedural abstraction:</em> giving a code segment a name (making it a block). That way you can call it more than once instead of copying and pasting.</p>
:::

::: comment
AAP-3.B.4
:::

<p>Here is another kind of <em>abstraction</em>: noticing that <code>asterisk</code> and <code>polygon</code> are both kinds of pinwheels, and writing one, more general, <code>pinwheel</code> block that uses an input so that the block can be used to make asterisks, polygons, or other interesting designs.</p>

::: comment
AAP-3.B.5
:::

<p>This is an example of <strong>abstraction by generalization</strong>: looking at chunks of code that are <em>almost the same</em> and writing a single block by <em>using an input</em> to distinguish among the different cases.</p>
:::

::: forYouToDo
<ol start="4">

<li>If you look inside of <code>pinwheel</code> and see how you're using it in <code>polygon</code>, you'll see that there are steps that you don't really need for the case of a polygon. Write another version of <code>polygon</code> built directly out of primitive blocks (<code>move</code>, <code>turn</code> and so on). How simple can you make it?</li>

::: takeNote
::: comment
AAP-3.B.7
:::

As long as your <code>polygon</code> block draws the right picture, it doesn't matter to the rest of the project what's inside it.
:::

<img src="/img/icons/save-now.png" title="Save your work" alt="Save your work" class="inline"/>

</ol>
:::

::: ifTime
<ol start="5">

<li>Use your <code>pinwheel</code> block code one last time to create a <code>circle</code> block that accepts one input for the size.</li>

<li>Use the <code>random</code> block together with <code>set pen color</code> and <code>set pen size</code> to draw a variety of shapes.<br /> <img src="/img/1-introduction/assorted-pinwheels.png" title="assortment of pinwheels" alt="assortment of pinwheels" class="indent"/></li>

</ol>
:::

::: takeItFurther
<ol type="A">

<li><strong>Challenge:</strong> Create a script that draws a blue square of size 100 and then draws a red circle that fits perfectly inside it.<br /> <img src="/img/1-introduction/red-circle-in-blue-square.png" title="red circle in blue square" alt="red circle in blue square" class="indent"/><br /></li>

</ol>
:::
