---
title: "Page 5: Using `Pinwheel` to Make `Polygon`"
subtitle: "Unit 1, Lab 3, Page 5"
order: 5
gifffer: true
---

::: learn
**On this page,** you will use your existing `pinwheel` block to make `asterisk` and `polygon` blocks.<br /> <img src="/img/1-introduction/Blockswith-Inputs_img/asteriskpolygonCycle.gif" title="Animation cycle from Asterisk to Polygon" alt="Animation cycle from Asterisk to Polygon" class="ms-4" height="250"/>
:::

You can use your <em>general</em>-purpose pinwheel procedure to create other, simpler <em>special</em>-purpose procedures that each do a particular job.

::: forYouToDo
<img src="/img/1-introduction/asterisk-new.png" title="Asterisk with 12 branches" alt="Asterisk with 12 branches" class="float-end" height="250"/>

(@) If it isn't open already, open your U1L3-Pinwheel project from the previous page.

(@) Use your `pinwheel` block to create a more specialized `asterisk` block.

<ol type="a" class="ms-4">
<li>First, make a new block called `asterisk` with two inputs: one for the <var>number of branches</var> and one for the <var>length</var> of each branch. You may wish to review how to make a new block at <a href="/unit-1/lab-2/4-making-a-new-block.html" title="Unit 1 Lab 2 Page 4: Making Your Own Block">Unit 1 Lab 2 Page 4: Making Your Own Block</a>.</li>

<img src="/img/1-introduction/asterisk-using-pinwheel.png" title="asterisk, branches:(branches) branch length:(length){pinwheel, branches: ( ) size:( ) backup:( )}" alt="asterisk, branches:(branches) branch length:(length){pinwheel, branches: ( ) size:( ) backup:( )}" width="507" height="106"/>

<li>Now fill in the three inputs to `pinwheel` so that it correctly draws an asterisk.</li>
</ol>

<img src="/img/icons/pair-programming-swap.png" title="Pair Programming Swap" alt="Pair Programming Swap" class="inline"/>

(@) Similarly, write a `polygon` block that uses `pinwheel` with appropriate inputs to draw a polygon with a given number of sides and side length.<br />

</ol>

::: takeNote
### **Debugging with <img src="/img/2-complexity/Debugging/pause-all-block.png" title="pause all" alt="pause all" height="42"/>**

You can use `pause all` to place breaks in your code so you can see what's happening along the way. When you run code with `pause all` in it, you can click the yellow Run/Pause button next to the Green Flag (<img src="/img/sys/play-button.png" title="play button" alt="play button"/>/<img src="/img/1-introduction/pause_button.png" title="pause button" alt="pause button"/>) to move through the code up until a `pause all` block is reached again. The `pause all` block will pause <em>every</em> script that is running until the yellow Run/Pause button is clicked.
:::
:::

::: takeNote
::: sidenoteBig

On page <a href="/unit-1/lab-2/2-gossip.html" title="Unit 1 Lab 2 Page 2: Making Programs Talk">Unit 1 Lab 2 Page 2: Making Programs Talk</a>, you learned about <em>procedural abstraction:</em> giving a code segment a name (making it a block). That way you can call it more than once instead of copying and pasting.

:::

Here is another kind of <em>abstraction</em>: noticing that `asterisk` and `polygon` are both kinds of pinwheels, and writing one, more general, `pinwheel` block that uses an input so that the block can be used to make asterisks, polygons, or other interesting designs.

This is an example of **abstraction by generalization**: looking at chunks of code that are <em>almost the same</em> and writing a single block by <em>using an input</em> to distinguish among the different cases.
:::

::: forYouToDo

(@) If you look inside of `pinwheel` and see how you're using it in `polygon`, you'll see that there are steps that you don't really need for the case of a polygon. **Write another version of `polygon` built directly out of primitive blocks (`move`, `turn` and so on)**. How simple can you make it?
    - After you've completed this second version of the `polygon` block, **comment your code** so that we know which polygon block is which.

::: takeNote

As long as your `polygon` block draws the right picture, it doesn't matter to the rest of the project what's inside it.

:::

<img src="/img/icons/save-now.png" title="Save your work" alt="Save your work" class="inline"/>

(@) {{< checkpoint id='1FAIpQLSdpOK9EOWOW0yux1TeXyfHbaGPQR9Buwne5P-mKAmv1StGxnA' >}}

:::

::: ifTime

(@) Use your `pinwheel` block code one last time to create a `circle` block that accepts one input for the size.</li>

(@) Use the `random` block together with `set pen color` and `set pen size` to draw a variety of shapes.<br /> <img src="/img/1-introduction/assorted-pinwheels.png" title="assortment of pinwheels" alt="assortment of pinwheels" class="ms-4"/>

:::

::: takeItFurther
<ol type="A">

<li>**Challenge:** Create a script that draws a blue square of size 100 and then draws a red circle that fits perfectly inside it.<br /> <img src="/img/1-introduction/red-circle-in-blue-square.png" title="red circle in blue square" alt="red circle in blue square" class="ms-4"/><br /></li>

</ol>
:::
