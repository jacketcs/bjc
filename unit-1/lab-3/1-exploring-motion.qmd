---
title: "Page 1: Exploring Motion"
subtitle: "Unit 1, Lab 3, Page 1"
order: 1
---

::: learn

**On this page,** you will explore the basics of drawing a shape in Snap<em>!</em> by using the `repeat` block to loop through the same code multiple times.

:::

::: {.vocabFullWidth .AP-only}
**: Algorithm** and **Pseudocode**

An **algorithm** is a sequence of steps that are usually performed by a computer. The algorithm doesn't have to be written in any particular programming language or even in a programming language at all; you can write your algorithm in English or any other human language. Some people call an algorithm written in human language **pseudocode**. Once you know the steps that the computer will take, you can code your algorithm in the programming language of your choice.

::: endnote
What's the purpose of "pseudocode"? Why write an algorithm vaguely in English when you could write it precisely in Snap<em>!</em>? If you were programming in a punctuation-heavy language, designing your program in pseudocode would help you focus on the important ideas instead of on details like quotation marks and semicolons. But pseudocode isn't as necessary with a language like Snap<em>!</em>, and pseudocode can make it easy for you to fall into wishful thinking about what the computer is capable of (such as writing "Pick tomorrow's winning lottery numbers" or "Here's the melody; write the harmony").

:::
:::

::: {#first .forYouToDo}

(@) <img src="/img/icons/work-with-a-partner.png" title="Work with a Partner" alt="Work with a Partner" class="inline"/> <img src="/img/icons/write-out-thoughts.png" title="Write Out Your Thoughts" alt="Write Out Your Thoughts" class="inline"/> Describe what this algorithm will make the sprite do:<br /> <img src="/img/1-introduction/repeat-4(move-100-turn-right-90).png" title="repeat (4) (move (100), turn clockwise (90))" alt="repeat (4) (move (100), turn clockwise (90))" class="ms-4"/></li>

(@) Log in to <a href="http://snap.berkeley.edu/run" title="Snap! Build Your Own Blocks" target="_blank">Snap<em>!</em></a> and build that script to test your hypothesis.<br />
    a. Click it, and watch what the sprite does.
    b. Click <img src="/img/blocks/pen-down-full-size.png" title="pen down" alt="pen down"/>, and then click your script to run it again.

::: endnote
You can click `pen down` (or any block) in the palette on the left or in the scripting area to run it. If you click a block inside a script, the whole script runs.
:::

(@) <img src="/img/icons/talk-with-your-partner-mini.png" title="Talk with Your Partner" alt="Talk with Your Partner" class="inline"/> Analyze <em>why</em> that script does what it does.

(@)  <img src="/img/icons/talk-with-another-pair-mini.png" title="Talk with Another Pair" alt="Talk with Another Pair" class="inline"/>Compare your work with another pair. If your script behaves differently from theirs, check both.

::: takeNote
### **Using Visible Stepping**

Snap<em>!</em> has a tool called **Visible Stepping** that allows you to control how quickly Snap<em>!</em> steps through the blocks of your code.

- Click the Visible Stepping button (<img src="/img/2-complexity/visible-stepping.png" title="Visible Stepping button with two footprints" alt="Visible Stepping button with two footprints" class="inline py-0"/>), and adjust the slider to control the stepping speed. When you run your code, the sprite will slowly execute each step of the code and highlight it in [cyan]{style="color: black; background-color:cyan"}.

::: endnote
<a href="#hint-slider" data-bs-toggle="collapse" title="Click for a video of adjusting the Visible Stepping slider.">Click for a video of adjusting the Visible Stepping slider.</a>

::: {#hint-slider .collapse}
<img src="/img/1-introduction/visible-stepping.gif" title="Animation that shows how to use Visible stepping in Snap!" alt="Animation that shows how to use Visible stepping in Snap!" class="inline"/>
:::
:::

- You can slow the stepping to do only one step at a time and wait until you tell Snap<em>!</em> to go on to the next one. Move the slider all the way to the left, and then you can press the Run/Pause button (<img src="/img/sys/play-pause-button.png" title="pause button with play/pause icon" alt="pause button with play/pause icon" class="inline"/>) to see what happens at each step of your code.

::: endnote
<a href="#hint-slider-left" data-bs-toggle="collapse" title="Click for a video of single-stepping through code.">Click for a video of single-stepping through code.</a>

::: {#hint-slider-left .collapse}
<img src="/img/1-introduction/single-stepping.gif" title="Animation that shows how to use single-step Visible stepping in Snap!" alt="Animation that shows how to use single-step Visible stepping in Snap!" class="inline"/>
:::
:::

Visible stepping can be useful as you read someone else's code because you can watch it at human speed instead of computer speed. It's also useful in debugging (fixing problems with) your own code when it's doing something wrong.
:::

(@) Experiment:<br />

<ol type="a" class="ms-4">

::: sidenote
You can put your sprite back in the center of the screen with <img src="/img/blocks/go-to-x-y-0-0.png" title="go to x: (0) y: (0)" alt="go to x: (0) y: (0)" class="inline"/> and you can reset the direction it's pointing with <img src="/img/blocks/point-in-direction-90.png" title="point in direction (90)" alt="point in direction (90)" class="inline"/>.
:::

<li>Change 100 to 50 in the `move` block <em>of your script</em> by clicking on the 100 and typing 50. Then click the script again to run it with the new input value.</li>

<li>Click the <img src="/img/blocks/clear-full-size.png" title="clear" alt="clear" class="inline"/> block in the green Pen palette.</li>

<li>Change the number in the `turn` block and run the script again... and again... and again.</li>

<li>`Clear` the stage again, and change the number in the <img src="/img/1-introduction/repeat-4.png" title="repeat (4){}" alt="repeat (4){}" class="inline"/> block.</li>

<li>Experiment with the input numbers in the `turn` and `repeat` blocks. Try to draw a triangle with equal sides.</li>

<li>Use <img src="/img/blocks/set-pen-size-to-blank.png" title="set pen size to ()" alt="set pen size to ()" class="inline"/> to set the pen size to something like 4 or 10 or 50. Then click your `repeat`, `move`, `turn` script again.</li>

::: endnote
To change the pen size you must <em>click</em> the `set pen size` block to run it after you've entered the number you want.
:::

<li>Use <img src="/img/blocks/set-pen-color-full-size.png" title="set pen color to &apos;magenta colored square&apos;" alt="set pen color to &apos;magenta colored square&apos;" class="inline"/> to experiment with the pen color.</li>

</ol>

</li>

</ol>
:::

::: ifTime

(@) Experiment: What leaves a trace?
    a. Move the sprite by dragging it to a new location. Does it leave a trace as you move it?
    b. Move the sprite by clicking on <img src="/img/1-introduction/move-50.png" title="move (50) steps" alt="move (50) steps" class="inline" height="36"/>. Does it leave a trace as it moves?
    c. Does clicking <img src="/img/blocks/go-to-x-y-0-0.png" title="go to x:(0) y:(0)" alt="go to x:(0) y:(0)" class="inline" height="36"/> leave a trace?

<img src="/img/1-introduction/sphere.png" alt="sphere" class="float-end" height="100"/>

(@) Make sure your other work has been saved, then <a href="/prog/1-introduction/U1L3-Sphere.xml" class="run"><img src="/img/icons/load-save.png" title=" Click here to load this file. Then save it to your Snap! account." alt="Click here to load this file. Then save it to your Snap! account." class="inline"/></a><br /> Experiment with the scripts and look inside them to figure out how they work. Could you change the sizes or colors to make it more interesting?

</ol>
:::

::: takeItTeaser
<img src="/img/1-introduction/Malevich/malevich01.png" title="Snap! art inspired by Malevich art" alt="Snap! art inspired by Malevich art" class="pe-3"/> <img src="/img/1-introduction/Malevich/malevich02.png" title="Snap! art inspired by Malevich art" alt="Snap! art inspired by Malevich art" class="pe-3"/> <img src="/img/1-introduction/Malevich/malevich03.png" title="Snap! art inspired by Malevich art" alt="Snap! art inspired by Malevich art" class="pe-3"/> <img src="/img/1-introduction/Malevich/malevich04.png" title="Snap! art inspired by Malevich art" alt="Snap! art inspired by Malevich art" class="pe-3"/>
:::

::: takeItTeased
<ol type="A">

<li>**Solid rectangles.** Make and run this script:<br /> <img src="/img/1-introduction/flat.png" title="point in direction (45); set (flat line ends) to (True); set pen size to (20); pen down; move (150) steps" alt="point in direction (45); set (flat line ends) to (True); set pen size to (20); pen down; move (150) steps" class="ms-4"/><br /> The light blue `set` block is in the Sensing palette, where it looks like <img src="/img/1-introduction/vid-cap.png" title="set (video capture) to ( )" alt="set (video capture) to ( )"/>. Just click once in the hexagonal slot to get True (the green check box). If you're not sure what difference the "flat line ends" makes, try clicking the hexagonal slot again to run the script with that option False. And of course you can change all the numbers, or have your program pick random numbers.</li>

<li>**Color families.** Click the file menu icon and select "Libraries..." Then, find the "Colors and Crayons" library and click "Import."<br /> <img src="/img/1-introduction/libs.png" title="Snap! file menu, highlighting &quot;Libraries...&quot;" alt="Snap! file menu, highlighting &quot;Libraries...&quot;" class="ms-4"/> <img src="/img/1-introduction/color-lib.png" title="Import library dialog box with &quot;Colors and Crayons&quot; library highlighted" alt="Import library dialog box with &quot;Colors and Crayons&quot; library highlighted" class="ms-4" height="350px"/><br /> In the Pen menu you'll find the `set pen to crayon` block. Computers can display billions of colors, but unless you have to match the paint on your wall very precisely, finding your way through all those colors may be more trouble than it's worth. The crayon library, just like a box of crayons, gives you a small set of vibrant colors, arranged in families. So if you want a lot of browns in your picture, you could pick a random number between 30 and 39.<br /> <img src="/img/1-introduction/brown.png" title="Set pen to crayon block with menu of color families, selecting &quot;browns&quot; and showing submenu of ten brownish named colors, highlighting &quot;34 chestnut #954535&quot;" alt="Set pen to crayon block with menu of color families, selecting &quot;browns&quot; and showing submenu of ten brownish named colors, highlighting &quot;34 chestnut #954535&quot;" class="ms-4"/></li>

<img src="/img/1-introduction/1024px-Suprematist_Composition_-_Kazimir_Malevich.jpg" title="painting-by-Malevich" alt="painting-by-Malevich" class="float-end" height="180"/>

<li>

At the right is a painting by Kazimir Malevich. Its elements are rectangles, either horizontal or at a 45-degree angle, plus or minus a few degrees. You can position rectangles randomly. Your picture doesn't have to look like his---you're the artist!

::: dialogue
<div>

Alphie: If we just put rectangles in randomly, the tiny square dots will often be covered by larger ones. Maybe we should do big ones first and smaller ones later.

</div>

<div>

Gamal: I know ours don't have to look like the original, but I really like that huge black horizontal rectangle. It gives the painting a structure, with a top part and a bottom part, even though it doesn't go all the way across. I want to make sure to have one like that.

</div>

<div>

Betsy: I bet we can use the idea of drawing really thick lines <em>without</em> using `flat line ends` and get interesting results:

</div>

<img src="/img/1-introduction/curl.png" title="curved horn shape made of overlapping circles in different colors" alt="curved horn shape made of overlapping circles in different colors" class="ms-4"/>
:::

</li>

<img src="/img/1-introduction/Theo_van_Doesburg_Composition_VII_(the_three_graces).jpg" title="art by van Doesburg" alt="art by van Doesburg" class="float-end" height="130"/>

<li>At the right is a painting by Theo van Doesburg. It has some things in common with the Malevich picture, mainly the use of rectangles as the design elements. But there are no 45-degree rectangles; instead, the constraint is that rectangles may not overlap, so if you want to place a random rectangle in the picture, each end may have to be shortened to avoid collisions. You can use <img src="/img/1-introduction/blackp.png" title="((brightness) at (myself)) = 0" alt="((brightness) at (myself)) = 0"/> to find out if the point behind the sprite's rotation center is black.</li>

</ol>
:::
